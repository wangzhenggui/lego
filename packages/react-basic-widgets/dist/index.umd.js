(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global['@apaas-lego/react-basic-widgets'] = factory(global.React));
}(this, (function (React) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _extends$1() {
    _extends$1 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends$1.apply(this, arguments);
  }

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, basedir, module) {
  	return module = {
  		path: basedir,
  		exports: {},
  		require: function (path, base) {
  			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
  		}
  	}, fn(module, module.exports), module.exports;
  }

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
  }

  var _typeof_1 = createCommonjsModule(function (module) {
  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      module.exports = _typeof = function _typeof(obj) {
        return typeof obj;
      };

      module.exports["default"] = module.exports, module.exports.__esModule = true;
    } else {
      module.exports = _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };

      module.exports["default"] = module.exports, module.exports.__esModule = true;
    }

    return _typeof(obj);
  }

  module.exports = _typeof;
  module.exports["default"] = module.exports, module.exports.__esModule = true;
  });

  var _typeof = /*@__PURE__*/getDefaultExportFromCjs(_typeof_1);

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _typeof$1(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof$1 = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof$1 = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof$1(obj);
  }

  var classnames = createCommonjsModule(function (module) {
  /*!
    Copyright (c) 2018 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  */
  /* global define */

  (function () {

  	var hasOwn = {}.hasOwnProperty;

  	function classNames() {
  		var classes = [];

  		for (var i = 0; i < arguments.length; i++) {
  			var arg = arguments[i];
  			if (!arg) continue;

  			var argType = typeof arg;

  			if (argType === 'string' || argType === 'number') {
  				classes.push(arg);
  			} else if (Array.isArray(arg)) {
  				if (arg.length) {
  					var inner = classNames.apply(null, arg);
  					if (inner) {
  						classes.push(inner);
  					}
  				}
  			} else if (argType === 'object') {
  				if (arg.toString === Object.prototype.toString) {
  					for (var key in arg) {
  						if (hasOwn.call(arg, key) && arg[key]) {
  							classes.push(key);
  						}
  					}
  				} else {
  					classes.push(arg.toString());
  				}
  			}
  		}

  		return classes.join(' ');
  	}

  	if ( module.exports) {
  		classNames.default = classNames;
  		module.exports = classNames;
  	} else {
  		window.classNames = classNames;
  	}
  }());
  });

  function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2$1(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$1(Object(source), true).forEach(function (key) {
          _defineProperty$1(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$1(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function omit(obj, fields) {
    var clone = _objectSpread2$1({}, obj);

    if (Array.isArray(fields)) {
      fields.forEach(function (key) {
        delete clone[key];
      });
    }

    return clone;
  }

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (err) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (getOwnPropertySymbols) {
  			symbols = getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };

  var scheduler_production_min = createCommonjsModule(function (module, exports) {
  var f,g,h,k;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}
  if("undefined"===typeof window||"function"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null;}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0));};g=function(a,b){u=setTimeout(a,b);};h=function(){clearTimeout(u);};exports.unstable_shouldYield=function(){return !1};k=exports.unstable_forceFrameRate=function(){};}else {var x=window.setTimeout,y=window.clearTimeout;if("undefined"!==typeof console){var z=
  window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function"!==typeof z&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=
  E};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<a?Math.floor(1E3/a):5;};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null);}catch(b){throw G.postMessage(null),b;}}else A=!1;};f=function(a){B=a;A||(A=!0,G.postMessage(null));};g=function(a,b){C=
  x(function(){a(exports.unstable_now());},b);};h=function(){y(C);C=-1;};}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}
  function K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;
  function T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M);}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else {var b=J(M);null!==b&&g(U,b.startTime-a);}}
  function V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if("function"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?O.callback=e:O===J(L)&&K(L);T(b);}else K(L);O=J(L);}if(null!==O)var m=!0;else {var n=J(M);null!==n&&g(U,n.startTime-b);m=!1;}return m}finally{O=null,P=c,Q=!1;}}var W=k;exports.unstable_IdlePriority=5;
  exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V));};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};
  exports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P;}var c=P;P=b;try{return a()}finally{P=c;}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=P;P=a;try{return b()}finally{P=c;}};
  exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};
  exports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c;}}};
  });

  var scheduler_development = createCommonjsModule(function (module, exports) {

  {
    (function() {

  var enableSchedulerDebugging = false;
  var enableProfiling = false;

  var requestHostCallback;
  var requestHostTimeout;
  var cancelHostTimeout;
  var requestPaint;
  var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

  if (hasPerformanceNow) {
    var localPerformance = performance;

    exports.unstable_now = function () {
      return localPerformance.now();
    };
  } else {
    var localDate = Date;
    var initialTime = localDate.now();

    exports.unstable_now = function () {
      return localDate.now() - initialTime;
    };
  }

  if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
  // implementation using setTimeout.
  typeof window === 'undefined' || // Check if MessageChannel is supported, too.
  typeof MessageChannel !== 'function') {
    // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
    // fallback to a naive implementation.
    var _callback = null;
    var _timeoutID = null;

    var _flushCallback = function () {
      if (_callback !== null) {
        try {
          var currentTime = exports.unstable_now();
          var hasRemainingTime = true;

          _callback(hasRemainingTime, currentTime);

          _callback = null;
        } catch (e) {
          setTimeout(_flushCallback, 0);
          throw e;
        }
      }
    };

    requestHostCallback = function (cb) {
      if (_callback !== null) {
        // Protect against re-entrancy.
        setTimeout(requestHostCallback, 0, cb);
      } else {
        _callback = cb;
        setTimeout(_flushCallback, 0);
      }
    };

    requestHostTimeout = function (cb, ms) {
      _timeoutID = setTimeout(cb, ms);
    };

    cancelHostTimeout = function () {
      clearTimeout(_timeoutID);
    };

    exports.unstable_shouldYield = function () {
      return false;
    };

    requestPaint = exports.unstable_forceFrameRate = function () {};
  } else {
    // Capture local references to native APIs, in case a polyfill overrides them.
    var _setTimeout = window.setTimeout;
    var _clearTimeout = window.clearTimeout;

    if (typeof console !== 'undefined') {
      // TODO: Scheduler no longer requires these methods to be polyfilled. But
      // maybe we want to continue warning if they don't exist, to preserve the
      // option to rely on it in the future?
      var requestAnimationFrame = window.requestAnimationFrame;
      var cancelAnimationFrame = window.cancelAnimationFrame;

      if (typeof requestAnimationFrame !== 'function') {
        // Using console['error'] to evade Babel and ESLint
        console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
      }

      if (typeof cancelAnimationFrame !== 'function') {
        // Using console['error'] to evade Babel and ESLint
        console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
      }
    }

    var isMessageLoopRunning = false;
    var scheduledHostCallback = null;
    var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
    // thread, like user events. By default, it yields multiple times per frame.
    // It does not attempt to align with frame boundaries, since most tasks don't
    // need to be frame aligned; for those that do, use requestAnimationFrame.

    var yieldInterval = 5;
    var deadline = 0; // TODO: Make this configurable

    {
      // `isInputPending` is not available. Since we have no way of knowing if
      // there's pending input, always yield at the end of the frame.
      exports.unstable_shouldYield = function () {
        return exports.unstable_now() >= deadline;
      }; // Since we yield every frame regardless, `requestPaint` has no effect.


      requestPaint = function () {};
    }

    exports.unstable_forceFrameRate = function (fps) {
      if (fps < 0 || fps > 125) {
        // Using console['error'] to evade Babel and ESLint
        console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
        return;
      }

      if (fps > 0) {
        yieldInterval = Math.floor(1000 / fps);
      } else {
        // reset the framerate
        yieldInterval = 5;
      }
    };

    var performWorkUntilDeadline = function () {
      if (scheduledHostCallback !== null) {
        var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
        // cycle. This means there's always time remaining at the beginning of
        // the message event.

        deadline = currentTime + yieldInterval;
        var hasTimeRemaining = true;

        try {
          var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

          if (!hasMoreWork) {
            isMessageLoopRunning = false;
            scheduledHostCallback = null;
          } else {
            // If there's more work, schedule the next message event at the end
            // of the preceding one.
            port.postMessage(null);
          }
        } catch (error) {
          // If a scheduler task throws, exit the current browser task so the
          // error can be observed.
          port.postMessage(null);
          throw error;
        }
      } else {
        isMessageLoopRunning = false;
      } // Yielding to the browser will give it a chance to paint, so we can
    };

    var channel = new MessageChannel();
    var port = channel.port2;
    channel.port1.onmessage = performWorkUntilDeadline;

    requestHostCallback = function (callback) {
      scheduledHostCallback = callback;

      if (!isMessageLoopRunning) {
        isMessageLoopRunning = true;
        port.postMessage(null);
      }
    };

    requestHostTimeout = function (callback, ms) {
      taskTimeoutID = _setTimeout(function () {
        callback(exports.unstable_now());
      }, ms);
    };

    cancelHostTimeout = function () {
      _clearTimeout(taskTimeoutID);

      taskTimeoutID = -1;
    };
  }

  function push(heap, node) {
    var index = heap.length;
    heap.push(node);
    siftUp(heap, node, index);
  }
  function peek(heap) {
    var first = heap[0];
    return first === undefined ? null : first;
  }
  function pop(heap) {
    var first = heap[0];

    if (first !== undefined) {
      var last = heap.pop();

      if (last !== first) {
        heap[0] = last;
        siftDown(heap, last, 0);
      }

      return first;
    } else {
      return null;
    }
  }

  function siftUp(heap, node, i) {
    var index = i;

    while (true) {
      var parentIndex = index - 1 >>> 1;
      var parent = heap[parentIndex];

      if (parent !== undefined && compare(parent, node) > 0) {
        // The parent is larger. Swap positions.
        heap[parentIndex] = node;
        heap[index] = parent;
        index = parentIndex;
      } else {
        // The parent is smaller. Exit.
        return;
      }
    }
  }

  function siftDown(heap, node, i) {
    var index = i;
    var length = heap.length;

    while (index < length) {
      var leftIndex = (index + 1) * 2 - 1;
      var left = heap[leftIndex];
      var rightIndex = leftIndex + 1;
      var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

      if (left !== undefined && compare(left, node) < 0) {
        if (right !== undefined && compare(right, left) < 0) {
          heap[index] = right;
          heap[rightIndex] = node;
          index = rightIndex;
        } else {
          heap[index] = left;
          heap[leftIndex] = node;
          index = leftIndex;
        }
      } else if (right !== undefined && compare(right, node) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        // Neither child is smaller. Exit.
        return;
      }
    }
  }

  function compare(a, b) {
    // Compare sort index first, then task id.
    var diff = a.sortIndex - b.sortIndex;
    return diff !== 0 ? diff : a.id - b.id;
  }

  // TODO: Use symbols?
  var ImmediatePriority = 1;
  var UserBlockingPriority = 2;
  var NormalPriority = 3;
  var LowPriority = 4;
  var IdlePriority = 5;

  function markTaskErrored(task, ms) {
  }

  /* eslint-disable no-var */
  // Math.pow(2, 30) - 1
  // 0b111111111111111111111111111111

  var maxSigned31BitInt = 1073741823; // Times out immediately

  var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

  var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
  var NORMAL_PRIORITY_TIMEOUT = 5000;
  var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

  var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

  var taskQueue = [];
  var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

  var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
  var currentTask = null;
  var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

  var isPerformingWork = false;
  var isHostCallbackScheduled = false;
  var isHostTimeoutScheduled = false;

  function advanceTimers(currentTime) {
    // Check for tasks that are no longer delayed and add them to the queue.
    var timer = peek(timerQueue);

    while (timer !== null) {
      if (timer.callback === null) {
        // Timer was cancelled.
        pop(timerQueue);
      } else if (timer.startTime <= currentTime) {
        // Timer fired. Transfer to the task queue.
        pop(timerQueue);
        timer.sortIndex = timer.expirationTime;
        push(taskQueue, timer);
      } else {
        // Remaining timers are pending.
        return;
      }

      timer = peek(timerQueue);
    }
  }

  function handleTimeout(currentTime) {
    isHostTimeoutScheduled = false;
    advanceTimers(currentTime);

    if (!isHostCallbackScheduled) {
      if (peek(taskQueue) !== null) {
        isHostCallbackScheduled = true;
        requestHostCallback(flushWork);
      } else {
        var firstTimer = peek(timerQueue);

        if (firstTimer !== null) {
          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
        }
      }
    }
  }

  function flushWork(hasTimeRemaining, initialTime) {


    isHostCallbackScheduled = false;

    if (isHostTimeoutScheduled) {
      // We scheduled a timeout but it's no longer needed. Cancel it.
      isHostTimeoutScheduled = false;
      cancelHostTimeout();
    }

    isPerformingWork = true;
    var previousPriorityLevel = currentPriorityLevel;

    try {
      var currentTime; if (enableProfiling) ; else {
        // No catch in prod code path.
        return workLoop(hasTimeRemaining, initialTime);
      }
    } finally {
      currentTask = null;
      currentPriorityLevel = previousPriorityLevel;
      isPerformingWork = false;
    }
  }

  function workLoop(hasTimeRemaining, initialTime) {
    var currentTime = initialTime;
    advanceTimers(currentTime);
    currentTask = peek(taskQueue);

    while (currentTask !== null && !(enableSchedulerDebugging )) {
      if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
        // This currentTask hasn't expired, and we've reached the deadline.
        break;
      }

      var callback = currentTask.callback;

      if (typeof callback === 'function') {
        currentTask.callback = null;
        currentPriorityLevel = currentTask.priorityLevel;
        var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

        var continuationCallback = callback(didUserCallbackTimeout);
        currentTime = exports.unstable_now();

        if (typeof continuationCallback === 'function') {
          currentTask.callback = continuationCallback;
        } else {

          if (currentTask === peek(taskQueue)) {
            pop(taskQueue);
          }
        }

        advanceTimers(currentTime);
      } else {
        pop(taskQueue);
      }

      currentTask = peek(taskQueue);
    } // Return whether there's additional work


    if (currentTask !== null) {
      return true;
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }

      return false;
    }
  }

  function unstable_runWithPriority(priorityLevel, eventHandler) {
    switch (priorityLevel) {
      case ImmediatePriority:
      case UserBlockingPriority:
      case NormalPriority:
      case LowPriority:
      case IdlePriority:
        break;

      default:
        priorityLevel = NormalPriority;
    }

    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = priorityLevel;

    try {
      return eventHandler();
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  }

  function unstable_next(eventHandler) {
    var priorityLevel;

    switch (currentPriorityLevel) {
      case ImmediatePriority:
      case UserBlockingPriority:
      case NormalPriority:
        // Shift down to normal priority
        priorityLevel = NormalPriority;
        break;

      default:
        // Anything lower than normal priority should remain at the current level.
        priorityLevel = currentPriorityLevel;
        break;
    }

    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = priorityLevel;

    try {
      return eventHandler();
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  }

  function unstable_wrapCallback(callback) {
    var parentPriorityLevel = currentPriorityLevel;
    return function () {
      // This is a fork of runWithPriority, inlined for performance.
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = parentPriorityLevel;

      try {
        return callback.apply(this, arguments);
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
  }

  function unstable_scheduleCallback(priorityLevel, callback, options) {
    var currentTime = exports.unstable_now();
    var startTime;

    if (typeof options === 'object' && options !== null) {
      var delay = options.delay;

      if (typeof delay === 'number' && delay > 0) {
        startTime = currentTime + delay;
      } else {
        startTime = currentTime;
      }
    } else {
      startTime = currentTime;
    }

    var timeout;

    switch (priorityLevel) {
      case ImmediatePriority:
        timeout = IMMEDIATE_PRIORITY_TIMEOUT;
        break;

      case UserBlockingPriority:
        timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
        break;

      case IdlePriority:
        timeout = IDLE_PRIORITY_TIMEOUT;
        break;

      case LowPriority:
        timeout = LOW_PRIORITY_TIMEOUT;
        break;

      case NormalPriority:
      default:
        timeout = NORMAL_PRIORITY_TIMEOUT;
        break;
    }

    var expirationTime = startTime + timeout;
    var newTask = {
      id: taskIdCounter++,
      callback: callback,
      priorityLevel: priorityLevel,
      startTime: startTime,
      expirationTime: expirationTime,
      sortIndex: -1
    };

    if (startTime > currentTime) {
      // This is a delayed task.
      newTask.sortIndex = startTime;
      push(timerQueue, newTask);

      if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
        // All tasks are delayed, and this is the task with the earliest delay.
        if (isHostTimeoutScheduled) {
          // Cancel an existing timeout.
          cancelHostTimeout();
        } else {
          isHostTimeoutScheduled = true;
        } // Schedule a timeout.


        requestHostTimeout(handleTimeout, startTime - currentTime);
      }
    } else {
      newTask.sortIndex = expirationTime;
      push(taskQueue, newTask);
      // wait until the next time we yield.


      if (!isHostCallbackScheduled && !isPerformingWork) {
        isHostCallbackScheduled = true;
        requestHostCallback(flushWork);
      }
    }

    return newTask;
  }

  function unstable_pauseExecution() {
  }

  function unstable_continueExecution() {

    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  function unstable_getFirstCallbackNode() {
    return peek(taskQueue);
  }

  function unstable_cancelCallback(task) {
    // remove from the queue because you can't remove arbitrary nodes from an
    // array based heap, only the first one.)


    task.callback = null;
  }

  function unstable_getCurrentPriorityLevel() {
    return currentPriorityLevel;
  }

  var unstable_requestPaint = requestPaint;
  var unstable_Profiling =  null;

  exports.unstable_IdlePriority = IdlePriority;
  exports.unstable_ImmediatePriority = ImmediatePriority;
  exports.unstable_LowPriority = LowPriority;
  exports.unstable_NormalPriority = NormalPriority;
  exports.unstable_Profiling = unstable_Profiling;
  exports.unstable_UserBlockingPriority = UserBlockingPriority;
  exports.unstable_cancelCallback = unstable_cancelCallback;
  exports.unstable_continueExecution = unstable_continueExecution;
  exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
  exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
  exports.unstable_next = unstable_next;
  exports.unstable_pauseExecution = unstable_pauseExecution;
  exports.unstable_requestPaint = unstable_requestPaint;
  exports.unstable_runWithPriority = unstable_runWithPriority;
  exports.unstable_scheduleCallback = unstable_scheduleCallback;
  exports.unstable_wrapCallback = unstable_wrapCallback;
    })();
  }
  });

  var scheduler = createCommonjsModule(function (module) {

  {
    module.exports = scheduler_development;
  }
  });

  function y(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!React__default['default'])throw Error(y(227));var ba=new Set;function da(a,b){ea(a,b);ea(a+"Capture",b);}
  function ea(a,b){for(a=0;a<b.length;a++)ba.add(b[a]);}
  var fa=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement);function B(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var D={};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){D[a]=new B(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];D[b]=new B(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){D[a]=new B(a,2,!1,a.toLowerCase(),null,!1,!1);});
  ["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D[a]=new B(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D[a]=new B(a,3,!1,a.toLowerCase(),null,!1,!1);});
  ["checked","multiple","muted","selected"].forEach(function(a){D[a]=new B(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){D[a]=new B(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){D[a]=new B(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){D[a]=new B(a,5,!1,a.toLowerCase(),null,!1,!1);});var oa=/[\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(oa,
  pa);D[b]=new B(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!1,!1);});
  D.xlinkHref=new B("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!0,!0);});
  var ra=React__default['default'].__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa=60103,ta=60106,ua=60107,wa=60108,xa=60114,ya=60109,za=60110,Aa=60112,Ba=60113,Ca=60120,Da=60115,Ea=60116,Fa=60121,Ga=60128,Ha=60129,Ia=60130,Ja=60131;
  if("function"===typeof Symbol&&Symbol.for){var E=Symbol.for;sa=E("react.element");ta=E("react.portal");ua=E("react.fragment");wa=E("react.strict_mode");xa=E("react.profiler");ya=E("react.provider");za=E("react.context");Aa=E("react.forward_ref");Ba=E("react.suspense");Ca=E("react.suspense_list");Da=E("react.memo");Ea=E("react.lazy");Fa=E("react.block");E("react.scope");Ga=E("react.opaque.id");Ha=E("react.debug_trace_mode");Ia=E("react.offscreen");Ja=E("react.legacy_hidden");}
  var kb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
  var nb,ob=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if(a.namespaceURI!==kb.svg||"innerHTML"in a)a.innerHTML=b;else {nb=nb||document.createElement("div");nb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
  var qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
  floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=["Webkit","ms","Moz","O"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a];});});var ub=objectAssign({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
  var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,"passive",{get:function(){Pb=!0;}});window.addEventListener("test",Qb,Qb);window.removeEventListener("test",Qb,Qb);}catch(a){Pb=!1;}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ac(a){if(Zb(a)!==a)throw Error(y(188));}
  function bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling;}throw Error(y(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
  c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(y(189));}}if(c.alternate!==d)throw Error(y(190));}if(3!==c.tag)throw Error(y(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else {if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
  function Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ec={animationend:Dc("Animation","AnimationEnd"),animationiteration:Dc("Animation","AnimationIteration"),animationstart:Dc("Animation","AnimationStart"),transitionend:Dc("Transition","TransitionEnd")},Fc={},Gc={};
  fa&&(Gc=document.createElement("div").style,"AnimationEvent"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),"TransitionEvent"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}
  var Ic=Hc("animationend"),Jc=Hc("animationiteration"),Kc=Hc("animationstart"),Lc=Hc("transitionend"),Mc=new Map,Nc=new Map,Oc=["abort","abort",Ic,"animationEnd",Jc,"animationIteration",Kc,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart",
  "lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lc,"transitionEnd","waiting","waiting"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e="on"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da(e,[d]);}}var Qc=scheduler.unstable_now;Qc();var dd=scheduler.unstable_UserBlockingPriority,ed=scheduler.unstable_runWithPriority;function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
  function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}objectAssign(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
  (a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
  var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=objectAssign({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=objectAssign({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
  a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=objectAssign({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=objectAssign({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=objectAssign({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=objectAssign({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=objectAssign({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
  Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
  119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
  var Qd=objectAssign({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
  a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=objectAssign({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=objectAssign({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=objectAssign({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=objectAssign({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
  deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd);if(fa){if(fa){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput;}}}Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),
  0);Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Pc(Oc,2);for(var Ve="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),We=0;We<Ve.length;We++)Nc.set(Ve[We],0);ea("onMouseEnter",["mouseout","mouseover"]);
  ea("onMouseLeave",["mouseout","mouseover"]);ea("onPointerEnter",["pointerout","pointerover"]);ea("onPointerLeave",["pointerout","pointerover"]);da("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));da("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));da("onBeforeInput",["compositionend","keypress","textInput","paste"]);da("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));
  da("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));da("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var bf="_reactListening"+Math.random().toString(36).slice(2);function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var vf=Math.random().toString(36).slice(2),wf="__reactFiber$"+vf,ff="__reactContainer$"+vf;
  function wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a);}return b}a=c;c=a.parentNode;}return null}var Lf=null,Mf=null,Nf=scheduler.unstable_runWithPriority,Of=scheduler.unstable_scheduleCallback,Pf=scheduler.unstable_cancelCallback,Qf=scheduler.unstable_shouldYield,Rf=scheduler.unstable_requestPaint,Sf=scheduler.unstable_now,Tf=scheduler.unstable_getCurrentPriorityLevel,Uf=scheduler.unstable_ImmediatePriority,Vf=scheduler.unstable_UserBlockingPriority,Wf=scheduler.unstable_NormalPriority,Xf=scheduler.unstable_LowPriority,Yf=scheduler.unstable_IdlePriority,dg=Sf();
  var kg=ra.ReactCurrentBatchConfig;var Fg=(new React__default['default'].Component).refs;
  var vh=ra.ReactCurrentDispatcher,wh=ra.ReactCurrentBatchConfig;var ei=ra.ReactCurrentOwner;var oj=ra.ReactCurrentDispatcher,pj=ra.ReactCurrentOwner;function pk(){return null}
  var wk={findFiberByHostInstance:wc,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"};
  var xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||
  pk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk;}catch(a){}}

  var schedulerTracing_development = createCommonjsModule(function (module, exports) {

  {
    (function() {

  var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

  var interactionIDCounter = 0;
  var threadIDCounter = 0; // Set of currently traced interactions.
  // Interactions "stack"–
  // Meaning that newly traced interactions are appended to the previously active set.
  // When an interaction goes out of scope, the previous set (if any) is restored.

  exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

  exports.__subscriberRef = null;

  {
    exports.__interactionsRef = {
      current: new Set()
    };
    exports.__subscriberRef = {
      current: null
    };
  }
  function unstable_clear(callback) {

    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = new Set();

    try {
      return callback();
    } finally {
      exports.__interactionsRef.current = prevInteractions;
    }
  }
  function unstable_getCurrent() {
    {
      return exports.__interactionsRef.current;
    }
  }
  function unstable_getThreadID() {
    return ++threadIDCounter;
  }
  function unstable_trace(name, timestamp, callback) {
    var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

    var interaction = {
      __count: 1,
      id: interactionIDCounter++,
      name: name,
      timestamp: timestamp
    };
    var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
    // To do that, clone the current interactions.
    // The previous set will be restored upon completion.

    var interactions = new Set(prevInteractions);
    interactions.add(interaction);
    exports.__interactionsRef.current = interactions;
    var subscriber = exports.__subscriberRef.current;
    var returnValue;

    try {
      if (subscriber !== null) {
        subscriber.onInteractionTraced(interaction);
      }
    } finally {
      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(interactions, threadID);
        }
      } finally {
        try {
          returnValue = callback();
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          try {
            if (subscriber !== null) {
              subscriber.onWorkStopped(interactions, threadID);
            }
          } finally {
            interaction.__count--; // If no async work was scheduled for this interaction,
            // Notify subscribers that it's completed.

            if (subscriber !== null && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          }
        }
      }
    }

    return returnValue;
  }
  function unstable_wrap(callback) {
    var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

    var wrappedInteractions = exports.__interactionsRef.current;
    var subscriber = exports.__subscriberRef.current;

    if (subscriber !== null) {
      subscriber.onWorkScheduled(wrappedInteractions, threadID);
    } // Update the pending async work count for the current interactions.
    // Update after calling subscribers in case of error.


    wrappedInteractions.forEach(function (interaction) {
      interaction.__count++;
    });
    var hasRun = false;

    function wrapped() {
      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = wrappedInteractions;
      subscriber = exports.__subscriberRef.current;

      try {
        var returnValue;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(wrappedInteractions, threadID);
          }
        } finally {
          try {
            returnValue = callback.apply(undefined, arguments);
          } finally {
            exports.__interactionsRef.current = prevInteractions;

            if (subscriber !== null) {
              subscriber.onWorkStopped(wrappedInteractions, threadID);
            }
          }
        }

        return returnValue;
      } finally {
        if (!hasRun) {
          // We only expect a wrapped function to be executed once,
          // But in the event that it's executed more than once–
          // Only decrement the outstanding interaction counts once.
          hasRun = true; // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.

          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber !== null && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      }
    }

    wrapped.cancel = function cancel() {
      subscriber = exports.__subscriberRef.current;

      try {
        if (subscriber !== null) {
          subscriber.onWorkCanceled(wrappedInteractions, threadID);
        }
      } finally {
        // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.
        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    };

    return wrapped;
  }

  var subscribers = null;

  {
    subscribers = new Set();
  }

  function unstable_subscribe(subscriber) {
    {
      subscribers.add(subscriber);

      if (subscribers.size === 1) {
        exports.__subscriberRef.current = {
          onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
          onInteractionTraced: onInteractionTraced,
          onWorkCanceled: onWorkCanceled,
          onWorkScheduled: onWorkScheduled,
          onWorkStarted: onWorkStarted,
          onWorkStopped: onWorkStopped
        };
      }
    }
  }
  function unstable_unsubscribe(subscriber) {
    {
      subscribers.delete(subscriber);

      if (subscribers.size === 0) {
        exports.__subscriberRef.current = null;
      }
    }
  }

  function onInteractionTraced(interaction) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onInteractionTraced(interaction);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });

    if (didCatchError) {
      throw caughtError;
    }
  }

  function onInteractionScheduledWorkCompleted(interaction) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onInteractionScheduledWorkCompleted(interaction);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });

    if (didCatchError) {
      throw caughtError;
    }
  }

  function onWorkScheduled(interactions, threadID) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onWorkScheduled(interactions, threadID);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });

    if (didCatchError) {
      throw caughtError;
    }
  }

  function onWorkStarted(interactions, threadID) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });

    if (didCatchError) {
      throw caughtError;
    }
  }

  function onWorkStopped(interactions, threadID) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onWorkStopped(interactions, threadID);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });

    if (didCatchError) {
      throw caughtError;
    }
  }

  function onWorkCanceled(interactions, threadID) {
    var didCatchError = false;
    var caughtError = null;
    subscribers.forEach(function (subscriber) {
      try {
        subscriber.onWorkCanceled(interactions, threadID);
      } catch (error) {
        if (!didCatchError) {
          didCatchError = true;
          caughtError = error;
        }
      }
    });

    if (didCatchError) {
      throw caughtError;
    }
  }

  exports.unstable_clear = unstable_clear;
  exports.unstable_getCurrent = unstable_getCurrent;
  exports.unstable_getThreadID = unstable_getThreadID;
  exports.unstable_subscribe = unstable_subscribe;
  exports.unstable_trace = unstable_trace;
  exports.unstable_unsubscribe = unstable_unsubscribe;
  exports.unstable_wrap = unstable_wrap;
    })();
  }
  });

  var tracing = createCommonjsModule(function (module) {

  {
    module.exports = schedulerTracing_development;
  }
  });

  var reactDom_development = createCommonjsModule(function (module, exports) {

  {
    (function() {

  var React = React__default['default'];
  var _assign = objectAssign;
  var Scheduler = scheduler;
  var tracing$1 = tracing;

  var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

  // by calls to these methods by a Babel plugin.
  //
  // In PROD (or in packages without access to React internals),
  // they are left as they are instead.

  function warn(format) {
    {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      printWarning('warn', format, args);
    }
  }
  function error(format) {
    {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      printWarning('error', format, args);
    }
  }

  function printWarning(level, format, args) {
    // When changing this logic, you might want to also
    // update consoleWithStackDev.www.js as well.
    {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }

      var argsWithFormat = args.map(function (item) {
        return '' + item;
      }); // Careful: RN currently depends on this prefix

      argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
      // breaks IE9: https://github.com/facebook/react/issues/13610
      // eslint-disable-next-line react-internal/no-production-logging

      Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
  }

  if (!React) {
    {
      throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
    }
  }

  var FunctionComponent = 0;
  var ClassComponent = 1;
  var IndeterminateComponent = 2; // Before we know whether it is function or class

  var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

  var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

  var HostComponent = 5;
  var HostText = 6;
  var Fragment = 7;
  var Mode = 8;
  var ContextConsumer = 9;
  var ContextProvider = 10;
  var ForwardRef = 11;
  var Profiler = 12;
  var SuspenseComponent = 13;
  var MemoComponent = 14;
  var SimpleMemoComponent = 15;
  var LazyComponent = 16;
  var IncompleteClassComponent = 17;
  var DehydratedFragment = 18;
  var SuspenseListComponent = 19;
  var FundamentalComponent = 20;
  var ScopeComponent = 21;
  var Block = 22;
  var OffscreenComponent = 23;
  var LegacyHiddenComponent = 24;

  // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

  var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

  var enableFundamentalAPI = false; // Experimental Scope support.
  var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
  var warnAboutStringRefs = false;

  var allNativeEvents = new Set();
  /**
   * Mapping from registration name to event name
   */


  var registrationNameDependencies = {};
  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in true.
   * @type {Object}
   */

  var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

  function registerTwoPhaseEvent(registrationName, dependencies) {
    registerDirectEvent(registrationName, dependencies);
    registerDirectEvent(registrationName + 'Capture', dependencies);
  }
  function registerDirectEvent(registrationName, dependencies) {
    {
      if (registrationNameDependencies[registrationName]) {
        error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
      }
    }

    registrationNameDependencies[registrationName] = dependencies;

    {
      var lowerCasedName = registrationName.toLowerCase();
      possibleRegistrationNames[lowerCasedName] = registrationName;

      if (registrationName === 'onDoubleClick') {
        possibleRegistrationNames.ondblclick = registrationName;
      }
    }

    for (var i = 0; i < dependencies.length; i++) {
      allNativeEvents.add(dependencies[i]);
    }
  }

  var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

  // A reserved attribute.
  // It is handled by React separately and shouldn't be written to the DOM.
  var RESERVED = 0; // A simple string attribute.
  // Attributes that aren't in the filter are presumed to have this type.

  var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
  // "enumerated" attributes with "true" and "false" as possible values.
  // When true, it should be set to a "true" string.
  // When false, it should be set to a "false" string.

  var BOOLEANISH_STRING = 2; // A real boolean attribute.
  // When true, it should be present (set either to an empty string or its name).
  // When false, it should be omitted.

  var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
  // When true, it should be present (set either to an empty string or its name).
  // When false, it should be omitted.
  // For any other value, should be present with that value.

  var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
  // When falsy, it should be removed.

  var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
  // When falsy, it should be removed.

  var POSITIVE_NUMERIC = 6;

  /* eslint-disable max-len */
  var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
  /* eslint-enable max-len */

  var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
  var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
  var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var illegalAttributeNameCache = {};
  var validatedAttributeNameCache = {};
  function isAttributeNameSafe(attributeName) {
    if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
      return true;
    }

    if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
      return false;
    }

    if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
      validatedAttributeNameCache[attributeName] = true;
      return true;
    }

    illegalAttributeNameCache[attributeName] = true;

    {
      error('Invalid attribute name: `%s`', attributeName);
    }

    return false;
  }
  function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
    if (propertyInfo !== null) {
      return propertyInfo.type === RESERVED;
    }

    if (isCustomComponentTag) {
      return false;
    }

    if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
      return true;
    }

    return false;
  }
  function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
    if (propertyInfo !== null && propertyInfo.type === RESERVED) {
      return false;
    }

    switch (typeof value) {
      case 'function': // $FlowIssue symbol is perfectly valid here

      case 'symbol':
        // eslint-disable-line
        return true;

      case 'boolean':
        {
          if (isCustomComponentTag) {
            return false;
          }

          if (propertyInfo !== null) {
            return !propertyInfo.acceptsBooleans;
          } else {
            var prefix = name.toLowerCase().slice(0, 5);
            return prefix !== 'data-' && prefix !== 'aria-';
          }
        }

      default:
        return false;
    }
  }
  function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
    if (value === null || typeof value === 'undefined') {
      return true;
    }

    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
      return true;
    }

    if (isCustomComponentTag) {
      return false;
    }

    if (propertyInfo !== null) {

      switch (propertyInfo.type) {
        case BOOLEAN:
          return !value;

        case OVERLOADED_BOOLEAN:
          return value === false;

        case NUMERIC:
          return isNaN(value);

        case POSITIVE_NUMERIC:
          return isNaN(value) || value < 1;
      }
    }

    return false;
  }
  function getPropertyInfo(name) {
    return properties.hasOwnProperty(name) ? properties[name] : null;
  }

  function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
    this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
    this.attributeName = attributeName;
    this.attributeNamespace = attributeNamespace;
    this.mustUseProperty = mustUseProperty;
    this.propertyName = name;
    this.type = type;
    this.sanitizeURL = sanitizeURL;
    this.removeEmptyString = removeEmptyString;
  } // When adding attributes to this list, be sure to also add them to
  // the `possibleStandardNames` module to ensure casing and incorrect
  // name warnings.


  var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

  var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
  // elements (not just inputs). Now that ReactDOMInput assigns to the
  // defaultValue property -- do we need this?
  'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
  reservedProps.forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
    name, // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // A few React string attributes have a different name.
  // This is a mapping from React prop names to the attribute names.

  [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
    var name = _ref[0],
        attributeName = _ref[1];
    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
    attributeName, // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // These are "enumerated" HTML attributes that accept "true" and "false".
  // In React, we let users pass `true` and `false` even though technically
  // these aren't boolean attributes (they are coerced to strings).

  ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
    name.toLowerCase(), // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // These are "enumerated" SVG attributes that accept "true" and "false".
  // In React, we let users pass `true` and `false` even though technically
  // these aren't boolean attributes (they are coerced to strings).
  // Since these are SVG attributes, their attribute names are case-sensitive.

  ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
    name, // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // These are HTML boolean attributes.

  ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
  // on the client side because the browsers are inconsistent. Instead we call focus().
  'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
  'itemScope'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
    name.toLowerCase(), // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // These are the few React props that we set as DOM properties
  // rather than attributes. These are all booleans.

  ['checked', // Note: `option.selected` is not updated if `select.multiple` is
  // disabled with `removeAttribute`. We have special logic for handling this.
  'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
  // you'll need to set attributeName to name.toLowerCase()
  // instead in the assignment below.
  ].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
    name, // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // These are HTML attributes that are "overloaded booleans": they behave like
  // booleans, but can also accept a string value.

  ['capture', 'download' // NOTE: if you add a camelCased prop to this list,
  // you'll need to set attributeName to name.toLowerCase()
  // instead in the assignment below.
  ].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
    name, // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // These are HTML attributes that must be positive numbers.

  ['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
  // you'll need to set attributeName to name.toLowerCase()
  // instead in the assignment below.
  ].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
    name, // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // These are HTML attributes that must be numbers.

  ['rowSpan', 'start'].forEach(function (name) {
    properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
    name.toLowerCase(), // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  });
  var CAMELIZE = /[\-\:]([a-z])/g;

  var capitalize = function (token) {
    return token[1].toUpperCase();
  }; // This is a list of all SVG attributes that need special casing, namespacing,
  // or boolean value assignment. Regular attributes that just accept strings
  // and have the same names are omitted, just like in the HTML attribute filter.
  // Some of these attributes can be hard to find. This list was created by
  // scraping the MDN documentation.


  ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
  // you'll need to set attributeName to name.toLowerCase()
  // instead in the assignment below.
  ].forEach(function (attributeName) {
    var name = attributeName.replace(CAMELIZE, capitalize);
    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
    attributeName, null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // String SVG attributes with the xlink namespace.

  ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
  // you'll need to set attributeName to name.toLowerCase()
  // instead in the assignment below.
  ].forEach(function (attributeName) {
    var name = attributeName.replace(CAMELIZE, capitalize);
    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
    attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
    false);
  }); // String SVG attributes with the xml namespace.

  ['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
  // you'll need to set attributeName to name.toLowerCase()
  // instead in the assignment below.
  ].forEach(function (attributeName) {
    var name = attributeName.replace(CAMELIZE, capitalize);
    properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
    attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
    false);
  }); // These attribute exists both in HTML and SVG.
  // The attribute name is case-sensitive in SVG so we can't just use
  // the React name like we do for attributes that exist only in HTML.

  ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
    attributeName.toLowerCase(), // attributeName
    null, // attributeNamespace
    false, // sanitizeURL
    false);
  }); // These attributes accept URLs. These must not allow javascript: URLS.
  // These will also need to accept Trusted Types object in the future.

  var xlinkHref = 'xlinkHref';
  properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
  'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
  false);
  ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
    properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
    attributeName.toLowerCase(), // attributeName
    null, // attributeNamespace
    true, // sanitizeURL
    true);
  });

  // and any newline or tab are filtered out as if they're not part of the URL.
  // https://url.spec.whatwg.org/#url-parsing
  // Tab or newline are defined as \r\n\t:
  // https://infra.spec.whatwg.org/#ascii-tab-or-newline
  // A C0 control is a code point in the range \u0000 NULL to \u001F
  // INFORMATION SEPARATOR ONE, inclusive:
  // https://infra.spec.whatwg.org/#c0-control-or-space

  /* eslint-disable max-len */

  var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
  var didWarn = false;

  function sanitizeURL(url) {
    {
      if (!didWarn && isJavaScriptProtocol.test(url)) {
        didWarn = true;

        error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
      }
    }
  }

  /**
   * Get the value for a property on a node. Only used in DEV for SSR validation.
   * The "expected" argument is used as a hint of what the expected value is.
   * Some properties have multiple equivalent values.
   */
  function getValueForProperty(node, name, expected, propertyInfo) {
    {
      if (propertyInfo.mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        return node[propertyName];
      } else {
        if ( propertyInfo.sanitizeURL) {
          // If we haven't fully disabled javascript: URLs, and if
          // the hydration is successful of a javascript: URL, we
          // still want to warn on the client.
          sanitizeURL('' + expected);
        }

        var attributeName = propertyInfo.attributeName;
        var stringValue = null;

        if (propertyInfo.type === OVERLOADED_BOOLEAN) {
          if (node.hasAttribute(attributeName)) {
            var value = node.getAttribute(attributeName);

            if (value === '') {
              return true;
            }

            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return value;
            }

            if (value === '' + expected) {
              return expected;
            }

            return value;
          }
        } else if (node.hasAttribute(attributeName)) {
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            // We had an attribute but shouldn't have had one, so read it
            // for the error message.
            return node.getAttribute(attributeName);
          }

          if (propertyInfo.type === BOOLEAN) {
            // If this was a boolean, it doesn't matter what the value is
            // the fact that we have it is the same as the expected.
            return expected;
          } // Even if this property uses a namespace we use getAttribute
          // because we assume its namespaced name is the same as our config.
          // To use getAttributeNS we need the local name which we don't have
          // in our config atm.


          stringValue = node.getAttribute(attributeName);
        }

        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          return stringValue === null ? expected : stringValue;
        } else if (stringValue === '' + expected) {
          return expected;
        } else {
          return stringValue;
        }
      }
    }
  }
  /**
   * Get the value for a attribute on a node. Only used in DEV for SSR validation.
   * The third argument is used as a hint of what the expected value is. Some
   * attributes have multiple equivalent values.
   */

  function getValueForAttribute(node, name, expected) {
    {
      if (!isAttributeNameSafe(name)) {
        return;
      } // If the object is an opaque reference ID, it's expected that
      // the next prop is different than the server value, so just return
      // expected


      if (isOpaqueHydratingObject(expected)) {
        return expected;
      }

      if (!node.hasAttribute(name)) {
        return expected === undefined ? undefined : null;
      }

      var value = node.getAttribute(name);

      if (value === '' + expected) {
        return expected;
      }

      return value;
    }
  }
  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */

  function setValueForProperty(node, name, value, isCustomComponentTag) {
    var propertyInfo = getPropertyInfo(name);

    if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
      return;
    }

    if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
      value = null;
    } // If the prop isn't in the special list, treat it as a simple attribute.


    if (isCustomComponentTag || propertyInfo === null) {
      if (isAttributeNameSafe(name)) {
        var _attributeName = name;

        if (value === null) {
          node.removeAttribute(_attributeName);
        } else {
          node.setAttribute(_attributeName,  '' + value);
        }
      }

      return;
    }

    var mustUseProperty = propertyInfo.mustUseProperty;

    if (mustUseProperty) {
      var propertyName = propertyInfo.propertyName;

      if (value === null) {
        var type = propertyInfo.type;
        node[propertyName] = type === BOOLEAN ? false : '';
      } else {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyName] = value;
      }

      return;
    } // The rest are treated as attributes with special cases.


    var attributeName = propertyInfo.attributeName,
        attributeNamespace = propertyInfo.attributeNamespace;

    if (value === null) {
      node.removeAttribute(attributeName);
    } else {
      var _type = propertyInfo.type;
      var attributeValue;

      if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
        // If attribute type is boolean, we know for sure it won't be an execution sink
        // and we won't require Trusted Type here.
        attributeValue = '';
      } else {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        {
          attributeValue = '' + value;
        }

        if (propertyInfo.sanitizeURL) {
          sanitizeURL(attributeValue.toString());
        }
      }

      if (attributeNamespace) {
        node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
      } else {
        node.setAttribute(attributeName, attributeValue);
      }
    }
  }

  // ATTENTION
  // When adding new symbols to this file,
  // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var REACT_ELEMENT_TYPE = 0xeac7;
  var REACT_PORTAL_TYPE = 0xeaca;
  var REACT_FRAGMENT_TYPE = 0xeacb;
  var REACT_STRICT_MODE_TYPE = 0xeacc;
  var REACT_PROFILER_TYPE = 0xead2;
  var REACT_PROVIDER_TYPE = 0xeacd;
  var REACT_CONTEXT_TYPE = 0xeace;
  var REACT_FORWARD_REF_TYPE = 0xead0;
  var REACT_SUSPENSE_TYPE = 0xead1;
  var REACT_SUSPENSE_LIST_TYPE = 0xead8;
  var REACT_MEMO_TYPE = 0xead3;
  var REACT_LAZY_TYPE = 0xead4;
  var REACT_BLOCK_TYPE = 0xead9;
  var REACT_SERVER_BLOCK_TYPE = 0xeada;
  var REACT_FUNDAMENTAL_TYPE = 0xead5;
  var REACT_SCOPE_TYPE = 0xead7;
  var REACT_OPAQUE_ID_TYPE = 0xeae0;
  var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
  var REACT_OFFSCREEN_TYPE = 0xeae2;
  var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

  if (typeof Symbol === 'function' && Symbol.for) {
    var symbolFor = Symbol.for;
    REACT_ELEMENT_TYPE = symbolFor('react.element');
    REACT_PORTAL_TYPE = symbolFor('react.portal');
    REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
    REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
    REACT_PROFILER_TYPE = symbolFor('react.profiler');
    REACT_PROVIDER_TYPE = symbolFor('react.provider');
    REACT_CONTEXT_TYPE = symbolFor('react.context');
    REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
    REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
    REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
    REACT_MEMO_TYPE = symbolFor('react.memo');
    REACT_LAZY_TYPE = symbolFor('react.lazy');
    REACT_BLOCK_TYPE = symbolFor('react.block');
    REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
    REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
    REACT_SCOPE_TYPE = symbolFor('react.scope');
    REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
    REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
    REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
    REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
  }

  var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    if (maybeIterable === null || typeof maybeIterable !== 'object') {
      return null;
    }

    var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

    if (typeof maybeIterator === 'function') {
      return maybeIterator;
    }

    return null;
  }

  // Helpers to patch console.logs to avoid logging during side-effect free
  // replaying on render function. This currently only patches the object
  // lazily which won't cover if the log function was extracted eagerly.
  // We could also eagerly patch the method.
  var disabledDepth = 0;
  var prevLog;
  var prevInfo;
  var prevWarn;
  var prevError;
  var prevGroup;
  var prevGroupCollapsed;
  var prevGroupEnd;

  function disabledLog() {}

  disabledLog.__reactDisabledLog = true;
  function disableLogs() {
    {
      if (disabledDepth === 0) {
        /* eslint-disable react-internal/no-production-logging */
        prevLog = console.log;
        prevInfo = console.info;
        prevWarn = console.warn;
        prevError = console.error;
        prevGroup = console.group;
        prevGroupCollapsed = console.groupCollapsed;
        prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

        var props = {
          configurable: true,
          enumerable: true,
          value: disabledLog,
          writable: true
        }; // $FlowFixMe Flow thinks console is immutable.

        Object.defineProperties(console, {
          info: props,
          log: props,
          warn: props,
          error: props,
          group: props,
          groupCollapsed: props,
          groupEnd: props
        });
        /* eslint-enable react-internal/no-production-logging */
      }

      disabledDepth++;
    }
  }
  function reenableLogs() {
    {
      disabledDepth--;

      if (disabledDepth === 0) {
        /* eslint-disable react-internal/no-production-logging */
        var props = {
          configurable: true,
          enumerable: true,
          writable: true
        }; // $FlowFixMe Flow thinks console is immutable.

        Object.defineProperties(console, {
          log: _assign({}, props, {
            value: prevLog
          }),
          info: _assign({}, props, {
            value: prevInfo
          }),
          warn: _assign({}, props, {
            value: prevWarn
          }),
          error: _assign({}, props, {
            value: prevError
          }),
          group: _assign({}, props, {
            value: prevGroup
          }),
          groupCollapsed: _assign({}, props, {
            value: prevGroupCollapsed
          }),
          groupEnd: _assign({}, props, {
            value: prevGroupEnd
          })
        });
        /* eslint-enable react-internal/no-production-logging */
      }

      if (disabledDepth < 0) {
        error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
      }
    }
  }

  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  var prefix;
  function describeBuiltInComponentFrame(name, source, ownerFn) {
    {
      if (prefix === undefined) {
        // Extract the VM specific prefix used by each line.
        try {
          throw Error();
        } catch (x) {
          var match = x.stack.trim().match(/\n( *(at )?)/);
          prefix = match && match[1] || '';
        }
      } // We use the prefix to ensure our stacks line up with native stack frames.


      return '\n' + prefix + name;
    }
  }
  var reentry = false;
  var componentFrameCache;

  {
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
  }

  function describeNativeComponentFrame(fn, construct) {
    // If something asked for a stack inside a fake render, it should get ignored.
    if (!fn || reentry) {
      return '';
    }

    {
      var frame = componentFrameCache.get(fn);

      if (frame !== undefined) {
        return frame;
      }
    }

    var control;
    reentry = true;
    var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

    Error.prepareStackTrace = undefined;
    var previousDispatcher;

    {
      previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
      // for warnings.

      ReactCurrentDispatcher.current = null;
      disableLogs();
    }

    try {
      // This should throw.
      if (construct) {
        // Something should be setting the props in the constructor.
        var Fake = function () {
          throw Error();
        }; // $FlowFixMe


        Object.defineProperty(Fake.prototype, 'props', {
          set: function () {
            // We use a throwing setter instead of frozen or non-writable props
            // because that won't throw in a non-strict mode function.
            throw Error();
          }
        });

        if (typeof Reflect === 'object' && Reflect.construct) {
          // We construct a different control for this case to include any extra
          // frames added by the construct call.
          try {
            Reflect.construct(Fake, []);
          } catch (x) {
            control = x;
          }

          Reflect.construct(fn, [], Fake);
        } else {
          try {
            Fake.call();
          } catch (x) {
            control = x;
          }

          fn.call(Fake.prototype);
        }
      } else {
        try {
          throw Error();
        } catch (x) {
          control = x;
        }

        fn();
      }
    } catch (sample) {
      // This is inlined manually because closure doesn't do it for us.
      if (sample && control && typeof sample.stack === 'string') {
        // This extracts the first frame from the sample that isn't also in the control.
        // Skipping one frame that we assume is the frame that calls the two.
        var sampleLines = sample.stack.split('\n');
        var controlLines = control.stack.split('\n');
        var s = sampleLines.length - 1;
        var c = controlLines.length - 1;

        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
          // We expect at least one stack frame to be shared.
          // Typically this will be the root most one. However, stack frames may be
          // cut off due to maximum stack limits. In this case, one maybe cut off
          // earlier than the other. We assume that the sample is longer or the same
          // and there for cut off earlier. So we should find the root most frame in
          // the sample somewhere in the control.
          c--;
        }

        for (; s >= 1 && c >= 0; s--, c--) {
          // Next we find the first one that isn't the same which should be the
          // frame that called our sample function and the control.
          if (sampleLines[s] !== controlLines[c]) {
            // In V8, the first line is describing the message but other VMs don't.
            // If we're about to return the first line, and the control is also on the same
            // line, that's a pretty good indicator that our sample threw at same line as
            // the control. I.e. before we entered the sample frame. So we ignore this result.
            // This can happen if you passed a class to function component, or non-function.
            if (s !== 1 || c !== 1) {
              do {
                s--;
                c--; // We may still have similar intermediate frames from the construct call.
                // The next one that isn't the same should be our match though.

                if (c < 0 || sampleLines[s] !== controlLines[c]) {
                  // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                  var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                  {
                    if (typeof fn === 'function') {
                      componentFrameCache.set(fn, _frame);
                    }
                  } // Return the line we found.


                  return _frame;
                }
              } while (s >= 1 && c >= 0);
            }

            break;
          }
        }
      }
    } finally {
      reentry = false;

      {
        ReactCurrentDispatcher.current = previousDispatcher;
        reenableLogs();
      }

      Error.prepareStackTrace = previousPrepareStackTrace;
    } // Fallback to just using the name if we couldn't make it throw.


    var name = fn ? fn.displayName || fn.name : '';
    var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

    {
      if (typeof fn === 'function') {
        componentFrameCache.set(fn, syntheticFrame);
      }
    }

    return syntheticFrame;
  }

  function describeClassComponentFrame(ctor, source, ownerFn) {
    {
      return describeNativeComponentFrame(ctor, true);
    }
  }
  function describeFunctionComponentFrame(fn, source, ownerFn) {
    {
      return describeNativeComponentFrame(fn, false);
    }
  }

  function shouldConstruct(Component) {
    var prototype = Component.prototype;
    return !!(prototype && prototype.isReactComponent);
  }

  function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

    if (type == null) {
      return '';
    }

    if (typeof type === 'function') {
      {
        return describeNativeComponentFrame(type, shouldConstruct(type));
      }
    }

    if (typeof type === 'string') {
      return describeBuiltInComponentFrame(type);
    }

    switch (type) {
      case REACT_SUSPENSE_TYPE:
        return describeBuiltInComponentFrame('Suspense');

      case REACT_SUSPENSE_LIST_TYPE:
        return describeBuiltInComponentFrame('SuspenseList');
    }

    if (typeof type === 'object') {
      switch (type.$$typeof) {
        case REACT_FORWARD_REF_TYPE:
          return describeFunctionComponentFrame(type.render);

        case REACT_MEMO_TYPE:
          // Memo may contain any component type so we recursively resolve it.
          return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

        case REACT_BLOCK_TYPE:
          return describeFunctionComponentFrame(type._render);

        case REACT_LAZY_TYPE:
          {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;

            try {
              // Lazy may contain any component type so we recursively resolve it.
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {}
          }
      }
    }

    return '';
  }

  function describeFiber(fiber) {
    var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;
    var source =  fiber._debugSource ;

    switch (fiber.tag) {
      case HostComponent:
        return describeBuiltInComponentFrame(fiber.type);

      case LazyComponent:
        return describeBuiltInComponentFrame('Lazy');

      case SuspenseComponent:
        return describeBuiltInComponentFrame('Suspense');

      case SuspenseListComponent:
        return describeBuiltInComponentFrame('SuspenseList');

      case FunctionComponent:
      case IndeterminateComponent:
      case SimpleMemoComponent:
        return describeFunctionComponentFrame(fiber.type);

      case ForwardRef:
        return describeFunctionComponentFrame(fiber.type.render);

      case Block:
        return describeFunctionComponentFrame(fiber.type._render);

      case ClassComponent:
        return describeClassComponentFrame(fiber.type);

      default:
        return '';
    }
  }

  function getStackByFiberInDevAndProd(workInProgress) {
    try {
      var info = '';
      var node = workInProgress;

      do {
        info += describeFiber(node);
        node = node.return;
      } while (node);

      return info;
    } catch (x) {
      return '\nError generating stack: ' + x.message + '\n' + x.stack;
    }
  }

  function getWrappedName(outerType, innerType, wrapperName) {
    var functionName = innerType.displayName || innerType.name || '';
    return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
  }

  function getContextName(type) {
    return type.displayName || 'Context';
  }

  function getComponentName(type) {
    if (type == null) {
      // Host root, text node or just invalid type.
      return null;
    }

    {
      if (typeof type.tag === 'number') {
        error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
      }
    }

    if (typeof type === 'function') {
      return type.displayName || type.name || null;
    }

    if (typeof type === 'string') {
      return type;
    }

    switch (type) {
      case REACT_FRAGMENT_TYPE:
        return 'Fragment';

      case REACT_PORTAL_TYPE:
        return 'Portal';

      case REACT_PROFILER_TYPE:
        return 'Profiler';

      case REACT_STRICT_MODE_TYPE:
        return 'StrictMode';

      case REACT_SUSPENSE_TYPE:
        return 'Suspense';

      case REACT_SUSPENSE_LIST_TYPE:
        return 'SuspenseList';
    }

    if (typeof type === 'object') {
      switch (type.$$typeof) {
        case REACT_CONTEXT_TYPE:
          var context = type;
          return getContextName(context) + '.Consumer';

        case REACT_PROVIDER_TYPE:
          var provider = type;
          return getContextName(provider._context) + '.Provider';

        case REACT_FORWARD_REF_TYPE:
          return getWrappedName(type, type.render, 'ForwardRef');

        case REACT_MEMO_TYPE:
          return getComponentName(type.type);

        case REACT_BLOCK_TYPE:
          return getComponentName(type._render);

        case REACT_LAZY_TYPE:
          {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;

            try {
              return getComponentName(init(payload));
            } catch (x) {
              return null;
            }
          }
      }
    }

    return null;
  }

  var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
  var current = null;
  var isRendering = false;
  function getCurrentFiberOwnerNameInDevOrNull() {
    {
      if (current === null) {
        return null;
      }

      var owner = current._debugOwner;

      if (owner !== null && typeof owner !== 'undefined') {
        return getComponentName(owner.type);
      }
    }

    return null;
  }

  function getCurrentFiberStackInDev() {
    {
      if (current === null) {
        return '';
      } // Safe because if current fiber exists, we are reconciling,
      // and it is guaranteed to be the work-in-progress version.


      return getStackByFiberInDevAndProd(current);
    }
  }

  function resetCurrentFiber() {
    {
      ReactDebugCurrentFrame.getCurrentStack = null;
      current = null;
      isRendering = false;
    }
  }
  function setCurrentFiber(fiber) {
    {
      ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
      current = fiber;
      isRendering = false;
    }
  }
  function setIsRendering(rendering) {
    {
      isRendering = rendering;
    }
  }
  function getIsRendering() {
    {
      return isRendering;
    }
  }

  // Flow does not allow string concatenation of most non-string types. To work
  // around this limitation, we use an opaque type that can only be obtained by
  // passing the value through getToStringValue first.
  function toString(value) {
    return '' + value;
  }
  function getToStringValue(value) {
    switch (typeof value) {
      case 'boolean':
      case 'number':
      case 'object':
      case 'string':
      case 'undefined':
        return value;

      default:
        // function, symbol are assigned as empty strings
        return '';
    }
  }

  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };
  function checkControlledValueProps(tagName, props) {
    {
      if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
        error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
      }

      if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
        error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
      }
    }
  }

  function isCheckable(elem) {
    var type = elem.type;
    var nodeName = elem.nodeName;
    return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
  }

  function getTracker(node) {
    return node._valueTracker;
  }

  function detachTracker(node) {
    node._valueTracker = null;
  }

  function getValueFromNode(node) {
    var value = '';

    if (!node) {
      return value;
    }

    if (isCheckable(node)) {
      value = node.checked ? 'true' : 'false';
    } else {
      value = node.value;
    }

    return value;
  }

  function trackValueOnNode(node) {
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
    var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)

    if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }

    var get = descriptor.get,
        set = descriptor.set;
    Object.defineProperty(node, valueField, {
      configurable: true,
      get: function () {
        return get.call(this);
      },
      set: function (value) {
        currentValue = '' + value;
        set.call(this, value);
      }
    }); // We could've passed this the first time
    // but it triggers a bug in IE11 and Edge 14/15.
    // Calling defineProperty() again should be equivalent.
    // https://github.com/facebook/react/issues/11768

    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable
    });
    var tracker = {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = '' + value;
      },
      stopTracking: function () {
        detachTracker(node);
        delete node[valueField];
      }
    };
    return tracker;
  }

  function track(node) {
    if (getTracker(node)) {
      return;
    } // TODO: Once it's just Fiber we can move this to node._wrapperState


    node._valueTracker = trackValueOnNode(node);
  }
  function updateValueIfChanged(node) {
    if (!node) {
      return false;
    }

    var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
    // that trying again will succeed

    if (!tracker) {
      return true;
    }

    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(node);

    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }

    return false;
  }

  function getActiveElement(doc) {
    doc = doc || (typeof document !== 'undefined' ? document : undefined);

    if (typeof doc === 'undefined') {
      return null;
    }

    try {
      return doc.activeElement || doc.body;
    } catch (e) {
      return doc.body;
    }
  }

  var didWarnValueDefaultValue = false;
  var didWarnCheckedDefaultChecked = false;
  var didWarnControlledToUncontrolled = false;
  var didWarnUncontrolledToControlled = false;

  function isControlled(props) {
    var usesChecked = props.type === 'checkbox' || props.type === 'radio';
    return usesChecked ? props.checked != null : props.value != null;
  }
  /**
   * Implements an <input> host component that allows setting these optional
   * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
   *
   * If `checked` or `value` are not supplied (or null/undefined), user actions
   * that affect the checked state or value will trigger updates to the element.
   *
   * If they are supplied (and not null/undefined), the rendered element will not
   * trigger updates to the element. Instead, the props must change in order for
   * the rendered element to be updated.
   *
   * The rendered element will be initialized as unchecked (or `defaultChecked`)
   * with an empty value (or `defaultValue`).
   *
   * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
   */


  function getHostProps(element, props) {
    var node = element;
    var checked = props.checked;

    var hostProps = _assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: undefined,
      checked: checked != null ? checked : node._wrapperState.initialChecked
    });

    return hostProps;
  }
  function initWrapperState(element, props) {
    {
      checkControlledValueProps('input', props);

      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

        didWarnCheckedDefaultChecked = true;
      }

      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

        didWarnValueDefaultValue = true;
      }
    }

    var node = element;
    var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
    node._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
      controlled: isControlled(props)
    };
  }
  function updateChecked(element, props) {
    var node = element;
    var checked = props.checked;

    if (checked != null) {
      setValueForProperty(node, 'checked', checked, false);
    }
  }
  function updateWrapper(element, props) {
    var node = element;

    {
      var controlled = isControlled(props);

      if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

        didWarnUncontrolledToControlled = true;
      }

      if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

        didWarnControlledToUncontrolled = true;
      }
    }

    updateChecked(element, props);
    var value = getToStringValue(props.value);
    var type = props.type;

    if (value != null) {
      if (type === 'number') {
        if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
        // eslint-disable-next-line
        node.value != value) {
          node.value = toString(value);
        }
      } else if (node.value !== toString(value)) {
        node.value = toString(value);
      }
    } else if (type === 'submit' || type === 'reset') {
      // Submit/reset inputs need the attribute removed completely to avoid
      // blank-text buttons.
      node.removeAttribute('value');
      return;
    }

    {
      // When syncing the value attribute, the value comes from a cascade of
      // properties:
      //  1. The value React property
      //  2. The defaultValue React property
      //  3. Otherwise there should be no change
      if (props.hasOwnProperty('value')) {
        setDefaultValue(node, props.type, value);
      } else if (props.hasOwnProperty('defaultValue')) {
        setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
      }
    }

    {
      // When syncing the checked attribute, it only changes when it needs
      // to be removed, such as transitioning from a checkbox into a text input
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  }
  function postMountWrapper(element, props, isHydrating) {
    var node = element; // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
      var type = props.type;
      var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
      // default value provided by the browser. See: #12872

      if (isButton && (props.value === undefined || props.value === null)) {
        return;
      }

      var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
      // from being lost during SSR hydration.

      if (!isHydrating) {
        {
          // When syncing the value attribute, the value property should use
          // the wrapperState._initialValue property. This uses:
          //
          //   1. The value React property when present
          //   2. The defaultValue React property when present
          //   3. An empty string
          if (initialValue !== node.value) {
            node.value = initialValue;
          }
        }
      }

      {
        // Otherwise, the value attribute is synchronized to the property,
        // so we assign defaultValue to the same thing as the value property
        // assignment step above.
        node.defaultValue = initialValue;
      }
    } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.


    var name = node.name;

    if (name !== '') {
      node.name = '';
    }

    {
      // When syncing the checked attribute, both the checked property and
      // attribute are assigned at the same time using defaultChecked. This uses:
      //
      //   1. The checked React property when present
      //   2. The defaultChecked React property when present
      //   3. Otherwise, false
      node.defaultChecked = !node.defaultChecked;
      node.defaultChecked = !!node._wrapperState.initialChecked;
    }

    if (name !== '') {
      node.name = name;
    }
  }
  function restoreControlledState(element, props) {
    var node = element;
    updateWrapper(node, props);
    updateNamedCousins(node, props);
  }

  function updateNamedCousins(rootNode, props) {
    var name = props.name;

    if (props.type === 'radio' && name != null) {
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      } // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form. It might not even be in the
      // document. Let's just use the local `querySelectorAll` to ensure we don't
      // miss anything.


      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0; i < group.length; i++) {
        var otherNode = group[i];

        if (otherNode === rootNode || otherNode.form !== rootNode.form) {
          continue;
        } // This will throw if radio buttons rendered by different copies of React
        // and the same name are rendered into the same form (same as #1939).
        // That's probably okay; we don't support it just as we don't support
        // mixing React radio buttons with non-React ones.


        var otherProps = getFiberCurrentPropsFromNode(otherNode);

        if (!otherProps) {
          {
            throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
          }
        } // We need update the tracked value on the named cousin since the value
        // was changed but the input saw no event or value set


        updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.

        updateWrapper(otherNode, otherProps);
      }
    }
  } // In Chrome, assigning defaultValue to certain input types triggers input validation.
  // For number inputs, the display value loses trailing decimal points. For email inputs,
  // Chrome raises "The specified value <x> is not a valid email address".
  //
  // Here we check to see if the defaultValue has actually changed, avoiding these problems
  // when the user is inputting text
  //
  // https://github.com/facebook/react/issues/7253


  function setDefaultValue(node, type, value) {
    if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
    type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
      if (value == null) {
        node.defaultValue = toString(node._wrapperState.initialValue);
      } else if (node.defaultValue !== toString(value)) {
        node.defaultValue = toString(value);
      }
    }
  }

  var didWarnSelectedSetOnOption = false;
  var didWarnInvalidChild = false;

  function flattenChildren(children) {
    var content = ''; // Flatten children. We'll warn if they are invalid
    // during validateProps() which runs for hydration too.
    // Note that this would throw on non-element objects.
    // Elements are stringified (which is normally irrelevant
    // but matters for <fbt>).

    React.Children.forEach(children, function (child) {
      if (child == null) {
        return;
      }

      content += child; // Note: we don't warn about invalid children here.
      // Instead, this is done separately below so that
      // it happens during the hydration code path too.
    });
    return content;
  }
  /**
   * Implements an <option> host component that warns when `selected` is set.
   */


  function validateProps(element, props) {
    {
      // This mirrors the code path above, but runs for hydration too.
      // Warn about invalid children here so that client and hydration are consistent.
      // TODO: this seems like it could cause a DEV-only throw for hydration
      // if children contains a non-element object. We should try to avoid that.
      if (typeof props.children === 'object' && props.children !== null) {
        React.Children.forEach(props.children, function (child) {
          if (child == null) {
            return;
          }

          if (typeof child === 'string' || typeof child === 'number') {
            return;
          }

          if (typeof child.type !== 'string') {
            return;
          }

          if (!didWarnInvalidChild) {
            didWarnInvalidChild = true;

            error('Only strings and numbers are supported as <option> children.');
          }
        });
      } // TODO: Remove support for `selected` in <option>.


      if (props.selected != null && !didWarnSelectedSetOnOption) {
        error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

        didWarnSelectedSetOnOption = true;
      }
    }
  }
  function postMountWrapper$1(element, props) {
    // value="" should make a value attribute (#6219)
    if (props.value != null) {
      element.setAttribute('value', toString(getToStringValue(props.value)));
    }
  }
  function getHostProps$1(element, props) {
    var hostProps = _assign({
      children: undefined
    }, props);

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }

  var didWarnValueDefaultValue$1;

  {
    didWarnValueDefaultValue$1 = false;
  }

  function getDeclarationErrorAddendum() {
    var ownerName = getCurrentFiberOwnerNameInDevOrNull();

    if (ownerName) {
      return '\n\nCheck the render method of `' + ownerName + '`.';
    }

    return '';
  }

  var valuePropNames = ['value', 'defaultValue'];
  /**
   * Validation function for `value` and `defaultValue`.
   */

  function checkSelectPropTypes(props) {
    {
      checkControlledValueProps('select', props);

      for (var i = 0; i < valuePropNames.length; i++) {
        var propName = valuePropNames[i];

        if (props[propName] == null) {
          continue;
        }

        var isArray = Array.isArray(props[propName]);

        if (props.multiple && !isArray) {
          error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
        } else if (!props.multiple && isArray) {
          error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
        }
      }
    }
  }

  function updateOptions(node, multiple, propValue, setDefaultSelected) {
    var options = node.options;

    if (multiple) {
      var selectedValues = propValue;
      var selectedValue = {};

      for (var i = 0; i < selectedValues.length; i++) {
        // Prefix to avoid chaos with special keys.
        selectedValue['$' + selectedValues[i]] = true;
      }

      for (var _i = 0; _i < options.length; _i++) {
        var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

        if (options[_i].selected !== selected) {
          options[_i].selected = selected;
        }

        if (selected && setDefaultSelected) {
          options[_i].defaultSelected = true;
        }
      }
    } else {
      // Do not set `select.value` as exact behavior isn't consistent across all
      // browsers for all cases.
      var _selectedValue = toString(getToStringValue(propValue));

      var defaultSelected = null;

      for (var _i2 = 0; _i2 < options.length; _i2++) {
        if (options[_i2].value === _selectedValue) {
          options[_i2].selected = true;

          if (setDefaultSelected) {
            options[_i2].defaultSelected = true;
          }

          return;
        }

        if (defaultSelected === null && !options[_i2].disabled) {
          defaultSelected = options[_i2];
        }
      }

      if (defaultSelected !== null) {
        defaultSelected.selected = true;
      }
    }
  }
  /**
   * Implements a <select> host component that allows optionally setting the
   * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
   * stringable. If `multiple` is true, the prop must be an array of stringables.
   *
   * If `value` is not supplied (or null/undefined), user actions that change the
   * selected option will trigger updates to the rendered options.
   *
   * If it is supplied (and not null/undefined), the rendered options will not
   * update in response to user actions. Instead, the `value` prop must change in
   * order for the rendered options to update.
   *
   * If `defaultValue` is provided, any options with the supplied values will be
   * selected.
   */


  function getHostProps$2(element, props) {
    return _assign({}, props, {
      value: undefined
    });
  }
  function initWrapperState$1(element, props) {
    var node = element;

    {
      checkSelectPropTypes(props);
    }

    node._wrapperState = {
      wasMultiple: !!props.multiple
    };

    {
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
        error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

        didWarnValueDefaultValue$1 = true;
      }
    }
  }
  function postMountWrapper$2(element, props) {
    var node = element;
    node.multiple = !!props.multiple;
    var value = props.value;

    if (value != null) {
      updateOptions(node, !!props.multiple, value, false);
    } else if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
  }
  function postUpdateWrapper(element, props) {
    var node = element;
    var wasMultiple = node._wrapperState.wasMultiple;
    node._wrapperState.wasMultiple = !!props.multiple;
    var value = props.value;

    if (value != null) {
      updateOptions(node, !!props.multiple, value, false);
    } else if (wasMultiple !== !!props.multiple) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
      }
    }
  }
  function restoreControlledState$1(element, props) {
    var node = element;
    var value = props.value;

    if (value != null) {
      updateOptions(node, !!props.multiple, value, false);
    }
  }

  var didWarnValDefaultVal = false;

  /**
   * Implements a <textarea> host component that allows setting `value`, and
   * `defaultValue`. This differs from the traditional DOM API because value is
   * usually set as PCDATA children.
   *
   * If `value` is not supplied (or null/undefined), user actions that affect the
   * value will trigger updates to the element.
   *
   * If `value` is supplied (and not null/undefined), the rendered element will
   * not trigger updates to the element. Instead, the `value` prop must change in
   * order for the rendered element to be updated.
   *
   * The rendered element will be initialized with an empty value, the prop
   * `defaultValue` if specified, or the children content (deprecated).
   */
  function getHostProps$3(element, props) {
    var node = element;

    if (!(props.dangerouslySetInnerHTML == null)) {
      {
        throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
      }
    } // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
    // solution. The value can be a boolean or object so that's why it's forced
    // to be a string.


    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: toString(node._wrapperState.initialValue)
    });

    return hostProps;
  }
  function initWrapperState$2(element, props) {
    var node = element;

    {
      checkControlledValueProps('textarea', props);

      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

        didWarnValDefaultVal = true;
      }
    }

    var initialValue = props.value; // Only bother fetching default value if we're going to use it

    if (initialValue == null) {
      var children = props.children,
          defaultValue = props.defaultValue;

      if (children != null) {
        {
          error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
        }

        {
          if (!(defaultValue == null)) {
            {
              throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
            }
          }

          if (Array.isArray(children)) {
            if (!(children.length <= 1)) {
              {
                throw Error( "<textarea> can only have at most one child." );
              }
            }

            children = children[0];
          }

          defaultValue = children;
        }
      }

      if (defaultValue == null) {
        defaultValue = '';
      }

      initialValue = defaultValue;
    }

    node._wrapperState = {
      initialValue: getToStringValue(initialValue)
    };
  }
  function updateWrapper$1(element, props) {
    var node = element;
    var value = getToStringValue(props.value);
    var defaultValue = getToStringValue(props.defaultValue);

    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

      if (newValue !== node.value) {
        node.value = newValue;
      }

      if (props.defaultValue == null && node.defaultValue !== newValue) {
        node.defaultValue = newValue;
      }
    }

    if (defaultValue != null) {
      node.defaultValue = toString(defaultValue);
    }
  }
  function postMountWrapper$3(element, props) {
    var node = element; // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.

    var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

    if (textContent === node._wrapperState.initialValue) {
      if (textContent !== '' && textContent !== null) {
        node.value = textContent;
      }
    }
  }
  function restoreControlledState$2(element, props) {
    // DOM component is still mounted; update
    updateWrapper$1(element, props);
  }

  var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
  var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
  var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  var Namespaces = {
    html: HTML_NAMESPACE,
    mathml: MATH_NAMESPACE,
    svg: SVG_NAMESPACE
  }; // Assumes there is no parent namespace.

  function getIntrinsicNamespace(type) {
    switch (type) {
      case 'svg':
        return SVG_NAMESPACE;

      case 'math':
        return MATH_NAMESPACE;

      default:
        return HTML_NAMESPACE;
    }
  }
  function getChildNamespace(parentNamespace, type) {
    if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
      // No (or default) parent namespace: potential entry point.
      return getIntrinsicNamespace(type);
    }

    if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
      // We're leaving SVG.
      return HTML_NAMESPACE;
    } // By default, pass namespace below.


    return parentNamespace;
  }

  /* globals MSApp */

  /**
   * Create a function which has 'unsafe' privileges (required by windows8 apps)
   */
  var createMicrosoftUnsafeLocalFunction = function (func) {
    if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
      return function (arg0, arg1, arg2, arg3) {
        MSApp.execUnsafeLocalFunction(function () {
          return func(arg0, arg1, arg2, arg3);
        });
      };
    } else {
      return func;
    }
  };

  var reusableSVGContainer;
  /**
   * Set the innerHTML property of a node
   *
   * @param {DOMElement} node
   * @param {string} html
   * @internal
   */

  var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
    if (node.namespaceURI === Namespaces.svg) {

      if (!('innerHTML' in node)) {
        // IE does not have innerHTML for SVG nodes, so instead we inject the
        // new markup in a temp node and then move the child nodes across into
        // the target node
        reusableSVGContainer = reusableSVGContainer || document.createElement('div');
        reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
        var svgNode = reusableSVGContainer.firstChild;

        while (node.firstChild) {
          node.removeChild(node.firstChild);
        }

        while (svgNode.firstChild) {
          node.appendChild(svgNode.firstChild);
        }

        return;
      }
    }

    node.innerHTML = html;
  });

  /**
   * HTML nodeType values that represent the type of the node
   */
  var ELEMENT_NODE = 1;
  var TEXT_NODE = 3;
  var COMMENT_NODE = 8;
  var DOCUMENT_NODE = 9;
  var DOCUMENT_FRAGMENT_NODE = 11;

  /**
   * Set the textContent property of a node. For text updates, it's faster
   * to set the `nodeValue` of the Text node directly instead of using
   * `.textContent` which will remove the existing node and create a new one.
   *
   * @param {DOMElement} node
   * @param {string} text
   * @internal
   */

  var setTextContent = function (node, text) {
    if (text) {
      var firstChild = node.firstChild;

      if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
        firstChild.nodeValue = text;
        return;
      }
    }

    node.textContent = text;
  };

  // List derived from Gecko source code:
  // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
  var shorthandToLonghand = {
    animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
    background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
    backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
    border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
    borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
    borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
    borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
    borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
    borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
    borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
    borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
    borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
    borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
    borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
    borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
    borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
    borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
    columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
    columns: ['columnCount', 'columnWidth'],
    flex: ['flexBasis', 'flexGrow', 'flexShrink'],
    flexFlow: ['flexDirection', 'flexWrap'],
    font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
    fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
    gap: ['columnGap', 'rowGap'],
    grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
    gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
    gridColumn: ['gridColumnEnd', 'gridColumnStart'],
    gridColumnGap: ['columnGap'],
    gridGap: ['columnGap', 'rowGap'],
    gridRow: ['gridRowEnd', 'gridRowStart'],
    gridRowGap: ['rowGap'],
    gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
    listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
    margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
    marker: ['markerEnd', 'markerMid', 'markerStart'],
    mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
    maskPosition: ['maskPositionX', 'maskPositionY'],
    outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
    overflow: ['overflowX', 'overflowY'],
    padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
    placeContent: ['alignContent', 'justifyContent'],
    placeItems: ['alignItems', 'justifyItems'],
    placeSelf: ['alignSelf', 'justifySelf'],
    textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
    textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
    transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
    wordWrap: ['overflowWrap']
  };

  /**
   * CSS properties which accept numbers but are not in units of "px".
   */
  var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridArea: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  /**
   * @param {string} prefix vendor-specific prefix, eg: Webkit
   * @param {string} key style name, eg: transitionDuration
   * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
   * WebkitTransitionDuration
   */

  function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
  }
  /**
   * Support style names that may come passed in prefixed by adding permutations
   * of vendor prefixes.
   */


  var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
  // infinite loop, because it iterates over the newly added props too.

  Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
  });

  /**
   * Convert a value into the proper css writable value. The style name `name`
   * should be logical (no hyphens), as specified
   * in `CSSProperty.isUnitlessNumber`.
   *
   * @param {string} name CSS property name such as `topMargin`.
   * @param {*} value CSS property value such as `10px`.
   * @return {string} Normalized style value with dimensions applied.
   */

  function dangerousStyleValue(name, value, isCustomProperty) {
    // Note that we've removed escapeTextForBrowser() calls here since the
    // whole string will be escaped when the attribute is injected into
    // the markup. If you provide unsafe user data here they can inject
    // arbitrary CSS which may be problematic (I couldn't repro this):
    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
    // This is not an XSS hole but instead a potential CSS injection issue
    // which has lead to a greater discussion about how we're going to
    // trust URLs moving forward. See #2115901
    var isEmpty = value == null || typeof value === 'boolean' || value === '';

    if (isEmpty) {
      return '';
    }

    if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
      return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
    }

    return ('' + value).trim();
  }

  var uppercasePattern = /([A-Z])/g;
  var msPattern = /^ms-/;
  /**
   * Hyphenates a camelcased CSS property name, for example:
   *
   *   > hyphenateStyleName('backgroundColor')
   *   < "background-color"
   *   > hyphenateStyleName('MozTransition')
   *   < "-moz-transition"
   *   > hyphenateStyleName('msTransition')
   *   < "-ms-transition"
   *
   * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
   * is converted to `-ms-`.
   */

  function hyphenateStyleName(name) {
    return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
  }

  var warnValidStyle = function () {};

  {
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;

    var camelize = function (string) {
      return string.replace(hyphenPattern, function (_, character) {
        return character.toUpperCase();
      });
    };

    var warnHyphenatedStyleName = function (name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }

      warnedStyleNames[name] = true;

      error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
      // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
      // is converted to lowercase `ms`.
      camelize(name.replace(msPattern$1, 'ms-')));
    };

    var warnBadVendoredStyleName = function (name) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }

      warnedStyleNames[name] = true;

      error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };

    var warnStyleValueWithSemicolon = function (name, value) {
      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
        return;
      }

      warnedStyleValues[value] = true;

      error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };

    var warnStyleValueIsNaN = function (name, value) {
      if (warnedForNaNValue) {
        return;
      }

      warnedForNaNValue = true;

      error('`NaN` is an invalid value for the `%s` css style property.', name);
    };

    var warnStyleValueIsInfinity = function (name, value) {
      if (warnedForInfinityValue) {
        return;
      }

      warnedForInfinityValue = true;

      error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };

    warnValidStyle = function (name, value) {
      if (name.indexOf('-') > -1) {
        warnHyphenatedStyleName(name);
      } else if (badVendoredStyleNamePattern.test(name)) {
        warnBadVendoredStyleName(name);
      } else if (badStyleValueWithSemicolonPattern.test(value)) {
        warnStyleValueWithSemicolon(name, value);
      }

      if (typeof value === 'number') {
        if (isNaN(value)) {
          warnStyleValueIsNaN(name, value);
        } else if (!isFinite(value)) {
          warnStyleValueIsInfinity(name, value);
        }
      }
    };
  }

  var warnValidStyle$1 = warnValidStyle;

  /**
   * Operations for dealing with CSS properties.
   */

  /**
   * This creates a string that is expected to be equivalent to the style
   * attribute generated by server-side rendering. It by-passes warnings and
   * security checks so it's not safe to use this value for anything other than
   * comparison. It is only used in DEV for SSR validation.
   */

  function createDangerousStringForStyles(styles) {
    {
      var serialized = '';
      var delimiter = '';

      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }

        var styleValue = styles[styleName];

        if (styleValue != null) {
          var isCustomProperty = styleName.indexOf('--') === 0;
          serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
          serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
          delimiter = ';';
        }
      }

      return serialized || null;
    }
  }
  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */

  function setValueForStyles(node, styles) {
    var style = node.style;

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var isCustomProperty = styleName.indexOf('--') === 0;

      {
        if (!isCustomProperty) {
          warnValidStyle$1(styleName, styles[styleName]);
        }
      }

      var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

      if (styleName === 'float') {
        styleName = 'cssFloat';
      }

      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else {
        style[styleName] = styleValue;
      }
    }
  }

  function isValueEmpty(value) {
    return value == null || typeof value === 'boolean' || value === '';
  }
  /**
   * Given {color: 'red', overflow: 'hidden'} returns {
   *   color: 'color',
   *   overflowX: 'overflow',
   *   overflowY: 'overflow',
   * }. This can be read as "the overflowY property was set by the overflow
   * shorthand". That is, the values are the property that each was derived from.
   */


  function expandShorthandMap(styles) {
    var expanded = {};

    for (var key in styles) {
      var longhands = shorthandToLonghand[key] || [key];

      for (var i = 0; i < longhands.length; i++) {
        expanded[longhands[i]] = key;
      }
    }

    return expanded;
  }
  /**
   * When mixing shorthand and longhand property names, we warn during updates if
   * we expect an incorrect result to occur. In particular, we warn for:
   *
   * Updating a shorthand property (longhand gets overwritten):
   *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
   *   becomes .style.font = 'baz'
   * Removing a shorthand property (longhand gets lost too):
   *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
   *   becomes .style.font = ''
   * Removing a longhand property (should revert to shorthand; doesn't):
   *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
   *   becomes .style.fontVariant = ''
   */


  function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
    {
      if (!nextStyles) {
        return;
      }

      var expandedUpdates = expandShorthandMap(styleUpdates);
      var expandedStyles = expandShorthandMap(nextStyles);
      var warnedAbout = {};

      for (var key in expandedUpdates) {
        var originalKey = expandedUpdates[key];
        var correctOriginalKey = expandedStyles[key];

        if (correctOriginalKey && originalKey !== correctOriginalKey) {
          var warningKey = originalKey + ',' + correctOriginalKey;

          if (warnedAbout[warningKey]) {
            continue;
          }

          warnedAbout[warningKey] = true;

          error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
        }
      }
    }
  }

  // For HTML, certain tags should omit their close tag. We keep a list for
  // those special-case tags.
  var omittedCloseTags = {
    area: true,
    base: true,
    br: true,
    col: true,
    embed: true,
    hr: true,
    img: true,
    input: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
    wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

  };

  // `omittedCloseTags` except that `menuitem` should still have its closing tag.

  var voidElementTags = _assign({
    menuitem: true
  }, omittedCloseTags);

  var HTML = '__html';

  function assertValidProps(tag, props) {
    if (!props) {
      return;
    } // Note the use of `==` which checks for null or undefined.


    if (voidElementTags[tag]) {
      if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
        {
          throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." );
        }
      }
    }

    if (props.dangerouslySetInnerHTML != null) {
      if (!(props.children == null)) {
        {
          throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
        }
      }

      if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
        {
          throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information." );
        }
      }
    }

    {
      if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
        error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
      }
    }

    if (!(props.style == null || typeof props.style === 'object')) {
      {
        throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." );
      }
    }
  }

  function isCustomComponent(tagName, props) {
    if (tagName.indexOf('-') === -1) {
      return typeof props.is === 'string';
    }

    switch (tagName) {
      // These are reserved SVG and MathML elements.
      // We don't mind this list too much because we expect it to never grow.
      // The alternative is to track the namespace in a few places which is convoluted.
      // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
      case 'annotation-xml':
      case 'color-profile':
      case 'font-face':
      case 'font-face-src':
      case 'font-face-uri':
      case 'font-face-format':
      case 'font-face-name':
      case 'missing-glyph':
        return false;

      default:
        return true;
    }
  }

  // When adding attributes to the HTML or SVG allowed attribute list, be sure to
  // also add them to this module to ensure casing and incorrect name
  // warnings.
  var possibleStandardNames = {
    // HTML
    accept: 'accept',
    acceptcharset: 'acceptCharset',
    'accept-charset': 'acceptCharset',
    accesskey: 'accessKey',
    action: 'action',
    allowfullscreen: 'allowFullScreen',
    alt: 'alt',
    as: 'as',
    async: 'async',
    autocapitalize: 'autoCapitalize',
    autocomplete: 'autoComplete',
    autocorrect: 'autoCorrect',
    autofocus: 'autoFocus',
    autoplay: 'autoPlay',
    autosave: 'autoSave',
    capture: 'capture',
    cellpadding: 'cellPadding',
    cellspacing: 'cellSpacing',
    challenge: 'challenge',
    charset: 'charSet',
    checked: 'checked',
    children: 'children',
    cite: 'cite',
    class: 'className',
    classid: 'classID',
    classname: 'className',
    cols: 'cols',
    colspan: 'colSpan',
    content: 'content',
    contenteditable: 'contentEditable',
    contextmenu: 'contextMenu',
    controls: 'controls',
    controlslist: 'controlsList',
    coords: 'coords',
    crossorigin: 'crossOrigin',
    dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
    data: 'data',
    datetime: 'dateTime',
    default: 'default',
    defaultchecked: 'defaultChecked',
    defaultvalue: 'defaultValue',
    defer: 'defer',
    dir: 'dir',
    disabled: 'disabled',
    disablepictureinpicture: 'disablePictureInPicture',
    disableremoteplayback: 'disableRemotePlayback',
    download: 'download',
    draggable: 'draggable',
    enctype: 'encType',
    enterkeyhint: 'enterKeyHint',
    for: 'htmlFor',
    form: 'form',
    formmethod: 'formMethod',
    formaction: 'formAction',
    formenctype: 'formEncType',
    formnovalidate: 'formNoValidate',
    formtarget: 'formTarget',
    frameborder: 'frameBorder',
    headers: 'headers',
    height: 'height',
    hidden: 'hidden',
    high: 'high',
    href: 'href',
    hreflang: 'hrefLang',
    htmlfor: 'htmlFor',
    httpequiv: 'httpEquiv',
    'http-equiv': 'httpEquiv',
    icon: 'icon',
    id: 'id',
    innerhtml: 'innerHTML',
    inputmode: 'inputMode',
    integrity: 'integrity',
    is: 'is',
    itemid: 'itemID',
    itemprop: 'itemProp',
    itemref: 'itemRef',
    itemscope: 'itemScope',
    itemtype: 'itemType',
    keyparams: 'keyParams',
    keytype: 'keyType',
    kind: 'kind',
    label: 'label',
    lang: 'lang',
    list: 'list',
    loop: 'loop',
    low: 'low',
    manifest: 'manifest',
    marginwidth: 'marginWidth',
    marginheight: 'marginHeight',
    max: 'max',
    maxlength: 'maxLength',
    media: 'media',
    mediagroup: 'mediaGroup',
    method: 'method',
    min: 'min',
    minlength: 'minLength',
    multiple: 'multiple',
    muted: 'muted',
    name: 'name',
    nomodule: 'noModule',
    nonce: 'nonce',
    novalidate: 'noValidate',
    open: 'open',
    optimum: 'optimum',
    pattern: 'pattern',
    placeholder: 'placeholder',
    playsinline: 'playsInline',
    poster: 'poster',
    preload: 'preload',
    profile: 'profile',
    radiogroup: 'radioGroup',
    readonly: 'readOnly',
    referrerpolicy: 'referrerPolicy',
    rel: 'rel',
    required: 'required',
    reversed: 'reversed',
    role: 'role',
    rows: 'rows',
    rowspan: 'rowSpan',
    sandbox: 'sandbox',
    scope: 'scope',
    scoped: 'scoped',
    scrolling: 'scrolling',
    seamless: 'seamless',
    selected: 'selected',
    shape: 'shape',
    size: 'size',
    sizes: 'sizes',
    span: 'span',
    spellcheck: 'spellCheck',
    src: 'src',
    srcdoc: 'srcDoc',
    srclang: 'srcLang',
    srcset: 'srcSet',
    start: 'start',
    step: 'step',
    style: 'style',
    summary: 'summary',
    tabindex: 'tabIndex',
    target: 'target',
    title: 'title',
    type: 'type',
    usemap: 'useMap',
    value: 'value',
    width: 'width',
    wmode: 'wmode',
    wrap: 'wrap',
    // SVG
    about: 'about',
    accentheight: 'accentHeight',
    'accent-height': 'accentHeight',
    accumulate: 'accumulate',
    additive: 'additive',
    alignmentbaseline: 'alignmentBaseline',
    'alignment-baseline': 'alignmentBaseline',
    allowreorder: 'allowReorder',
    alphabetic: 'alphabetic',
    amplitude: 'amplitude',
    arabicform: 'arabicForm',
    'arabic-form': 'arabicForm',
    ascent: 'ascent',
    attributename: 'attributeName',
    attributetype: 'attributeType',
    autoreverse: 'autoReverse',
    azimuth: 'azimuth',
    basefrequency: 'baseFrequency',
    baselineshift: 'baselineShift',
    'baseline-shift': 'baselineShift',
    baseprofile: 'baseProfile',
    bbox: 'bbox',
    begin: 'begin',
    bias: 'bias',
    by: 'by',
    calcmode: 'calcMode',
    capheight: 'capHeight',
    'cap-height': 'capHeight',
    clip: 'clip',
    clippath: 'clipPath',
    'clip-path': 'clipPath',
    clippathunits: 'clipPathUnits',
    cliprule: 'clipRule',
    'clip-rule': 'clipRule',
    color: 'color',
    colorinterpolation: 'colorInterpolation',
    'color-interpolation': 'colorInterpolation',
    colorinterpolationfilters: 'colorInterpolationFilters',
    'color-interpolation-filters': 'colorInterpolationFilters',
    colorprofile: 'colorProfile',
    'color-profile': 'colorProfile',
    colorrendering: 'colorRendering',
    'color-rendering': 'colorRendering',
    contentscripttype: 'contentScriptType',
    contentstyletype: 'contentStyleType',
    cursor: 'cursor',
    cx: 'cx',
    cy: 'cy',
    d: 'd',
    datatype: 'datatype',
    decelerate: 'decelerate',
    descent: 'descent',
    diffuseconstant: 'diffuseConstant',
    direction: 'direction',
    display: 'display',
    divisor: 'divisor',
    dominantbaseline: 'dominantBaseline',
    'dominant-baseline': 'dominantBaseline',
    dur: 'dur',
    dx: 'dx',
    dy: 'dy',
    edgemode: 'edgeMode',
    elevation: 'elevation',
    enablebackground: 'enableBackground',
    'enable-background': 'enableBackground',
    end: 'end',
    exponent: 'exponent',
    externalresourcesrequired: 'externalResourcesRequired',
    fill: 'fill',
    fillopacity: 'fillOpacity',
    'fill-opacity': 'fillOpacity',
    fillrule: 'fillRule',
    'fill-rule': 'fillRule',
    filter: 'filter',
    filterres: 'filterRes',
    filterunits: 'filterUnits',
    floodopacity: 'floodOpacity',
    'flood-opacity': 'floodOpacity',
    floodcolor: 'floodColor',
    'flood-color': 'floodColor',
    focusable: 'focusable',
    fontfamily: 'fontFamily',
    'font-family': 'fontFamily',
    fontsize: 'fontSize',
    'font-size': 'fontSize',
    fontsizeadjust: 'fontSizeAdjust',
    'font-size-adjust': 'fontSizeAdjust',
    fontstretch: 'fontStretch',
    'font-stretch': 'fontStretch',
    fontstyle: 'fontStyle',
    'font-style': 'fontStyle',
    fontvariant: 'fontVariant',
    'font-variant': 'fontVariant',
    fontweight: 'fontWeight',
    'font-weight': 'fontWeight',
    format: 'format',
    from: 'from',
    fx: 'fx',
    fy: 'fy',
    g1: 'g1',
    g2: 'g2',
    glyphname: 'glyphName',
    'glyph-name': 'glyphName',
    glyphorientationhorizontal: 'glyphOrientationHorizontal',
    'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
    glyphorientationvertical: 'glyphOrientationVertical',
    'glyph-orientation-vertical': 'glyphOrientationVertical',
    glyphref: 'glyphRef',
    gradienttransform: 'gradientTransform',
    gradientunits: 'gradientUnits',
    hanging: 'hanging',
    horizadvx: 'horizAdvX',
    'horiz-adv-x': 'horizAdvX',
    horizoriginx: 'horizOriginX',
    'horiz-origin-x': 'horizOriginX',
    ideographic: 'ideographic',
    imagerendering: 'imageRendering',
    'image-rendering': 'imageRendering',
    in2: 'in2',
    in: 'in',
    inlist: 'inlist',
    intercept: 'intercept',
    k1: 'k1',
    k2: 'k2',
    k3: 'k3',
    k4: 'k4',
    k: 'k',
    kernelmatrix: 'kernelMatrix',
    kernelunitlength: 'kernelUnitLength',
    kerning: 'kerning',
    keypoints: 'keyPoints',
    keysplines: 'keySplines',
    keytimes: 'keyTimes',
    lengthadjust: 'lengthAdjust',
    letterspacing: 'letterSpacing',
    'letter-spacing': 'letterSpacing',
    lightingcolor: 'lightingColor',
    'lighting-color': 'lightingColor',
    limitingconeangle: 'limitingConeAngle',
    local: 'local',
    markerend: 'markerEnd',
    'marker-end': 'markerEnd',
    markerheight: 'markerHeight',
    markermid: 'markerMid',
    'marker-mid': 'markerMid',
    markerstart: 'markerStart',
    'marker-start': 'markerStart',
    markerunits: 'markerUnits',
    markerwidth: 'markerWidth',
    mask: 'mask',
    maskcontentunits: 'maskContentUnits',
    maskunits: 'maskUnits',
    mathematical: 'mathematical',
    mode: 'mode',
    numoctaves: 'numOctaves',
    offset: 'offset',
    opacity: 'opacity',
    operator: 'operator',
    order: 'order',
    orient: 'orient',
    orientation: 'orientation',
    origin: 'origin',
    overflow: 'overflow',
    overlineposition: 'overlinePosition',
    'overline-position': 'overlinePosition',
    overlinethickness: 'overlineThickness',
    'overline-thickness': 'overlineThickness',
    paintorder: 'paintOrder',
    'paint-order': 'paintOrder',
    panose1: 'panose1',
    'panose-1': 'panose1',
    pathlength: 'pathLength',
    patterncontentunits: 'patternContentUnits',
    patterntransform: 'patternTransform',
    patternunits: 'patternUnits',
    pointerevents: 'pointerEvents',
    'pointer-events': 'pointerEvents',
    points: 'points',
    pointsatx: 'pointsAtX',
    pointsaty: 'pointsAtY',
    pointsatz: 'pointsAtZ',
    prefix: 'prefix',
    preservealpha: 'preserveAlpha',
    preserveaspectratio: 'preserveAspectRatio',
    primitiveunits: 'primitiveUnits',
    property: 'property',
    r: 'r',
    radius: 'radius',
    refx: 'refX',
    refy: 'refY',
    renderingintent: 'renderingIntent',
    'rendering-intent': 'renderingIntent',
    repeatcount: 'repeatCount',
    repeatdur: 'repeatDur',
    requiredextensions: 'requiredExtensions',
    requiredfeatures: 'requiredFeatures',
    resource: 'resource',
    restart: 'restart',
    result: 'result',
    results: 'results',
    rotate: 'rotate',
    rx: 'rx',
    ry: 'ry',
    scale: 'scale',
    security: 'security',
    seed: 'seed',
    shaperendering: 'shapeRendering',
    'shape-rendering': 'shapeRendering',
    slope: 'slope',
    spacing: 'spacing',
    specularconstant: 'specularConstant',
    specularexponent: 'specularExponent',
    speed: 'speed',
    spreadmethod: 'spreadMethod',
    startoffset: 'startOffset',
    stddeviation: 'stdDeviation',
    stemh: 'stemh',
    stemv: 'stemv',
    stitchtiles: 'stitchTiles',
    stopcolor: 'stopColor',
    'stop-color': 'stopColor',
    stopopacity: 'stopOpacity',
    'stop-opacity': 'stopOpacity',
    strikethroughposition: 'strikethroughPosition',
    'strikethrough-position': 'strikethroughPosition',
    strikethroughthickness: 'strikethroughThickness',
    'strikethrough-thickness': 'strikethroughThickness',
    string: 'string',
    stroke: 'stroke',
    strokedasharray: 'strokeDasharray',
    'stroke-dasharray': 'strokeDasharray',
    strokedashoffset: 'strokeDashoffset',
    'stroke-dashoffset': 'strokeDashoffset',
    strokelinecap: 'strokeLinecap',
    'stroke-linecap': 'strokeLinecap',
    strokelinejoin: 'strokeLinejoin',
    'stroke-linejoin': 'strokeLinejoin',
    strokemiterlimit: 'strokeMiterlimit',
    'stroke-miterlimit': 'strokeMiterlimit',
    strokewidth: 'strokeWidth',
    'stroke-width': 'strokeWidth',
    strokeopacity: 'strokeOpacity',
    'stroke-opacity': 'strokeOpacity',
    suppresscontenteditablewarning: 'suppressContentEditableWarning',
    suppresshydrationwarning: 'suppressHydrationWarning',
    surfacescale: 'surfaceScale',
    systemlanguage: 'systemLanguage',
    tablevalues: 'tableValues',
    targetx: 'targetX',
    targety: 'targetY',
    textanchor: 'textAnchor',
    'text-anchor': 'textAnchor',
    textdecoration: 'textDecoration',
    'text-decoration': 'textDecoration',
    textlength: 'textLength',
    textrendering: 'textRendering',
    'text-rendering': 'textRendering',
    to: 'to',
    transform: 'transform',
    typeof: 'typeof',
    u1: 'u1',
    u2: 'u2',
    underlineposition: 'underlinePosition',
    'underline-position': 'underlinePosition',
    underlinethickness: 'underlineThickness',
    'underline-thickness': 'underlineThickness',
    unicode: 'unicode',
    unicodebidi: 'unicodeBidi',
    'unicode-bidi': 'unicodeBidi',
    unicoderange: 'unicodeRange',
    'unicode-range': 'unicodeRange',
    unitsperem: 'unitsPerEm',
    'units-per-em': 'unitsPerEm',
    unselectable: 'unselectable',
    valphabetic: 'vAlphabetic',
    'v-alphabetic': 'vAlphabetic',
    values: 'values',
    vectoreffect: 'vectorEffect',
    'vector-effect': 'vectorEffect',
    version: 'version',
    vertadvy: 'vertAdvY',
    'vert-adv-y': 'vertAdvY',
    vertoriginx: 'vertOriginX',
    'vert-origin-x': 'vertOriginX',
    vertoriginy: 'vertOriginY',
    'vert-origin-y': 'vertOriginY',
    vhanging: 'vHanging',
    'v-hanging': 'vHanging',
    videographic: 'vIdeographic',
    'v-ideographic': 'vIdeographic',
    viewbox: 'viewBox',
    viewtarget: 'viewTarget',
    visibility: 'visibility',
    vmathematical: 'vMathematical',
    'v-mathematical': 'vMathematical',
    vocab: 'vocab',
    widths: 'widths',
    wordspacing: 'wordSpacing',
    'word-spacing': 'wordSpacing',
    writingmode: 'writingMode',
    'writing-mode': 'writingMode',
    x1: 'x1',
    x2: 'x2',
    x: 'x',
    xchannelselector: 'xChannelSelector',
    xheight: 'xHeight',
    'x-height': 'xHeight',
    xlinkactuate: 'xlinkActuate',
    'xlink:actuate': 'xlinkActuate',
    xlinkarcrole: 'xlinkArcrole',
    'xlink:arcrole': 'xlinkArcrole',
    xlinkhref: 'xlinkHref',
    'xlink:href': 'xlinkHref',
    xlinkrole: 'xlinkRole',
    'xlink:role': 'xlinkRole',
    xlinkshow: 'xlinkShow',
    'xlink:show': 'xlinkShow',
    xlinktitle: 'xlinkTitle',
    'xlink:title': 'xlinkTitle',
    xlinktype: 'xlinkType',
    'xlink:type': 'xlinkType',
    xmlbase: 'xmlBase',
    'xml:base': 'xmlBase',
    xmllang: 'xmlLang',
    'xml:lang': 'xmlLang',
    xmlns: 'xmlns',
    'xml:space': 'xmlSpace',
    xmlnsxlink: 'xmlnsXlink',
    'xmlns:xlink': 'xmlnsXlink',
    xmlspace: 'xmlSpace',
    y1: 'y1',
    y2: 'y2',
    y: 'y',
    ychannelselector: 'yChannelSelector',
    z: 'z',
    zoomandpan: 'zoomAndPan'
  };

  var ariaProperties = {
    'aria-current': 0,
    // state
    'aria-details': 0,
    'aria-disabled': 0,
    // state
    'aria-hidden': 0,
    // state
    'aria-invalid': 0,
    // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  };

  var warnedProperties = {};
  var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

  function validateProperty(tagName, name) {
    {
      if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
        return true;
      }

      if (rARIACamel.test(name)) {
        var ariaName = 'aria-' + name.slice(4).toLowerCase();
        var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (correctName == null) {
          error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

          warnedProperties[name] = true;
          return true;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== correctName) {
          error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

          warnedProperties[name] = true;
          return true;
        }
      }

      if (rARIA.test(name)) {
        var lowerCasedName = name.toLowerCase();
        var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (standardName == null) {
          warnedProperties[name] = true;
          return false;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== standardName) {
          error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

          warnedProperties[name] = true;
          return true;
        }
      }
    }

    return true;
  }

  function warnInvalidARIAProps(type, props) {
    {
      var invalidProps = [];

      for (var key in props) {
        var isValid = validateProperty(type, key);

        if (!isValid) {
          invalidProps.push(key);
        }
      }

      var unknownPropString = invalidProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (invalidProps.length === 1) {
        error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
      } else if (invalidProps.length > 1) {
        error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
      }
    }
  }

  function validateProperties(type, props) {
    if (isCustomComponent(type, props)) {
      return;
    }

    warnInvalidARIAProps(type, props);
  }

  var didWarnValueNull = false;
  function validateProperties$1(type, props) {
    {
      if (type !== 'input' && type !== 'textarea' && type !== 'select') {
        return;
      }

      if (props != null && props.value === null && !didWarnValueNull) {
        didWarnValueNull = true;

        if (type === 'select' && props.multiple) {
          error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
        } else {
          error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
        }
      }
    }
  }

  var validateProperty$1 = function () {};

  {
    var warnedProperties$1 = {};
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

    validateProperty$1 = function (tagName, name, value, eventRegistry) {
      if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
        return true;
      }

      var lowerCasedName = name.toLowerCase();

      if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
        error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

        warnedProperties$1[name] = true;
        return true;
      } // We can't rely on the event system being injected on the server.


      if (eventRegistry != null) {
        var registrationNameDependencies = eventRegistry.registrationNameDependencies,
            possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

        if (registrationNameDependencies.hasOwnProperty(name)) {
          return true;
        }

        var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

        if (registrationName != null) {
          error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

          warnedProperties$1[name] = true;
          return true;
        }

        if (EVENT_NAME_REGEX.test(name)) {
          error('Unknown event handler property `%s`. It will be ignored.', name);

          warnedProperties$1[name] = true;
          return true;
        }
      } else if (EVENT_NAME_REGEX.test(name)) {
        // If no event plugins have been injected, we are in a server environment.
        // So we can't tell if the event name is correct for sure, but we can filter
        // out known bad ones like `onclick`. We can't suggest a specific replacement though.
        if (INVALID_EVENT_NAME_REGEX.test(name)) {
          error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
        }

        warnedProperties$1[name] = true;
        return true;
      } // Let the ARIA attribute hook validate ARIA attributes


      if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
        return true;
      }

      if (lowerCasedName === 'innerhtml') {
        error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

        warnedProperties$1[name] = true;
        return true;
      }

      if (lowerCasedName === 'aria') {
        error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

        warnedProperties$1[name] = true;
        return true;
      }

      if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
        error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

        warnedProperties$1[name] = true;
        return true;
      }

      if (typeof value === 'number' && isNaN(value)) {
        error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

        warnedProperties$1[name] = true;
        return true;
      }

      var propertyInfo = getPropertyInfo(name);
      var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

      if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
        var standardName = possibleStandardNames[lowerCasedName];

        if (standardName !== name) {
          error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

          warnedProperties$1[name] = true;
          return true;
        }
      } else if (!isReserved && name !== lowerCasedName) {
        // Unknown attributes should have lowercase casing since that's how they
        // will be cased anyway with server rendering.
        error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
        if (value) {
          error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
        } else {
          error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
        }

        warnedProperties$1[name] = true;
        return true;
      } // Now that we've validated casing, do not validate
      // data types for reserved props


      if (isReserved) {
        return true;
      } // Warn when a known attribute is a bad type


      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
        warnedProperties$1[name] = true;
        return false;
      } // Warn when passing the strings 'false' or 'true' into a boolean prop


      if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
        error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

        warnedProperties$1[name] = true;
        return true;
      }

      return true;
    };
  }

  var warnUnknownProperties = function (type, props, eventRegistry) {
    {
      var unknownProps = [];

      for (var key in props) {
        var isValid = validateProperty$1(type, key, props[key], eventRegistry);

        if (!isValid) {
          unknownProps.push(key);
        }
      }

      var unknownPropString = unknownProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (unknownProps.length === 1) {
        error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
      } else if (unknownProps.length > 1) {
        error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
      }
    }
  };

  function validateProperties$2(type, props, eventRegistry) {
    if (isCustomComponent(type, props)) {
      return;
    }

    warnUnknownProperties(type, props, eventRegistry);
  }

  var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
  var IS_NON_DELEGATED = 1 << 1;
  var IS_CAPTURE_PHASE = 1 << 2;
  var IS_REPLAYED = 1 << 4;
  // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
  // we call willDeferLaterForLegacyFBSupport, thus not bailing out
  // will result in endless cycles like an infinite loop.
  // We also don't want to defer during event replaying.

  var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

  /**
   * Gets the target node from a native browser event by accounting for
   * inconsistencies in browser DOM APIs.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {DOMEventTarget} Target node.
   */

  function getEventTarget(nativeEvent) {
    // Fallback to nativeEvent.srcElement for IE9
    // https://github.com/facebook/react/issues/12506
    var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

    if (target.correspondingUseElement) {
      target = target.correspondingUseElement;
    } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
    // @see http://www.quirksmode.org/js/events_properties.html


    return target.nodeType === TEXT_NODE ? target.parentNode : target;
  }

  var restoreImpl = null;
  var restoreTarget = null;
  var restoreQueue = null;

  function restoreStateOfTarget(target) {
    // We perform this translation at the end of the event loop so that we
    // always receive the correct fiber here
    var internalInstance = getInstanceFromNode(target);

    if (!internalInstance) {
      // Unmounted
      return;
    }

    if (!(typeof restoreImpl === 'function')) {
      {
        throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

    if (stateNode) {
      var _props = getFiberCurrentPropsFromNode(stateNode);

      restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
    }
  }

  function setRestoreImplementation(impl) {
    restoreImpl = impl;
  }
  function enqueueStateRestore(target) {
    if (restoreTarget) {
      if (restoreQueue) {
        restoreQueue.push(target);
      } else {
        restoreQueue = [target];
      }
    } else {
      restoreTarget = target;
    }
  }
  function needsStateRestore() {
    return restoreTarget !== null || restoreQueue !== null;
  }
  function restoreStateIfNeeded() {
    if (!restoreTarget) {
      return;
    }

    var target = restoreTarget;
    var queuedTargets = restoreQueue;
    restoreTarget = null;
    restoreQueue = null;
    restoreStateOfTarget(target);

    if (queuedTargets) {
      for (var i = 0; i < queuedTargets.length; i++) {
        restoreStateOfTarget(queuedTargets[i]);
      }
    }
  }

  // the renderer. Such as when we're dispatching events or if third party
  // libraries need to call batchedUpdates. Eventually, this API will go away when
  // everything is batched by default. We'll then have a similar API to opt-out of
  // scheduled work and instead do synchronous work.
  // Defaults

  var batchedUpdatesImpl = function (fn, bookkeeping) {
    return fn(bookkeeping);
  };

  var discreteUpdatesImpl = function (fn, a, b, c, d) {
    return fn(a, b, c, d);
  };

  var flushDiscreteUpdatesImpl = function () {};

  var batchedEventUpdatesImpl = batchedUpdatesImpl;
  var isInsideEventHandler = false;
  var isBatchingEventUpdates = false;

  function finishEventHandler() {
    // Here we wait until all updates have propagated, which is important
    // when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    // Then we restore state of any controlled component.
    var controlledComponentsHavePendingUpdates = needsStateRestore();

    if (controlledComponentsHavePendingUpdates) {
      // If a controlled event was fired, we may need to restore the state of
      // the DOM node back to the controlled value. This is necessary when React
      // bails out of the update without touching the DOM.
      flushDiscreteUpdatesImpl();
      restoreStateIfNeeded();
    }
  }

  function batchedUpdates(fn, bookkeeping) {
    if (isInsideEventHandler) {
      // If we are currently inside another batch, we need to wait until it
      // fully completes before restoring state.
      return fn(bookkeeping);
    }

    isInsideEventHandler = true;

    try {
      return batchedUpdatesImpl(fn, bookkeeping);
    } finally {
      isInsideEventHandler = false;
      finishEventHandler();
    }
  }
  function batchedEventUpdates(fn, a, b) {
    if (isBatchingEventUpdates) {
      // If we are currently inside another batch, we need to wait until it
      // fully completes before restoring state.
      return fn(a, b);
    }

    isBatchingEventUpdates = true;

    try {
      return batchedEventUpdatesImpl(fn, a, b);
    } finally {
      isBatchingEventUpdates = false;
      finishEventHandler();
    }
  }
  function discreteUpdates(fn, a, b, c, d) {
    var prevIsInsideEventHandler = isInsideEventHandler;
    isInsideEventHandler = true;

    try {
      return discreteUpdatesImpl(fn, a, b, c, d);
    } finally {
      isInsideEventHandler = prevIsInsideEventHandler;

      if (!isInsideEventHandler) {
        finishEventHandler();
      }
    }
  }
  function flushDiscreteUpdatesIfNeeded(timeStamp) {
    {
      if (!isInsideEventHandler) {
        flushDiscreteUpdatesImpl();
      }
    }
  }
  function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
    batchedUpdatesImpl = _batchedUpdatesImpl;
    discreteUpdatesImpl = _discreteUpdatesImpl;
    flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
    batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
  }

  function isInteractive(tag) {
    return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
  }

  function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
      case 'onClick':
      case 'onClickCapture':
      case 'onDoubleClick':
      case 'onDoubleClickCapture':
      case 'onMouseDown':
      case 'onMouseDownCapture':
      case 'onMouseMove':
      case 'onMouseMoveCapture':
      case 'onMouseUp':
      case 'onMouseUpCapture':
      case 'onMouseEnter':
        return !!(props.disabled && isInteractive(type));

      default:
        return false;
    }
  }
  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */


  function getListener(inst, registrationName) {
    var stateNode = inst.stateNode;

    if (stateNode === null) {
      // Work in progress (ex: onload events in incremental mode).
      return null;
    }

    var props = getFiberCurrentPropsFromNode(stateNode);

    if (props === null) {
      // Work in progress.
      return null;
    }

    var listener = props[registrationName];

    if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
      return null;
    }

    if (!(!listener || typeof listener === 'function')) {
      {
        throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
      }
    }

    return listener;
  }

  var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

  if (canUseDOM) {
    try {
      var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

      Object.defineProperty(options, 'passive', {
        get: function () {
          passiveBrowserEventsSupported = true;
        }
      });
      window.addEventListener('test', options, options);
      window.removeEventListener('test', options, options);
    } catch (e) {
      passiveBrowserEventsSupported = false;
    }
  }

  function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);

    try {
      func.apply(context, funcArgs);
    } catch (error) {
      this.onError(error);
    }
  }

  var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

  {
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
      var fakeNode = document.createElement('react');

      invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
        // If document doesn't exist we know for sure we will crash in this method
        // when we call document.createEvent(). However this can cause confusing
        // errors: https://github.com/facebookincubator/create-react-app/issues/3482
        // So we preemptively throw with a better message instead.
        if (!(typeof document !== 'undefined')) {
          {
            throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
          }
        }

        var evt = document.createEvent('Event');
        var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
        // set this to true at the beginning, then set it to false right after
        // calling the function. If the function errors, `didError` will never be
        // set to false. This strategy works even if the browser is flaky and
        // fails to call our global error handler, because it doesn't rely on
        // the error event at all.

        var didError = true; // Keeps track of the value of window.event so that we can reset it
        // during the callback to let user code access window.event in the
        // browsers that support it.

        var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
        // dispatching: https://github.com/facebook/react/issues/13688

        var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

        function restoreAfterDispatch() {
          // We immediately remove the callback from event listeners so that
          // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
          // nested call would trigger the fake event handlers of any call higher
          // in the stack.
          fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
          // window.event assignment in both IE <= 10 as they throw an error
          // "Member not found" in strict mode, and in Firefox which does not
          // support window.event.

          if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
            window.event = windowEvent;
          }
        } // Create an event handler for our fake event. We will synchronously
        // dispatch our fake event using `dispatchEvent`. Inside the handler, we
        // call the user-provided callback.


        var funcArgs = Array.prototype.slice.call(arguments, 3);

        function callCallback() {
          didCall = true;
          restoreAfterDispatch();
          func.apply(context, funcArgs);
          didError = false;
        } // Create a global error event handler. We use this to capture the value
        // that was thrown. It's possible that this error handler will fire more
        // than once; for example, if non-React code also calls `dispatchEvent`
        // and a handler for that event throws. We should be resilient to most of
        // those cases. Even if our error event handler fires more than once, the
        // last error event is always used. If the callback actually does error,
        // we know that the last error event is the correct one, because it's not
        // possible for anything else to have happened in between our callback
        // erroring and the code that follows the `dispatchEvent` call below. If
        // the callback doesn't error, but the error event was fired, we know to
        // ignore it because `didError` will be false, as described above.


        var error; // Use this to track whether the error event is ever called.

        var didSetError = false;
        var isCrossOriginError = false;

        function handleWindowError(event) {
          error = event.error;
          didSetError = true;

          if (error === null && event.colno === 0 && event.lineno === 0) {
            isCrossOriginError = true;
          }

          if (event.defaultPrevented) {
            // Some other error handler has prevented default.
            // Browsers silence the error report if this happens.
            // We'll remember this to later decide whether to log it or not.
            if (error != null && typeof error === 'object') {
              try {
                error._suppressLogging = true;
              } catch (inner) {// Ignore.
              }
            }
          }
        } // Create a fake event type.


        var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

        window.addEventListener('error', handleWindowError);
        fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
        // errors, it will trigger our global error handler.

        evt.initEvent(evtType, false, false);
        fakeNode.dispatchEvent(evt);

        if (windowEventDescriptor) {
          Object.defineProperty(window, 'event', windowEventDescriptor);
        }

        if (didCall && didError) {
          if (!didSetError) {
            // The callback errored, but the error event never fired.
            error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
          } else if (isCrossOriginError) {
            error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
          }

          this.onError(error);
        } // Remove our event listeners


        window.removeEventListener('error', handleWindowError);

        if (!didCall) {
          // Something went really wrong, and our event was not dispatched.
          // https://github.com/facebook/react/issues/16734
          // https://github.com/facebook/react/issues/16585
          // Fall back to the production implementation.
          restoreAfterDispatch();
          return invokeGuardedCallbackProd.apply(this, arguments);
        }
      };
    }
  }

  var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

  var hasError = false;
  var caughtError = null; // Used by event system to capture/rethrow the first error.

  var hasRethrowError = false;
  var rethrowError = null;
  var reporter = {
    onError: function (error) {
      hasError = true;
      caughtError = error;
    }
  };
  /**
   * Call a function while guarding against errors that happens within it.
   * Returns an error if it throws, otherwise null.
   *
   * In production, this is implemented using a try-catch. The reason we don't
   * use a try-catch directly is so that we can swap out a different
   * implementation in DEV mode.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */

  function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    hasError = false;
    caughtError = null;
    invokeGuardedCallbackImpl$1.apply(reporter, arguments);
  }
  /**
   * Same as invokeGuardedCallback, but instead of returning an error, it stores
   * it in a global so it can be rethrown by `rethrowCaughtError` later.
   * TODO: See if caughtError and rethrowError can be unified.
   *
   * @param {String} name of the guard to use for logging or debugging
   * @param {Function} func The function to invoke
   * @param {*} context The context to use when calling the function
   * @param {...*} args Arguments for function
   */

  function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
    invokeGuardedCallback.apply(this, arguments);

    if (hasError) {
      var error = clearCaughtError();

      if (!hasRethrowError) {
        hasRethrowError = true;
        rethrowError = error;
      }
    }
  }
  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */

  function rethrowCaughtError() {
    if (hasRethrowError) {
      var error = rethrowError;
      hasRethrowError = false;
      rethrowError = null;
      throw error;
    }
  }
  function hasCaughtError() {
    return hasError;
  }
  function clearCaughtError() {
    if (hasError) {
      var error = caughtError;
      hasError = false;
      caughtError = null;
      return error;
    } else {
      {
        {
          throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
        }
      }
    }
  }

  /**
   * `ReactInstanceMap` maintains a mapping from a public facing stateful
   * instance (key) and the internal representation (value). This allows public
   * methods to accept the user facing instance as an argument and map them back
   * to internal methods.
   *
   * Note that this module is currently shared and assumed to be stateless.
   * If this becomes an actual Map, that will break.
   */
  function get(key) {
    return key._reactInternals;
  }
  function has(key) {
    return key._reactInternals !== undefined;
  }
  function set(key, value) {
    key._reactInternals = value;
  }

  // Don't change these two values. They're used by React Dev Tools.
  var NoFlags =
  /*                      */
  0;
  var PerformedWork =
  /*                */
  1; // You can change the rest (and add more).

  var Placement =
  /*                    */
  2;
  var Update =
  /*                       */
  4;
  var PlacementAndUpdate =
  /*           */
  6;
  var Deletion =
  /*                     */
  8;
  var ContentReset =
  /*                 */
  16;
  var Callback =
  /*                     */
  32;
  var DidCapture =
  /*                   */
  64;
  var Ref =
  /*                          */
  128;
  var Snapshot =
  /*                     */
  256;
  var Passive =
  /*                      */
  512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.

  var PassiveUnmountPendingDev =
  /*     */
  8192;
  var Hydrating =
  /*                    */
  1024;
  var HydratingAndUpdate =
  /*           */
  1028; // Passive & Update & Callback & Ref & Snapshot

  var LifecycleEffectMask =
  /*          */
  932; // Union of all host effects

  var HostEffectMask =
  /*               */
  2047; // These are not really side effects, but we still reuse this field.

  var Incomplete =
  /*                   */
  2048;
  var ShouldCapture =
  /*                */
  4096;
  var ForceUpdateForLegacySuspense =
  /* */
  16384; // Static tags describe aspects of a fiber that are not specific to a render,

  var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
  function getNearestMountedFiber(fiber) {
    var node = fiber;
    var nearestMounted = fiber;

    if (!fiber.alternate) {
      // If there is no alternate, this might be a new tree that isn't inserted
      // yet. If it is, then it will have a pending insertion effect on it.
      var nextNode = node;

      do {
        node = nextNode;

        if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
          // This is an insertion or in-progress hydration. The nearest possible
          // mounted fiber is the parent but we need to continue to figure out
          // if that one is still mounted.
          nearestMounted = node.return;
        }

        nextNode = node.return;
      } while (nextNode);
    } else {
      while (node.return) {
        node = node.return;
      }
    }

    if (node.tag === HostRoot) {
      // TODO: Check if this was a nested HostRoot when used with
      // renderContainerIntoSubtree.
      return nearestMounted;
    } // If we didn't hit the root, that means that we're in an disconnected tree
    // that has been unmounted.


    return null;
  }
  function getSuspenseInstanceFromFiber(fiber) {
    if (fiber.tag === SuspenseComponent) {
      var suspenseState = fiber.memoizedState;

      if (suspenseState === null) {
        var current = fiber.alternate;

        if (current !== null) {
          suspenseState = current.memoizedState;
        }
      }

      if (suspenseState !== null) {
        return suspenseState.dehydrated;
      }
    }

    return null;
  }
  function getContainerFromFiber(fiber) {
    return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
  }
  function isFiberMounted(fiber) {
    return getNearestMountedFiber(fiber) === fiber;
  }
  function isMounted(component) {
    {
      var owner = ReactCurrentOwner.current;

      if (owner !== null && owner.tag === ClassComponent) {
        var ownerFiber = owner;
        var instance = ownerFiber.stateNode;

        if (!instance._warnedAboutRefsInRender) {
          error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
        }

        instance._warnedAboutRefsInRender = true;
      }
    }

    var fiber = get(component);

    if (!fiber) {
      return false;
    }

    return getNearestMountedFiber(fiber) === fiber;
  }

  function assertIsMounted(fiber) {
    if (!(getNearestMountedFiber(fiber) === fiber)) {
      {
        throw Error( "Unable to find node on an unmounted component." );
      }
    }
  }

  function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;

    if (!alternate) {
      // If there is no alternate, then we only need to check if it is mounted.
      var nearestMounted = getNearestMountedFiber(fiber);

      if (!(nearestMounted !== null)) {
        {
          throw Error( "Unable to find node on an unmounted component." );
        }
      }

      if (nearestMounted !== fiber) {
        return null;
      }

      return fiber;
    } // If we have two possible branches, we'll walk backwards up to the root
    // to see what path the root points to. On the way we may hit one of the
    // special cases and we'll deal with them.


    var a = fiber;
    var b = alternate;

    while (true) {
      var parentA = a.return;

      if (parentA === null) {
        // We're at the root.
        break;
      }

      var parentB = parentA.alternate;

      if (parentB === null) {
        // There is no alternate. This is an unusual case. Currently, it only
        // happens when a Suspense component is hidden. An extra fragment fiber
        // is inserted in between the Suspense fiber and its children. Skip
        // over this extra fragment fiber and proceed to the next parent.
        var nextParent = parentA.return;

        if (nextParent !== null) {
          a = b = nextParent;
          continue;
        } // If there's no parent, we're at the root.


        break;
      } // If both copies of the parent fiber point to the same child, we can
      // assume that the child is current. This happens when we bailout on low
      // priority: the bailed out fiber's child reuses the current child.


      if (parentA.child === parentB.child) {
        var child = parentA.child;

        while (child) {
          if (child === a) {
            // We've determined that A is the current branch.
            assertIsMounted(parentA);
            return fiber;
          }

          if (child === b) {
            // We've determined that B is the current branch.
            assertIsMounted(parentA);
            return alternate;
          }

          child = child.sibling;
        } // We should never have an alternate for any mounting node. So the only
        // way this could possibly happen is if this was unmounted, if at all.


        {
          {
            throw Error( "Unable to find node on an unmounted component." );
          }
        }
      }

      if (a.return !== b.return) {
        // The return pointer of A and the return pointer of B point to different
        // fibers. We assume that return pointers never criss-cross, so A must
        // belong to the child set of A.return, and B must belong to the child
        // set of B.return.
        a = parentA;
        b = parentB;
      } else {
        // The return pointers point to the same fiber. We'll have to use the
        // default, slow path: scan the child sets of each parent alternate to see
        // which child belongs to which set.
        //
        // Search parent A's child set
        var didFindChild = false;
        var _child = parentA.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentA;
            b = parentB;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentA;
            a = parentB;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          // Search parent B's child set
          _child = parentB.child;

          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentB;
              b = parentA;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentB;
              a = parentA;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) {
            {
              throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
            }
          }
        }
      }

      if (!(a.alternate === b)) {
        {
          throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
        }
      }
    } // If the root is not a host container, we're in a disconnected tree. I.e.
    // unmounted.


    if (!(a.tag === HostRoot)) {
      {
        throw Error( "Unable to find node on an unmounted component." );
      }
    }

    if (a.stateNode.current === a) {
      // We've determined that A is the current branch.
      return fiber;
    } // Otherwise B has to be current branch.


    return alternate;
  }
  function findCurrentHostFiber(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);

    if (!currentParent) {
      return null;
    } // Next we'll drill down this component to find the first HostComponent/Text.


    var node = currentParent;

    while (true) {
      if (node.tag === HostComponent || node.tag === HostText) {
        return node;
      } else if (node.child) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === currentParent) {
        return null;
      }

      while (!node.sibling) {
        if (!node.return || node.return === currentParent) {
          return null;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    } // Flow needs the return null here, but ESLint complains about it.
    // eslint-disable-next-line no-unreachable


    return null;
  }
  function findCurrentHostFiberWithNoPortals(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);

    if (!currentParent) {
      return null;
    } // Next we'll drill down this component to find the first HostComponent/Text.


    var node = currentParent;

    while (true) {
      if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
        return node;
      } else if (node.child && node.tag !== HostPortal) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === currentParent) {
        return null;
      }

      while (!node.sibling) {
        if (!node.return || node.return === currentParent) {
          return null;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    } // Flow needs the return null here, but ESLint complains about it.
    // eslint-disable-next-line no-unreachable


    return null;
  }
  function doesFiberContain(parentFiber, childFiber) {
    var node = childFiber;
    var parentFiberAlternate = parentFiber.alternate;

    while (node !== null) {
      if (node === parentFiber || node === parentFiberAlternate) {
        return true;
      }

      node = node.return;
    }

    return false;
  }

  var attemptUserBlockingHydration;
  function setAttemptUserBlockingHydration(fn) {
    attemptUserBlockingHydration = fn;
  }
  var attemptContinuousHydration;
  function setAttemptContinuousHydration(fn) {
    attemptContinuousHydration = fn;
  }
  var attemptHydrationAtCurrentPriority;
  function setAttemptHydrationAtCurrentPriority(fn) {
    attemptHydrationAtCurrentPriority = fn;
  }
  var attemptHydrationAtPriority;
  function setAttemptHydrationAtPriority(fn) {
    attemptHydrationAtPriority = fn;
  } // TODO: Upgrade this definition once we're on a newer version of Flow that
  var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

  var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
  // if the last target was dehydrated.

  var queuedFocus = null;
  var queuedDrag = null;
  var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

  var queuedPointers = new Map();
  var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

  var queuedExplicitHydrationTargets = [];
  function hasQueuedDiscreteEvents() {
    return queuedDiscreteEvents.length > 0;
  }
  var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
  'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
  function isReplayableDiscreteEvent(eventType) {
    return discreteReplayableEvents.indexOf(eventType) > -1;
  }

  function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
    return {
      blockedOn: blockedOn,
      domEventName: domEventName,
      eventSystemFlags: eventSystemFlags | IS_REPLAYED,
      nativeEvent: nativeEvent,
      targetContainers: [targetContainer]
    };
  }

  function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
    queuedDiscreteEvents.push(queuedEvent);
  } // Resets the replaying for this type of continuous event to no event.

  function clearIfContinuousEvent(domEventName, nativeEvent) {
    switch (domEventName) {
      case 'focusin':
      case 'focusout':
        queuedFocus = null;
        break;

      case 'dragenter':
      case 'dragleave':
        queuedDrag = null;
        break;

      case 'mouseover':
      case 'mouseout':
        queuedMouse = null;
        break;

      case 'pointerover':
      case 'pointerout':
        {
          var pointerId = nativeEvent.pointerId;
          queuedPointers.delete(pointerId);
          break;
        }

      case 'gotpointercapture':
      case 'lostpointercapture':
        {
          var _pointerId = nativeEvent.pointerId;
          queuedPointerCaptures.delete(_pointerId);
          break;
        }
    }
  }

  function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
    if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
      var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

      if (blockedOn !== null) {
        var _fiber2 = getInstanceFromNode(blockedOn);

        if (_fiber2 !== null) {
          // Attempt to increase the priority of this target.
          attemptContinuousHydration(_fiber2);
        }
      }

      return queuedEvent;
    } // If we have already queued this exact event, then it's because
    // the different event systems have different DOM event listeners.
    // We can accumulate the flags, and the targetContainers, and
    // store a single event to be replayed.


    existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
    var targetContainers = existingQueuedEvent.targetContainers;

    if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
      targetContainers.push(targetContainer);
    }

    return existingQueuedEvent;
  }

  function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
    // These set relatedTarget to null because the replayed event will be treated as if we
    // moved from outside the window (no target) onto the target once it hydrates.
    // Instead of mutating we could clone the event.
    switch (domEventName) {
      case 'focusin':
        {
          var focusEvent = nativeEvent;
          queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
          return true;
        }

      case 'dragenter':
        {
          var dragEvent = nativeEvent;
          queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
          return true;
        }

      case 'mouseover':
        {
          var mouseEvent = nativeEvent;
          queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
          return true;
        }

      case 'pointerover':
        {
          var pointerEvent = nativeEvent;
          var pointerId = pointerEvent.pointerId;
          queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
          return true;
        }

      case 'gotpointercapture':
        {
          var _pointerEvent = nativeEvent;
          var _pointerId2 = _pointerEvent.pointerId;
          queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
          return true;
        }
    }

    return false;
  } // Check if this target is unblocked. Returns true if it's unblocked.

  function attemptExplicitHydrationTarget(queuedTarget) {
    // TODO: This function shares a lot of logic with attemptToDispatchEvent.
    // Try to unify them. It's a bit tricky since it would require two return
    // values.
    var targetInst = getClosestInstanceFromNode(queuedTarget.target);

    if (targetInst !== null) {
      var nearestMounted = getNearestMountedFiber(targetInst);

      if (nearestMounted !== null) {
        var tag = nearestMounted.tag;

        if (tag === SuspenseComponent) {
          var instance = getSuspenseInstanceFromFiber(nearestMounted);

          if (instance !== null) {
            // We're blocked on hydrating this boundary.
            // Increase its priority.
            queuedTarget.blockedOn = instance;
            attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
              Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
                attemptHydrationAtCurrentPriority(nearestMounted);
              });
            });
            return;
          }
        } else if (tag === HostRoot) {
          var root = nearestMounted.stateNode;

          if (root.hydrate) {
            queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
            // a root other than sync.

            return;
          }
        }
      }
    }

    queuedTarget.blockedOn = null;
  }

  function attemptReplayContinuousQueuedEvent(queuedEvent) {
    if (queuedEvent.blockedOn !== null) {
      return false;
    }

    var targetContainers = queuedEvent.targetContainers;

    while (targetContainers.length > 0) {
      var targetContainer = targetContainers[0];
      var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

      if (nextBlockedOn !== null) {
        // We're still blocked. Try again later.
        var _fiber3 = getInstanceFromNode(nextBlockedOn);

        if (_fiber3 !== null) {
          attemptContinuousHydration(_fiber3);
        }

        queuedEvent.blockedOn = nextBlockedOn;
        return false;
      } // This target container was successfully dispatched. Try the next.


      targetContainers.shift();
    }

    return true;
  }

  function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
    if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
      map.delete(key);
    }
  }

  function replayUnblockedEvents() {
    hasScheduledReplayAttempt = false; // First replay discrete events.

    while (queuedDiscreteEvents.length > 0) {
      var nextDiscreteEvent = queuedDiscreteEvents[0];

      if (nextDiscreteEvent.blockedOn !== null) {
        // We're still blocked.
        // Increase the priority of this boundary to unblock
        // the next discrete event.
        var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);

        if (_fiber4 !== null) {
          attemptUserBlockingHydration(_fiber4);
        }

        break;
      }

      var targetContainers = nextDiscreteEvent.targetContainers;

      while (targetContainers.length > 0) {
        var targetContainer = targetContainers[0];
        var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);

        if (nextBlockedOn !== null) {
          // We're still blocked. Try again later.
          nextDiscreteEvent.blockedOn = nextBlockedOn;
          break;
        } // This target container was successfully dispatched. Try the next.


        targetContainers.shift();
      }

      if (nextDiscreteEvent.blockedOn === null) {
        // We've successfully replayed the first event. Let's try the next one.
        queuedDiscreteEvents.shift();
      }
    } // Next replay any continuous events.


    if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
      queuedFocus = null;
    }

    if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
      queuedDrag = null;
    }

    if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
      queuedMouse = null;
    }

    queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
    queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
  }

  function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
    if (queuedEvent.blockedOn === unblocked) {
      queuedEvent.blockedOn = null;

      if (!hasScheduledReplayAttempt) {
        hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
        // now unblocked. This first might not actually be unblocked yet.
        // We could check it early to avoid scheduling an unnecessary callback.

        Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
      }
    }
  }

  function retryIfBlockedOn(unblocked) {
    // Mark anything that was blocked on this as no longer blocked
    // and eligible for a replay.
    if (queuedDiscreteEvents.length > 0) {
      scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
      // worth it because we expect very few discrete events to queue up and once
      // we are actually fully unblocked it will be fast to replay them.

      for (var i = 1; i < queuedDiscreteEvents.length; i++) {
        var queuedEvent = queuedDiscreteEvents[i];

        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
        }
      }
    }

    if (queuedFocus !== null) {
      scheduleCallbackIfUnblocked(queuedFocus, unblocked);
    }

    if (queuedDrag !== null) {
      scheduleCallbackIfUnblocked(queuedDrag, unblocked);
    }

    if (queuedMouse !== null) {
      scheduleCallbackIfUnblocked(queuedMouse, unblocked);
    }

    var unblock = function (queuedEvent) {
      return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
    };

    queuedPointers.forEach(unblock);
    queuedPointerCaptures.forEach(unblock);

    for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
      var queuedTarget = queuedExplicitHydrationTargets[_i];

      if (queuedTarget.blockedOn === unblocked) {
        queuedTarget.blockedOn = null;
      }
    }

    while (queuedExplicitHydrationTargets.length > 0) {
      var nextExplicitTarget = queuedExplicitHydrationTargets[0];

      if (nextExplicitTarget.blockedOn !== null) {
        // We're still blocked.
        break;
      } else {
        attemptExplicitHydrationTarget(nextExplicitTarget);

        if (nextExplicitTarget.blockedOn === null) {
          // We're unblocked.
          queuedExplicitHydrationTargets.shift();
        }
      }
    }
  }

  var DiscreteEvent = 0;
  var UserBlockingEvent = 1;
  var ContinuousEvent = 2;

  /**
   * Generate a mapping of standard vendor prefixes using the defined style property and event name.
   *
   * @param {string} styleProp
   * @param {string} eventName
   * @returns {object}
   */

  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes['Webkit' + styleProp] = 'webkit' + eventName;
    prefixes['Moz' + styleProp] = 'moz' + eventName;
    return prefixes;
  }
  /**
   * A list of event names to a configurable list of vendor prefixes.
   */


  var vendorPrefixes = {
    animationend: makePrefixMap('Animation', 'AnimationEnd'),
    animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
    animationstart: makePrefixMap('Animation', 'AnimationStart'),
    transitionend: makePrefixMap('Transition', 'TransitionEnd')
  };
  /**
   * Event names that have already been detected and prefixed (if applicable).
   */

  var prefixedEventNames = {};
  /**
   * Element to check for prefixes on.
   */

  var style = {};
  /**
   * Bootstrap if a DOM exists.
   */

  if (canUseDOM) {
    style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
    // the un-prefixed "animation" and "transition" properties are defined on the
    // style object but the events that fire will still be prefixed, so we need
    // to check if the un-prefixed events are usable, and if not remove them from the map.

    if (!('AnimationEvent' in window)) {
      delete vendorPrefixes.animationend.animation;
      delete vendorPrefixes.animationiteration.animation;
      delete vendorPrefixes.animationstart.animation;
    } // Same as above


    if (!('TransitionEvent' in window)) {
      delete vendorPrefixes.transitionend.transition;
    }
  }
  /**
   * Attempts to determine the correct vendor prefixed event name.
   *
   * @param {string} eventName
   * @returns {string}
   */


  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
      return prefixedEventNames[eventName];
    } else if (!vendorPrefixes[eventName]) {
      return eventName;
    }

    var prefixMap = vendorPrefixes[eventName];

    for (var styleProp in prefixMap) {
      if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
        return prefixedEventNames[eventName] = prefixMap[styleProp];
      }
    }

    return eventName;
  }

  var ANIMATION_END = getVendorPrefixedEventName('animationend');
  var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
  var ANIMATION_START = getVendorPrefixedEventName('animationstart');
  var TRANSITION_END = getVendorPrefixedEventName('transitionend');

  var topLevelEventsToReactNames = new Map();
  var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
  // the code required to apply the same logic for event prioritization and that of the
  // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
  // duplication (for which there would be quite a bit). For the events that are not needed
  // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
  // array of top level events.
  // Lastly, we ignore prettier so we can keep the formatting sane.
  // prettier-ignore

  var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
  'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
  'focusout', 'blur', // Careful!
  'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
  var otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];


  var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel']; // prettier-ignore

  var continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
  /**
   * Turns
   * ['abort', ...]
   *
   * into
   *
   * topLevelEventsToReactNames = new Map([
   *   ['abort', 'onAbort'],
   * ]);
   *
   * and registers them.
   */

  function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
    // As the event types are in pairs of two, we need to iterate
    // through in twos. The events are in pairs of two to save code
    // and improve init perf of processing this array, as it will
    // result in far fewer object allocations and property accesses
    // if we only use three arrays to process all the categories of
    // instead of tuples.
    for (var i = 0; i < eventTypes.length; i += 2) {
      var topEvent = eventTypes[i];
      var event = eventTypes[i + 1];
      var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
      var reactName = 'on' + capitalizedEvent;
      eventPriorities.set(topEvent, priority);
      topLevelEventsToReactNames.set(topEvent, reactName);
      registerTwoPhaseEvent(reactName, [topEvent]);
    }
  }

  function setEventPriorities(eventTypes, priority) {
    for (var i = 0; i < eventTypes.length; i++) {
      eventPriorities.set(eventTypes[i], priority);
    }
  }

  function getEventPriorityForPluginSystem(domEventName) {
    var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
    // want to warn if we can't detect the priority
    // for the event.

    return priority === undefined ? ContinuousEvent : priority;
  }
  function registerSimpleEvents() {
    registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
    registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
    registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
    setEventPriorities(otherDiscreteEvents, DiscreteEvent);
  }

  var Scheduler_now = Scheduler.unstable_now;

  {
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
      {
        throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
      }
    }
  }
  // ascending numbers so we can compare them like numbers. They start at 90 to
  // avoid clashing with Scheduler's priorities.

  var ImmediatePriority = 99;
  var UserBlockingPriority = 98;
  var NormalPriority = 97;
  var LowPriority = 96;
  var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

  var NoPriority = 90;
  var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

  var SyncLanePriority = 15;
  var SyncBatchedLanePriority = 14;
  var InputDiscreteHydrationLanePriority = 13;
  var InputDiscreteLanePriority = 12;
  var InputContinuousHydrationLanePriority = 11;
  var InputContinuousLanePriority = 10;
  var DefaultHydrationLanePriority = 9;
  var DefaultLanePriority = 8;
  var TransitionHydrationPriority = 7;
  var TransitionPriority = 6;
  var RetryLanePriority = 5;
  var SelectiveHydrationLanePriority = 4;
  var IdleHydrationLanePriority = 3;
  var IdleLanePriority = 2;
  var OffscreenLanePriority = 1;
  var NoLanePriority = 0;
  var TotalLanes = 31;
  var NoLanes =
  /*                        */
  0;
  var NoLane =
  /*                          */
  0;
  var SyncLane =
  /*                        */
  1;
  var SyncBatchedLane =
  /*                 */
  2;
  var InputDiscreteHydrationLane =
  /*      */
  4;
  var InputDiscreteLanes =
  /*                    */
  24;
  var InputContinuousHydrationLane =
  /*           */
  32;
  var InputContinuousLanes =
  /*                  */
  192;
  var DefaultHydrationLane =
  /*            */
  256;
  var DefaultLanes =
  /*                   */
  3584;
  var TransitionHydrationLane =
  /*                */
  4096;
  var TransitionLanes =
  /*                       */
  4186112;
  var RetryLanes =
  /*                            */
  62914560;
  var SomeRetryLane =
  /*                  */
  33554432;
  var SelectiveHydrationLane =
  /*          */
  67108864;
  var NonIdleLanes =
  /*                                 */
  134217727;
  var IdleHydrationLane =
  /*               */
  134217728;
  var IdleLanes =
  /*                             */
  805306368;
  var OffscreenLane =
  /*                   */
  1073741824;
  var NoTimestamp = -1;
  function setCurrentUpdateLanePriority(newLanePriority) {
  } // "Registers" used to "return" multiple values
  // Used by getHighestPriorityLanes and getNextLanes:

  var return_highestLanePriority = DefaultLanePriority;

  function getHighestPriorityLanes(lanes) {
    if ((SyncLane & lanes) !== NoLanes) {
      return_highestLanePriority = SyncLanePriority;
      return SyncLane;
    }

    if ((SyncBatchedLane & lanes) !== NoLanes) {
      return_highestLanePriority = SyncBatchedLanePriority;
      return SyncBatchedLane;
    }

    if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
      return_highestLanePriority = InputDiscreteHydrationLanePriority;
      return InputDiscreteHydrationLane;
    }

    var inputDiscreteLanes = InputDiscreteLanes & lanes;

    if (inputDiscreteLanes !== NoLanes) {
      return_highestLanePriority = InputDiscreteLanePriority;
      return inputDiscreteLanes;
    }

    if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
      return_highestLanePriority = InputContinuousHydrationLanePriority;
      return InputContinuousHydrationLane;
    }

    var inputContinuousLanes = InputContinuousLanes & lanes;

    if (inputContinuousLanes !== NoLanes) {
      return_highestLanePriority = InputContinuousLanePriority;
      return inputContinuousLanes;
    }

    if ((lanes & DefaultHydrationLane) !== NoLanes) {
      return_highestLanePriority = DefaultHydrationLanePriority;
      return DefaultHydrationLane;
    }

    var defaultLanes = DefaultLanes & lanes;

    if (defaultLanes !== NoLanes) {
      return_highestLanePriority = DefaultLanePriority;
      return defaultLanes;
    }

    if ((lanes & TransitionHydrationLane) !== NoLanes) {
      return_highestLanePriority = TransitionHydrationPriority;
      return TransitionHydrationLane;
    }

    var transitionLanes = TransitionLanes & lanes;

    if (transitionLanes !== NoLanes) {
      return_highestLanePriority = TransitionPriority;
      return transitionLanes;
    }

    var retryLanes = RetryLanes & lanes;

    if (retryLanes !== NoLanes) {
      return_highestLanePriority = RetryLanePriority;
      return retryLanes;
    }

    if (lanes & SelectiveHydrationLane) {
      return_highestLanePriority = SelectiveHydrationLanePriority;
      return SelectiveHydrationLane;
    }

    if ((lanes & IdleHydrationLane) !== NoLanes) {
      return_highestLanePriority = IdleHydrationLanePriority;
      return IdleHydrationLane;
    }

    var idleLanes = IdleLanes & lanes;

    if (idleLanes !== NoLanes) {
      return_highestLanePriority = IdleLanePriority;
      return idleLanes;
    }

    if ((OffscreenLane & lanes) !== NoLanes) {
      return_highestLanePriority = OffscreenLanePriority;
      return OffscreenLane;
    }

    {
      error('Should have found matching lanes. This is a bug in React.');
    } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


    return_highestLanePriority = DefaultLanePriority;
    return lanes;
  }

  function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
    switch (schedulerPriorityLevel) {
      case ImmediatePriority:
        return SyncLanePriority;

      case UserBlockingPriority:
        return InputContinuousLanePriority;

      case NormalPriority:
      case LowPriority:
        // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
        return DefaultLanePriority;

      case IdlePriority:
        return IdleLanePriority;

      default:
        return NoLanePriority;
    }
  }
  function lanePriorityToSchedulerPriority(lanePriority) {
    switch (lanePriority) {
      case SyncLanePriority:
      case SyncBatchedLanePriority:
        return ImmediatePriority;

      case InputDiscreteHydrationLanePriority:
      case InputDiscreteLanePriority:
      case InputContinuousHydrationLanePriority:
      case InputContinuousLanePriority:
        return UserBlockingPriority;

      case DefaultHydrationLanePriority:
      case DefaultLanePriority:
      case TransitionHydrationPriority:
      case TransitionPriority:
      case SelectiveHydrationLanePriority:
      case RetryLanePriority:
        return NormalPriority;

      case IdleHydrationLanePriority:
      case IdleLanePriority:
      case OffscreenLanePriority:
        return IdlePriority;

      case NoLanePriority:
        return NoPriority;

      default:
        {
          {
            throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
          }
        }

    }
  }
  function getNextLanes(root, wipLanes) {
    // Early bailout if there's no pending work left.
    var pendingLanes = root.pendingLanes;

    if (pendingLanes === NoLanes) {
      return_highestLanePriority = NoLanePriority;
      return NoLanes;
    }

    var nextLanes = NoLanes;
    var nextLanePriority = NoLanePriority;
    var expiredLanes = root.expiredLanes;
    var suspendedLanes = root.suspendedLanes;
    var pingedLanes = root.pingedLanes; // Check if any work has expired.

    if (expiredLanes !== NoLanes) {
      nextLanes = expiredLanes;
      nextLanePriority = return_highestLanePriority = SyncLanePriority;
    } else {
      // Do not work on any idle work until all the non-idle work has finished,
      // even if the work is suspended.
      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

      if (nonIdlePendingLanes !== NoLanes) {
        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

        if (nonIdleUnblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          nextLanePriority = return_highestLanePriority;
        } else {
          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

          if (nonIdlePingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            nextLanePriority = return_highestLanePriority;
          }
        }
      } else {
        // The only remaining work is Idle.
        var unblockedLanes = pendingLanes & ~suspendedLanes;

        if (unblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(unblockedLanes);
          nextLanePriority = return_highestLanePriority;
        } else {
          if (pingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(pingedLanes);
            nextLanePriority = return_highestLanePriority;
          }
        }
      }
    }

    if (nextLanes === NoLanes) {
      // This should only be reachable if we're suspended
      // TODO: Consider warning in this path if a fallback timer is not scheduled.
      return NoLanes;
    } // If there are higher priority lanes, we'll include them even if they
    // are suspended.


    nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
    // it and we'll lose our progress. We should only do this if the new lanes are
    // higher priority.

    if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
    // bother waiting until the root is complete.
    (wipLanes & suspendedLanes) === NoLanes) {
      getHighestPriorityLanes(wipLanes);
      var wipLanePriority = return_highestLanePriority;

      if (nextLanePriority <= wipLanePriority) {
        return wipLanes;
      } else {
        return_highestLanePriority = nextLanePriority;
      }
    } // Check for entangled lanes and add them to the batch.
    //
    // A lane is said to be entangled with another when it's not allowed to render
    // in a batch that does not also include the other lane. Typically we do this
    // when multiple updates have the same source, and we only want to respond to
    // the most recent event from that source.
    //
    // Note that we apply entanglements *after* checking for partial work above.
    // This means that if a lane is entangled during an interleaved event while
    // it's already rendering, we won't interrupt it. This is intentional, since
    // entanglement is usually "best effort": we'll try our best to render the
    // lanes in the same batch, but it's not worth throwing out partially
    // completed work in order to do it.
    //
    // For those exceptions where entanglement is semantically important, like
    // useMutableSource, we should ensure that there is no partial work at the
    // time we apply the entanglement.


    var entangledLanes = root.entangledLanes;

    if (entangledLanes !== NoLanes) {
      var entanglements = root.entanglements;
      var lanes = nextLanes & entangledLanes;

      while (lanes > 0) {
        var index = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index;
        nextLanes |= entanglements[index];
        lanes &= ~lane;
      }
    }

    return nextLanes;
  }
  function getMostRecentEventTime(root, lanes) {
    var eventTimes = root.eventTimes;
    var mostRecentEventTime = NoTimestamp;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      var eventTime = eventTimes[index];

      if (eventTime > mostRecentEventTime) {
        mostRecentEventTime = eventTime;
      }

      lanes &= ~lane;
    }

    return mostRecentEventTime;
  }

  function computeExpirationTime(lane, currentTime) {
    // TODO: Expiration heuristic is constant per lane, so could use a map.
    getHighestPriorityLanes(lane);
    var priority = return_highestLanePriority;

    if (priority >= InputContinuousLanePriority) {
      // User interactions should expire slightly more quickly.
      //
      // NOTE: This is set to the corresponding constant as in Scheduler.js. When
      // we made it larger, a product metric in www regressed, suggesting there's
      // a user interaction that's being starved by a series of synchronous
      // updates. If that theory is correct, the proper solution is to fix the
      // starvation. However, this scenario supports the idea that expiration
      // times are an important safeguard when starvation does happen.
      //
      // Also note that, in the case of user input specifically, this will soon no
      // longer be an issue because we plan to make user input synchronous by
      // default (until you enter `startTransition`, of course.)
      //
      // If weren't planning to make these updates synchronous soon anyway, I
      // would probably make this number a configurable parameter.
      return currentTime + 250;
    } else if (priority >= TransitionPriority) {
      return currentTime + 5000;
    } else {
      // Anything idle priority or lower should never expire.
      return NoTimestamp;
    }
  }

  function markStarvedLanesAsExpired(root, currentTime) {
    // TODO: This gets called every time we yield. We can optimize by storing
    // the earliest expiration time on the root. Then use that to quickly bail out
    // of this function.
    var pendingLanes = root.pendingLanes;
    var suspendedLanes = root.suspendedLanes;
    var pingedLanes = root.pingedLanes;
    var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
    // expiration time. If so, we'll assume the update is being starved and mark
    // it as expired to force it to finish.

    var lanes = pendingLanes;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      var expirationTime = expirationTimes[index];

      if (expirationTime === NoTimestamp) {
        // Found a pending lane with no expiration time. If it's not suspended, or
        // if it's pinged, assume it's CPU-bound. Compute a new expiration time
        // using the current time.
        if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
          // Assumes timestamps are monotonically increasing.
          expirationTimes[index] = computeExpirationTime(lane, currentTime);
        }
      } else if (expirationTime <= currentTime) {
        // This lane expired
        root.expiredLanes |= lane;
      }

      lanes &= ~lane;
    }
  } // This returns the highest priority pending lanes regardless of whether they
  function getLanesToRetrySynchronouslyOnError(root) {
    var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

    if (everythingButOffscreen !== NoLanes) {
      return everythingButOffscreen;
    }

    if (everythingButOffscreen & OffscreenLane) {
      return OffscreenLane;
    }

    return NoLanes;
  }
  function returnNextLanesPriority() {
    return return_highestLanePriority;
  }
  function includesNonIdleWork(lanes) {
    return (lanes & NonIdleLanes) !== NoLanes;
  }
  function includesOnlyRetries(lanes) {
    return (lanes & RetryLanes) === lanes;
  }
  function includesOnlyTransitions(lanes) {
    return (lanes & TransitionLanes) === lanes;
  } // To ensure consistency across multiple updates in the same event, this should
  // be a pure function, so that it always returns the same lane for given inputs.

  function findUpdateLane(lanePriority, wipLanes) {
    switch (lanePriority) {
      case NoLanePriority:
        break;

      case SyncLanePriority:
        return SyncLane;

      case SyncBatchedLanePriority:
        return SyncBatchedLane;

      case InputDiscreteLanePriority:
        {
          var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

          if (_lane === NoLane) {
            // Shift to the next priority level
            return findUpdateLane(InputContinuousLanePriority, wipLanes);
          }

          return _lane;
        }

      case InputContinuousLanePriority:
        {
          var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

          if (_lane2 === NoLane) {
            // Shift to the next priority level
            return findUpdateLane(DefaultLanePriority, wipLanes);
          }

          return _lane2;
        }

      case DefaultLanePriority:
        {
          var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

          if (_lane3 === NoLane) {
            // If all the default lanes are already being worked on, look for a
            // lane in the transition range.
            _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

            if (_lane3 === NoLane) {
              // All the transition lanes are taken, too. This should be very
              // rare, but as a last resort, pick a default lane. This will have
              // the effect of interrupting the current work-in-progress render.
              _lane3 = pickArbitraryLane(DefaultLanes);
            }
          }

          return _lane3;
        }

      case TransitionPriority: // Should be handled by findTransitionLane instead

      case RetryLanePriority:
        // Should be handled by findRetryLane instead
        break;

      case IdleLanePriority:
        var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

        if (lane === NoLane) {
          lane = pickArbitraryLane(IdleLanes);
        }

        return lane;
    }

    {
      {
        throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
      }
    }
  } // To ensure consistency across multiple updates in the same event, this should
  // be pure function, so that it always returns the same lane for given inputs.

  function findTransitionLane(wipLanes, pendingLanes) {
    // First look for lanes that are completely unclaimed, i.e. have no
    // pending work.
    var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

    if (lane === NoLane) {
      // If all lanes have pending work, look for a lane that isn't currently
      // being worked on.
      lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

      if (lane === NoLane) {
        // If everything is being worked on, pick any lane. This has the
        // effect of interrupting the current work-in-progress.
        lane = pickArbitraryLane(TransitionLanes);
      }
    }

    return lane;
  } // To ensure consistency across multiple updates in the same event, this should
  // be pure function, so that it always returns the same lane for given inputs.

  function findRetryLane(wipLanes) {
    // This is a fork of `findUpdateLane` designed specifically for Suspense
    // "retries" — a special update that attempts to flip a Suspense boundary
    // from its placeholder state to its primary/resolved state.
    var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

    if (lane === NoLane) {
      lane = pickArbitraryLane(RetryLanes);
    }

    return lane;
  }

  function getHighestPriorityLane(lanes) {
    return lanes & -lanes;
  }

  function getLowestPriorityLane(lanes) {
    // This finds the most significant non-zero bit.
    var index = 31 - clz32(lanes);
    return index < 0 ? NoLanes : 1 << index;
  }

  function getEqualOrHigherPriorityLanes(lanes) {
    return (getLowestPriorityLane(lanes) << 1) - 1;
  }

  function pickArbitraryLane(lanes) {
    // This wrapper function gets inlined. Only exists so to communicate that it
    // doesn't matter which bit is selected; you can pick any bit without
    // affecting the algorithms where its used. Here I'm using
    // getHighestPriorityLane because it requires the fewest operations.
    return getHighestPriorityLane(lanes);
  }

  function pickArbitraryLaneIndex(lanes) {
    return 31 - clz32(lanes);
  }

  function laneToIndex(lane) {
    return pickArbitraryLaneIndex(lane);
  }

  function includesSomeLane(a, b) {
    return (a & b) !== NoLanes;
  }
  function isSubsetOfLanes(set, subset) {
    return (set & subset) === subset;
  }
  function mergeLanes(a, b) {
    return a | b;
  }
  function removeLanes(set, subset) {
    return set & ~subset;
  } // Seems redundant, but it changes the type from a single lane (used for
  // updates) to a group of lanes (used for flushing work).

  function laneToLanes(lane) {
    return lane;
  }
  function higherPriorityLane(a, b) {
    // This works because the bit ranges decrease in priority as you go left.
    return a !== NoLane && a < b ? a : b;
  }
  function createLaneMap(initial) {
    // Intentionally pushing one by one.
    // https://v8.dev/blog/elements-kinds#avoid-creating-holes
    var laneMap = [];

    for (var i = 0; i < TotalLanes; i++) {
      laneMap.push(initial);
    }

    return laneMap;
  }
  function markRootUpdated(root, updateLane, eventTime) {
    root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
    // it's not practical to try every single possible combination. We need a
    // heuristic to decide which lanes to attempt to render, and in which batches.
    // For now, we use the same heuristic as in the old ExpirationTimes model:
    // retry any lane at equal or lower priority, but don't try updates at higher
    // priority without also including the lower priority updates. This works well
    // when considering updates across different priority levels, but isn't
    // sufficient for updates within the same priority, since we want to treat
    // those updates as parallel.
    // Unsuspend any update at equal or lower priority.

    var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111

    root.suspendedLanes &= higherPriorityLanes;
    root.pingedLanes &= higherPriorityLanes;
    var eventTimes = root.eventTimes;
    var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
    // recent event, and we assume time is monotonically increasing.

    eventTimes[index] = eventTime;
  }
  function markRootSuspended(root, suspendedLanes) {
    root.suspendedLanes |= suspendedLanes;
    root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

    var expirationTimes = root.expirationTimes;
    var lanes = suspendedLanes;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      expirationTimes[index] = NoTimestamp;
      lanes &= ~lane;
    }
  }
  function markRootPinged(root, pingedLanes, eventTime) {
    root.pingedLanes |= root.suspendedLanes & pingedLanes;
  }
  function markDiscreteUpdatesExpired(root) {
    root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
  }
  function hasDiscreteLanes(lanes) {
    return (lanes & InputDiscreteLanes) !== NoLanes;
  }
  function markRootMutableRead(root, updateLane) {
    root.mutableReadLanes |= updateLane & root.pendingLanes;
  }
  function markRootFinished(root, remainingLanes) {
    var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
    root.pendingLanes = remainingLanes; // Let's try everything again

    root.suspendedLanes = 0;
    root.pingedLanes = 0;
    root.expiredLanes &= remainingLanes;
    root.mutableReadLanes &= remainingLanes;
    root.entangledLanes &= remainingLanes;
    var entanglements = root.entanglements;
    var eventTimes = root.eventTimes;
    var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

    var lanes = noLongerPendingLanes;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      entanglements[index] = NoLanes;
      eventTimes[index] = NoTimestamp;
      expirationTimes[index] = NoTimestamp;
      lanes &= ~lane;
    }
  }
  function markRootEntangled(root, entangledLanes) {
    root.entangledLanes |= entangledLanes;
    var entanglements = root.entanglements;
    var lanes = entangledLanes;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      entanglements[index] |= entangledLanes;
      lanes &= ~lane;
    }
  }
  var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
  // Based on:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

  var log = Math.log;
  var LN2 = Math.LN2;

  function clz32Fallback(lanes) {
    if (lanes === 0) {
      return 32;
    }

    return 31 - (log(lanes) / LN2 | 0) | 0;
  }

  // Intentionally not named imports because Rollup would use dynamic dispatch for
  var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority,
      runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

  var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
  // We'd like to remove this but it's not clear if this is safe.

  function setEnabled(enabled) {
    _enabled = !!enabled;
  }
  function isEnabled() {
    return _enabled;
  }
  function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
    var eventPriority = getEventPriorityForPluginSystem(domEventName);
    var listenerWrapper;

    switch (eventPriority) {
      case DiscreteEvent:
        listenerWrapper = dispatchDiscreteEvent;
        break;

      case UserBlockingEvent:
        listenerWrapper = dispatchUserBlockingUpdate;
        break;

      case ContinuousEvent:
      default:
        listenerWrapper = dispatchEvent;
        break;
    }

    return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
  }

  function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
    {
      flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
    }

    discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
  }

  function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
    {
      runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
  }

  function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
    if (!_enabled) {
      return;
    }

    var allowReplay = true;

    {
      // TODO: replaying capture phase events is currently broken
      // because we used to do it during top-level native bubble handlers
      // but now we use different bubble and capture handlers.
      // In eager mode, we attach capture listeners early, so we need
      // to filter them out until we fix the logic to handle them correctly.
      // This could've been outside the flag but I put it inside to reduce risk.
      allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
    }

    if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
      // If we already have a queue of discrete events, and this is another discrete
      // event, then we can't dispatch it regardless of its target, since they
      // need to dispatch in order.
      queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
      domEventName, eventSystemFlags, targetContainer, nativeEvent);
      return;
    }

    var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

    if (blockedOn === null) {
      // We successfully dispatched this event.
      if (allowReplay) {
        clearIfContinuousEvent(domEventName, nativeEvent);
      }

      return;
    }

    if (allowReplay) {
      if (isReplayableDiscreteEvent(domEventName)) {
        // This this to be replayed later once the target is available.
        queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        return;
      }

      if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
        return;
      } // We need to clear only if we didn't queue because
      // queueing is accummulative.


      clearIfContinuousEvent(domEventName, nativeEvent);
    } // This is not replayable so we'll invoke it but without a target,
    // in case the event system needs to trace it.


    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
  } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

  function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
    // TODO: Warn if _enabled is false.
    var nativeEventTarget = getEventTarget(nativeEvent);
    var targetInst = getClosestInstanceFromNode(nativeEventTarget);

    if (targetInst !== null) {
      var nearestMounted = getNearestMountedFiber(targetInst);

      if (nearestMounted === null) {
        // This tree has been unmounted already. Dispatch without a target.
        targetInst = null;
      } else {
        var tag = nearestMounted.tag;

        if (tag === SuspenseComponent) {
          var instance = getSuspenseInstanceFromFiber(nearestMounted);

          if (instance !== null) {
            // Queue the event to be replayed later. Abort dispatching since we
            // don't want this event dispatched twice through the event system.
            // TODO: If this is the first discrete event in the queue. Schedule an increased
            // priority for this boundary.
            return instance;
          } // This shouldn't happen, something went wrong but to avoid blocking
          // the whole system, dispatch the event without a target.
          // TODO: Warn.


          targetInst = null;
        } else if (tag === HostRoot) {
          var root = nearestMounted.stateNode;

          if (root.hydrate) {
            // If this happens during a replay something went wrong and it might block
            // the whole system.
            return getContainerFromFiber(nearestMounted);
          }

          targetInst = null;
        } else if (nearestMounted !== targetInst) {
          // If we get an event (ex: img onload) before committing that
          // component's mount, ignore it for now (that is, treat it as if it was an
          // event on a non-React tree). We might also consider queueing events and
          // dispatching them after the mount.
          targetInst = null;
        }
      }
    }

    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.

    return null;
  }

  function addEventBubbleListener(target, eventType, listener) {
    target.addEventListener(eventType, listener, false);
    return listener;
  }
  function addEventCaptureListener(target, eventType, listener) {
    target.addEventListener(eventType, listener, true);
    return listener;
  }
  function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
    target.addEventListener(eventType, listener, {
      capture: true,
      passive: passive
    });
    return listener;
  }
  function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
    target.addEventListener(eventType, listener, {
      passive: passive
    });
    return listener;
  }

  /**
   * These variables store information about text content of a target node,
   * allowing comparison of content before and after a given event.
   *
   * Identify the node where selection currently begins, then observe
   * both its text content and its current position in the DOM. Since the
   * browser may natively replace the target node during composition, we can
   * use its position to find its replacement.
   *
   *
   */
  var root = null;
  var startText = null;
  var fallbackText = null;
  function initialize(nativeEventTarget) {
    root = nativeEventTarget;
    startText = getText();
    return true;
  }
  function reset() {
    root = null;
    startText = null;
    fallbackText = null;
  }
  function getData() {
    if (fallbackText) {
      return fallbackText;
    }

    var start;
    var startValue = startText;
    var startLength = startValue.length;
    var end;
    var endValue = getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;

    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    fallbackText = endValue.slice(start, sliceTail);
    return fallbackText;
  }
  function getText() {
    if ('value' in root) {
      return root.value;
    }

    return root.textContent;
  }

  /**
   * `charCode` represents the actual "character code" and is safe to use with
   * `String.fromCharCode`. As such, only keys that correspond to printable
   * characters produce a valid `charCode`, the only exception to this is Enter.
   * The Tab-key is considered non-printable and does not have a `charCode`,
   * presumably because it does not produce a tab-character in browsers.
   *
   * @param {object} nativeEvent Native browser event.
   * @return {number} Normalized `charCode` property.
   */
  function getEventCharCode(nativeEvent) {
    var charCode;
    var keyCode = nativeEvent.keyCode;

    if ('charCode' in nativeEvent) {
      charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

      if (charCode === 0 && keyCode === 13) {
        charCode = 13;
      }
    } else {
      // IE8 does not implement `charCode`, but `keyCode` has the correct value.
      charCode = keyCode;
    } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
    // report Enter as charCode 10 when ctrl is pressed.


    if (charCode === 10) {
      charCode = 13;
    } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
    // Must not discard the (non-)printable Enter-key.


    if (charCode >= 32 || charCode === 13) {
      return charCode;
    }

    return 0;
  }

  function functionThatReturnsTrue() {
    return true;
  }

  function functionThatReturnsFalse() {
    return false;
  } // This is intentionally a factory so that we have different returned constructors.
  // If we had a single constructor, it would be megamorphic and engines would deopt.


  function createSyntheticEvent(Interface) {
    /**
     * Synthetic events are dispatched by event plugins, typically in response to a
     * top-level event delegation handler.
     *
     * These systems should generally use pooling to reduce the frequency of garbage
     * collection. The system should check `isPersistent` to determine whether the
     * event should be released into the pool after being dispatched. Users that
     * need a persisted event should invoke `persist`.
     *
     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
     * normalizing browser quirks. Subclasses do not necessarily have to implement a
     * DOM interface; custom application-specific events can also subclass this.
     */
    function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
      this._reactName = reactName;
      this._targetInst = targetInst;
      this.type = reactEventType;
      this.nativeEvent = nativeEvent;
      this.target = nativeEventTarget;
      this.currentTarget = null;

      for (var _propName in Interface) {
        if (!Interface.hasOwnProperty(_propName)) {
          continue;
        }

        var normalize = Interface[_propName];

        if (normalize) {
          this[_propName] = normalize(nativeEvent);
        } else {
          this[_propName] = nativeEvent[_propName];
        }
      }

      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

      if (defaultPrevented) {
        this.isDefaultPrevented = functionThatReturnsTrue;
      } else {
        this.isDefaultPrevented = functionThatReturnsFalse;
      }

      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }

    _assign(SyntheticBaseEvent.prototype, {
      preventDefault: function () {
        this.defaultPrevented = true;
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.preventDefault) {
          event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
        } else if (typeof event.returnValue !== 'unknown') {
          event.returnValue = false;
        }

        this.isDefaultPrevented = functionThatReturnsTrue;
      },
      stopPropagation: function () {
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.stopPropagation) {
          event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
        } else if (typeof event.cancelBubble !== 'unknown') {
          // The ChangeEventPlugin registers a "propertychange" event for
          // IE. This event does not support bubbling or cancelling, and
          // any references to cancelBubble throw "Member not found".  A
          // typeof check of "unknown" circumvents this issue (and is also
          // IE specific).
          event.cancelBubble = true;
        }

        this.isPropagationStopped = functionThatReturnsTrue;
      },

      /**
       * We release all dispatched `SyntheticEvent`s after each event loop, adding
       * them back into the pool. This allows a way to hold onto a reference that
       * won't be added back into the pool.
       */
      persist: function () {// Modern event system doesn't use pooling.
      },

      /**
       * Checks if this event should be released back into the pool.
       *
       * @return {boolean} True if this should not be released, false otherwise.
       */
      isPersistent: functionThatReturnsTrue
    });

    return SyntheticBaseEvent;
  }
  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */


  var EventInterface = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function (event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
  };
  var SyntheticEvent = createSyntheticEvent(EventInterface);

  var UIEventInterface = _assign({}, EventInterface, {
    view: 0,
    detail: 0
  });

  var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
  var lastMovementX;
  var lastMovementY;
  var lastMouseEvent;

  function updateMouseMovementPolyfillState(event) {
    if (event !== lastMouseEvent) {
      if (lastMouseEvent && event.type === 'mousemove') {
        lastMovementX = event.screenX - lastMouseEvent.screenX;
        lastMovementY = event.screenY - lastMouseEvent.screenY;
      } else {
        lastMovementX = 0;
        lastMovementY = 0;
      }

      lastMouseEvent = event;
    }
  }
  /**
   * @interface MouseEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */


  var MouseEventInterface = _assign({}, UIEventInterface, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: getEventModifierState,
    button: 0,
    buttons: 0,
    relatedTarget: function (event) {
      if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
      return event.relatedTarget;
    },
    movementX: function (event) {
      if ('movementX' in event) {
        return event.movementX;
      }

      updateMouseMovementPolyfillState(event);
      return lastMovementX;
    },
    movementY: function (event) {
      if ('movementY' in event) {
        return event.movementY;
      } // Don't need to call updateMouseMovementPolyfillState() here
      // because it's guaranteed to have already run when movementX
      // was copied.


      return lastMovementY;
    }
  });

  var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
  /**
   * @interface DragEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */

  var DragEventInterface = _assign({}, MouseEventInterface, {
    dataTransfer: 0
  });

  var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
  /**
   * @interface FocusEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */

  var FocusEventInterface = _assign({}, UIEventInterface, {
    relatedTarget: 0
  });

  var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
  /**
   * @interface Event
   * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
   */

  var AnimationEventInterface = _assign({}, EventInterface, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  });

  var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
  /**
   * @interface Event
   * @see http://www.w3.org/TR/clipboard-apis/
   */

  var ClipboardEventInterface = _assign({}, EventInterface, {
    clipboardData: function (event) {
      return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
    }
  });

  var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
  /**
   * @interface Event
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
   */

  var CompositionEventInterface = _assign({}, EventInterface, {
    data: 0
  });

  var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
  /**
   * @interface Event
   * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
   *      /#events-inputevents
   */
  // Happens to share the same list for now.

  var SyntheticInputEvent = SyntheticCompositionEvent;
  /**
   * Normalization of deprecated HTML5 `key` values
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */

  var normalizeKey = {
    Esc: 'Escape',
    Spacebar: ' ',
    Left: 'ArrowLeft',
    Up: 'ArrowUp',
    Right: 'ArrowRight',
    Down: 'ArrowDown',
    Del: 'Delete',
    Win: 'OS',
    Menu: 'ContextMenu',
    Apps: 'ContextMenu',
    Scroll: 'ScrollLock',
    MozPrintableKey: 'Unidentified'
  };
  /**
   * Translation from legacy `keyCode` to HTML5 `key`
   * Only special keys supported, all others depend on keyboard layout or browser
   * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
   */

  var translateToKey = {
    '8': 'Backspace',
    '9': 'Tab',
    '12': 'Clear',
    '13': 'Enter',
    '16': 'Shift',
    '17': 'Control',
    '18': 'Alt',
    '19': 'Pause',
    '20': 'CapsLock',
    '27': 'Escape',
    '32': ' ',
    '33': 'PageUp',
    '34': 'PageDown',
    '35': 'End',
    '36': 'Home',
    '37': 'ArrowLeft',
    '38': 'ArrowUp',
    '39': 'ArrowRight',
    '40': 'ArrowDown',
    '45': 'Insert',
    '46': 'Delete',
    '112': 'F1',
    '113': 'F2',
    '114': 'F3',
    '115': 'F4',
    '116': 'F5',
    '117': 'F6',
    '118': 'F7',
    '119': 'F8',
    '120': 'F9',
    '121': 'F10',
    '122': 'F11',
    '123': 'F12',
    '144': 'NumLock',
    '145': 'ScrollLock',
    '224': 'Meta'
  };
  /**
   * @param {object} nativeEvent Native browser event.
   * @return {string} Normalized `key` property.
   */

  function getEventKey(nativeEvent) {
    if (nativeEvent.key) {
      // Normalize inconsistent values reported by browsers due to
      // implementations of a working draft specification.
      // FireFox implements `key` but returns `MozPrintableKey` for all
      // printable characters (normalized to `Unidentified`), ignore it.
      var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

      if (key !== 'Unidentified') {
        return key;
      }
    } // Browser does not implement `key`, polyfill as much of it as we can.


    if (nativeEvent.type === 'keypress') {
      var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
      // thus be captured by `keypress`, no other non-printable key should.

      return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
    }

    if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
      // While user keyboard layout determines the actual meaning of each
      // `keyCode` value, almost all function keys have a universal value.
      return translateToKey[nativeEvent.keyCode] || 'Unidentified';
    }

    return '';
  }
  /**
   * Translation from modifier key to the associated property in the event.
   * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
   */


  var modifierKeyToProp = {
    Alt: 'altKey',
    Control: 'ctrlKey',
    Meta: 'metaKey',
    Shift: 'shiftKey'
  }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
  // getModifierState. If getModifierState is not supported, we map it to a set of
  // modifier keys exposed by the event. In this case, Lock-keys are not supported.

  function modifierStateGetter(keyArg) {
    var syntheticEvent = this;
    var nativeEvent = syntheticEvent.nativeEvent;

    if (nativeEvent.getModifierState) {
      return nativeEvent.getModifierState(keyArg);
    }

    var keyProp = modifierKeyToProp[keyArg];
    return keyProp ? !!nativeEvent[keyProp] : false;
  }

  function getEventModifierState(nativeEvent) {
    return modifierStateGetter;
  }
  /**
   * @interface KeyboardEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */


  var KeyboardEventInterface = _assign({}, UIEventInterface, {
    key: getEventKey,
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: getEventModifierState,
    // Legacy Interface
    charCode: function (event) {
      // `charCode` is the result of a KeyPress event and represents the value of
      // the actual printable character.
      // KeyPress is deprecated, but its replacement is not yet final and not
      // implemented in any major browser. Only KeyPress has charCode.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }

      return 0;
    },
    keyCode: function (event) {
      // `keyCode` is the result of a KeyDown/Up event and represents the value of
      // physical keyboard key.
      // The actual meaning of the value depends on the users' keyboard layout
      // which cannot be detected. Assuming that it is a US keyboard layout
      // provides a surprisingly accurate mapping for US and European users.
      // Due to this, it is left to the user to implement at this time.
      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }

      return 0;
    },
    which: function (event) {
      // `which` is an alias for either `keyCode` or `charCode` depending on the
      // type of the event.
      if (event.type === 'keypress') {
        return getEventCharCode(event);
      }

      if (event.type === 'keydown' || event.type === 'keyup') {
        return event.keyCode;
      }

      return 0;
    }
  });

  var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
  /**
   * @interface PointerEvent
   * @see http://www.w3.org/TR/pointerevents/
   */

  var PointerEventInterface = _assign({}, MouseEventInterface, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
  });

  var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
  /**
   * @interface TouchEvent
   * @see http://www.w3.org/TR/touch-events/
   */

  var TouchEventInterface = _assign({}, UIEventInterface, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: getEventModifierState
  });

  var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
  /**
   * @interface Event
   * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
   * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
   */

  var TransitionEventInterface = _assign({}, EventInterface, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  });

  var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
  /**
   * @interface WheelEvent
   * @see http://www.w3.org/TR/DOM-Level-3-Events/
   */

  var WheelEventInterface = _assign({}, MouseEventInterface, {
    deltaX: function (event) {
      return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
    },
    deltaY: function (event) {
      return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0;
    },
    deltaZ: 0,
    // Browsers without "deltaMode" is reporting in raw wheel delta where one
    // notch on the scroll is always +/- 120, roughly equivalent to pixels.
    // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
    // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
    deltaMode: 0
  });

  var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

  var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

  var START_KEYCODE = 229;
  var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
  var documentMode = null;

  if (canUseDOM && 'documentMode' in document) {
    documentMode = document.documentMode;
  } // Webkit offers a very useful `textInput` event that can be used to
  // directly represent `beforeInput`. The IE `textinput` event is not as
  // useful, so we don't use it.


  var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
  // by the native compositionend event may be incorrect. Japanese ideographic
  // spaces, for instance (\u3000) are not recorded correctly.

  var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
  var SPACEBAR_CODE = 32;
  var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

  function registerEvents() {
    registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
    registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
    registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
    registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  } // Track whether we've ever handled a keypress on the space key.


  var hasSpaceKeypress = false;
  /**
   * Return whether a native keypress event is assumed to be a command.
   * This is required because Firefox fires `keypress` events for key commands
   * (cut, copy, select-all, etc.) even though no character is inserted.
   */

  function isKeypressCommand(nativeEvent) {
    return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey);
  }
  /**
   * Translate native top level events into event types.
   */


  function getCompositionEventType(domEventName) {
    switch (domEventName) {
      case 'compositionstart':
        return 'onCompositionStart';

      case 'compositionend':
        return 'onCompositionEnd';

      case 'compositionupdate':
        return 'onCompositionUpdate';
    }
  }
  /**
   * Does our fallback best-guess model think this event signifies that
   * composition has begun?
   */


  function isFallbackCompositionStart(domEventName, nativeEvent) {
    return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
  }
  /**
   * Does our fallback mode think that this event is the end of composition?
   */


  function isFallbackCompositionEnd(domEventName, nativeEvent) {
    switch (domEventName) {
      case 'keyup':
        // Command keys insert or clear IME input.
        return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

      case 'keydown':
        // Expect IME keyCode on each keydown. If we get any other
        // code we must have exited earlier.
        return nativeEvent.keyCode !== START_KEYCODE;

      case 'keypress':
      case 'mousedown':
      case 'focusout':
        // Events are not possible without cancelling IME.
        return true;

      default:
        return false;
    }
  }
  /**
   * Google Input Tools provides composition data via a CustomEvent,
   * with the `data` property populated in the `detail` object. If this
   * is available on the event object, use it. If not, this is a plain
   * composition event and we have nothing special to extract.
   *
   * @param {object} nativeEvent
   * @return {?string}
   */


  function getDataFromCustomEvent(nativeEvent) {
    var detail = nativeEvent.detail;

    if (typeof detail === 'object' && 'data' in detail) {
      return detail.data;
    }

    return null;
  }
  /**
   * Check if a composition event was triggered by Korean IME.
   * Our fallback mode does not work well with IE's Korean IME,
   * so just use native composition events when Korean IME is used.
   * Although CompositionEvent.locale property is deprecated,
   * it is available in IE, where our fallback mode is enabled.
   *
   * @param {object} nativeEvent
   * @return {boolean}
   */


  function isUsingKoreanIME(nativeEvent) {
    return nativeEvent.locale === 'ko';
  } // Track the current IME composition status, if any.


  var isComposing = false;
  /**
   * @return {?object} A SyntheticCompositionEvent.
   */

  function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
    var eventType;
    var fallbackData;

    if (canUseCompositionEvent) {
      eventType = getCompositionEventType(domEventName);
    } else if (!isComposing) {
      if (isFallbackCompositionStart(domEventName, nativeEvent)) {
        eventType = 'onCompositionStart';
      }
    } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
      eventType = 'onCompositionEnd';
    }

    if (!eventType) {
      return null;
    }

    if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!isComposing && eventType === 'onCompositionStart') {
        isComposing = initialize(nativeEventTarget);
      } else if (eventType === 'onCompositionEnd') {
        if (isComposing) {
          fallbackData = getData();
        }
      }
    }

    var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

    if (listeners.length > 0) {
      var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
      dispatchQueue.push({
        event: event,
        listeners: listeners
      });

      if (fallbackData) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
      } else {
        var customData = getDataFromCustomEvent(nativeEvent);

        if (customData !== null) {
          event.data = customData;
        }
      }
    }
  }

  function getNativeBeforeInputChars(domEventName, nativeEvent) {
    switch (domEventName) {
      case 'compositionend':
        return getDataFromCustomEvent(nativeEvent);

      case 'keypress':
        /**
         * If native `textInput` events are available, our goal is to make
         * use of them. However, there is a special case: the spacebar key.
         * In Webkit, preventing default on a spacebar `textInput` event
         * cancels character insertion, but it *also* causes the browser
         * to fall back to its default spacebar behavior of scrolling the
         * page.
         *
         * Tracking at:
         * https://code.google.com/p/chromium/issues/detail?id=355103
         *
         * To avoid this issue, use the keypress event as if no `textInput`
         * event is available.
         */
        var which = nativeEvent.which;

        if (which !== SPACEBAR_CODE) {
          return null;
        }

        hasSpaceKeypress = true;
        return SPACEBAR_CHAR;

      case 'textInput':
        // Record the characters to be added to the DOM.
        var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
        // it at the keypress level and bail immediately. Android Chrome
        // doesn't give us keycodes, so we need to ignore it.

        if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
          return null;
        }

        return chars;

      default:
        // For other native event types, do nothing.
        return null;
    }
  }
  /**
   * For browsers that do not provide the `textInput` event, extract the
   * appropriate string to use for SyntheticInputEvent.
   */


  function getFallbackBeforeInputChars(domEventName, nativeEvent) {
    // If we are currently composing (IME) and using a fallback to do so,
    // try to extract the composed characters from the fallback object.
    // If composition event is available, we extract a string only at
    // compositionevent, otherwise extract it at fallback events.
    if (isComposing) {
      if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
        var chars = getData();
        reset();
        isComposing = false;
        return chars;
      }

      return null;
    }

    switch (domEventName) {
      case 'paste':
        // If a paste event occurs after a keypress, throw out the input
        // chars. Paste events should not lead to BeforeInput events.
        return null;

      case 'keypress':
        /**
         * As of v27, Firefox may fire keypress events even when no character
         * will be inserted. A few possibilities:
         *
         * - `which` is `0`. Arrow keys, Esc key, etc.
         *
         * - `which` is the pressed key code, but no char is available.
         *   Ex: 'AltGr + d` in Polish. There is no modified character for
         *   this key combination and no character is inserted into the
         *   document, but FF fires the keypress for char code `100` anyway.
         *   No `input` event will occur.
         *
         * - `which` is the pressed key code, but a command combination is
         *   being used. Ex: `Cmd+C`. No character is inserted, and no
         *   `input` event will occur.
         */
        if (!isKeypressCommand(nativeEvent)) {
          // IE fires the `keypress` event when a user types an emoji via
          // Touch keyboard of Windows.  In such a case, the `char` property
          // holds an emoji character like `\uD83D\uDE0A`.  Because its length
          // is 2, the property `which` does not represent an emoji correctly.
          // In such a case, we directly return the `char` property instead of
          // using `which`.
          if (nativeEvent.char && nativeEvent.char.length > 1) {
            return nativeEvent.char;
          } else if (nativeEvent.which) {
            return String.fromCharCode(nativeEvent.which);
          }
        }

        return null;

      case 'compositionend':
        return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

      default:
        return null;
    }
  }
  /**
   * Extract a SyntheticInputEvent for `beforeInput`, based on either native
   * `textInput` or fallback behavior.
   *
   * @return {?object} A SyntheticInputEvent.
   */


  function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
    var chars;

    if (canUseTextInputEvent) {
      chars = getNativeBeforeInputChars(domEventName, nativeEvent);
    } else {
      chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
    } // If no characters are being inserted, no BeforeInput event should
    // be fired.


    if (!chars) {
      return null;
    }

    var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

    if (listeners.length > 0) {
      var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
      dispatchQueue.push({
        event: event,
        listeners: listeners
      });
      event.data = chars;
    }
  }
  /**
   * Create an `onBeforeInput` event to match
   * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
   *
   * This event plugin is based on the native `textInput` event
   * available in Chrome, Safari, Opera, and IE. This event fires after
   * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
   *
   * `beforeInput` is spec'd but not implemented in any browsers, and
   * the `input` event does not provide any useful information about what has
   * actually been added, contrary to the spec. Thus, `textInput` is the best
   * available event to identify the characters that have actually been inserted
   * into the target node.
   *
   * This plugin is also responsible for emitting `composition` events, thus
   * allowing us to share composition fallback code for both `beforeInput` and
   * `composition` event types.
   */


  function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
    extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  }

  /**
   * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
   */
  var supportedInputTypes = {
    color: true,
    date: true,
    datetime: true,
    'datetime-local': true,
    email: true,
    month: true,
    number: true,
    password: true,
    range: true,
    search: true,
    tel: true,
    text: true,
    time: true,
    url: true,
    week: true
  };

  function isTextInputElement(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

    if (nodeName === 'input') {
      return !!supportedInputTypes[elem.type];
    }

    if (nodeName === 'textarea') {
      return true;
    }

    return false;
  }

  /**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   */

  function isEventSupported(eventNameSuffix) {
    if (!canUseDOM) {
      return false;
    }

    var eventName = 'on' + eventNameSuffix;
    var isSupported = (eventName in document);

    if (!isSupported) {
      var element = document.createElement('div');
      element.setAttribute(eventName, 'return;');
      isSupported = typeof element[eventName] === 'function';
    }

    return isSupported;
  }

  function registerEvents$1() {
    registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
  }

  function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
    // Flag this event loop as needing state restore.
    enqueueStateRestore(target);
    var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

    if (listeners.length > 0) {
      var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
      dispatchQueue.push({
        event: event,
        listeners: listeners
      });
    }
  }
  /**
   * For IE shims
   */


  var activeElement = null;
  var activeElementInst = null;
  /**
   * SECTION: handle `change` event
   */

  function shouldUseChangeEvent(elem) {
    var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
  }

  function manualDispatchChangeEvent(nativeEvent) {
    var dispatchQueue = [];
    createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
    // other events and have it go through ReactBrowserEventEmitter. Since it
    // doesn't, we manually listen for the events and so we have to enqueue and
    // process the abstract event manually.
    //
    // Batching is necessary here in order to ensure that all event handlers run
    // before the next rerender (including event handlers attached to ancestor
    // elements instead of directly on the input). Without this, controlled
    // components don't work properly in conjunction with event bubbling because
    // the component is rerendered and the value reverted before all the event
    // handlers can run. See https://github.com/facebook/react/issues/708.

    batchedUpdates(runEventInBatch, dispatchQueue);
  }

  function runEventInBatch(dispatchQueue) {
    processDispatchQueue(dispatchQueue, 0);
  }

  function getInstIfValueChanged(targetInst) {
    var targetNode = getNodeFromInstance(targetInst);

    if (updateValueIfChanged(targetNode)) {
      return targetInst;
    }
  }

  function getTargetInstForChangeEvent(domEventName, targetInst) {
    if (domEventName === 'change') {
      return targetInst;
    }
  }
  /**
   * SECTION: handle `input` event
   */


  var isInputEventSupported = false;

  if (canUseDOM) {
    // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
  }
  /**
   * (For IE <=9) Starts tracking propertychange events on the passed-in element
   * and override the value property so that we can distinguish user events from
   * value changes in JS.
   */


  function startWatchingForValueChange(target, targetInst) {
    activeElement = target;
    activeElementInst = targetInst;
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  }
  /**
   * (For IE <=9) Removes the event listeners from the currently-tracked element,
   * if any exists.
   */


  function stopWatchingForValueChange() {
    if (!activeElement) {
      return;
    }

    activeElement.detachEvent('onpropertychange', handlePropertyChange);
    activeElement = null;
    activeElementInst = null;
  }
  /**
   * (For IE <=9) Handles a propertychange event, sending a `change` event if
   * the value of the active element has changed.
   */


  function handlePropertyChange(nativeEvent) {
    if (nativeEvent.propertyName !== 'value') {
      return;
    }

    if (getInstIfValueChanged(activeElementInst)) {
      manualDispatchChangeEvent(nativeEvent);
    }
  }

  function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
    if (domEventName === 'focusin') {
      // In IE9, propertychange fires for most input events but is buggy and
      // doesn't fire when text is deleted, but conveniently, selectionchange
      // appears to fire in all of the remaining cases so we catch those and
      // forward the event if the value has changed
      // In either case, we don't want to call the event handler if the value
      // is changed from JS so we redefine a setter for `.value` that updates
      // our activeElementValue variable, allowing us to ignore those changes
      //
      // stopWatching() should be a noop here but we call it just in case we
      // missed a blur event somehow.
      stopWatchingForValueChange();
      startWatchingForValueChange(target, targetInst);
    } else if (domEventName === 'focusout') {
      stopWatchingForValueChange();
    }
  } // For IE8 and IE9.


  function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
    if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
      // On the selectionchange event, the target is just document which isn't
      // helpful for us so just check activeElement instead.
      //
      // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
      // propertychange on the first input event after setting `value` from a
      // script and fires only keydown, keypress, keyup. Catching keyup usually
      // gets it and catching keydown lets us fire an event for the first
      // keystroke if user does a key repeat (it'll be a little delayed: right
      // before the second keystroke). Other input methods (e.g., paste) seem to
      // fire selectionchange normally.
      return getInstIfValueChanged(activeElementInst);
    }
  }
  /**
   * SECTION: handle `click` event
   */


  function shouldUseClickEvent(elem) {
    // Use the `click` event to detect changes to checkbox and radio inputs.
    // This approach works across all browsers, whereas `change` does not fire
    // until `blur` in IE8.
    var nodeName = elem.nodeName;
    return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
  }

  function getTargetInstForClickEvent(domEventName, targetInst) {
    if (domEventName === 'click') {
      return getInstIfValueChanged(targetInst);
    }
  }

  function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
    if (domEventName === 'input' || domEventName === 'change') {
      return getInstIfValueChanged(targetInst);
    }
  }

  function handleControlledInputBlur(node) {
    var state = node._wrapperState;

    if (!state || !state.controlled || node.type !== 'number') {
      return;
    }

    {
      // If controlled, assign the value attribute to the current value on blur
      setDefaultValue(node, 'number', node.value);
    }
  }
  /**
   * This plugin creates an `onChange` event that normalizes change events
   * across form elements. This event fires at a time when it's possible to
   * change the element's value without seeing a flicker.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - select
   */


  function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
    var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
    var getTargetInstFunc, handleEventFunc;

    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(domEventName, targetInst);

      if (inst) {
        createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
        return;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(domEventName, targetNode, targetInst);
    } // When blurring, set the value attribute for number inputs


    if (domEventName === 'focusout') {
      handleControlledInputBlur(targetNode);
    }
  }

  function registerEvents$2() {
    registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
    registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
    registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
    registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
  }
  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */


  function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
    var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
    var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
      // If this is an over event with a target, we might have already dispatched
      // the event in the out event of the other target. If this is replayed,
      // then it's because we couldn't dispatch against this target previously
      // so we have to do it now instead.
      var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

      if (related) {
        // If the related node is managed by React, we can assume that we have
        // already dispatched the corresponding events during its mouseout.
        if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
          return;
        }
      }
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return;
    }

    var win; // TODO: why is this nullable in the types but we read from it?

    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;

      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;

    if (isOutEvent) {
      var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

      from = targetInst;
      to = _related ? getClosestInstanceFromNode(_related) : null;

      if (to !== null) {
        var nearestMounted = getNearestMountedFiber(to);

        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
          to = null;
        }
      }
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return;
    }

    var SyntheticEventCtor = SyntheticMouseEvent;
    var leaveEventType = 'onMouseLeave';
    var enterEventType = 'onMouseEnter';
    var eventTypePrefix = 'mouse';

    if (domEventName === 'pointerout' || domEventName === 'pointerover') {
      SyntheticEventCtor = SyntheticPointerEvent;
      leaveEventType = 'onPointerLeave';
      enterEventType = 'onPointerEnter';
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance(from);
    var toNode = to == null ? win : getNodeFromInstance(to);
    var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
    leave.target = fromNode;
    leave.relatedTarget = toNode;
    var enter = null; // We should only process this nativeEvent if we are processing
    // the first ancestor. Next time, we will ignore the event.

    var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

    if (nativeTargetInst === targetInst) {
      var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
      enterEvent.target = toNode;
      enterEvent.relatedTarget = fromNode;
      enter = enterEvent;
    }

    accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
  }

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  function is(x, y) {
    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
    ;
  }

  var objectIs = typeof Object.is === 'function' ? Object.is : is;

  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  /**
   * Performs equality by iterating through keys on an object and returning false
   * when any key has values which are not strictly equal between the arguments.
   * Returns true when the values of all keys are strictly equal.
   */

  function shallowEqual(objA, objB) {
    if (objectIs(objA, objB)) {
      return true;
    }

    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    } // Test for A's keys different from B.


    for (var i = 0; i < keysA.length; i++) {
      if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
        return false;
      }
    }

    return true;
  }

  /**
   * Given any node return the first leaf node without children.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {DOMElement|DOMTextNode}
   */

  function getLeafNode(node) {
    while (node && node.firstChild) {
      node = node.firstChild;
    }

    return node;
  }
  /**
   * Get the next sibling within a container. This will walk up the
   * DOM if a node's siblings have been exhausted.
   *
   * @param {DOMElement|DOMTextNode} node
   * @return {?DOMElement|DOMTextNode}
   */


  function getSiblingNode(node) {
    while (node) {
      if (node.nextSibling) {
        return node.nextSibling;
      }

      node = node.parentNode;
    }
  }
  /**
   * Get object describing the nodes which contain characters at offset.
   *
   * @param {DOMElement|DOMTextNode} root
   * @param {number} offset
   * @return {?object}
   */


  function getNodeForCharacterOffset(root, offset) {
    var node = getLeafNode(root);
    var nodeStart = 0;
    var nodeEnd = 0;

    while (node) {
      if (node.nodeType === TEXT_NODE) {
        nodeEnd = nodeStart + node.textContent.length;

        if (nodeStart <= offset && nodeEnd >= offset) {
          return {
            node: node,
            offset: offset - nodeStart
          };
        }

        nodeStart = nodeEnd;
      }

      node = getLeafNode(getSiblingNode(node));
    }
  }

  /**
   * @param {DOMElement} outerNode
   * @return {?object}
   */

  function getOffsets(outerNode) {
    var ownerDocument = outerNode.ownerDocument;
    var win = ownerDocument && ownerDocument.defaultView || window;
    var selection = win.getSelection && win.getSelection();

    if (!selection || selection.rangeCount === 0) {
      return null;
    }

    var anchorNode = selection.anchorNode,
        anchorOffset = selection.anchorOffset,
        focusNode = selection.focusNode,
        focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
    // up/down buttons on an <input type="number">. Anonymous divs do not seem to
    // expose properties, triggering a "Permission denied error" if any of its
    // properties are accessed. The only seemingly possible way to avoid erroring
    // is to access a property that typically works for non-anonymous divs and
    // catch any error that may otherwise arise. See
    // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

    try {
      /* eslint-disable no-unused-expressions */
      anchorNode.nodeType;
      focusNode.nodeType;
      /* eslint-enable no-unused-expressions */
    } catch (e) {
      return null;
    }

    return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
  }
  /**
   * Returns {start, end} where `start` is the character/codepoint index of
   * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
   * `end` is the index of (focusNode, focusOffset).
   *
   * Returns null if you pass in garbage input but we should probably just crash.
   *
   * Exported only for testing.
   */

  function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
    var length = 0;
    var start = -1;
    var end = -1;
    var indexWithinAnchor = 0;
    var indexWithinFocus = 0;
    var node = outerNode;
    var parentNode = null;

    outer: while (true) {
      var next = null;

      while (true) {
        if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
          start = length + anchorOffset;
        }

        if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
          end = length + focusOffset;
        }

        if (node.nodeType === TEXT_NODE) {
          length += node.nodeValue.length;
        }

        if ((next = node.firstChild) === null) {
          break;
        } // Moving from `node` to its first child `next`.


        parentNode = node;
        node = next;
      }

      while (true) {
        if (node === outerNode) {
          // If `outerNode` has children, this is always the second time visiting
          // it. If it has no children, this is still the first loop, and the only
          // valid selection is anchorNode and focusNode both equal to this node
          // and both offsets 0, in which case we will have handled above.
          break outer;
        }

        if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
          start = length;
        }

        if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
          end = length;
        }

        if ((next = node.nextSibling) !== null) {
          break;
        }

        node = parentNode;
        parentNode = node.parentNode;
      } // Moving from `node` to its next sibling `next`.


      node = next;
    }

    if (start === -1 || end === -1) {
      // This should never happen. (Would happen if the anchor/focus nodes aren't
      // actually inside the passed-in node.)
      return null;
    }

    return {
      start: start,
      end: end
    };
  }
  /**
   * In modern non-IE browsers, we can support both forward and backward
   * selections.
   *
   * Note: IE10+ supports the Selection object, but it does not support
   * the `extend` method, which means that even in modern IE, it's not possible
   * to programmatically create a backward selection. Thus, for all IE
   * versions, we use the old IE API to create our selections.
   *
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */

  function setOffsets(node, offsets) {
    var doc = node.ownerDocument || document;
    var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
    // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
    // fails when pasting 100+ items)

    if (!win.getSelection) {
      return;
    }

    var selection = win.getSelection();
    var length = node.textContent.length;
    var start = Math.min(offsets.start, length);
    var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
    // Flip backward selections, so we can set with a single range.

    if (!selection.extend && start > end) {
      var temp = end;
      end = start;
      start = temp;
    }

    var startMarker = getNodeForCharacterOffset(node, start);
    var endMarker = getNodeForCharacterOffset(node, end);

    if (startMarker && endMarker) {
      if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
        return;
      }

      var range = doc.createRange();
      range.setStart(startMarker.node, startMarker.offset);
      selection.removeAllRanges();

      if (start > end) {
        selection.addRange(range);
        selection.extend(endMarker.node, endMarker.offset);
      } else {
        range.setEnd(endMarker.node, endMarker.offset);
        selection.addRange(range);
      }
    }
  }

  function isTextNode(node) {
    return node && node.nodeType === TEXT_NODE;
  }

  function containsNode(outerNode, innerNode) {
    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      return containsNode(outerNode, innerNode.parentNode);
    } else if ('contains' in outerNode) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }

  function isInDocument(node) {
    return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
  }

  function isSameOriginFrame(iframe) {
    try {
      // Accessing the contentDocument of a HTMLIframeElement can cause the browser
      // to throw, e.g. if it has a cross-origin src attribute.
      // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
      // iframe.contentDocument.defaultView;
      // A safety way is to access one of the cross origin properties: Window or Location
      // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
      // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
      return typeof iframe.contentWindow.location.href === 'string';
    } catch (err) {
      return false;
    }
  }

  function getActiveElementDeep() {
    var win = window;
    var element = getActiveElement();

    while (element instanceof win.HTMLIFrameElement) {
      if (isSameOriginFrame(element)) {
        win = element.contentWindow;
      } else {
        return element;
      }

      element = getActiveElement(win.document);
    }

    return element;
  }
  /**
   * @ReactInputSelection: React input selection module. Based on Selection.js,
   * but modified to be suitable for react and has a couple of bug fixes (doesn't
   * assume buttons have range selections allowed).
   * Input selection module for React.
   */

  /**
   * @hasSelectionCapabilities: we get the element types that support selection
   * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
   * and `selectionEnd` rows.
   */


  function hasSelectionCapabilities(elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
  }
  function getSelectionInformation() {
    var focusedElem = getActiveElementDeep();
    return {
      focusedElem: focusedElem,
      selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
    };
  }
  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */

  function restoreSelection(priorSelectionInformation) {
    var curFocusedElem = getActiveElementDeep();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;

    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
        setSelection(priorFocusedElem, priorSelectionRange);
      } // Focusing a node can change the scroll position, which is undesirable


      var ancestors = [];
      var ancestor = priorFocusedElem;

      while (ancestor = ancestor.parentNode) {
        if (ancestor.nodeType === ELEMENT_NODE) {
          ancestors.push({
            element: ancestor,
            left: ancestor.scrollLeft,
            top: ancestor.scrollTop
          });
        }
      }

      if (typeof priorFocusedElem.focus === 'function') {
        priorFocusedElem.focus();
      }

      for (var i = 0; i < ancestors.length; i++) {
        var info = ancestors[i];
        info.element.scrollLeft = info.left;
        info.element.scrollTop = info.top;
      }
    }
  }
  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */

  function getSelection(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else {
      // Content editable or old IE textarea.
      selection = getOffsets(input);
    }

    return selection || {
      start: 0,
      end: 0
    };
  }
  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */

  function setSelection(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;

    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else {
      setOffsets(input, offsets);
    }
  }

  var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

  function registerEvents$3() {
    registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
  }

  var activeElement$1 = null;
  var activeElementInst$1 = null;
  var lastSelection = null;
  var mouseDown = false;
  /**
   * Get an object which is a unique representation of the current selection.
   *
   * The return value will not be consistent across nodes or browsers, but
   * two identical selections on the same node will return identical objects.
   */

  function getSelection$1(node) {
    if ('selectionStart' in node && hasSelectionCapabilities(node)) {
      return {
        start: node.selectionStart,
        end: node.selectionEnd
      };
    } else {
      var win = node.ownerDocument && node.ownerDocument.defaultView || window;
      var selection = win.getSelection();
      return {
        anchorNode: selection.anchorNode,
        anchorOffset: selection.anchorOffset,
        focusNode: selection.focusNode,
        focusOffset: selection.focusOffset
      };
    }
  }
  /**
   * Get document associated with the event target.
   */


  function getEventTargetDocument(eventTarget) {
    return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
  }
  /**
   * Poll selection to see whether it's changed.
   *
   * @param {object} nativeEvent
   * @param {object} nativeEventTarget
   * @return {?SyntheticEvent}
   */


  function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
    // Ensure we have the right element, and that the user is not dragging a
    // selection (this matches native `select` event behavior). In HTML5, select
    // fires only on input and textarea thus if there's no focused element we
    // won't dispatch.
    var doc = getEventTargetDocument(nativeEventTarget);

    if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
      return;
    } // Only fire when selection has actually changed.


    var currentSelection = getSelection$1(activeElement$1);

    if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
      lastSelection = currentSelection;
      var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

      if (listeners.length > 0) {
        var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event: event,
          listeners: listeners
        });
        event.target = activeElement$1;
      }
    }
  }
  /**
   * This plugin creates an `onSelect` event that normalizes select events
   * across form elements.
   *
   * Supported elements are:
   * - input (see `isTextInputElement`)
   * - textarea
   * - contentEditable
   *
   * This differs from native browser implementations in the following ways:
   * - Fires on contentEditable fields as well as inputs.
   * - Fires for collapsed selection.
   * - Fires after user input.
   */


  function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {

    var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

    switch (domEventName) {
      // Track the input node that has focus.
      case 'focusin':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }

        break;

      case 'focusout':
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.

      case 'mousedown':
        mouseDown = true;
        break;

      case 'contextmenu':
      case 'mouseup':
      case 'dragend':
        mouseDown = false;
        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        break;
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.

      case 'selectionchange':
        if (skipSelectionChangeEvent) {
          break;
        }

      // falls through

      case 'keydown':
      case 'keyup':
        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
    }
  }

  function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
    var reactName = topLevelEventsToReactNames.get(domEventName);

    if (reactName === undefined) {
      return;
    }

    var SyntheticEventCtor = SyntheticEvent;
    var reactEventType = domEventName;

    switch (domEventName) {
      case 'keypress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return;
        }

      /* falls through */

      case 'keydown':
      case 'keyup':
        SyntheticEventCtor = SyntheticKeyboardEvent;
        break;

      case 'focusin':
        reactEventType = 'focus';
        SyntheticEventCtor = SyntheticFocusEvent;
        break;

      case 'focusout':
        reactEventType = 'blur';
        SyntheticEventCtor = SyntheticFocusEvent;
        break;

      case 'beforeblur':
      case 'afterblur':
        SyntheticEventCtor = SyntheticFocusEvent;
        break;

      case 'click':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return;
        }

      /* falls through */

      case 'auxclick':
      case 'dblclick':
      case 'mousedown':
      case 'mousemove':
      case 'mouseup': // TODO: Disabled elements should not respond to mouse events

      /* falls through */

      case 'mouseout':
      case 'mouseover':
      case 'contextmenu':
        SyntheticEventCtor = SyntheticMouseEvent;
        break;

      case 'drag':
      case 'dragend':
      case 'dragenter':
      case 'dragexit':
      case 'dragleave':
      case 'dragover':
      case 'dragstart':
      case 'drop':
        SyntheticEventCtor = SyntheticDragEvent;
        break;

      case 'touchcancel':
      case 'touchend':
      case 'touchmove':
      case 'touchstart':
        SyntheticEventCtor = SyntheticTouchEvent;
        break;

      case ANIMATION_END:
      case ANIMATION_ITERATION:
      case ANIMATION_START:
        SyntheticEventCtor = SyntheticAnimationEvent;
        break;

      case TRANSITION_END:
        SyntheticEventCtor = SyntheticTransitionEvent;
        break;

      case 'scroll':
        SyntheticEventCtor = SyntheticUIEvent;
        break;

      case 'wheel':
        SyntheticEventCtor = SyntheticWheelEvent;
        break;

      case 'copy':
      case 'cut':
      case 'paste':
        SyntheticEventCtor = SyntheticClipboardEvent;
        break;

      case 'gotpointercapture':
      case 'lostpointercapture':
      case 'pointercancel':
      case 'pointerdown':
      case 'pointermove':
      case 'pointerout':
      case 'pointerover':
      case 'pointerup':
        SyntheticEventCtor = SyntheticPointerEvent;
        break;
    }

    var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

    {
      // Some events don't bubble in the browser.
      // In the past, React has always bubbled them, but this can be surprising.
      // We're going to try aligning closer to the browser behavior by not bubbling
      // them in React either. We'll start by not bubbling onScroll, and then expand.
      var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
      // nonDelegatedEvents list in DOMPluginEventSystem.
      // Then we can remove this special list.
      // This is a breaking change that can wait until React 18.
      domEventName === 'scroll';

      var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

      if (_listeners.length > 0) {
        // Intentionally create event lazily.
        var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

        dispatchQueue.push({
          event: _event,
          listeners: _listeners
        });
      }
    }
  }

  // TODO: remove top-level side effect.
  registerSimpleEvents();
  registerEvents$2();
  registerEvents$1();
  registerEvents$3();
  registerEvents();

  function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
    // TODO: we should remove the concept of a "SimpleEventPlugin".
    // This is the basic functionality of the event system. All
    // the other plugins are essentially polyfills. So the plugin
    // should probably be inlined somewhere and have its logic
    // be core the to event system. This would potentially allow
    // us to ship builds of React without the polyfilled plugins below.
    extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
    var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
    // event's native "bubble" phase, which means that we're
    // not in the capture phase. That's because we emulate
    // the capture phase here still. This is a trade-off,
    // because in an ideal world we would not emulate and use
    // the phases properly, like we do with the SimpleEvent
    // plugin. However, the plugins below either expect
    // emulation (EnterLeave) or use state localized to that
    // plugin (BeforeInput, Change, Select). The state in
    // these modules complicates things, as you'll essentially
    // get the case where the capture phase event might change
    // state, only for the following bubble event to come in
    // later and not trigger anything as the state now
    // invalidates the heuristics of the event plugin. We
    // could alter all these plugins to work in such ways, but
    // that might cause other unknown side-effects that we
    // can't forsee right now.

    if (shouldProcessPolyfillPlugins) {
      extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
  } // List of events that need to be individually attached to media elements.


  var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
  // set them on the actual target element itself. This is primarily
  // because these events do not consistently bubble in the DOM.

  var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

  function executeDispatch(event, listener, currentTarget) {
    var type = event.type || 'unknown-event';
    event.currentTarget = currentTarget;
    invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
    event.currentTarget = null;
  }

  function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
    var previousInstance;

    if (inCapturePhase) {
      for (var i = dispatchListeners.length - 1; i >= 0; i--) {
        var _dispatchListeners$i = dispatchListeners[i],
            instance = _dispatchListeners$i.instance,
            currentTarget = _dispatchListeners$i.currentTarget,
            listener = _dispatchListeners$i.listener;

        if (instance !== previousInstance && event.isPropagationStopped()) {
          return;
        }

        executeDispatch(event, listener, currentTarget);
        previousInstance = instance;
      }
    } else {
      for (var _i = 0; _i < dispatchListeners.length; _i++) {
        var _dispatchListeners$_i = dispatchListeners[_i],
            _instance = _dispatchListeners$_i.instance,
            _currentTarget = _dispatchListeners$_i.currentTarget,
            _listener = _dispatchListeners$_i.listener;

        if (_instance !== previousInstance && event.isPropagationStopped()) {
          return;
        }

        executeDispatch(event, _listener, _currentTarget);
        previousInstance = _instance;
      }
    }
  }

  function processDispatchQueue(dispatchQueue, eventSystemFlags) {
    var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

    for (var i = 0; i < dispatchQueue.length; i++) {
      var _dispatchQueue$i = dispatchQueue[i],
          event = _dispatchQueue$i.event,
          listeners = _dispatchQueue$i.listeners;
      processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
    } // This would be a good time to rethrow if any of the event handlers threw.


    rethrowCaughtError();
  }

  function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
    var nativeEventTarget = getEventTarget(nativeEvent);
    var dispatchQueue = [];
    extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
    processDispatchQueue(dispatchQueue, eventSystemFlags);
  }

  function listenToNonDelegatedEvent(domEventName, targetElement) {
    var isCapturePhaseListener = false;
    var listenerSet = getEventListenerSet(targetElement);
    var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

    if (!listenerSet.has(listenerSetKey)) {
      addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
      listenerSet.add(listenerSetKey);
    }
  }
  var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
  function listenToAllSupportedEvents(rootContainerElement) {
    {
      if (rootContainerElement[listeningMarker]) {
        // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
      }

      rootContainerElement[listeningMarker] = true;
      allNativeEvents.forEach(function (domEventName) {
        if (!nonDelegatedEvents.has(domEventName)) {
          listenToNativeEvent(domEventName, false, rootContainerElement, null);
        }

        listenToNativeEvent(domEventName, true, rootContainerElement, null);
      });
    }
  }
  function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
    var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var target = rootContainerElement; // selectionchange needs to be attached to the document
    // otherwise it won't capture incoming events that are only
    // triggered on the document directly.

    if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
      target = rootContainerElement.ownerDocument;
    } // If the event can be delegated (or is capture phase), we can
    // register it to the root container. Otherwise, we should
    // register the event to the target element and mark it as
    // a non-delegated event.


    if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
      // For all non-delegated events, apart from scroll, we attach
      // their event listeners to the respective elements that their
      // events fire on. That means we can skip this step, as event
      // listener has already been added previously. However, we
      // special case the scroll event because the reality is that any
      // element can scroll.
      // TODO: ideally, we'd eventually apply the same logic to all
      // events from the nonDelegatedEvents list. Then we can remove
      // this special case and use the same logic for all events.
      if (domEventName !== 'scroll') {
        return;
      }

      eventSystemFlags |= IS_NON_DELEGATED;
      target = targetElement;
    }

    var listenerSet = getEventListenerSet(target);
    var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
    // we need to trap an event listener onto the target.

    if (!listenerSet.has(listenerSetKey)) {
      if (isCapturePhaseListener) {
        eventSystemFlags |= IS_CAPTURE_PHASE;
      }

      addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      listenerSet.add(listenerSetKey);
    }
  }

  function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
    var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
    // active and not passive.

    var isPassiveListener = undefined;

    if (passiveBrowserEventsSupported) {
      // Browsers introduced an intervention, making these events
      // passive by default on document. React doesn't bind them
      // to document anymore, but changing this now would undo
      // the performance wins from the change. So we emulate
      // the existing behavior manually on the roots now.
      // https://github.com/facebook/react/issues/19651
      if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
        isPassiveListener = true;
      }
    }

    targetContainer =  targetContainer;
    var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we


    if (isCapturePhaseListener) {
      if (isPassiveListener !== undefined) {
        unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
      } else {
        unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
      }
    } else {
      if (isPassiveListener !== undefined) {
        unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
      } else {
        unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
      }
    }
  }

  function isMatchingRootContainer(grandContainer, targetContainer) {
    return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
  }

  function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
    var ancestorInst = targetInst;

    if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
      var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

      if (targetInst !== null) {
        // The below logic attempts to work out if we need to change
        // the target fiber to a different ancestor. We had similar logic
        // in the legacy event system, except the big difference between
        // systems is that the modern event system now has an event listener
        // attached to each React Root and React Portal Root. Together,
        // the DOM nodes representing these roots are the "rootContainer".
        // To figure out which ancestor instance we should use, we traverse
        // up the fiber tree from the target instance and attempt to find
        // root boundaries that match that of our current "rootContainer".
        // If we find that "rootContainer", we find the parent fiber
        // sub-tree for that root and make that our ancestor instance.
        var node = targetInst;

        mainLoop: while (true) {
          if (node === null) {
            return;
          }

          var nodeTag = node.tag;

          if (nodeTag === HostRoot || nodeTag === HostPortal) {
            var container = node.stateNode.containerInfo;

            if (isMatchingRootContainer(container, targetContainerNode)) {
              break;
            }

            if (nodeTag === HostPortal) {
              // The target is a portal, but it's not the rootContainer we're looking for.
              // Normally portals handle their own events all the way down to the root.
              // So we should be able to stop now. However, we don't know if this portal
              // was part of *our* root.
              var grandNode = node.return;

              while (grandNode !== null) {
                var grandTag = grandNode.tag;

                if (grandTag === HostRoot || grandTag === HostPortal) {
                  var grandContainer = grandNode.stateNode.containerInfo;

                  if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                    // This is the rootContainer we're looking for and we found it as
                    // a parent of the Portal. That means we can ignore it because the
                    // Portal will bubble through to us.
                    return;
                  }
                }

                grandNode = grandNode.return;
              }
            } // Now we need to find it's corresponding host fiber in the other
            // tree. To do this we can use getClosestInstanceFromNode, but we
            // need to validate that the fiber is a host instance, otherwise
            // we need to traverse up through the DOM till we find the correct
            // node that is from the other tree.


            while (container !== null) {
              var parentNode = getClosestInstanceFromNode(container);

              if (parentNode === null) {
                return;
              }

              var parentTag = parentNode.tag;

              if (parentTag === HostComponent || parentTag === HostText) {
                node = ancestorInst = parentNode;
                continue mainLoop;
              }

              container = container.parentNode;
            }
          }

          node = node.return;
        }
      }
    }

    batchedEventUpdates(function () {
      return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
    });
  }

  function createDispatchListener(instance, listener, currentTarget) {
    return {
      instance: instance,
      listener: listener,
      currentTarget: currentTarget
    };
  }

  function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
    var captureName = reactName !== null ? reactName + 'Capture' : null;
    var reactEventName = inCapturePhase ? captureName : reactName;
    var listeners = [];
    var instance = targetFiber;
    var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

    while (instance !== null) {
      var _instance2 = instance,
          stateNode = _instance2.stateNode,
          tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

      if (tag === HostComponent && stateNode !== null) {
        lastHostComponent = stateNode; // createEventHandle listeners


        if (reactEventName !== null) {
          var listener = getListener(instance, reactEventName);

          if (listener != null) {
            listeners.push(createDispatchListener(instance, listener, lastHostComponent));
          }
        }
      } // If we are only accumulating events for the target, then we don't
      // continue to propagate through the React fiber tree to find other
      // listeners.


      if (accumulateTargetOnly) {
        break;
      }

      instance = instance.return;
    }

    return listeners;
  } // We should only use this function for:
  // - BeforeInputEventPlugin
  // - ChangeEventPlugin
  // - SelectEventPlugin
  // This is because we only process these plugins
  // in the bubble phase, so we need to accumulate two
  // phase event listeners (via emulation).

  function accumulateTwoPhaseListeners(targetFiber, reactName) {
    var captureName = reactName + 'Capture';
    var listeners = [];
    var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

    while (instance !== null) {
      var _instance3 = instance,
          stateNode = _instance3.stateNode,
          tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

      if (tag === HostComponent && stateNode !== null) {
        var currentTarget = stateNode;
        var captureListener = getListener(instance, captureName);

        if (captureListener != null) {
          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
        }

        var bubbleListener = getListener(instance, reactName);

        if (bubbleListener != null) {
          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
        }
      }

      instance = instance.return;
    }

    return listeners;
  }

  function getParent(inst) {
    if (inst === null) {
      return null;
    }

    do {
      inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
      // That is depending on if we want nested subtrees (layers) to bubble
      // events to their parent. We could also go through parentNode on the
      // host node but that wouldn't work for React Native and doesn't let us
      // do the portal feature.
    } while (inst && inst.tag !== HostComponent);

    if (inst) {
      return inst;
    }

    return null;
  }
  /**
   * Return the lowest common ancestor of A and B, or null if they are in
   * different trees.
   */


  function getLowestCommonAncestor(instA, instB) {
    var nodeA = instA;
    var nodeB = instB;
    var depthA = 0;

    for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
      depthA++;
    }

    var depthB = 0;

    for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
      depthB++;
    } // If A is deeper, crawl up.


    while (depthA - depthB > 0) {
      nodeA = getParent(nodeA);
      depthA--;
    } // If B is deeper, crawl up.


    while (depthB - depthA > 0) {
      nodeB = getParent(nodeB);
      depthB--;
    } // Walk in lockstep until we find a match.


    var depth = depthA;

    while (depth--) {
      if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
        return nodeA;
      }

      nodeA = getParent(nodeA);
      nodeB = getParent(nodeB);
    }

    return null;
  }

  function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
    var registrationName = event._reactName;
    var listeners = [];
    var instance = target;

    while (instance !== null) {
      if (instance === common) {
        break;
      }

      var _instance4 = instance,
          alternate = _instance4.alternate,
          stateNode = _instance4.stateNode,
          tag = _instance4.tag;

      if (alternate !== null && alternate === common) {
        break;
      }

      if (tag === HostComponent && stateNode !== null) {
        var currentTarget = stateNode;

        if (inCapturePhase) {
          var captureListener = getListener(instance, registrationName);

          if (captureListener != null) {
            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
          }
        } else if (!inCapturePhase) {
          var bubbleListener = getListener(instance, registrationName);

          if (bubbleListener != null) {
            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
        }
      }

      instance = instance.return;
    }

    if (listeners.length !== 0) {
      dispatchQueue.push({
        event: event,
        listeners: listeners
      });
    }
  } // We should only use this function for:
  // - EnterLeaveEventPlugin
  // This is because we only process this plugin
  // in the bubble phase, so we need to accumulate two
  // phase event listeners.


  function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
    var common = from && to ? getLowestCommonAncestor(from, to) : null;

    if (from !== null) {
      accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
    }

    if (to !== null && enterEvent !== null) {
      accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
  }
  function getListenerSetKey(domEventName, capture) {
    return domEventName + "__" + (capture ? 'capture' : 'bubble');
  }

  var didWarnInvalidHydration = false;
  var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
  var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
  var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
  var AUTOFOCUS = 'autoFocus';
  var CHILDREN = 'children';
  var STYLE = 'style';
  var HTML$1 = '__html';
  var HTML_NAMESPACE$1 = Namespaces.html;
  var warnedUnknownTags;
  var suppressHydrationWarning;
  var validatePropertiesInDevelopment;
  var warnForTextDifference;
  var warnForPropDifference;
  var warnForExtraAttributes;
  var warnForInvalidEventListener;
  var canDiffStyleForHydrationWarning;
  var normalizeMarkupForTextOrAttribute;
  var normalizeHTML;

  {
    warnedUnknownTags = {
      // There are working polyfills for <dialog>. Let people use it.
      dialog: true,
      // Electron ships a custom <webview> tag to display external web content in
      // an isolated frame and process.
      // This tag is not present in non Electron environments such as JSDom which
      // is often used for testing purposes.
      // @see https://electronjs.org/docs/api/webview-tag
      webview: true
    };

    validatePropertiesInDevelopment = function (type, props) {
      validateProperties(type, props);
      validateProperties$1(type, props);
      validateProperties$2(type, props, {
        registrationNameDependencies: registrationNameDependencies,
        possibleRegistrationNames: possibleRegistrationNames
      });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807


    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.

    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

    normalizeMarkupForTextOrAttribute = function (markup) {
      var markupString = typeof markup === 'string' ? markup : '' + markup;
      return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };

    warnForTextDifference = function (serverText, clientText) {
      if (didWarnInvalidHydration) {
        return;
      }

      var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
      var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

      if (normalizedServerText === normalizedClientText) {
        return;
      }

      didWarnInvalidHydration = true;

      error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };

    warnForPropDifference = function (propName, serverValue, clientValue) {
      if (didWarnInvalidHydration) {
        return;
      }

      var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
      var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

      if (normalizedServerValue === normalizedClientValue) {
        return;
      }

      didWarnInvalidHydration = true;

      error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };

    warnForExtraAttributes = function (attributeNames) {
      if (didWarnInvalidHydration) {
        return;
      }

      didWarnInvalidHydration = true;
      var names = [];
      attributeNames.forEach(function (name) {
        names.push(name);
      });

      error('Extra attributes from the server: %s', names);
    };

    warnForInvalidEventListener = function (registrationName, listener) {
      if (listener === false) {
        error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
      } else {
        error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
      }
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.


    normalizeHTML = function (parent, html) {
      // We could have created a separate document here to avoid
      // re-initializing custom elements if they exist. But this breaks
      // how <noscript> is being handled. So we use the same document.
      // See the discussion in https://github.com/facebook/react/pull/11157.
      var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
      testElement.innerHTML = html;
      return testElement.innerHTML;
    };
  }

  function getOwnerDocumentFromRootContainer(rootContainerElement) {
    return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
  }

  function noop() {}

  function trapClickOnNonInteractiveElement(node) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    // Just set it using the onclick property so that we don't have to manage any
    // bookkeeping for it. Not sure if we need to clear it when the listener is
    // removed.
    // TODO: Only do this for the relevant Safaris maybe?
    node.onclick = noop;
  }

  function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
    for (var propKey in nextProps) {
      if (!nextProps.hasOwnProperty(propKey)) {
        continue;
      }

      var nextProp = nextProps[propKey];

      if (propKey === STYLE) {
        {
          if (nextProp) {
            // Freeze the next style object so that we can assume it won't be
            // mutated. We have already warned for this in the past.
            Object.freeze(nextProp);
          }
        } // Relies on `updateStylesByID` not mutating `styleUpdates`.


        setValueForStyles(domElement, nextProp);
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

        if (nextHtml != null) {
          setInnerHTML(domElement, nextHtml);
        }
      } else if (propKey === CHILDREN) {
        if (typeof nextProp === 'string') {
          // Avoid setting initial textContent when the text is empty. In IE11 setting
          // textContent on a <textarea> will cause the placeholder to not
          // show within the <textarea> until it has been focused and blurred again.
          // https://github.com/facebook/react/issues/6731#issuecomment-254874553
          var canSetTextContent = tag !== 'textarea' || nextProp !== '';

          if (canSetTextContent) {
            setTextContent(domElement, nextProp);
          }
        } else if (typeof nextProp === 'number') {
          setTextContent(domElement, '' + nextProp);
        }
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          if ( typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }

          if (propKey === 'onScroll') {
            listenToNonDelegatedEvent('scroll', domElement);
          }
        }
      } else if (nextProp != null) {
        setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
      }
    }
  }

  function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
    // TODO: Handle wasCustomComponentTag
    for (var i = 0; i < updatePayload.length; i += 2) {
      var propKey = updatePayload[i];
      var propValue = updatePayload[i + 1];

      if (propKey === STYLE) {
        setValueForStyles(domElement, propValue);
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        setInnerHTML(domElement, propValue);
      } else if (propKey === CHILDREN) {
        setTextContent(domElement, propValue);
      } else {
        setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
      }
    }
  }

  function createElement(type, props, rootContainerElement, parentNamespace) {
    var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.

    var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
    var domElement;
    var namespaceURI = parentNamespace;

    if (namespaceURI === HTML_NAMESPACE$1) {
      namespaceURI = getIntrinsicNamespace(type);
    }

    if (namespaceURI === HTML_NAMESPACE$1) {
      {
        isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
        // allow <SVG> or <mATH>.

        if (!isCustomComponentTag && type !== type.toLowerCase()) {
          error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
        }
      }

      if (type === 'script') {
        // Create the script via .innerHTML so its "parser-inserted" flag is
        // set to true and it does not execute
        var div = ownerDocument.createElement('div');

        div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
        // This is guaranteed to yield a script element.

        var firstChild = div.firstChild;
        domElement = div.removeChild(firstChild);
      } else if (typeof props.is === 'string') {
        // $FlowIssue `createElement` should be updated for Web Components
        domElement = ownerDocument.createElement(type, {
          is: props.is
        });
      } else {
        // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
        // See discussion in https://github.com/facebook/react/pull/6896
        // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
        domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
        // attributes on `select`s needs to be added before `option`s are inserted.
        // This prevents:
        // - a bug where the `select` does not scroll to the correct option because singular
        //  `select` elements automatically pick the first item #13222
        // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
        // See https://github.com/facebook/react/issues/13222
        // and https://github.com/facebook/react/issues/14239

        if (type === 'select') {
          var node = domElement;

          if (props.multiple) {
            node.multiple = true;
          } else if (props.size) {
            // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
            // it is possible that no option is selected.
            //
            // This is only necessary when a select in "single selection mode".
            node.size = props.size;
          }
        }
      }
    } else {
      domElement = ownerDocument.createElementNS(namespaceURI, type);
    }

    {
      if (namespaceURI === HTML_NAMESPACE$1) {
        if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
          warnedUnknownTags[type] = true;

          error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
        }
      }
    }

    return domElement;
  }
  function createTextNode(text, rootContainerElement) {
    return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
  }
  function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
    var isCustomComponentTag = isCustomComponent(tag, rawProps);

    {
      validatePropertiesInDevelopment(tag, rawProps);
    } // TODO: Make sure that we check isMounted before firing any of these events.


    var props;

    switch (tag) {
      case 'dialog':
        listenToNonDelegatedEvent('cancel', domElement);
        listenToNonDelegatedEvent('close', domElement);
        props = rawProps;
        break;

      case 'iframe':
      case 'object':
      case 'embed':
        // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the load event.
        listenToNonDelegatedEvent('load', domElement);
        props = rawProps;
        break;

      case 'video':
      case 'audio':
        // We listen to these events in case to ensure emulated bubble
        // listeners still fire for all the media events.
        for (var i = 0; i < mediaEventTypes.length; i++) {
          listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
        }

        props = rawProps;
        break;

      case 'source':
        // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the error event.
        listenToNonDelegatedEvent('error', domElement);
        props = rawProps;
        break;

      case 'img':
      case 'image':
      case 'link':
        // We listen to these events in case to ensure emulated bubble
        // listeners still fire for error and load events.
        listenToNonDelegatedEvent('error', domElement);
        listenToNonDelegatedEvent('load', domElement);
        props = rawProps;
        break;

      case 'details':
        // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the toggle event.
        listenToNonDelegatedEvent('toggle', domElement);
        props = rawProps;
        break;

      case 'input':
        initWrapperState(domElement, rawProps);
        props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the invalid event.

        listenToNonDelegatedEvent('invalid', domElement);

        break;

      case 'option':
        validateProps(domElement, rawProps);
        props = getHostProps$1(domElement, rawProps);
        break;

      case 'select':
        initWrapperState$1(domElement, rawProps);
        props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the invalid event.

        listenToNonDelegatedEvent('invalid', domElement);

        break;

      case 'textarea':
        initWrapperState$2(domElement, rawProps);
        props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the invalid event.

        listenToNonDelegatedEvent('invalid', domElement);

        break;

      default:
        props = rawProps;
    }

    assertValidProps(tag, props);
    setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

    switch (tag) {
      case 'input':
        // TODO: Make sure we check if this is still unmounted or do any clean
        // up necessary since we never stop tracking anymore.
        track(domElement);
        postMountWrapper(domElement, rawProps, false);
        break;

      case 'textarea':
        // TODO: Make sure we check if this is still unmounted or do any clean
        // up necessary since we never stop tracking anymore.
        track(domElement);
        postMountWrapper$3(domElement);
        break;

      case 'option':
        postMountWrapper$1(domElement, rawProps);
        break;

      case 'select':
        postMountWrapper$2(domElement, rawProps);
        break;

      default:
        if (typeof props.onClick === 'function') {
          // TODO: This cast may not be sound for SVG, MathML or custom elements.
          trapClickOnNonInteractiveElement(domElement);
        }

        break;
    }
  } // Calculate the diff between the two objects.

  function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
    {
      validatePropertiesInDevelopment(tag, nextRawProps);
    }

    var updatePayload = null;
    var lastProps;
    var nextProps;

    switch (tag) {
      case 'input':
        lastProps = getHostProps(domElement, lastRawProps);
        nextProps = getHostProps(domElement, nextRawProps);
        updatePayload = [];
        break;

      case 'option':
        lastProps = getHostProps$1(domElement, lastRawProps);
        nextProps = getHostProps$1(domElement, nextRawProps);
        updatePayload = [];
        break;

      case 'select':
        lastProps = getHostProps$2(domElement, lastRawProps);
        nextProps = getHostProps$2(domElement, nextRawProps);
        updatePayload = [];
        break;

      case 'textarea':
        lastProps = getHostProps$3(domElement, lastRawProps);
        nextProps = getHostProps$3(domElement, nextRawProps);
        updatePayload = [];
        break;

      default:
        lastProps = lastRawProps;
        nextProps = nextRawProps;

        if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
          // TODO: This cast may not be sound for SVG, MathML or custom elements.
          trapClickOnNonInteractiveElement(domElement);
        }

        break;
    }

    assertValidProps(tag, nextProps);
    var propKey;
    var styleName;
    var styleUpdates = null;

    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }

      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];

        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        }
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" fiber pointer gets updated so we need a commit
        // to update this element.
        if (!updatePayload) {
          updatePayload = [];
        }
      } else {
        // For all other deleted properties we add it to the queue. We use
        // the allowed property list in the commit phase instead.
        (updatePayload = updatePayload || []).push(propKey, null);
      }
    }

    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps != null ? lastProps[propKey] : undefined;

      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }

      if (propKey === STYLE) {
        {
          if (nextProp) {
            // Freeze the next style object so that we can assume it won't be
            // mutated. We have already warned for this in the past.
            Object.freeze(nextProp);
          }
        }

        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              if (!styleUpdates) {
                styleUpdates = {};
              }

              styleUpdates[styleName] = '';
            }
          } // Update styles that changed since `lastProp`.


          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              if (!styleUpdates) {
                styleUpdates = {};
              }

              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          if (!styleUpdates) {
            if (!updatePayload) {
              updatePayload = [];
            }

            updatePayload.push(propKey, styleUpdates);
          }

          styleUpdates = nextProp;
        }
      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
        var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

        if (nextHtml != null) {
          if (lastHtml !== nextHtml) {
            (updatePayload = updatePayload || []).push(propKey, nextHtml);
          }
        }
      } else if (propKey === CHILDREN) {
        if (typeof nextProp === 'string' || typeof nextProp === 'number') {
          (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
        }
      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          // We eagerly listen to this even though we haven't committed yet.
          if ( typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }

          if (propKey === 'onScroll') {
            listenToNonDelegatedEvent('scroll', domElement);
          }
        }

        if (!updatePayload && lastProp !== nextProp) {
          // This is a special case. If any listener updates we need to ensure
          // that the "current" props pointer gets updated so we need a commit
          // to update this element.
          updatePayload = [];
        }
      } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
        // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
        // In this case, call the opaque object's toString function which generates a new client
        // ID so client and server IDs match and throws to rerender.
        nextProp.toString();
      } else {
        // For any other property we always add it to the queue and then we
        // filter it out using the allowed property list during the commit.
        (updatePayload = updatePayload || []).push(propKey, nextProp);
      }
    }

    if (styleUpdates) {
      {
        validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
      }

      (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
    }

    return updatePayload;
  } // Apply the diff.

  function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
    // Update checked *before* name.
    // In the middle of an update, it is possible to have multiple checked.
    // When a checked radio tries to change name, browser makes another radio's checked false.
    if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
      updateChecked(domElement, nextRawProps);
    }

    var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
    var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

    updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
    // changed.

    switch (tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        updateWrapper(domElement, nextRawProps);
        break;

      case 'textarea':
        updateWrapper$1(domElement, nextRawProps);
        break;

      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        postUpdateWrapper(domElement, nextRawProps);
        break;
    }
  }

  function getPossibleStandardName(propName) {
    {
      var lowerCasedName = propName.toLowerCase();

      if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
        return null;
      }

      return possibleStandardNames[lowerCasedName] || null;
    }
  }

  function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
    var isCustomComponentTag;
    var extraAttributeNames;

    {
      suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
      isCustomComponentTag = isCustomComponent(tag, rawProps);
      validatePropertiesInDevelopment(tag, rawProps);
    } // TODO: Make sure that we check isMounted before firing any of these events.


    switch (tag) {
      case 'dialog':
        listenToNonDelegatedEvent('cancel', domElement);
        listenToNonDelegatedEvent('close', domElement);
        break;

      case 'iframe':
      case 'object':
      case 'embed':
        // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the load event.
        listenToNonDelegatedEvent('load', domElement);
        break;

      case 'video':
      case 'audio':
        // We listen to these events in case to ensure emulated bubble
        // listeners still fire for all the media events.
        for (var i = 0; i < mediaEventTypes.length; i++) {
          listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
        }

        break;

      case 'source':
        // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the error event.
        listenToNonDelegatedEvent('error', domElement);
        break;

      case 'img':
      case 'image':
      case 'link':
        // We listen to these events in case to ensure emulated bubble
        // listeners still fire for error and load events.
        listenToNonDelegatedEvent('error', domElement);
        listenToNonDelegatedEvent('load', domElement);
        break;

      case 'details':
        // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the toggle event.
        listenToNonDelegatedEvent('toggle', domElement);
        break;

      case 'input':
        initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the invalid event.

        listenToNonDelegatedEvent('invalid', domElement);

        break;

      case 'option':
        validateProps(domElement, rawProps);
        break;

      case 'select':
        initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the invalid event.

        listenToNonDelegatedEvent('invalid', domElement);

        break;

      case 'textarea':
        initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
        // listeners still fire for the invalid event.

        listenToNonDelegatedEvent('invalid', domElement);

        break;
    }

    assertValidProps(tag, rawProps);

    {
      extraAttributeNames = new Set();
      var attributes = domElement.attributes;

      for (var _i = 0; _i < attributes.length; _i++) {
        var name = attributes[_i].name.toLowerCase();

        switch (name) {
          // Built-in SSR attribute is allowed
          case 'data-reactroot':
            break;
          // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.

          case 'value':
            break;

          case 'checked':
            break;

          case 'selected':
            break;

          default:
            // Intentionally use the original name.
            // See discussion in https://github.com/facebook/react/pull/10676.
            extraAttributeNames.add(attributes[_i].name);
        }
      }
    }

    var updatePayload = null;

    for (var propKey in rawProps) {
      if (!rawProps.hasOwnProperty(propKey)) {
        continue;
      }

      var nextProp = rawProps[propKey];

      if (propKey === CHILDREN) {
        // For text content children we compare against textContent. This
        // might match additional HTML that is hidden when we read it using
        // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
        // satisfies our requirement. Our requirement is not to produce perfect
        // HTML and attributes. Ideally we should preserve structure but it's
        // ok not to if the visible content is still enough to indicate what
        // even listeners these nodes might be wired up to.
        // TODO: Warn if there is more than a single textNode as a child.
        // TODO: Should we use domElement.firstChild.nodeValue to compare?
        if (typeof nextProp === 'string') {
          if (domElement.textContent !== nextProp) {
            if ( !suppressHydrationWarning) {
              warnForTextDifference(domElement.textContent, nextProp);
            }

            updatePayload = [CHILDREN, nextProp];
          }
        } else if (typeof nextProp === 'number') {
          if (domElement.textContent !== '' + nextProp) {
            if ( !suppressHydrationWarning) {
              warnForTextDifference(domElement.textContent, nextProp);
            }

            updatePayload = [CHILDREN, '' + nextProp];
          }
        }
      } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
        if (nextProp != null) {
          if ( typeof nextProp !== 'function') {
            warnForInvalidEventListener(propKey, nextProp);
          }

          if (propKey === 'onScroll') {
            listenToNonDelegatedEvent('scroll', domElement);
          }
        }
      } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
      typeof isCustomComponentTag === 'boolean') {
        // Validate that the properties correspond to their expected values.
        var serverValue = void 0;
        var propertyInfo = getPropertyInfo(propKey);

        if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.
        propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var serverHTML = domElement.innerHTML;
          var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

          if (nextHtml != null) {
            var expectedHTML = normalizeHTML(domElement, nextHtml);

            if (expectedHTML !== serverHTML) {
              warnForPropDifference(propKey, serverHTML, expectedHTML);
            }
          }
        } else if (propKey === STYLE) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propKey);

          if (canDiffStyleForHydrationWarning) {
            var expectedStyle = createDangerousStringForStyles(nextProp);
            serverValue = domElement.getAttribute('style');

            if (expectedStyle !== serverValue) {
              warnForPropDifference(propKey, serverValue, expectedStyle);
            }
          }
        } else if (isCustomComponentTag) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propKey.toLowerCase());
          serverValue = getValueForAttribute(domElement, propKey, nextProp);

          if (nextProp !== serverValue) {
            warnForPropDifference(propKey, serverValue, nextProp);
          }
        } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
          var isMismatchDueToBadCasing = false;

          if (propertyInfo !== null) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propertyInfo.attributeName);
            serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
          } else {
            var ownNamespace = parentNamespace;

            if (ownNamespace === HTML_NAMESPACE$1) {
              ownNamespace = getIntrinsicNamespace(tag);
            }

            if (ownNamespace === HTML_NAMESPACE$1) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propKey.toLowerCase());
            } else {
              var standardName = getPossibleStandardName(propKey);

              if (standardName !== null && standardName !== propKey) {
                // If an SVG prop is supplied with bad casing, it will
                // be successfully parsed from HTML, but will produce a mismatch
                // (and would be incorrectly rendered on the client).
                // However, we already warn about bad casing elsewhere.
                // So we'll skip the misleading extra mismatch warning in this case.
                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                extraAttributeNames.delete(standardName);
              } // $FlowFixMe - Should be inferred as not undefined.


              extraAttributeNames.delete(propKey);
            }

            serverValue = getValueForAttribute(domElement, propKey, nextProp);
          }

          if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
            warnForPropDifference(propKey, serverValue, nextProp);
          }
        }
      }
    }

    {
      // $FlowFixMe - Should be inferred as not undefined.
      if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
        // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
      }
    }

    switch (tag) {
      case 'input':
        // TODO: Make sure we check if this is still unmounted or do any clean
        // up necessary since we never stop tracking anymore.
        track(domElement);
        postMountWrapper(domElement, rawProps, true);
        break;

      case 'textarea':
        // TODO: Make sure we check if this is still unmounted or do any clean
        // up necessary since we never stop tracking anymore.
        track(domElement);
        postMountWrapper$3(domElement);
        break;

      case 'select':
      case 'option':
        // For input and textarea we current always set the value property at
        // post mount to force it to diverge from attributes. However, for
        // option and select we don't quite do the same thing and select
        // is not resilient to the DOM state changing so we don't do that here.
        // TODO: Consider not doing this for input and textarea.
        break;

      default:
        if (typeof rawProps.onClick === 'function') {
          // TODO: This cast may not be sound for SVG, MathML or custom elements.
          trapClickOnNonInteractiveElement(domElement);
        }

        break;
    }

    return updatePayload;
  }
  function diffHydratedText(textNode, text) {
    var isDifferent = textNode.nodeValue !== text;
    return isDifferent;
  }
  function warnForUnmatchedText(textNode, text) {
    {
      warnForTextDifference(textNode.nodeValue, text);
    }
  }
  function warnForDeletedHydratableElement(parentNode, child) {
    {
      if (didWarnInvalidHydration) {
        return;
      }

      didWarnInvalidHydration = true;

      error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
  }
  function warnForDeletedHydratableText(parentNode, child) {
    {
      if (didWarnInvalidHydration) {
        return;
      }

      didWarnInvalidHydration = true;

      error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
  }
  function warnForInsertedHydratedElement(parentNode, tag, props) {
    {
      if (didWarnInvalidHydration) {
        return;
      }

      didWarnInvalidHydration = true;

      error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
  }
  function warnForInsertedHydratedText(parentNode, text) {
    {
      if (text === '') {
        // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
      }

      if (didWarnInvalidHydration) {
        return;
      }

      didWarnInvalidHydration = true;

      error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
  }
  function restoreControlledState$3(domElement, tag, props) {
    switch (tag) {
      case 'input':
        restoreControlledState(domElement, props);
        return;

      case 'textarea':
        restoreControlledState$2(domElement, props);
        return;

      case 'select':
        restoreControlledState$1(domElement, props);
        return;
    }
  }

  var validateDOMNesting = function () {};

  var updatedAncestorInfo = function () {};

  {
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

    var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
    // TODO: Distinguish by namespace here -- for <title>, including it here
    // errs on the side of fewer warnings
    'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

    var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

    var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
    var emptyAncestorInfo = {
      current: null,
      formTag: null,
      aTagInScope: null,
      buttonTagInScope: null,
      nobrTagInScope: null,
      pTagInButtonScope: null,
      listItemTagAutoclosing: null,
      dlItemTagAutoclosing: null
    };

    updatedAncestorInfo = function (oldInfo, tag) {
      var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

      var info = {
        tag: tag
      };

      if (inScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.aTagInScope = null;
        ancestorInfo.buttonTagInScope = null;
        ancestorInfo.nobrTagInScope = null;
      }

      if (buttonScopeTags.indexOf(tag) !== -1) {
        ancestorInfo.pTagInButtonScope = null;
      } // See rules for 'li', 'dd', 'dt' start tags in
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


      if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
        ancestorInfo.listItemTagAutoclosing = null;
        ancestorInfo.dlItemTagAutoclosing = null;
      }

      ancestorInfo.current = info;

      if (tag === 'form') {
        ancestorInfo.formTag = info;
      }

      if (tag === 'a') {
        ancestorInfo.aTagInScope = info;
      }

      if (tag === 'button') {
        ancestorInfo.buttonTagInScope = info;
      }

      if (tag === 'nobr') {
        ancestorInfo.nobrTagInScope = info;
      }

      if (tag === 'p') {
        ancestorInfo.pTagInButtonScope = info;
      }

      if (tag === 'li') {
        ancestorInfo.listItemTagAutoclosing = info;
      }

      if (tag === 'dd' || tag === 'dt') {
        ancestorInfo.dlItemTagAutoclosing = info;
      }

      return ancestorInfo;
    };
    /**
     * Returns whether
     */


    var isTagValidWithParent = function (tag, parentTag) {
      // First, let's check if we're in an unusual parsing mode...
      switch (parentTag) {
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
        case 'select':
          return tag === 'option' || tag === 'optgroup' || tag === '#text';

        case 'optgroup':
          return tag === 'option' || tag === '#text';
        // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
        // but

        case 'option':
          return tag === '#text';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
        // No special behavior since these rules fall back to "in body" mode for
        // all except special table nodes which cause bad parsing behavior anyway.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

        case 'tr':
          return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

        case 'tbody':
        case 'thead':
        case 'tfoot':
          return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

        case 'colgroup':
          return tag === 'col' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

        case 'table':
          return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

        case 'head':
          return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
        // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

        case 'html':
          return tag === 'head' || tag === 'body' || tag === 'frameset';

        case 'frameset':
          return tag === 'frame';

        case '#document':
          return tag === 'html';
      } // Probably in the "in body" parsing mode, so we outlaw only tag combos
      // where the parsing rules cause implicit opens or closes to be added.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


      switch (tag) {
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

        case 'rp':
        case 'rt':
          return impliedEndTags.indexOf(parentTag) === -1;

        case 'body':
        case 'caption':
        case 'col':
        case 'colgroup':
        case 'frameset':
        case 'frame':
        case 'head':
        case 'html':
        case 'tbody':
        case 'td':
        case 'tfoot':
        case 'th':
        case 'thead':
        case 'tr':
          // These tags are only valid with a few parents that have special child
          // parsing rules -- if we're down here, then none of those matched and
          // so we allow it only if we don't know what the parent is, as all other
          // cases are invalid.
          return parentTag == null;
      }

      return true;
    };
    /**
     * Returns whether
     */


    var findInvalidAncestorForTag = function (tag, ancestorInfo) {
      switch (tag) {
        case 'address':
        case 'article':
        case 'aside':
        case 'blockquote':
        case 'center':
        case 'details':
        case 'dialog':
        case 'dir':
        case 'div':
        case 'dl':
        case 'fieldset':
        case 'figcaption':
        case 'figure':
        case 'footer':
        case 'header':
        case 'hgroup':
        case 'main':
        case 'menu':
        case 'nav':
        case 'ol':
        case 'p':
        case 'section':
        case 'summary':
        case 'ul':
        case 'pre':
        case 'listing':
        case 'table':
        case 'hr':
        case 'xmp':
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          return ancestorInfo.pTagInButtonScope;

        case 'form':
          return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

        case 'li':
          return ancestorInfo.listItemTagAutoclosing;

        case 'dd':
        case 'dt':
          return ancestorInfo.dlItemTagAutoclosing;

        case 'button':
          return ancestorInfo.buttonTagInScope;

        case 'a':
          // Spec says something about storing a list of markers, but it sounds
          // equivalent to this check.
          return ancestorInfo.aTagInScope;

        case 'nobr':
          return ancestorInfo.nobrTagInScope;
      }

      return null;
    };

    var didWarn$1 = {};

    validateDOMNesting = function (childTag, childText, ancestorInfo) {
      ancestorInfo = ancestorInfo || emptyAncestorInfo;
      var parentInfo = ancestorInfo.current;
      var parentTag = parentInfo && parentInfo.tag;

      if (childText != null) {
        if (childTag != null) {
          error('validateDOMNesting: when childText is passed, childTag should be null');
        }

        childTag = '#text';
      }

      var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
      var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
      var invalidParentOrAncestor = invalidParent || invalidAncestor;

      if (!invalidParentOrAncestor) {
        return;
      }

      var ancestorTag = invalidParentOrAncestor.tag;
      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

      if (didWarn$1[warnKey]) {
        return;
      }

      didWarn$1[warnKey] = true;
      var tagDisplayName = childTag;
      var whitespaceInfo = '';

      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';

        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
        }

        error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
      } else {
        error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
      }
    };
  }

  var SUPPRESS_HYDRATION_WARNING$1;

  {
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
  }

  var SUSPENSE_START_DATA = '$';
  var SUSPENSE_END_DATA = '/$';
  var SUSPENSE_PENDING_START_DATA = '$?';
  var SUSPENSE_FALLBACK_START_DATA = '$!';
  var STYLE$1 = 'style';
  var eventsEnabled = null;
  var selectionInformation = null;

  function shouldAutoFocusHostComponent(type, props) {
    switch (type) {
      case 'button':
      case 'input':
      case 'select':
      case 'textarea':
        return !!props.autoFocus;
    }

    return false;
  }
  function getRootHostContext(rootContainerInstance) {
    var type;
    var namespace;
    var nodeType = rootContainerInstance.nodeType;

    switch (nodeType) {
      case DOCUMENT_NODE:
      case DOCUMENT_FRAGMENT_NODE:
        {
          type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
          var root = rootContainerInstance.documentElement;
          namespace = root ? root.namespaceURI : getChildNamespace(null, '');
          break;
        }

      default:
        {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
    }

    {
      var validatedTag = type.toLowerCase();
      var ancestorInfo = updatedAncestorInfo(null, validatedTag);
      return {
        namespace: namespace,
        ancestorInfo: ancestorInfo
      };
    }
  }
  function getChildHostContext(parentHostContext, type, rootContainerInstance) {
    {
      var parentHostContextDev = parentHostContext;
      var namespace = getChildNamespace(parentHostContextDev.namespace, type);
      var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
      return {
        namespace: namespace,
        ancestorInfo: ancestorInfo
      };
    }
  }
  function getPublicInstance(instance) {
    return instance;
  }
  function prepareForCommit(containerInfo) {
    eventsEnabled = isEnabled();
    selectionInformation = getSelectionInformation();
    var activeInstance = null;

    setEnabled(false);
    return activeInstance;
  }
  function resetAfterCommit(containerInfo) {
    restoreSelection(selectionInformation);
    setEnabled(eventsEnabled);
    eventsEnabled = null;
    selectionInformation = null;
  }
  function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
    var parentNamespace;

    {
      // TODO: take namespace into account when validating.
      var hostContextDev = hostContext;
      validateDOMNesting(type, null, hostContextDev.ancestorInfo);

      if (typeof props.children === 'string' || typeof props.children === 'number') {
        var string = '' + props.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
        validateDOMNesting(null, string, ownAncestorInfo);
      }

      parentNamespace = hostContextDev.namespace;
    }

    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
    precacheFiberNode(internalInstanceHandle, domElement);
    updateFiberProps(domElement, props);
    return domElement;
  }
  function appendInitialChild(parentInstance, child) {
    parentInstance.appendChild(child);
  }
  function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
    setInitialProperties(domElement, type, props, rootContainerInstance);
    return shouldAutoFocusHostComponent(type, props);
  }
  function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
    {
      var hostContextDev = hostContext;

      if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
        var string = '' + newProps.children;
        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
        validateDOMNesting(null, string, ownAncestorInfo);
      }
    }

    return diffProperties(domElement, type, oldProps, newProps);
  }
  function shouldSetTextContent(type, props) {
    return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
  }
  function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
    {
      var hostContextDev = hostContext;
      validateDOMNesting(null, text, hostContextDev.ancestorInfo);
    }

    var textNode = createTextNode(text, rootContainerInstance);
    precacheFiberNode(internalInstanceHandle, textNode);
    return textNode;
  }
  // if a component just imports ReactDOM (e.g. for findDOMNode).
  // Some environments might not have setTimeout or clearTimeout.

  var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
  var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
  var noTimeout = -1; // -------------------
  function commitMount(domElement, type, newProps, internalInstanceHandle) {
    // Despite the naming that might imply otherwise, this method only
    // fires if there is an `Update` effect scheduled during mounting.
    // This happens if `finalizeInitialChildren` returns `true` (which it
    // does to implement the `autoFocus` attribute on the client). But
    // there are also other cases when this might happen (such as patching
    // up text content during hydration mismatch). So we'll check this again.
    if (shouldAutoFocusHostComponent(type, newProps)) {
      domElement.focus();
    }
  }
  function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
    // Update the props handle so that we know which props are the ones with
    // with current event handlers.
    updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

    updateProperties(domElement, updatePayload, type, oldProps, newProps);
  }
  function resetTextContent(domElement) {
    setTextContent(domElement, '');
  }
  function commitTextUpdate(textInstance, oldText, newText) {
    textInstance.nodeValue = newText;
  }
  function appendChild(parentInstance, child) {
    parentInstance.appendChild(child);
  }
  function appendChildToContainer(container, child) {
    var parentNode;

    if (container.nodeType === COMMENT_NODE) {
      parentNode = container.parentNode;
      parentNode.insertBefore(child, container);
    } else {
      parentNode = container;
      parentNode.appendChild(child);
    } // This container might be used for a portal.
    // If something inside a portal is clicked, that click should bubble
    // through the React tree. However, on Mobile Safari the click would
    // never bubble through the *DOM* tree unless an ancestor with onclick
    // event exists. So we wouldn't see it and dispatch it.
    // This is why we ensure that non React root containers have inline onclick
    // defined.
    // https://github.com/facebook/react/issues/11918


    var reactRootContainer = container._reactRootContainer;

    if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
      // TODO: This cast may not be sound for SVG, MathML or custom elements.
      trapClickOnNonInteractiveElement(parentNode);
    }
  }
  function insertBefore(parentInstance, child, beforeChild) {
    parentInstance.insertBefore(child, beforeChild);
  }
  function insertInContainerBefore(container, child, beforeChild) {
    if (container.nodeType === COMMENT_NODE) {
      container.parentNode.insertBefore(child, beforeChild);
    } else {
      container.insertBefore(child, beforeChild);
    }
  }

  function removeChild(parentInstance, child) {
    parentInstance.removeChild(child);
  }
  function removeChildFromContainer(container, child) {
    if (container.nodeType === COMMENT_NODE) {
      container.parentNode.removeChild(child);
    } else {
      container.removeChild(child);
    }
  }
  function hideInstance(instance) {
    // TODO: Does this work for all element types? What about MathML? Should we
    // pass host context to this method?
    instance = instance;
    var style = instance.style;

    if (typeof style.setProperty === 'function') {
      style.setProperty('display', 'none', 'important');
    } else {
      style.display = 'none';
    }
  }
  function hideTextInstance(textInstance) {
    textInstance.nodeValue = '';
  }
  function unhideInstance(instance, props) {
    instance = instance;
    var styleProp = props[STYLE$1];
    var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
    instance.style.display = dangerousStyleValue('display', display);
  }
  function unhideTextInstance(textInstance, text) {
    textInstance.nodeValue = text;
  }
  function clearContainer(container) {
    if (container.nodeType === ELEMENT_NODE) {
      container.textContent = '';
    } else if (container.nodeType === DOCUMENT_NODE) {
      var body = container.body;

      if (body != null) {
        body.textContent = '';
      }
    }
  } // -------------------
  function canHydrateInstance(instance, type, props) {
    if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
      return null;
    } // This has now been refined to an element node.


    return instance;
  }
  function canHydrateTextInstance(instance, text) {
    if (text === '' || instance.nodeType !== TEXT_NODE) {
      // Empty strings are not parsed by HTML so there won't be a correct match here.
      return null;
    } // This has now been refined to a text node.


    return instance;
  }
  function isSuspenseInstancePending(instance) {
    return instance.data === SUSPENSE_PENDING_START_DATA;
  }
  function isSuspenseInstanceFallback(instance) {
    return instance.data === SUSPENSE_FALLBACK_START_DATA;
  }

  function getNextHydratable(node) {
    // Skip non-hydratable nodes.
    for (; node != null; node = node.nextSibling) {
      var nodeType = node.nodeType;

      if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
        break;
      }
    }

    return node;
  }

  function getNextHydratableSibling(instance) {
    return getNextHydratable(instance.nextSibling);
  }
  function getFirstHydratableChild(parentInstance) {
    return getNextHydratable(parentInstance.firstChild);
  }
  function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
    precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
    // get attached.

    updateFiberProps(instance, props);
    var parentNamespace;

    {
      var hostContextDev = hostContext;
      parentNamespace = hostContextDev.namespace;
    }

    return diffHydratedProperties(instance, type, props, parentNamespace);
  }
  function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
    precacheFiberNode(internalInstanceHandle, textInstance);
    return diffHydratedText(textInstance, text);
  }
  function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
    var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
    // There might be nested nodes so we need to keep track of how
    // deep we are and only break out when we're back on top.

    var depth = 0;

    while (node) {
      if (node.nodeType === COMMENT_NODE) {
        var data = node.data;

        if (data === SUSPENSE_END_DATA) {
          if (depth === 0) {
            return getNextHydratableSibling(node);
          } else {
            depth--;
          }
        } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
          depth++;
        }
      }

      node = node.nextSibling;
    } // TODO: Warn, we didn't find the end comment boundary.


    return null;
  } // Returns the SuspenseInstance if this node is a direct child of a
  // SuspenseInstance. I.e. if its previous sibling is a Comment with
  // SUSPENSE_x_START_DATA. Otherwise, null.

  function getParentSuspenseInstance(targetInstance) {
    var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
    // There might be nested nodes so we need to keep track of how
    // deep we are and only break out when we're back on top.

    var depth = 0;

    while (node) {
      if (node.nodeType === COMMENT_NODE) {
        var data = node.data;

        if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
          if (depth === 0) {
            return node;
          } else {
            depth--;
          }
        } else if (data === SUSPENSE_END_DATA) {
          depth++;
        }
      }

      node = node.previousSibling;
    }

    return null;
  }
  function commitHydratedContainer(container) {
    // Retry if any event replaying was blocked on this.
    retryIfBlockedOn(container);
  }
  function commitHydratedSuspenseInstance(suspenseInstance) {
    // Retry if any event replaying was blocked on this.
    retryIfBlockedOn(suspenseInstance);
  }
  function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
    {
      warnForUnmatchedText(textInstance, text);
    }
  }
  function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
    if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForUnmatchedText(textInstance, text);
    }
  }
  function didNotHydrateContainerInstance(parentContainer, instance) {
    {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentContainer, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentContainer, instance);
      }
    }
  }
  function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
    if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      if (instance.nodeType === ELEMENT_NODE) {
        warnForDeletedHydratableElement(parentInstance, instance);
      } else if (instance.nodeType === COMMENT_NODE) ; else {
        warnForDeletedHydratableText(parentInstance, instance);
      }
    }
  }
  function didNotFindHydratableContainerInstance(parentContainer, type, props) {
    {
      warnForInsertedHydratedElement(parentContainer, type);
    }
  }
  function didNotFindHydratableContainerTextInstance(parentContainer, text) {
    {
      warnForInsertedHydratedText(parentContainer, text);
    }
  }
  function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
    if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedElement(parentInstance, type);
    }
  }
  function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
    if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
      warnForInsertedHydratedText(parentInstance, text);
    }
  }
  function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
    if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
  }
  var clientId = 0;
  function makeClientIdInDEV(warnOnAccessInDEV) {
    var id = 'r:' + (clientId++).toString(36);
    return {
      toString: function () {
        warnOnAccessInDEV();
        return id;
      },
      valueOf: function () {
        warnOnAccessInDEV();
        return id;
      }
    };
  }
  function isOpaqueHydratingObject(value) {
    return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
  }
  function makeOpaqueHydratingObject(attemptToReadValue) {
    return {
      $$typeof: REACT_OPAQUE_ID_TYPE,
      toString: attemptToReadValue,
      valueOf: attemptToReadValue
    };
  }
  function preparePortalMount(portalInstance) {
    {
      listenToAllSupportedEvents(portalInstance);
    }
  }

  var randomKey = Math.random().toString(36).slice(2);
  var internalInstanceKey = '__reactFiber$' + randomKey;
  var internalPropsKey = '__reactProps$' + randomKey;
  var internalContainerInstanceKey = '__reactContainer$' + randomKey;
  var internalEventHandlersKey = '__reactEvents$' + randomKey;
  function precacheFiberNode(hostInst, node) {
    node[internalInstanceKey] = hostInst;
  }
  function markContainerAsRoot(hostRoot, node) {
    node[internalContainerInstanceKey] = hostRoot;
  }
  function unmarkContainerAsRoot(node) {
    node[internalContainerInstanceKey] = null;
  }
  function isContainerMarkedAsRoot(node) {
    return !!node[internalContainerInstanceKey];
  } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
  // If the target node is part of a hydrated or not yet rendered subtree, then
  // this may also return a SuspenseComponent or HostRoot to indicate that.
  // Conceptually the HostRoot fiber is a child of the Container node. So if you
  // pass the Container node as the targetNode, you will not actually get the
  // HostRoot back. To get to the HostRoot, you need to pass a child of it.
  // The same thing applies to Suspense boundaries.

  function getClosestInstanceFromNode(targetNode) {
    var targetInst = targetNode[internalInstanceKey];

    if (targetInst) {
      // Don't return HostRoot or SuspenseComponent here.
      return targetInst;
    } // If the direct event target isn't a React owned DOM node, we need to look
    // to see if one of its parents is a React owned DOM node.


    var parentNode = targetNode.parentNode;

    while (parentNode) {
      // We'll check if this is a container root that could include
      // React nodes in the future. We need to check this first because
      // if we're a child of a dehydrated container, we need to first
      // find that inner container before moving on to finding the parent
      // instance. Note that we don't check this field on  the targetNode
      // itself because the fibers are conceptually between the container
      // node and the first child. It isn't surrounding the container node.
      // If it's not a container, we check if it's an instance.
      targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

      if (targetInst) {
        // Since this wasn't the direct target of the event, we might have
        // stepped past dehydrated DOM nodes to get here. However they could
        // also have been non-React nodes. We need to answer which one.
        // If we the instance doesn't have any children, then there can't be
        // a nested suspense boundary within it. So we can use this as a fast
        // bailout. Most of the time, when people add non-React children to
        // the tree, it is using a ref to a child-less DOM node.
        // Normally we'd only need to check one of the fibers because if it
        // has ever gone from having children to deleting them or vice versa
        // it would have deleted the dehydrated boundary nested inside already.
        // However, since the HostRoot starts out with an alternate it might
        // have one on the alternate so we need to check in case this was a
        // root.
        var alternate = targetInst.alternate;

        if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
          // Next we need to figure out if the node that skipped past is
          // nested within a dehydrated boundary and if so, which one.
          var suspenseInstance = getParentSuspenseInstance(targetNode);

          while (suspenseInstance !== null) {
            // We found a suspense instance. That means that we haven't
            // hydrated it yet. Even though we leave the comments in the
            // DOM after hydrating, and there are boundaries in the DOM
            // that could already be hydrated, we wouldn't have found them
            // through this pass since if the target is hydrated it would
            // have had an internalInstanceKey on it.
            // Let's get the fiber associated with the SuspenseComponent
            // as the deepest instance.
            var targetSuspenseInst = suspenseInstance[internalInstanceKey];

            if (targetSuspenseInst) {
              return targetSuspenseInst;
            } // If we don't find a Fiber on the comment, it might be because
            // we haven't gotten to hydrate it yet. There might still be a
            // parent boundary that hasn't above this one so we need to find
            // the outer most that is known.


            suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
            // host component also hasn't hydrated yet. We can return it
            // below since it will bail out on the isMounted check later.
          }
        }

        return targetInst;
      }

      targetNode = parentNode;
      parentNode = targetNode.parentNode;
    }

    return null;
  }
  /**
   * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
   * instance, or null if the node was not rendered by this React.
   */

  function getInstanceFromNode(node) {
    var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

    if (inst) {
      if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
        return inst;
      } else {
        return null;
      }
    }

    return null;
  }
  /**
   * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
   * DOM node.
   */

  function getNodeFromInstance(inst) {
    if (inst.tag === HostComponent || inst.tag === HostText) {
      // In Fiber this, is just the state node right now. We assume it will be
      // a host component or host text.
      return inst.stateNode;
    } // Without this first invariant, passing a non-DOM-component triggers the next
    // invariant for a missing parent, which is super confusing.


    {
      {
        throw Error( "getNodeFromInstance: Invalid argument." );
      }
    }
  }
  function getFiberCurrentPropsFromNode(node) {
    return node[internalPropsKey] || null;
  }
  function updateFiberProps(node, props) {
    node[internalPropsKey] = props;
  }
  function getEventListenerSet(node) {
    var elementListenerSet = node[internalEventHandlersKey];

    if (elementListenerSet === undefined) {
      elementListenerSet = node[internalEventHandlersKey] = new Set();
    }

    return elementListenerSet;
  }

  var loggedTypeFailures = {};
  var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

  function setCurrentlyValidatingElement(element) {
    {
      if (element) {
        var owner = element._owner;
        var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
      } else {
        ReactDebugCurrentFrame$1.setExtraStackFrame(null);
      }
    }
  }

  function checkPropTypes(typeSpecs, values, location, componentName, element) {
    {
      // $FlowFixMe This is okay but Flow doesn't know it.
      var has = Function.call.bind(Object.prototype.hasOwnProperty);

      for (var typeSpecName in typeSpecs) {
        if (has(typeSpecs, typeSpecName)) {
          var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.

          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
              err.name = 'Invariant Violation';
              throw err;
            }

            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
          } catch (ex) {
            error$1 = ex;
          }

          if (error$1 && !(error$1 instanceof Error)) {
            setCurrentlyValidatingElement(element);

            error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

            setCurrentlyValidatingElement(null);
          }

          if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error$1.message] = true;
            setCurrentlyValidatingElement(element);

            error('Failed %s type: %s', location, error$1.message);

            setCurrentlyValidatingElement(null);
          }
        }
      }
    }
  }

  var valueStack = [];
  var fiberStack;

  {
    fiberStack = [];
  }

  var index = -1;

  function createCursor(defaultValue) {
    return {
      current: defaultValue
    };
  }

  function pop(cursor, fiber) {
    if (index < 0) {
      {
        error('Unexpected pop.');
      }

      return;
    }

    {
      if (fiber !== fiberStack[index]) {
        error('Unexpected Fiber popped.');
      }
    }

    cursor.current = valueStack[index];
    valueStack[index] = null;

    {
      fiberStack[index] = null;
    }

    index--;
  }

  function push(cursor, value, fiber) {
    index++;
    valueStack[index] = cursor.current;

    {
      fiberStack[index] = fiber;
    }

    cursor.current = value;
  }

  var warnedAboutMissingGetChildContext;

  {
    warnedAboutMissingGetChildContext = {};
  }

  var emptyContextObject = {};

  {
    Object.freeze(emptyContextObject);
  } // A cursor to the current merged context object on the stack.


  var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

  var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
  // We use this to get access to the parent context after we have already
  // pushed the next context provider, and now need to merge their contexts.

  var previousContext = emptyContextObject;

  function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
    {
      if (didPushOwnContextIfProvider && isContextProvider(Component)) {
        // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
      }

      return contextStackCursor.current;
    }
  }

  function cacheContext(workInProgress, unmaskedContext, maskedContext) {
    {
      var instance = workInProgress.stateNode;
      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
  }

  function getMaskedContext(workInProgress, unmaskedContext) {
    {
      var type = workInProgress.type;
      var contextTypes = type.contextTypes;

      if (!contextTypes) {
        return emptyContextObject;
      } // Avoid recreating masked context unless unmasked context has changed.
      // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
      // This may trigger infinite loops if componentWillReceiveProps calls setState.


      var instance = workInProgress.stateNode;

      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }

      var context = {};

      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // Context is created before the class component is instantiated so check for instance.


      if (instance) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return context;
    }
  }

  function hasContextChanged() {
    {
      return didPerformWorkStackCursor.current;
    }
  }

  function isContextProvider(type) {
    {
      var childContextTypes = type.childContextTypes;
      return childContextTypes !== null && childContextTypes !== undefined;
    }
  }

  function popContext(fiber) {
    {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }
  }

  function popTopLevelContextObject(fiber) {
    {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }
  }

  function pushTopLevelContextObject(fiber, context, didChange) {
    {
      if (!(contextStackCursor.current === emptyContextObject)) {
        {
          throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    }
  }

  function processChildContext(fiber, type, parentContext) {
    {
      var instance = fiber.stateNode;
      var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
      // It has only been added in Fiber to match the (unintentional) behavior in Stack.

      if (typeof instance.getChildContext !== 'function') {
        {
          var componentName = getComponentName(type) || 'Unknown';

          if (!warnedAboutMissingGetChildContext[componentName]) {
            warnedAboutMissingGetChildContext[componentName] = true;

            error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
          }
        }

        return parentContext;
      }

      var childContext = instance.getChildContext();

      for (var contextKey in childContext) {
        if (!(contextKey in childContextTypes)) {
          {
            throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
          }
        }
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
      }

      return _assign({}, parentContext, childContext);
    }
  }

  function pushContextProvider(workInProgress) {
    {
      var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
      // If the instance does not exist yet, we will push null at first,
      // and replace it on the stack later when invalidating the context.

      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
      // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

      previousContext = contextStackCursor.current;
      push(contextStackCursor, memoizedMergedChildContext, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
      return true;
    }
  }

  function invalidateContextProvider(workInProgress, type, didChange) {
    {
      var instance = workInProgress.stateNode;

      if (!instance) {
        {
          throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      if (didChange) {
        // Merge parent and own context.
        // Skip this if we're not updating due to sCU.
        // This avoids unnecessarily recomputing memoized values.
        var mergedContext = processChildContext(workInProgress, type, previousContext);
        instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
        // It is important to unwind the context in the reverse order.

        pop(didPerformWorkStackCursor, workInProgress);
        pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

        push(contextStackCursor, mergedContext, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      } else {
        pop(didPerformWorkStackCursor, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      }
    }
  }

  function findCurrentUnmaskedContext(fiber) {
    {
      // Currently this is only used with renderSubtreeIntoContainer; not sure if it
      // makes sense elsewhere
      if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
        {
          throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      var node = fiber;

      do {
        switch (node.tag) {
          case HostRoot:
            return node.stateNode.context;

          case ClassComponent:
            {
              var Component = node.type;

              if (isContextProvider(Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }

              break;
            }
        }

        node = node.return;
      } while (node !== null);

      {
        {
          throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
        }
      }
    }
  }

  var LegacyRoot = 0;
  var BlockingRoot = 1;
  var ConcurrentRoot = 2;

  var rendererID = null;
  var injectedHook = null;
  var hasLoggedError = false;
  var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
  function injectInternals(internals) {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // No DevTools
      return false;
    }

    var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

    if (hook.isDisabled) {
      // This isn't a real property on the hook, but it can be set to opt out
      // of DevTools integration and associated warnings and logs.
      // https://github.com/facebook/react/issues/3877
      return true;
    }

    if (!hook.supportsFiber) {
      {
        error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
      } // DevTools exists, even though it doesn't support Fiber.


      return true;
    }

    try {
      rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

      injectedHook = hook;
    } catch (err) {
      // Catch all errors because it is unsafe to throw during initialization.
      {
        error('React instrumentation encountered an error: %s.', err);
      }
    } // DevTools exists


    return true;
  }
  function onScheduleRoot(root, children) {
    {
      if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
        try {
          injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
          if ( !hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    }
  }
  function onCommitRoot(root, priorityLevel) {
    if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
      try {
        var didError = (root.current.flags & DidCapture) === DidCapture;

        if (enableProfilerTimer) {
          injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
        }
      } catch (err) {
        {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    }
  }
  function onCommitUnmount(fiber) {
    if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
      try {
        injectedHook.onCommitFiberUnmount(rendererID, fiber);
      } catch (err) {
        {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    }
  }

  var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
      Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
      Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
      Scheduler_shouldYield = Scheduler.unstable_shouldYield,
      Scheduler_requestPaint = Scheduler.unstable_requestPaint,
      Scheduler_now$1 = Scheduler.unstable_now,
      Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
      Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
      Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
      Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
      Scheduler_LowPriority = Scheduler.unstable_LowPriority,
      Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

  {
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
      {
        throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
      }
    }
  }

  var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
  // ascending numbers so we can compare them like numbers. They start at 90 to
  // avoid clashing with Scheduler's priorities.

  var ImmediatePriority$1 = 99;
  var UserBlockingPriority$2 = 98;
  var NormalPriority$1 = 97;
  var LowPriority$1 = 96;
  var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.

  var NoPriority$1 = 90;
  var shouldYield = Scheduler_shouldYield;
  var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
  Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
  var syncQueue = null;
  var immediateQueueCallbackNode = null;
  var isFlushingSyncQueue = false;
  var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
  // This will be the case for modern browsers that support `performance.now`. In
  // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
  // timestamp. In that case, subtract the module initialization time to simulate
  // the behavior of performance.now and keep our times small enough to fit
  // within 32 bits.
  // TODO: Consider lifting this into Scheduler.

  var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
    return Scheduler_now$1() - initialTimeMs$1;
  };
  function getCurrentPriorityLevel() {
    switch (Scheduler_getCurrentPriorityLevel()) {
      case Scheduler_ImmediatePriority:
        return ImmediatePriority$1;

      case Scheduler_UserBlockingPriority:
        return UserBlockingPriority$2;

      case Scheduler_NormalPriority:
        return NormalPriority$1;

      case Scheduler_LowPriority:
        return LowPriority$1;

      case Scheduler_IdlePriority:
        return IdlePriority$1;

      default:
        {
          {
            throw Error( "Unknown priority level." );
          }
        }

    }
  }

  function reactPriorityToSchedulerPriority(reactPriorityLevel) {
    switch (reactPriorityLevel) {
      case ImmediatePriority$1:
        return Scheduler_ImmediatePriority;

      case UserBlockingPriority$2:
        return Scheduler_UserBlockingPriority;

      case NormalPriority$1:
        return Scheduler_NormalPriority;

      case LowPriority$1:
        return Scheduler_LowPriority;

      case IdlePriority$1:
        return Scheduler_IdlePriority;

      default:
        {
          {
            throw Error( "Unknown priority level." );
          }
        }

    }
  }

  function runWithPriority$1(reactPriorityLevel, fn) {
    var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_runWithPriority(priorityLevel, fn);
  }
  function scheduleCallback(reactPriorityLevel, callback, options) {
    var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
    return Scheduler_scheduleCallback(priorityLevel, callback, options);
  }
  function scheduleSyncCallback(callback) {
    // Push this callback into an internal queue. We'll flush these either in
    // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
    if (syncQueue === null) {
      syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

      immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
    } else {
      // Push onto existing queue. Don't need to schedule a callback because
      // we already scheduled one when we created the queue.
      syncQueue.push(callback);
    }

    return fakeCallbackNode;
  }
  function cancelCallback(callbackNode) {
    if (callbackNode !== fakeCallbackNode) {
      Scheduler_cancelCallback(callbackNode);
    }
  }
  function flushSyncCallbackQueue() {
    if (immediateQueueCallbackNode !== null) {
      var node = immediateQueueCallbackNode;
      immediateQueueCallbackNode = null;
      Scheduler_cancelCallback(node);
    }

    flushSyncCallbackQueueImpl();
  }

  function flushSyncCallbackQueueImpl() {
    if (!isFlushingSyncQueue && syncQueue !== null) {
      // Prevent re-entrancy.
      isFlushingSyncQueue = true;
      var i = 0;

      {
        try {
          var _isSync2 = true;
          var _queue = syncQueue;
          runWithPriority$1(ImmediatePriority$1, function () {
            for (; i < _queue.length; i++) {
              var callback = _queue[i];

              do {
                callback = callback(_isSync2);
              } while (callback !== null);
            }
          });
          syncQueue = null;
        } catch (error) {
          // If something throws, leave the remaining callbacks on the queue.
          if (syncQueue !== null) {
            syncQueue = syncQueue.slice(i + 1);
          } // Resume flushing in the next tick


          Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
          throw error;
        } finally {
          isFlushingSyncQueue = false;
        }
      }
    }
  }

  // TODO: this is special because it gets imported during build.
  var ReactVersion = '17.0.2';

  var NoMode = 0;
  var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
  // tag instead

  var BlockingMode = 2;
  var ConcurrentMode = 4;
  var ProfileMode = 8;
  var DebugTracingMode = 16;

  var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
  var NoTransition = 0;
  function requestCurrentTransition() {
    return ReactCurrentBatchConfig.transition;
  }

  var ReactStrictModeWarnings = {
    recordUnsafeLifecycleWarnings: function (fiber, instance) {},
    flushPendingUnsafeLifecycleWarnings: function () {},
    recordLegacyContextWarning: function (fiber, instance) {},
    flushLegacyContextWarning: function () {},
    discardPendingWarnings: function () {}
  };

  {
    var findStrictRoot = function (fiber) {
      var maybeStrictRoot = null;
      var node = fiber;

      while (node !== null) {
        if (node.mode & StrictMode) {
          maybeStrictRoot = node;
        }

        node = node.return;
      }

      return maybeStrictRoot;
    };

    var setToSortedString = function (set) {
      var array = [];
      set.forEach(function (value) {
        array.push(value);
      });
      return array.sort().join(', ');
    };

    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

    var didWarnAboutUnsafeLifecycles = new Set();

    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
      // Dedup strategy: Warn once per component.
      if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
        return;
      }

      if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
      instance.componentWillMount.__suppressDeprecationWarning !== true) {
        pendingComponentWillMountWarnings.push(fiber);
      }

      if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
        pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        pendingComponentWillReceivePropsWarnings.push(fiber);
      }

      if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        pendingComponentWillUpdateWarnings.push(fiber);
      }

      if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
        pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
      }
    };

    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
      // We do an initial pass to gather component names
      var componentWillMountUniqueNames = new Set();

      if (pendingComponentWillMountWarnings.length > 0) {
        pendingComponentWillMountWarnings.forEach(function (fiber) {
          componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingComponentWillMountWarnings = [];
      }

      var UNSAFE_componentWillMountUniqueNames = new Set();

      if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
        pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
          UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingUNSAFE_ComponentWillMountWarnings = [];
      }

      var componentWillReceivePropsUniqueNames = new Set();

      if (pendingComponentWillReceivePropsWarnings.length > 0) {
        pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
          componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingComponentWillReceivePropsWarnings = [];
      }

      var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

      if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
        pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
          UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      }

      var componentWillUpdateUniqueNames = new Set();

      if (pendingComponentWillUpdateWarnings.length > 0) {
        pendingComponentWillUpdateWarnings.forEach(function (fiber) {
          componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingComponentWillUpdateWarnings = [];
      }

      var UNSAFE_componentWillUpdateUniqueNames = new Set();

      if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
        pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
          UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutUnsafeLifecycles.add(fiber.type);
        });
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
      } // Finally, we flush all the warnings
      // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


      if (UNSAFE_componentWillMountUniqueNames.size > 0) {
        var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

        error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
      }

      if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
        var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

        error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
      }

      if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
        var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

        error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
      }

      if (componentWillMountUniqueNames.size > 0) {
        var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

        warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
      }

      if (componentWillReceivePropsUniqueNames.size > 0) {
        var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

        warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
      }

      if (componentWillUpdateUniqueNames.size > 0) {
        var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

        warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
      }
    };

    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

    var didWarnAboutLegacyContext = new Set();

    ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
      var strictRoot = findStrictRoot(fiber);

      if (strictRoot === null) {
        error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

        return;
      } // Dedup strategy: Warn once per component.


      if (didWarnAboutLegacyContext.has(fiber.type)) {
        return;
      }

      var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

      if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
        if (warningsForRoot === undefined) {
          warningsForRoot = [];
          pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
        }

        warningsForRoot.push(fiber);
      }
    };

    ReactStrictModeWarnings.flushLegacyContextWarning = function () {
      pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
        if (fiberArray.length === 0) {
          return;
        }

        var firstFiber = fiberArray[0];
        var uniqueNames = new Set();
        fiberArray.forEach(function (fiber) {
          uniqueNames.add(getComponentName(fiber.type) || 'Component');
          didWarnAboutLegacyContext.add(fiber.type);
        });
        var sortedNames = setToSortedString(uniqueNames);

        try {
          setCurrentFiber(firstFiber);

          error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
        } finally {
          resetCurrentFiber();
        }
      });
    };

    ReactStrictModeWarnings.discardPendingWarnings = function () {
      pendingComponentWillMountWarnings = [];
      pendingUNSAFE_ComponentWillMountWarnings = [];
      pendingComponentWillReceivePropsWarnings = [];
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      pendingComponentWillUpdateWarnings = [];
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
      pendingLegacyContextWarning = new Map();
    };
  }

  function resolveDefaultProps(Component, baseProps) {
    if (Component && Component.defaultProps) {
      // Resolve default props. Taken from ReactElement
      var props = _assign({}, baseProps);

      var defaultProps = Component.defaultProps;

      for (var propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }

      return props;
    }

    return baseProps;
  }

  // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
  // Math.pow(2, 30) - 1
  // 0b111111111111111111111111111111
  var MAX_SIGNED_31_BIT_INT = 1073741823;

  var valueCursor = createCursor(null);
  var rendererSigil;

  {
    // Use this to detect multiple renderers using the same context
    rendererSigil = {};
  }

  var currentlyRenderingFiber = null;
  var lastContextDependency = null;
  var lastContextWithAllBitsObserved = null;
  var isDisallowedContextReadInDEV = false;
  function resetContextDependencies() {
    // This is called right before React yields execution, to ensure `readContext`
    // cannot be called outside the render phase.
    currentlyRenderingFiber = null;
    lastContextDependency = null;
    lastContextWithAllBitsObserved = null;

    {
      isDisallowedContextReadInDEV = false;
    }
  }
  function enterDisallowedContextReadInDEV() {
    {
      isDisallowedContextReadInDEV = true;
    }
  }
  function exitDisallowedContextReadInDEV() {
    {
      isDisallowedContextReadInDEV = false;
    }
  }
  function pushProvider(providerFiber, nextValue) {
    var context = providerFiber.type._context;

    {
      push(valueCursor, context._currentValue, providerFiber);
      context._currentValue = nextValue;

      {
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
          error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
        }

        context._currentRenderer = rendererSigil;
      }
    }
  }
  function popProvider(providerFiber) {
    var currentValue = valueCursor.current;
    pop(valueCursor, providerFiber);
    var context = providerFiber.type._context;

    {
      context._currentValue = currentValue;
    }
  }
  function calculateChangedBits(context, newValue, oldValue) {
    if (objectIs(oldValue, newValue)) {
      // No change
      return 0;
    } else {
      var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

      {
        if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
          error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
        }
      }

      return changedBits | 0;
    }
  }
  function scheduleWorkOnParentPath(parent, renderLanes) {
    // Update the child lanes of all the ancestors, including the alternates.
    var node = parent;

    while (node !== null) {
      var alternate = node.alternate;

      if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
        node.childLanes = mergeLanes(node.childLanes, renderLanes);

        if (alternate !== null) {
          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
        }
      } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
      } else {
        // Neither alternate was updated, which means the rest of the
        // ancestor path already has sufficient priority.
        break;
      }

      node = node.return;
    }
  }
  function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
    var fiber = workInProgress.child;

    if (fiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      fiber.return = workInProgress;
    }

    while (fiber !== null) {
      var nextFiber = void 0; // Visit this fiber.

      var list = fiber.dependencies;

      if (list !== null) {
        nextFiber = fiber.child;
        var dependency = list.firstContext;

        while (dependency !== null) {
          // Check if the context matches.
          if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
            // Match! Schedule an update on this fiber.
            if (fiber.tag === ClassComponent) {
              // Schedule a force update on the work-in-progress.
              var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
              update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
              // update to the current fiber, too, which means it will persist even if
              // this render is thrown away. Since it's a race condition, not sure it's
              // worth fixing.

              enqueueUpdate(fiber, update);
            }

            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
            var alternate = fiber.alternate;

            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
            }

            scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.

            list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
            // dependency list.

            break;
          }

          dependency = dependency.next;
        }
      } else if (fiber.tag === ContextProvider) {
        // Don't scan deeper if this is a matching provider
        nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
      } else {
        // Traverse down.
        nextFiber = fiber.child;
      }

      if (nextFiber !== null) {
        // Set the return pointer of the child to the work-in-progress fiber.
        nextFiber.return = fiber;
      } else {
        // No child. Traverse to next sibling.
        nextFiber = fiber;

        while (nextFiber !== null) {
          if (nextFiber === workInProgress) {
            // We're back to the root of this subtree. Exit.
            nextFiber = null;
            break;
          }

          var sibling = nextFiber.sibling;

          if (sibling !== null) {
            // Set the return pointer of the sibling to the work-in-progress fiber.
            sibling.return = nextFiber.return;
            nextFiber = sibling;
            break;
          } // No more siblings. Traverse up.


          nextFiber = nextFiber.return;
        }
      }

      fiber = nextFiber;
    }
  }
  function prepareToReadContext(workInProgress, renderLanes) {
    currentlyRenderingFiber = workInProgress;
    lastContextDependency = null;
    lastContextWithAllBitsObserved = null;
    var dependencies = workInProgress.dependencies;

    if (dependencies !== null) {
      var firstContext = dependencies.firstContext;

      if (firstContext !== null) {
        if (includesSomeLane(dependencies.lanes, renderLanes)) {
          // Context list has a pending update. Mark that this fiber performed work.
          markWorkInProgressReceivedUpdate();
        } // Reset the work-in-progress list


        dependencies.firstContext = null;
      }
    }
  }
  function readContext(context, observedBits) {
    {
      // This warning would fire if you read context inside a Hook like useMemo.
      // Unlike the class check below, it's not enforced in production for perf.
      if (isDisallowedContextReadInDEV) {
        error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      }
    }

    if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
      var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

      if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
        // Observe all updates.
        lastContextWithAllBitsObserved = context;
        resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
      } else {
        resolvedObservedBits = observedBits;
      }

      var contextItem = {
        context: context,
        observedBits: resolvedObservedBits,
        next: null
      };

      if (lastContextDependency === null) {
        if (!(currentlyRenderingFiber !== null)) {
          {
            throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
          }
        } // This is the first dependency for this component. Create a new list.


        lastContextDependency = contextItem;
        currentlyRenderingFiber.dependencies = {
          lanes: NoLanes,
          firstContext: contextItem,
          responders: null
        };
      } else {
        // Append a new context item.
        lastContextDependency = lastContextDependency.next = contextItem;
      }
    }

    return  context._currentValue ;
  }

  var UpdateState = 0;
  var ReplaceState = 1;
  var ForceUpdate = 2;
  var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
  // It should only be read right after calling `processUpdateQueue`, via
  // `checkHasForceUpdateAfterProcessing`.

  var hasForceUpdate = false;
  var didWarnUpdateInsideUpdate;
  var currentlyProcessingQueue;

  {
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
  }

  function initializeUpdateQueue(fiber) {
    var queue = {
      baseState: fiber.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: {
        pending: null
      },
      effects: null
    };
    fiber.updateQueue = queue;
  }
  function cloneUpdateQueue(current, workInProgress) {
    // Clone the update queue from current. Unless it's already a clone.
    var queue = workInProgress.updateQueue;
    var currentQueue = current.updateQueue;

    if (queue === currentQueue) {
      var clone = {
        baseState: currentQueue.baseState,
        firstBaseUpdate: currentQueue.firstBaseUpdate,
        lastBaseUpdate: currentQueue.lastBaseUpdate,
        shared: currentQueue.shared,
        effects: currentQueue.effects
      };
      workInProgress.updateQueue = clone;
    }
  }
  function createUpdate(eventTime, lane) {
    var update = {
      eventTime: eventTime,
      lane: lane,
      tag: UpdateState,
      payload: null,
      callback: null,
      next: null
    };
    return update;
  }
  function enqueueUpdate(fiber, update) {
    var updateQueue = fiber.updateQueue;

    if (updateQueue === null) {
      // Only occurs if the fiber has been unmounted.
      return;
    }

    var sharedQueue = updateQueue.shared;
    var pending = sharedQueue.pending;

    if (pending === null) {
      // This is the first update. Create a circular list.
      update.next = update;
    } else {
      update.next = pending.next;
      pending.next = update;
    }

    sharedQueue.pending = update;

    {
      if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
        error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

        didWarnUpdateInsideUpdate = true;
      }
    }
  }
  function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
    // Captured updates are updates that are thrown by a child during the render
    // phase. They should be discarded if the render is aborted. Therefore,
    // we should only put them on the work-in-progress queue, not the current one.
    var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

    var current = workInProgress.alternate;

    if (current !== null) {
      var currentQueue = current.updateQueue;

      if (queue === currentQueue) {
        // The work-in-progress queue is the same as current. This happens when
        // we bail out on a parent fiber that then captures an error thrown by
        // a child. Since we want to append the update only to the work-in
        // -progress queue, we need to clone the updates. We usually clone during
        // processUpdateQueue, but that didn't happen in this case because we
        // skipped over the parent when we bailed out.
        var newFirst = null;
        var newLast = null;
        var firstBaseUpdate = queue.firstBaseUpdate;

        if (firstBaseUpdate !== null) {
          // Loop through the updates and clone them.
          var update = firstBaseUpdate;

          do {
            var clone = {
              eventTime: update.eventTime,
              lane: update.lane,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };

            if (newLast === null) {
              newFirst = newLast = clone;
            } else {
              newLast.next = clone;
              newLast = clone;
            }

            update = update.next;
          } while (update !== null); // Append the captured update the end of the cloned list.


          if (newLast === null) {
            newFirst = newLast = capturedUpdate;
          } else {
            newLast.next = capturedUpdate;
            newLast = capturedUpdate;
          }
        } else {
          // There are no base updates.
          newFirst = newLast = capturedUpdate;
        }

        queue = {
          baseState: currentQueue.baseState,
          firstBaseUpdate: newFirst,
          lastBaseUpdate: newLast,
          shared: currentQueue.shared,
          effects: currentQueue.effects
        };
        workInProgress.updateQueue = queue;
        return;
      }
    } // Append the update to the end of the list.


    var lastBaseUpdate = queue.lastBaseUpdate;

    if (lastBaseUpdate === null) {
      queue.firstBaseUpdate = capturedUpdate;
    } else {
      lastBaseUpdate.next = capturedUpdate;
    }

    queue.lastBaseUpdate = capturedUpdate;
  }

  function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
    switch (update.tag) {
      case ReplaceState:
        {
          var payload = update.payload;

          if (typeof payload === 'function') {
            // Updater function
            {
              enterDisallowedContextReadInDEV();
            }

            var nextState = payload.call(instance, prevState, nextProps);

            {
              if ( workInProgress.mode & StrictMode) {
                disableLogs();

                try {
                  payload.call(instance, prevState, nextProps);
                } finally {
                  reenableLogs();
                }
              }

              exitDisallowedContextReadInDEV();
            }

            return nextState;
          } // State object


          return payload;
        }

      case CaptureUpdate:
        {
          workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
        }
      // Intentional fallthrough

      case UpdateState:
        {
          var _payload = update.payload;
          var partialState;

          if (typeof _payload === 'function') {
            // Updater function
            {
              enterDisallowedContextReadInDEV();
            }

            partialState = _payload.call(instance, prevState, nextProps);

            {
              if ( workInProgress.mode & StrictMode) {
                disableLogs();

                try {
                  _payload.call(instance, prevState, nextProps);
                } finally {
                  reenableLogs();
                }
              }

              exitDisallowedContextReadInDEV();
            }
          } else {
            // Partial state object
            partialState = _payload;
          }

          if (partialState === null || partialState === undefined) {
            // Null and undefined are treated as no-ops.
            return prevState;
          } // Merge the partial state and the previous state.


          return _assign({}, prevState, partialState);
        }

      case ForceUpdate:
        {
          hasForceUpdate = true;
          return prevState;
        }
    }

    return prevState;
  }

  function processUpdateQueue(workInProgress, props, instance, renderLanes) {
    // This is always non-null on a ClassComponent or HostRoot
    var queue = workInProgress.updateQueue;
    hasForceUpdate = false;

    {
      currentlyProcessingQueue = queue.shared;
    }

    var firstBaseUpdate = queue.firstBaseUpdate;
    var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

    var pendingQueue = queue.shared.pending;

    if (pendingQueue !== null) {
      queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
      // and last so that it's non-circular.

      var lastPendingUpdate = pendingQueue;
      var firstPendingUpdate = lastPendingUpdate.next;
      lastPendingUpdate.next = null; // Append pending updates to base queue

      if (lastBaseUpdate === null) {
        firstBaseUpdate = firstPendingUpdate;
      } else {
        lastBaseUpdate.next = firstPendingUpdate;
      }

      lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
      // we need to transfer the updates to that queue, too. Because the base
      // queue is a singly-linked list with no cycles, we can append to both
      // lists and take advantage of structural sharing.
      // TODO: Pass `current` as argument

      var current = workInProgress.alternate;

      if (current !== null) {
        // This is always non-null on a ClassComponent or HostRoot
        var currentQueue = current.updateQueue;
        var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

        if (currentLastBaseUpdate !== lastBaseUpdate) {
          if (currentLastBaseUpdate === null) {
            currentQueue.firstBaseUpdate = firstPendingUpdate;
          } else {
            currentLastBaseUpdate.next = firstPendingUpdate;
          }

          currentQueue.lastBaseUpdate = lastPendingUpdate;
        }
      }
    } // These values may change as we process the queue.


    if (firstBaseUpdate !== null) {
      // Iterate through the list of updates to compute the result.
      var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
      // from the original lanes.

      var newLanes = NoLanes;
      var newBaseState = null;
      var newFirstBaseUpdate = null;
      var newLastBaseUpdate = null;
      var update = firstBaseUpdate;

      do {
        var updateLane = update.lane;
        var updateEventTime = update.eventTime;

        if (!isSubsetOfLanes(renderLanes, updateLane)) {
          // Priority is insufficient. Skip this update. If this is the first
          // skipped update, the previous update/state is the new base
          // update/state.
          var clone = {
            eventTime: updateEventTime,
            lane: updateLane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newLastBaseUpdate === null) {
            newFirstBaseUpdate = newLastBaseUpdate = clone;
            newBaseState = newState;
          } else {
            newLastBaseUpdate = newLastBaseUpdate.next = clone;
          } // Update the remaining priority in the queue.


          newLanes = mergeLanes(newLanes, updateLane);
        } else {
          // This update does have sufficient priority.
          if (newLastBaseUpdate !== null) {
            var _clone = {
              eventTime: updateEventTime,
              // This update is going to be committed so we never want uncommit
              // it. Using NoLane works because 0 is a subset of all bitmasks, so
              // this will never be skipped by the check above.
              lane: NoLane,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            newLastBaseUpdate = newLastBaseUpdate.next = _clone;
          } // Process this update.


          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
          var callback = update.callback;

          if (callback !== null) {
            workInProgress.flags |= Callback;
            var effects = queue.effects;

            if (effects === null) {
              queue.effects = [update];
            } else {
              effects.push(update);
            }
          }
        }

        update = update.next;

        if (update === null) {
          pendingQueue = queue.shared.pending;

          if (pendingQueue === null) {
            break;
          } else {
            // An update was scheduled from inside a reducer. Add the new
            // pending updates to the end of the list and keep processing.
            var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
            // unravel them when transferring them to the base queue.

            var _firstPendingUpdate = _lastPendingUpdate.next;
            _lastPendingUpdate.next = null;
            update = _firstPendingUpdate;
            queue.lastBaseUpdate = _lastPendingUpdate;
            queue.shared.pending = null;
          }
        }
      } while (true);

      if (newLastBaseUpdate === null) {
        newBaseState = newState;
      }

      queue.baseState = newBaseState;
      queue.firstBaseUpdate = newFirstBaseUpdate;
      queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
      // This should be fine because the only two other things that contribute to
      // expiration time are props and context. We're already in the middle of the
      // begin phase by the time we start processing the queue, so we've already
      // dealt with the props. Context in components that specify
      // shouldComponentUpdate is tricky; but we'll have to account for
      // that regardless.

      markSkippedUpdateLanes(newLanes);
      workInProgress.lanes = newLanes;
      workInProgress.memoizedState = newState;
    }

    {
      currentlyProcessingQueue = null;
    }
  }

  function callCallback(callback, context) {
    if (!(typeof callback === 'function')) {
      {
        throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
      }
    }

    callback.call(context);
  }

  function resetHasForceUpdateBeforeProcessing() {
    hasForceUpdate = false;
  }
  function checkHasForceUpdateAfterProcessing() {
    return hasForceUpdate;
  }
  function commitUpdateQueue(finishedWork, finishedQueue, instance) {
    // Commit the effects
    var effects = finishedQueue.effects;
    finishedQueue.effects = null;

    if (effects !== null) {
      for (var i = 0; i < effects.length; i++) {
        var effect = effects[i];
        var callback = effect.callback;

        if (callback !== null) {
          effect.callback = null;
          callCallback(callback, instance);
        }
      }
    }
  }

  var fakeInternalInstance = {};
  var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
  // We'll use it to determine whether we need to initialize legacy refs.

  var emptyRefsObject = new React.Component().refs;
  var didWarnAboutStateAssignmentForComponent;
  var didWarnAboutUninitializedState;
  var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
  var didWarnAboutLegacyLifecyclesAndDerivedState;
  var didWarnAboutUndefinedDerivedState;
  var warnOnUndefinedDerivedState;
  var warnOnInvalidCallback;
  var didWarnAboutDirectlyAssigningPropsToState;
  var didWarnAboutContextTypeAndContextTypes;
  var didWarnAboutInvalidateContextType;

  {
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();

    warnOnInvalidCallback = function (callback, callerName) {
      if (callback === null || typeof callback === 'function') {
        return;
      }

      var key = callerName + '_' + callback;

      if (!didWarnOnInvalidCallback.has(key)) {
        didWarnOnInvalidCallback.add(key);

        error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
      }
    };

    warnOnUndefinedDerivedState = function (type, partialState) {
      if (partialState === undefined) {
        var componentName = getComponentName(type) || 'Component';

        if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
          didWarnAboutUndefinedDerivedState.add(componentName);

          error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
        }
      }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.


    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
      enumerable: false,
      value: function () {
        {
          {
            throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
          }
        }
      }
    });
    Object.freeze(fakeInternalInstance);
  }

  function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
    var prevState = workInProgress.memoizedState;

    {
      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          // Invoke the function an extra time to help detect side-effects.
          getDerivedStateFromProps(nextProps, prevState);
        } finally {
          reenableLogs();
        }
      }
    }

    var partialState = getDerivedStateFromProps(nextProps, prevState);

    {
      warnOnUndefinedDerivedState(ctor, partialState);
    } // Merge the partial state and the previous state.


    var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
    workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
    // base state.

    if (workInProgress.lanes === NoLanes) {
      // Queue is always non-null for classes
      var updateQueue = workInProgress.updateQueue;
      updateQueue.baseState = memoizedState;
    }
  }
  var classComponentUpdater = {
    isMounted: isMounted,
    enqueueSetState: function (inst, payload, callback) {
      var fiber = get(inst);
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(fiber);
      var update = createUpdate(eventTime, lane);
      update.payload = payload;

      if (callback !== undefined && callback !== null) {
        {
          warnOnInvalidCallback(callback, 'setState');
        }

        update.callback = callback;
      }

      enqueueUpdate(fiber, update);
      scheduleUpdateOnFiber(fiber, lane, eventTime);
    },
    enqueueReplaceState: function (inst, payload, callback) {
      var fiber = get(inst);
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(fiber);
      var update = createUpdate(eventTime, lane);
      update.tag = ReplaceState;
      update.payload = payload;

      if (callback !== undefined && callback !== null) {
        {
          warnOnInvalidCallback(callback, 'replaceState');
        }

        update.callback = callback;
      }

      enqueueUpdate(fiber, update);
      scheduleUpdateOnFiber(fiber, lane, eventTime);
    },
    enqueueForceUpdate: function (inst, callback) {
      var fiber = get(inst);
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(fiber);
      var update = createUpdate(eventTime, lane);
      update.tag = ForceUpdate;

      if (callback !== undefined && callback !== null) {
        {
          warnOnInvalidCallback(callback, 'forceUpdate');
        }

        update.callback = callback;
      }

      enqueueUpdate(fiber, update);
      scheduleUpdateOnFiber(fiber, lane, eventTime);
    }
  };

  function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
    var instance = workInProgress.stateNode;

    if (typeof instance.shouldComponentUpdate === 'function') {
      {
        if ( workInProgress.mode & StrictMode) {
          disableLogs();

          try {
            // Invoke the function an extra time to help detect side-effects.
            instance.shouldComponentUpdate(newProps, newState, nextContext);
          } finally {
            reenableLogs();
          }
        }
      }

      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

      {
        if (shouldUpdate === undefined) {
          error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
        }
      }

      return shouldUpdate;
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent) {
      return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
    }

    return true;
  }

  function checkClassInstance(workInProgress, ctor, newProps) {
    var instance = workInProgress.stateNode;

    {
      var name = getComponentName(ctor) || 'Component';
      var renderPresent = instance.render;

      if (!renderPresent) {
        if (ctor.prototype && typeof ctor.prototype.render === 'function') {
          error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
        } else {
          error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
        }
      }

      if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
        error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
      }

      if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
        error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
      }

      if (instance.propTypes) {
        error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
      }

      if (instance.contextType) {
        error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
      }

      {
        if (instance.contextTypes) {
          error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
        }

        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
          didWarnAboutContextTypeAndContextTypes.add(ctor);

          error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
        }
      }

      if (typeof instance.componentShouldUpdate === 'function') {
        error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
      }

      if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
        error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
      }

      if (typeof instance.componentDidUnmount === 'function') {
        error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
      }

      if (typeof instance.componentDidReceiveProps === 'function') {
        error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
      }

      if (typeof instance.componentWillRecieveProps === 'function') {
        error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
      }

      if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
        error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
      }

      var hasMutatedProps = instance.props !== newProps;

      if (instance.props !== undefined && hasMutatedProps) {
        error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
      }

      if (instance.defaultProps) {
        error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
      }

      if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

        error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
      }

      if (typeof instance.getDerivedStateFromProps === 'function') {
        error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
      }

      if (typeof instance.getDerivedStateFromError === 'function') {
        error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
      }

      if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
        error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
      }

      var _state = instance.state;

      if (_state && (typeof _state !== 'object' || isArray(_state))) {
        error('%s.state: must be set to an object or null', name);
      }

      if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
        error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
      }
    }
  }

  function adoptClassInstance(workInProgress, instance) {
    instance.updater = classComponentUpdater;
    workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

    set(instance, workInProgress);

    {
      instance._reactInternalInstance = fakeInternalInstance;
    }
  }

  function constructClassInstance(workInProgress, ctor, props) {
    var isLegacyContextConsumer = false;
    var unmaskedContext = emptyContextObject;
    var context = emptyContextObject;
    var contextType = ctor.contextType;

    {
      if ('contextType' in ctor) {
        var isValid = // Allow null for conditional declaration
        contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

        if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
          didWarnAboutInvalidateContextType.add(ctor);
          var addendum = '';

          if (contextType === undefined) {
            addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
          } else if (typeof contextType !== 'object') {
            addendum = ' However, it is set to a ' + typeof contextType + '.';
          } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
            addendum = ' Did you accidentally pass the Context.Provider instead?';
          } else if (contextType._context !== undefined) {
            // <Context.Consumer>
            addendum = ' Did you accidentally pass the Context.Consumer instead?';
          } else {
            addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
          }

          error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
        }
      }
    }

    if (typeof contextType === 'object' && contextType !== null) {
      context = readContext(contextType);
    } else {
      unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      var contextTypes = ctor.contextTypes;
      isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
      context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
    } // Instantiate twice to help detect side-effects.


    {
      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          new ctor(props, context); // eslint-disable-line no-new
        } finally {
          reenableLogs();
        }
      }
    }

    var instance = new ctor(props, context);
    var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
    adoptClassInstance(workInProgress, instance);

    {
      if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
        var componentName = getComponentName(ctor) || 'Component';

        if (!didWarnAboutUninitializedState.has(componentName)) {
          didWarnAboutUninitializedState.add(componentName);

          error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
        }
      } // If new component APIs are defined, "unsafe" lifecycles won't be called.
      // Warn about these lifecycles if they are present.
      // Don't warn about react-lifecycles-compat polyfilled methods though.


      if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
        var foundWillMountName = null;
        var foundWillReceivePropsName = null;
        var foundWillUpdateName = null;

        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          foundWillMountName = 'componentWillMount';
        } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
          foundWillMountName = 'UNSAFE_componentWillMount';
        }

        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          foundWillReceivePropsName = 'componentWillReceiveProps';
        } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
        }

        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          foundWillUpdateName = 'componentWillUpdate';
        } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
          foundWillUpdateName = 'UNSAFE_componentWillUpdate';
        }

        if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
          var _componentName = getComponentName(ctor) || 'Component';

          var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

          if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

            error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
          }
        }
      }
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // ReactFiberContext usually updates this cache but can't for newly-created instances.


    if (isLegacyContextConsumer) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return instance;
  }

  function callComponentWillMount(workInProgress, instance) {
    var oldState = instance.state;

    if (typeof instance.componentWillMount === 'function') {
      instance.componentWillMount();
    }

    if (typeof instance.UNSAFE_componentWillMount === 'function') {
      instance.UNSAFE_componentWillMount();
    }

    if (oldState !== instance.state) {
      {
        error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
      }

      classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
    }
  }

  function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
    var oldState = instance.state;

    if (typeof instance.componentWillReceiveProps === 'function') {
      instance.componentWillReceiveProps(newProps, nextContext);
    }

    if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
    }

    if (instance.state !== oldState) {
      {
        var componentName = getComponentName(workInProgress.type) || 'Component';

        if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
          didWarnAboutStateAssignmentForComponent.add(componentName);

          error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
        }
      }

      classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
    }
  } // Invokes the mount life-cycles on a previously never rendered instance.


  function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    {
      checkClassInstance(workInProgress, ctor, newProps);
    }

    var instance = workInProgress.stateNode;
    instance.props = newProps;
    instance.state = workInProgress.memoizedState;
    instance.refs = emptyRefsObject;
    initializeUpdateQueue(workInProgress);
    var contextType = ctor.contextType;

    if (typeof contextType === 'object' && contextType !== null) {
      instance.context = readContext(contextType);
    } else {
      var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      instance.context = getMaskedContext(workInProgress, unmaskedContext);
    }

    {
      if (instance.state === newProps) {
        var componentName = getComponentName(ctor) || 'Component';

        if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
          didWarnAboutDirectlyAssigningPropsToState.add(componentName);

          error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
        }
      }

      if (workInProgress.mode & StrictMode) {
        ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
      }

      {
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
      }
    }

    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
    instance.state = workInProgress.memoizedState;
    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
      instance.state = workInProgress.memoizedState;
    } // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.


    if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
      // process them now.

      processUpdateQueue(workInProgress, newProps, instance, renderLanes);
      instance.state = workInProgress.memoizedState;
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.flags |= Update;
    }
  }

  function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    var oldProps = workInProgress.memoizedProps;
    instance.props = oldProps;
    var oldContext = instance.context;
    var contextType = ctor.contextType;
    var nextContext = emptyContextObject;

    if (typeof contextType === 'object' && contextType !== null) {
      nextContext = readContext(contextType);
    } else {
      var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
    }

    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
    // ever the previously attempted to render - not the "current". However,
    // during componentDidUpdate we pass the "current" props.
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.

    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
      if (oldProps !== newProps || oldContext !== nextContext) {
        callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
      }
    }

    resetHasForceUpdateBeforeProcessing();
    var oldState = workInProgress.memoizedState;
    var newState = instance.state = oldState;
    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
    newState = workInProgress.memoizedState;

    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.flags |= Update;
      }

      return false;
    }

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
      newState = workInProgress.memoizedState;
    }

    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

    if (shouldUpdate) {
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        if (typeof instance.componentWillMount === 'function') {
          instance.componentWillMount();
        }

        if (typeof instance.UNSAFE_componentWillMount === 'function') {
          instance.UNSAFE_componentWillMount();
        }
      }

      if (typeof instance.componentDidMount === 'function') {
        workInProgress.flags |= Update;
      }
    } else {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidMount === 'function') {
        workInProgress.flags |= Update;
      } // If shouldComponentUpdate returned false, we should still update the
      // memoized state to indicate that this work can be reused.


      workInProgress.memoizedProps = newProps;
      workInProgress.memoizedState = newState;
    } // Update the existing instance's state, props, and context pointers even
    // if shouldComponentUpdate returns false.


    instance.props = newProps;
    instance.state = newState;
    instance.context = nextContext;
    return shouldUpdate;
  } // Invokes the update life-cycles and returns false if it shouldn't rerender.


  function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
    var instance = workInProgress.stateNode;
    cloneUpdateQueue(current, workInProgress);
    var unresolvedOldProps = workInProgress.memoizedProps;
    var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
    instance.props = oldProps;
    var unresolvedNewProps = workInProgress.pendingProps;
    var oldContext = instance.context;
    var contextType = ctor.contextType;
    var nextContext = emptyContextObject;

    if (typeof contextType === 'object' && contextType !== null) {
      nextContext = readContext(contextType);
    } else {
      var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
      nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
    }

    var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
    var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
    // ever the previously attempted to render - not the "current". However,
    // during componentDidUpdate we pass the "current" props.
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.

    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
      if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
        callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
      }
    }

    resetHasForceUpdateBeforeProcessing();
    var oldState = workInProgress.memoizedState;
    var newState = instance.state = oldState;
    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
    newState = workInProgress.memoizedState;

    if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.flags |= Update;
        }
      }

      if (typeof instance.getSnapshotBeforeUpdate === 'function') {
        if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.flags |= Snapshot;
        }
      }

      return false;
    }

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
      newState = workInProgress.memoizedState;
    }

    var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

    if (shouldUpdate) {
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
        if (typeof instance.componentWillUpdate === 'function') {
          instance.componentWillUpdate(newProps, newState, nextContext);
        }

        if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
          instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
        }
      }

      if (typeof instance.componentDidUpdate === 'function') {
        workInProgress.flags |= Update;
      }

      if (typeof instance.getSnapshotBeforeUpdate === 'function') {
        workInProgress.flags |= Snapshot;
      }
    } else {
      // If an update was already in progress, we should schedule an Update
      // effect even though we're bailing out, so that cWU/cDU are called.
      if (typeof instance.componentDidUpdate === 'function') {
        if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.flags |= Update;
        }
      }

      if (typeof instance.getSnapshotBeforeUpdate === 'function') {
        if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
          workInProgress.flags |= Snapshot;
        }
      } // If shouldComponentUpdate returned false, we should still update the
      // memoized props/state to indicate that this work can be reused.


      workInProgress.memoizedProps = newProps;
      workInProgress.memoizedState = newState;
    } // Update the existing instance's state, props, and context pointers even
    // if shouldComponentUpdate returns false.


    instance.props = newProps;
    instance.state = newState;
    instance.context = nextContext;
    return shouldUpdate;
  }

  var didWarnAboutMaps;
  var didWarnAboutGenerators;
  var didWarnAboutStringRefs;
  var ownerHasKeyUseWarning;
  var ownerHasFunctionTypeWarning;

  var warnForMissingKey = function (child, returnFiber) {};

  {
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {};
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */

    ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};

    warnForMissingKey = function (child, returnFiber) {
      if (child === null || typeof child !== 'object') {
        return;
      }

      if (!child._store || child._store.validated || child.key != null) {
        return;
      }

      if (!(typeof child._store === 'object')) {
        {
          throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      child._store.validated = true;
      var componentName = getComponentName(returnFiber.type) || 'Component';

      if (ownerHasKeyUseWarning[componentName]) {
        return;
      }

      ownerHasKeyUseWarning[componentName] = true;

      error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
    };
  }

  var isArray$1 = Array.isArray;

  function coerceRef(returnFiber, current, element) {
    var mixedRef = element.ref;

    if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
      {
        // TODO: Clean this up once we turn on the string ref warning for
        // everyone, because the strict mode case will no longer be relevant
        if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
        // because these cannot be automatically converted to an arrow function
        // using a codemod. Therefore, we don't have to warn about string refs again.
        !(element._owner && element._self && element._owner.stateNode !== element._self)) {
          var componentName = getComponentName(returnFiber.type) || 'Component';

          if (!didWarnAboutStringRefs[componentName]) {
            {
              error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
            }

            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }

      if (element._owner) {
        var owner = element._owner;
        var inst;

        if (owner) {
          var ownerFiber = owner;

          if (!(ownerFiber.tag === ClassComponent)) {
            {
              throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref" );
            }
          }

          inst = ownerFiber.stateNode;
        }

        if (!inst) {
          {
            throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

        if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
          return current.ref;
        }

        var ref = function (value) {
          var refs = inst.refs;

          if (refs === emptyRefsObject) {
            // This is a lazy pooled frozen object, so we need to initialize.
            refs = inst.refs = {};
          }

          if (value === null) {
            delete refs[stringRef];
          } else {
            refs[stringRef] = value;
          }
        };

        ref._stringRef = stringRef;
        return ref;
      } else {
        if (!(typeof mixedRef === 'string')) {
          {
            throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
          }
        }

        if (!element._owner) {
          {
            throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information." );
          }
        }
      }
    }

    return mixedRef;
  }

  function throwOnInvalidObjectType(returnFiber, newChild) {
    if (returnFiber.type !== 'textarea') {
      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead." );
        }
      }
    }
  }

  function warnOnFunctionType(returnFiber) {
    {
      var componentName = getComponentName(returnFiber.type) || 'Component';

      if (ownerHasFunctionTypeWarning[componentName]) {
        return;
      }

      ownerHasFunctionTypeWarning[componentName] = true;

      error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
    }
  } // We avoid inlining this to avoid potential deopts from using try/catch.
  // to be able to optimize each path individually by branching early. This needs
  // a compiler or we can do it manually. Helpers that don't need this branching
  // live outside of this function.


  function ChildReconciler(shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
      if (!shouldTrackSideEffects) {
        // Noop.
        return;
      } // Deletions are added in reversed order so we add it to the front.
      // At this point, the return fiber's effect list is empty except for
      // deletions, so we can just append the deletion to the list. The remaining
      // effects aren't added until the complete phase. Once we implement
      // resuming, this may not be true.


      var last = returnFiber.lastEffect;

      if (last !== null) {
        last.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }

      childToDelete.nextEffect = null;
      childToDelete.flags = Deletion;
    }

    function deleteRemainingChildren(returnFiber, currentFirstChild) {
      if (!shouldTrackSideEffects) {
        // Noop.
        return null;
      } // TODO: For the shouldClone case, this could be micro-optimized a bit by
      // assuming that after the first child we've already added everything.


      var childToDelete = currentFirstChild;

      while (childToDelete !== null) {
        deleteChild(returnFiber, childToDelete);
        childToDelete = childToDelete.sibling;
      }

      return null;
    }

    function mapRemainingChildren(returnFiber, currentFirstChild) {
      // Add the remaining children to a temporary map so that we can find them by
      // keys quickly. Implicit (null) keys get added to this set with their index
      // instead.
      var existingChildren = new Map();
      var existingChild = currentFirstChild;

      while (existingChild !== null) {
        if (existingChild.key !== null) {
          existingChildren.set(existingChild.key, existingChild);
        } else {
          existingChildren.set(existingChild.index, existingChild);
        }

        existingChild = existingChild.sibling;
      }

      return existingChildren;
    }

    function useFiber(fiber, pendingProps) {
      // We currently set sibling to null and index to 0 here because it is easy
      // to forget to do before returning it. E.g. for the single child case.
      var clone = createWorkInProgress(fiber, pendingProps);
      clone.index = 0;
      clone.sibling = null;
      return clone;
    }

    function placeChild(newFiber, lastPlacedIndex, newIndex) {
      newFiber.index = newIndex;

      if (!shouldTrackSideEffects) {
        // Noop.
        return lastPlacedIndex;
      }

      var current = newFiber.alternate;

      if (current !== null) {
        var oldIndex = current.index;

        if (oldIndex < lastPlacedIndex) {
          // This is a move.
          newFiber.flags = Placement;
          return lastPlacedIndex;
        } else {
          // This item can stay in place.
          return oldIndex;
        }
      } else {
        // This is an insertion.
        newFiber.flags = Placement;
        return lastPlacedIndex;
      }
    }

    function placeSingleChild(newFiber) {
      // This is simpler for the single child case. We only need to do a
      // placement for inserting new children.
      if (shouldTrackSideEffects && newFiber.alternate === null) {
        newFiber.flags = Placement;
      }

      return newFiber;
    }

    function updateTextNode(returnFiber, current, textContent, lanes) {
      if (current === null || current.tag !== HostText) {
        // Insert
        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      } else {
        // Update
        var existing = useFiber(current, textContent);
        existing.return = returnFiber;
        return existing;
      }
    }

    function updateElement(returnFiber, current, element, lanes) {
      if (current !== null) {
        if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
         isCompatibleFamilyForHotReloading(current, element) )) {
          // Move based on index
          var existing = useFiber(current, element.props);
          existing.ref = coerceRef(returnFiber, current, element);
          existing.return = returnFiber;

          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }

          return existing;
        }
      } // Insert


      var created = createFiberFromElement(element, returnFiber.mode, lanes);
      created.ref = coerceRef(returnFiber, current, element);
      created.return = returnFiber;
      return created;
    }

    function updatePortal(returnFiber, current, portal, lanes) {
      if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
        // Insert
        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      } else {
        // Update
        var existing = useFiber(current, portal.children || []);
        existing.return = returnFiber;
        return existing;
      }
    }

    function updateFragment(returnFiber, current, fragment, lanes, key) {
      if (current === null || current.tag !== Fragment) {
        // Insert
        var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
        created.return = returnFiber;
        return created;
      } else {
        // Update
        var existing = useFiber(current, fragment);
        existing.return = returnFiber;
        return existing;
      }
    }

    function createChild(returnFiber, newChild, lanes) {
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        // Text nodes don't have keys. If the previous node is implicitly keyed
        // we can continue to replace it without aborting even if it is not a text
        // node.
        var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }

      if (typeof newChild === 'object' && newChild !== null) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            {
              var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

              _created.ref = coerceRef(returnFiber, null, newChild);
              _created.return = returnFiber;
              return _created;
            }

          case REACT_PORTAL_TYPE:
            {
              var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

              _created2.return = returnFiber;
              return _created2;
            }
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) {
          var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

          _created3.return = returnFiber;
          return _created3;
        }

        throwOnInvalidObjectType(returnFiber, newChild);
      }

      {
        if (typeof newChild === 'function') {
          warnOnFunctionType(returnFiber);
        }
      }

      return null;
    }

    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
      // Update the fiber if the keys match, otherwise return null.
      var key = oldFiber !== null ? oldFiber.key : null;

      if (typeof newChild === 'string' || typeof newChild === 'number') {
        // Text nodes don't have keys. If the previous node is implicitly keyed
        // we can continue to replace it without aborting even if it is not a text
        // node.
        if (key !== null) {
          return null;
        }

        return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
      }

      if (typeof newChild === 'object' && newChild !== null) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            {
              if (newChild.key === key) {
                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                }

                return updateElement(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }

          case REACT_PORTAL_TYPE:
            {
              if (newChild.key === key) {
                return updatePortal(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }
        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) {
          if (key !== null) {
            return null;
          }

          return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
        }

        throwOnInvalidObjectType(returnFiber, newChild);
      }

      {
        if (typeof newChild === 'function') {
          warnOnFunctionType(returnFiber);
        }
      }

      return null;
    }

    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
      if (typeof newChild === 'string' || typeof newChild === 'number') {
        // Text nodes don't have keys, so we neither have to check the old nor
        // new node for the key. If both are text nodes, they match.
        var matchedFiber = existingChildren.get(newIdx) || null;
        return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
      }

      if (typeof newChild === 'object' && newChild !== null) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            {
              var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
              }

              return updateElement(returnFiber, _matchedFiber, newChild, lanes);
            }

          case REACT_PORTAL_TYPE:
            {
              var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

              return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
            }

        }

        if (isArray$1(newChild) || getIteratorFn(newChild)) {
          var _matchedFiber3 = existingChildren.get(newIdx) || null;

          return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
        }

        throwOnInvalidObjectType(returnFiber, newChild);
      }

      {
        if (typeof newChild === 'function') {
          warnOnFunctionType(returnFiber);
        }
      }

      return null;
    }
    /**
     * Warns if there is a duplicate or missing key
     */


    function warnOnInvalidKey(child, knownKeys, returnFiber) {
      {
        if (typeof child !== 'object' || child === null) {
          return knownKeys;
        }

        switch (child.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            warnForMissingKey(child, returnFiber);
            var key = child.key;

            if (typeof key !== 'string') {
              break;
            }

            if (knownKeys === null) {
              knownKeys = new Set();
              knownKeys.add(key);
              break;
            }

            if (!knownKeys.has(key)) {
              knownKeys.add(key);
              break;
            }

            error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

            break;
        }
      }

      return knownKeys;
    }

    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
      // This algorithm can't optimize by searching from both ends since we
      // don't have backpointers on fibers. I'm trying to see how far we can get
      // with that model. If it ends up not being worth the tradeoffs, we can
      // add it later.
      // Even with a two ended optimization, we'd want to optimize for the case
      // where there are few changes and brute force the comparison instead of
      // going for the Map. It'd like to explore hitting that path first in
      // forward-only mode and only go for the Map once we notice that we need
      // lots of look ahead. This doesn't handle reversal as well as two ended
      // search but that's unusual. Besides, for the two ended optimization to
      // work on Iterables, we'd need to copy the whole set.
      // In this first iteration, we'll just live with hitting the bad case
      // (adding everything to a Map) in for every insert/move.
      // If you change this code, also update reconcileChildrenIterator() which
      // uses the same algorithm.
      {
        // First, validate keys.
        var knownKeys = null;

        for (var i = 0; i < newChildren.length; i++) {
          var child = newChildren[i];
          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
        }
      }

      var resultingFirstChild = null;
      var previousNewFiber = null;
      var oldFiber = currentFirstChild;
      var lastPlacedIndex = 0;
      var newIdx = 0;
      var nextOldFiber = null;

      for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
        if (oldFiber.index > newIdx) {
          nextOldFiber = oldFiber;
          oldFiber = null;
        } else {
          nextOldFiber = oldFiber.sibling;
        }

        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

        if (newFiber === null) {
          // TODO: This breaks on empty slots like null children. That's
          // unfortunate because it triggers the slow path all the time. We need
          // a better way to communicate whether this was a miss or null,
          // boolean, undefined, etc.
          if (oldFiber === null) {
            oldFiber = nextOldFiber;
          }

          break;
        }

        if (shouldTrackSideEffects) {
          if (oldFiber && newFiber.alternate === null) {
            // We matched the slot, but we didn't reuse the existing fiber, so we
            // need to delete the existing child.
            deleteChild(returnFiber, oldFiber);
          }
        }

        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = newFiber;
        } else {
          // TODO: Defer siblings if we're not at the right index for this slot.
          // I.e. if we had null values before, then we want to defer this
          // for each null value. However, we also don't want to call updateSlot
          // with the previous one.
          previousNewFiber.sibling = newFiber;
        }

        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (newIdx === newChildren.length) {
        // We've reached the end of the new children. We can delete the rest.
        deleteRemainingChildren(returnFiber, oldFiber);
        return resultingFirstChild;
      }

      if (oldFiber === null) {
        // If we don't have any more existing children we can choose a fast path
        // since the rest will all be insertions.
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

          if (_newFiber === null) {
            continue;
          }

          lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = _newFiber;
          } else {
            previousNewFiber.sibling = _newFiber;
          }

          previousNewFiber = _newFiber;
        }

        return resultingFirstChild;
      } // Add all children to a key map for quick lookups.


      var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

        if (_newFiber2 !== null) {
          if (shouldTrackSideEffects) {
            if (_newFiber2.alternate !== null) {
              // The new fiber is a work in progress, but if there exists a
              // current, that means that we reused the fiber. We need to delete
              // it from the child list so that we don't add it to the deletion
              // list.
              existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
            }
          }

          lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            resultingFirstChild = _newFiber2;
          } else {
            previousNewFiber.sibling = _newFiber2;
          }

          previousNewFiber = _newFiber2;
        }
      }

      if (shouldTrackSideEffects) {
        // Any existing children that weren't consumed above were deleted. We need
        // to add them to the deletion list.
        existingChildren.forEach(function (child) {
          return deleteChild(returnFiber, child);
        });
      }

      return resultingFirstChild;
    }

    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
      // This is the same implementation as reconcileChildrenArray(),
      // but using the iterator instead.
      var iteratorFn = getIteratorFn(newChildrenIterable);

      if (!(typeof iteratorFn === 'function')) {
        {
          throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      {
        // We don't support rendering Generators because it's a mutation.
        // See https://github.com/facebook/react/issues/12995
        if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
        newChildrenIterable[Symbol.toStringTag] === 'Generator') {
          if (!didWarnAboutGenerators) {
            error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
          }

          didWarnAboutGenerators = true;
        } // Warn about using Maps as children


        if (newChildrenIterable.entries === iteratorFn) {
          if (!didWarnAboutMaps) {
            error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        } // First, validate keys.
        // We'll get a different iterator later for the main pass.


        var _newChildren = iteratorFn.call(newChildrenIterable);

        if (_newChildren) {
          var knownKeys = null;

          var _step = _newChildren.next();

          for (; !_step.done; _step = _newChildren.next()) {
            var child = _step.value;
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
        }
      }

      var newChildren = iteratorFn.call(newChildrenIterable);

      if (!(newChildren != null)) {
        {
          throw Error( "An iterable object provided no iterator." );
        }
      }

      var resultingFirstChild = null;
      var previousNewFiber = null;
      var oldFiber = currentFirstChild;
      var lastPlacedIndex = 0;
      var newIdx = 0;
      var nextOldFiber = null;
      var step = newChildren.next();

      for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
        if (oldFiber.index > newIdx) {
          nextOldFiber = oldFiber;
          oldFiber = null;
        } else {
          nextOldFiber = oldFiber.sibling;
        }

        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

        if (newFiber === null) {
          // TODO: This breaks on empty slots like null children. That's
          // unfortunate because it triggers the slow path all the time. We need
          // a better way to communicate whether this was a miss or null,
          // boolean, undefined, etc.
          if (oldFiber === null) {
            oldFiber = nextOldFiber;
          }

          break;
        }

        if (shouldTrackSideEffects) {
          if (oldFiber && newFiber.alternate === null) {
            // We matched the slot, but we didn't reuse the existing fiber, so we
            // need to delete the existing child.
            deleteChild(returnFiber, oldFiber);
          }
        }

        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = newFiber;
        } else {
          // TODO: Defer siblings if we're not at the right index for this slot.
          // I.e. if we had null values before, then we want to defer this
          // for each null value. However, we also don't want to call updateSlot
          // with the previous one.
          previousNewFiber.sibling = newFiber;
        }

        previousNewFiber = newFiber;
        oldFiber = nextOldFiber;
      }

      if (step.done) {
        // We've reached the end of the new children. We can delete the rest.
        deleteRemainingChildren(returnFiber, oldFiber);
        return resultingFirstChild;
      }

      if (oldFiber === null) {
        // If we don't have any more existing children we can choose a fast path
        // since the rest will all be insertions.
        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber3 = createChild(returnFiber, step.value, lanes);

          if (_newFiber3 === null) {
            continue;
          }

          lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = _newFiber3;
          } else {
            previousNewFiber.sibling = _newFiber3;
          }

          previousNewFiber = _newFiber3;
        }

        return resultingFirstChild;
      } // Add all children to a key map for quick lookups.


      var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

        if (_newFiber4 !== null) {
          if (shouldTrackSideEffects) {
            if (_newFiber4.alternate !== null) {
              // The new fiber is a work in progress, but if there exists a
              // current, that means that we reused the fiber. We need to delete
              // it from the child list so that we don't add it to the deletion
              // list.
              existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
            }
          }

          lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            resultingFirstChild = _newFiber4;
          } else {
            previousNewFiber.sibling = _newFiber4;
          }

          previousNewFiber = _newFiber4;
        }
      }

      if (shouldTrackSideEffects) {
        // Any existing children that weren't consumed above were deleted. We need
        // to add them to the deletion list.
        existingChildren.forEach(function (child) {
          return deleteChild(returnFiber, child);
        });
      }

      return resultingFirstChild;
    }

    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
      // There's no need to check for keys on text nodes since we don't have a
      // way to define them.
      if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
        // We already have an existing node so let's just update it and delete
        // the rest.
        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
        var existing = useFiber(currentFirstChild, textContent);
        existing.return = returnFiber;
        return existing;
      } // The existing first child is not a text node so we need to create one
      // and delete the existing ones.


      deleteRemainingChildren(returnFiber, currentFirstChild);
      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    }

    function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
      var key = element.key;
      var child = currentFirstChild;

      while (child !== null) {
        // TODO: If key === null and child.key === null, then this only applies to
        // the first item in the list.
        if (child.key === key) {
          switch (child.tag) {
            case Fragment:
              {
                if (element.type === REACT_FRAGMENT_TYPE) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;

                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }

                  return existing;
                }

                break;
              }

            case Block:

            // We intentionally fallthrough here if enableBlocksAPI is not on.
            // eslint-disable-next-lined no-fallthrough

            default:
              {
                if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
                 isCompatibleFamilyForHotReloading(child, element) )) {
                  deleteRemainingChildren(returnFiber, child.sibling);

                  var _existing3 = useFiber(child, element.props);

                  _existing3.ref = coerceRef(returnFiber, child, element);
                  _existing3.return = returnFiber;

                  {
                    _existing3._debugSource = element._source;
                    _existing3._debugOwner = element._owner;
                  }

                  return _existing3;
                }

                break;
              }
          } // Didn't match.


          deleteRemainingChildren(returnFiber, child);
          break;
        } else {
          deleteChild(returnFiber, child);
        }

        child = child.sibling;
      }

      if (element.type === REACT_FRAGMENT_TYPE) {
        var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
        created.return = returnFiber;
        return created;
      } else {
        var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

        _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
        _created4.return = returnFiber;
        return _created4;
      }
    }

    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
      var key = portal.key;
      var child = currentFirstChild;

      while (child !== null) {
        // TODO: If key === null and child.key === null, then this only applies to
        // the first item in the list.
        if (child.key === key) {
          if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
            deleteRemainingChildren(returnFiber, child.sibling);
            var existing = useFiber(child, portal.children || []);
            existing.return = returnFiber;
            return existing;
          } else {
            deleteRemainingChildren(returnFiber, child);
            break;
          }
        } else {
          deleteChild(returnFiber, child);
        }

        child = child.sibling;
      }

      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } // This API will tag the children with the side-effect of the reconciliation
    // itself. They will be added to the side-effect list as we pass through the
    // children and the parent.


    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
      // This function is not recursive.
      // If the top level item is an array, we treat it as a set of children,
      // not as a fragment. Nested arrays on the other hand will be treated as
      // fragment nodes. Recursion happens at the normal flow.
      // Handle top level unkeyed fragments as if they were arrays.
      // This leads to an ambiguity between <>{[...]}</> and <>...</>.
      // We treat the ambiguous cases above the same.
      var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

      if (isUnkeyedTopLevelFragment) {
        newChild = newChild.props.children;
      } // Handle object types


      var isObject = typeof newChild === 'object' && newChild !== null;

      if (isObject) {
        switch (newChild.$$typeof) {
          case REACT_ELEMENT_TYPE:
            return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

          case REACT_PORTAL_TYPE:
            return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

        }
      }

      if (typeof newChild === 'string' || typeof newChild === 'number') {
        return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
      }

      if (isArray$1(newChild)) {
        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
      }

      if (getIteratorFn(newChild)) {
        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
      }

      if (isObject) {
        throwOnInvalidObjectType(returnFiber, newChild);
      }

      {
        if (typeof newChild === 'function') {
          warnOnFunctionType(returnFiber);
        }
      }

      if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
        // If the new child is undefined, and the return fiber is a composite
        // component, throw an error. If Fiber return types are disabled,
        // we already threw above.
        switch (returnFiber.tag) {
          case ClassComponent:
            {
              {
                var instance = returnFiber.stateNode;

                if (instance.render._isMockFunction) {
                  // We allow auto-mocks to proceed as if they're returning null.
                  break;
                }
              }
            }
          // Intentionally fall through to the next case, which handles both
          // functions and classes
          // eslint-disable-next-lined no-fallthrough

          case Block:
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
            {
              {
                {
                  throw Error( (getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
                }
              }
            }
        }
      } // Remaining cases are all treated as empty.


      return deleteRemainingChildren(returnFiber, currentFirstChild);
    }

    return reconcileChildFibers;
  }

  var reconcileChildFibers = ChildReconciler(true);
  var mountChildFibers = ChildReconciler(false);
  function cloneChildFibers(current, workInProgress) {
    if (!(current === null || workInProgress.child === current.child)) {
      {
        throw Error( "Resuming work not yet implemented." );
      }
    }

    if (workInProgress.child === null) {
      return;
    }

    var currentChild = workInProgress.child;
    var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
    workInProgress.child = newChild;
    newChild.return = workInProgress;

    while (currentChild.sibling !== null) {
      currentChild = currentChild.sibling;
      newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
      newChild.return = workInProgress;
    }

    newChild.sibling = null;
  } // Reset a workInProgress child set to prepare it for a second pass.

  function resetChildFibers(workInProgress, lanes) {
    var child = workInProgress.child;

    while (child !== null) {
      resetWorkInProgress(child, lanes);
      child = child.sibling;
    }
  }

  var NO_CONTEXT = {};
  var contextStackCursor$1 = createCursor(NO_CONTEXT);
  var contextFiberStackCursor = createCursor(NO_CONTEXT);
  var rootInstanceStackCursor = createCursor(NO_CONTEXT);

  function requiredContext(c) {
    if (!(c !== NO_CONTEXT)) {
      {
        throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    return c;
  }

  function getRootHostContainer() {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    return rootInstance;
  }

  function pushHostContainer(fiber, nextRootInstance) {
    // Push current root instance onto the stack;
    // This allows us to reset root when portals are popped.
    push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.

    push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
    // However, we can't just call getRootHostContext() and push it because
    // we'd have a different number of entries on the stack depending on
    // whether getRootHostContext() throws somewhere in renderer code or not.
    // So we push an empty value first. This lets us safely unwind on errors.

    push(contextStackCursor$1, NO_CONTEXT, fiber);
    var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

    pop(contextStackCursor$1, fiber);
    push(contextStackCursor$1, nextRootContext, fiber);
  }

  function popHostContainer(fiber) {
    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
    pop(rootInstanceStackCursor, fiber);
  }

  function getHostContext() {
    var context = requiredContext(contextStackCursor$1.current);
    return context;
  }

  function pushHostContext(fiber) {
    var rootInstance = requiredContext(rootInstanceStackCursor.current);
    var context = requiredContext(contextStackCursor$1.current);
    var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

    if (context === nextContext) {
      return;
    } // Track the context and the Fiber that provided it.
    // This enables us to pop only Fibers that provide unique contexts.


    push(contextFiberStackCursor, fiber, fiber);
    push(contextStackCursor$1, nextContext, fiber);
  }

  function popHostContext(fiber) {
    // Do not pop unless this Fiber provided the current context.
    // pushHostContext() only pushes Fibers that provide unique contexts.
    if (contextFiberStackCursor.current !== fiber) {
      return;
    }

    pop(contextStackCursor$1, fiber);
    pop(contextFiberStackCursor, fiber);
  }

  var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
  // inherited deeply down the subtree. The upper bits only affect
  // this immediate suspense boundary and gets reset each new
  // boundary or suspense list.

  var SubtreeSuspenseContextMask = 1; // Subtree Flags:
  // InvisibleParentSuspenseContext indicates that one of our parent Suspense
  // boundaries is not currently showing visible main content.
  // Either because it is already showing a fallback or is not mounted at all.
  // We can use this to determine if it is desirable to trigger a fallback at
  // the parent. If not, then we might need to trigger undesirable boundaries
  // and/or suspend the commit to avoid hiding the parent content.

  var InvisibleParentSuspenseContext = 1; // Shallow Flags:
  // ForceSuspenseFallback can be used by SuspenseList to force newly added
  // items into their fallback state during one of the render passes.

  var ForceSuspenseFallback = 2;
  var suspenseStackCursor = createCursor(DefaultSuspenseContext);
  function hasSuspenseContext(parentContext, flag) {
    return (parentContext & flag) !== 0;
  }
  function setDefaultShallowSuspenseContext(parentContext) {
    return parentContext & SubtreeSuspenseContextMask;
  }
  function setShallowSuspenseContext(parentContext, shallowContext) {
    return parentContext & SubtreeSuspenseContextMask | shallowContext;
  }
  function addSubtreeSuspenseContext(parentContext, subtreeContext) {
    return parentContext | subtreeContext;
  }
  function pushSuspenseContext(fiber, newContext) {
    push(suspenseStackCursor, newContext, fiber);
  }
  function popSuspenseContext(fiber) {
    pop(suspenseStackCursor, fiber);
  }

  function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
    // If it was the primary children that just suspended, capture and render the
    // fallback. Otherwise, don't capture and bubble to the next boundary.
    var nextState = workInProgress.memoizedState;

    if (nextState !== null) {
      if (nextState.dehydrated !== null) {
        // A dehydrated boundary always captures.
        return true;
      }

      return false;
    }

    var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

    if (props.fallback === undefined) {
      return false;
    } // Regular boundaries always capture.


    if (props.unstable_avoidThisFallback !== true) {
      return true;
    } // If it's a boundary we should avoid, then we prefer to bubble up to the
    // parent boundary if it is currently invisible.


    if (hasInvisibleParent) {
      return false;
    } // If the parent is not able to handle it, we must handle it.


    return true;
  }
  function findFirstSuspended(row) {
    var node = row;

    while (node !== null) {
      if (node.tag === SuspenseComponent) {
        var state = node.memoizedState;

        if (state !== null) {
          var dehydrated = state.dehydrated;

          if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
            return node;
          }
        }
      } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
      // keep track of whether it suspended or not.
      node.memoizedProps.revealOrder !== undefined) {
        var didSuspend = (node.flags & DidCapture) !== NoFlags;

        if (didSuspend) {
          return node;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === row) {
        return null;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === row) {
          return null;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }

    return null;
  }

  var NoFlags$1 =
  /*  */
  0; // Represents whether effect should fire.

  var HasEffect =
  /* */
  1; // Represents the phase in which the effect (not the clean-up) fires.

  var Layout =
  /*    */
  2;
  var Passive$1 =
  /*   */
  4;

  // This may have been an insertion or a hydration.

  var hydrationParentFiber = null;
  var nextHydratableInstance = null;
  var isHydrating = false;

  function enterHydrationState(fiber) {

    var parentInstance = fiber.stateNode.containerInfo;
    nextHydratableInstance = getFirstHydratableChild(parentInstance);
    hydrationParentFiber = fiber;
    isHydrating = true;
    return true;
  }

  function deleteHydratableInstance(returnFiber, instance) {
    {
      switch (returnFiber.tag) {
        case HostRoot:
          didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
          break;

        case HostComponent:
          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
          break;
      }
    }

    var childToDelete = createFiberFromHostInstanceForDeletion();
    childToDelete.stateNode = instance;
    childToDelete.return = returnFiber;
    childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
    // these children are not part of the reconciliation list of children.
    // Even if we abort and rereconcile the children, that will try to hydrate
    // again and the nodes are still in the host tree so these will be
    // recreated.

    if (returnFiber.lastEffect !== null) {
      returnFiber.lastEffect.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
  }

  function insertNonHydratedInstance(returnFiber, fiber) {
    fiber.flags = fiber.flags & ~Hydrating | Placement;

    {
      switch (returnFiber.tag) {
        case HostRoot:
          {
            var parentContainer = returnFiber.stateNode.containerInfo;

            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                didNotFindHydratableContainerInstance(parentContainer, type);
                break;

              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableContainerTextInstance(parentContainer, text);
                break;
            }

            break;
          }

        case HostComponent:
          {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;

            switch (fiber.tag) {
              case HostComponent:
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                break;

              case HostText:
                var _text = fiber.pendingProps;
                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                break;

              case SuspenseComponent:
                didNotFindHydratableSuspenseInstance(parentType, parentProps);
                break;
            }

            break;
          }

        default:
          return;
      }
    }
  }

  function tryHydrate(fiber, nextInstance) {
    switch (fiber.tag) {
      case HostComponent:
        {
          var type = fiber.type;
          var props = fiber.pendingProps;
          var instance = canHydrateInstance(nextInstance, type);

          if (instance !== null) {
            fiber.stateNode = instance;
            return true;
          }

          return false;
        }

      case HostText:
        {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);

          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            return true;
          }

          return false;
        }

      case SuspenseComponent:
        {

          return false;
        }

      default:
        return false;
    }
  }

  function tryToClaimNextHydratableInstance(fiber) {
    if (!isHydrating) {
      return;
    }

    var nextInstance = nextHydratableInstance;

    if (!nextInstance) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    }

    var firstAttemptedInstance = nextInstance;

    if (!tryHydrate(fiber, nextInstance)) {
      // If we can't hydrate this instance let's try the next one.
      // We use this as a heuristic. It's based on intuition and not data so it
      // might be flawed or unnecessary.
      nextInstance = getNextHydratableSibling(firstAttemptedInstance);

      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      } // We matched the next one, we'll now assume that the first one was
      // superfluous and we'll delete it. Since we can't eagerly delete it
      // we'll have to schedule a deletion. To do that, this node needs a dummy
      // fiber associated with it.


      deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
    }

    hydrationParentFiber = fiber;
    nextHydratableInstance = getFirstHydratableChild(nextInstance);
  }

  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

    var instance = fiber.stateNode;
    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

    fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update.

    if (updatePayload !== null) {
      return true;
    }

    return false;
  }

  function prepareToHydrateHostTextInstance(fiber) {

    var textInstance = fiber.stateNode;
    var textContent = fiber.memoizedProps;
    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

    {
      if (shouldUpdate) {
        // We assume that prepareToHydrateHostTextInstance is called in a context where the
        // hydration parent is the parent host component of this host text.
        var returnFiber = hydrationParentFiber;

        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot:
              {
                var parentContainer = returnFiber.stateNode.containerInfo;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                break;
              }

            case HostComponent:
              {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                break;
              }
          }
        }
      }
    }

    return shouldUpdate;
  }

  function skipPastDehydratedSuspenseInstance(fiber) {

    var suspenseState = fiber.memoizedState;
    var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

    if (!suspenseInstance) {
      {
        throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
  }

  function popToNextHostParent(fiber) {
    var parent = fiber.return;

    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
      parent = parent.return;
    }

    hydrationParentFiber = parent;
  }

  function popHydrationState(fiber) {

    if (fiber !== hydrationParentFiber) {
      // We're deeper than the current hydration context, inside an inserted
      // tree.
      return false;
    }

    if (!isHydrating) {
      // If we're not currently hydrating but we're in a hydration context, then
      // we were an insertion and now need to pop up reenter hydration of our
      // siblings.
      popToNextHostParent(fiber);
      isHydrating = true;
      return false;
    }

    var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
    // We only do this deeper than head and body since they tend to have random
    // other nodes in them. We also ignore components with pure text content in
    // side of them.
    // TODO: Better heuristic.

    if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
      var nextInstance = nextHydratableInstance;

      while (nextInstance) {
        deleteHydratableInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }

    popToNextHostParent(fiber);

    if (fiber.tag === SuspenseComponent) {
      nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
    } else {
      nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
    }

    return true;
  }

  function resetHydrationState() {

    hydrationParentFiber = null;
    nextHydratableInstance = null;
    isHydrating = false;
  }

  function getIsHydrating() {
    return isHydrating;
  }

  // and should be reset before starting a new render.
  // This tracks which mutable sources need to be reset after a render.

  var workInProgressSources = [];
  var rendererSigil$1;

  {
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {};
  }

  function markSourceAsDirty(mutableSource) {
    workInProgressSources.push(mutableSource);
  }
  function resetWorkInProgressVersions() {
    for (var i = 0; i < workInProgressSources.length; i++) {
      var mutableSource = workInProgressSources[i];

      {
        mutableSource._workInProgressVersionPrimary = null;
      }
    }

    workInProgressSources.length = 0;
  }
  function getWorkInProgressVersion(mutableSource) {
    {
      return mutableSource._workInProgressVersionPrimary;
    }
  }
  function setWorkInProgressVersion(mutableSource, version) {
    {
      mutableSource._workInProgressVersionPrimary = version;
    }

    workInProgressSources.push(mutableSource);
  }
  function warnAboutMultipleRenderersDEV(mutableSource) {
    {
      {
        if (mutableSource._currentPrimaryRenderer == null) {
          mutableSource._currentPrimaryRenderer = rendererSigil$1;
        } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
          error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
        }
      }
    }
  } // Eager reads the version of a mutable source and stores it on the root.

  var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
  var didWarnAboutMismatchedHooksForComponent;
  var didWarnAboutUseOpaqueIdentifier;

  {
    didWarnAboutUseOpaqueIdentifier = {};
    didWarnAboutMismatchedHooksForComponent = new Set();
  }

  // These are set right before calling the component.
  var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
  // the work-in-progress hook.

  var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
  // current hook list is the list that belongs to the current fiber. The
  // work-in-progress hook list is a new list that will be added to the
  // work-in-progress fiber.

  var currentHook = null;
  var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
  // does not get reset if we do another render pass; only when we're completely
  // finished evaluating this component. This is an optimization so we know
  // whether we need to clear render phase updates after a throw.

  var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
  // gets reset after each attempt.
  // TODO: Maybe there's some way to consolidate this with
  // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

  var didScheduleRenderPhaseUpdateDuringThisPass = false;
  var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

  var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
  // The list stores the order of hooks used during the initial render (mount).
  // Subsequent renders (updates) reference this list.

  var hookTypesDev = null;
  var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
  // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
  // When true, such Hooks will always be "remounted". Only used during hot reload.

  var ignorePreviousDependencies = false;

  function mountHookTypesDev() {
    {
      var hookName = currentHookNameInDev;

      if (hookTypesDev === null) {
        hookTypesDev = [hookName];
      } else {
        hookTypesDev.push(hookName);
      }
    }
  }

  function updateHookTypesDev() {
    {
      var hookName = currentHookNameInDev;

      if (hookTypesDev !== null) {
        hookTypesUpdateIndexDev++;

        if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
          warnOnHookMismatchInDev(hookName);
        }
      }
    }
  }

  function checkDepsAreArrayDev(deps) {
    {
      if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
        // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
      }
    }
  }

  function warnOnHookMismatchInDev(currentHookName) {
    {
      var componentName = getComponentName(currentlyRenderingFiber$1.type);

      if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
        didWarnAboutMismatchedHooksForComponent.add(componentName);

        if (hookTypesDev !== null) {
          var table = '';
          var secondColumnStart = 30;

          for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
            var oldHookName = hookTypesDev[i];
            var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
            var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
            // lol @ IE not supporting String#repeat

            while (row.length < secondColumnStart) {
              row += ' ';
            }

            row += newHookName + '\n';
            table += row;
          }

          error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
        }
      }
    }
  }

  function throwInvalidHookError() {
    {
      {
        throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
      }
    }
  }

  function areHookInputsEqual(nextDeps, prevDeps) {
    {
      if (ignorePreviousDependencies) {
        // Only true when this component is being hot reloaded.
        return false;
      }
    }

    if (prevDeps === null) {
      {
        error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
      }

      return false;
    }

    {
      // Don't bother comparing lengths in prod because these arrays should be
      // passed inline.
      if (nextDeps.length !== prevDeps.length) {
        error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
      }
    }

    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
      if (objectIs(nextDeps[i], prevDeps[i])) {
        continue;
      }

      return false;
    }

    return true;
  }

  function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
    renderLanes = nextRenderLanes;
    currentlyRenderingFiber$1 = workInProgress;

    {
      hookTypesDev = current !== null ? current._debugHookTypes : null;
      hookTypesUpdateIndexDev = -1; // Used for hot reloading:

      ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
    }

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.lanes = NoLanes; // The following should have already been reset
    // currentHook = null;
    // workInProgressHook = null;
    // didScheduleRenderPhaseUpdate = false;
    // TODO Warn if no hooks are used at all during mount, then some are used during update.
    // Currently we will identify the update render as a mount because memoizedState === null.
    // This is tricky because it's valid for certain types of components (e.g. React.lazy)
    // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
    // Non-stateful hooks (e.g. context) don't get added to memoizedState,
    // so memoizedState would be null during updates and mounts.

    {
      if (current !== null && current.memoizedState !== null) {
        ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
      } else if (hookTypesDev !== null) {
        // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
      } else {
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
      }
    }

    var children = Component(props, secondArg); // Check if there was a render phase update

    if (didScheduleRenderPhaseUpdateDuringThisPass) {
      // Keep rendering in a loop for as long as render phase updates continue to
      // be scheduled. Use a counter to prevent infinite loops.
      var numberOfReRenders = 0;

      do {
        didScheduleRenderPhaseUpdateDuringThisPass = false;

        if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
          {
            throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
          }
        }

        numberOfReRenders += 1;

        {
          // Even when hot reloading, allow dependencies to stabilize
          // after first render to prevent infinite render phase updates.
          ignorePreviousDependencies = false;
        } // Start over from the beginning of the list


        currentHook = null;
        workInProgressHook = null;
        workInProgress.updateQueue = null;

        {
          // Also validate hook order for cascading updates.
          hookTypesUpdateIndexDev = -1;
        }

        ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
        children = Component(props, secondArg);
      } while (didScheduleRenderPhaseUpdateDuringThisPass);
    } // We can assume the previous dispatcher is always this one, since we set it
    // at the beginning of the render phase and there's no re-entrancy.


    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

    {
      workInProgress._debugHookTypes = hookTypesDev;
    } // This check uses currentHook so that it works the same in DEV and prod bundles.
    // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


    var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
    renderLanes = NoLanes;
    currentlyRenderingFiber$1 = null;
    currentHook = null;
    workInProgressHook = null;

    {
      currentHookNameInDev = null;
      hookTypesDev = null;
      hookTypesUpdateIndexDev = -1;
    }

    didScheduleRenderPhaseUpdate = false;

    if (!!didRenderTooFewHooks) {
      {
        throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
      }
    }

    return children;
  }
  function bailoutHooks(current, workInProgress, lanes) {
    workInProgress.updateQueue = current.updateQueue;
    workInProgress.flags &= ~(Passive | Update);
    current.lanes = removeLanes(current.lanes, lanes);
  }
  function resetHooksAfterThrow() {
    // We can assume the previous dispatcher is always this one, since we set it
    // at the beginning of the render phase and there's no re-entrancy.
    ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

    if (didScheduleRenderPhaseUpdate) {
      // There were render phase updates. These are only valid for this render
      // phase, which we are now aborting. Remove the updates from the queues so
      // they do not persist to the next render. Do not remove updates from hooks
      // that weren't processed.
      //
      // Only reset the updates from the queue if it has a clone. If it does
      // not have a clone, that means it wasn't processed, and the updates were
      // scheduled before we entered the render phase.
      var hook = currentlyRenderingFiber$1.memoizedState;

      while (hook !== null) {
        var queue = hook.queue;

        if (queue !== null) {
          queue.pending = null;
        }

        hook = hook.next;
      }

      didScheduleRenderPhaseUpdate = false;
    }

    renderLanes = NoLanes;
    currentlyRenderingFiber$1 = null;
    currentHook = null;
    workInProgressHook = null;

    {
      hookTypesDev = null;
      hookTypesUpdateIndexDev = -1;
      currentHookNameInDev = null;
      isUpdatingOpaqueValueInRenderPhase = false;
    }

    didScheduleRenderPhaseUpdateDuringThisPass = false;
  }

  function mountWorkInProgressHook() {
    var hook = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
    } else {
      // Append to the end of the list
      workInProgressHook = workInProgressHook.next = hook;
    }

    return workInProgressHook;
  }

  function updateWorkInProgressHook() {
    // This function is used both for updates and for re-renders triggered by a
    // render phase update. It assumes there is either a current hook we can
    // clone, or a work-in-progress hook from a previous render pass that we can
    // use as a base. When we reach the end of the base list, we must switch to
    // the dispatcher used for mounts.
    var nextCurrentHook;

    if (currentHook === null) {
      var current = currentlyRenderingFiber$1.alternate;

      if (current !== null) {
        nextCurrentHook = current.memoizedState;
      } else {
        nextCurrentHook = null;
      }
    } else {
      nextCurrentHook = currentHook.next;
    }

    var nextWorkInProgressHook;

    if (workInProgressHook === null) {
      nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
    } else {
      nextWorkInProgressHook = workInProgressHook.next;
    }

    if (nextWorkInProgressHook !== null) {
      // There's already a work-in-progress. Reuse it.
      workInProgressHook = nextWorkInProgressHook;
      nextWorkInProgressHook = workInProgressHook.next;
      currentHook = nextCurrentHook;
    } else {
      // Clone from the current hook.
      if (!(nextCurrentHook !== null)) {
        {
          throw Error( "Rendered more hooks than during the previous render." );
        }
      }

      currentHook = nextCurrentHook;
      var newHook = {
        memoizedState: currentHook.memoizedState,
        baseState: currentHook.baseState,
        baseQueue: currentHook.baseQueue,
        queue: currentHook.queue,
        next: null
      };

      if (workInProgressHook === null) {
        // This is the first hook in the list.
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
      } else {
        // Append to the end of the list.
        workInProgressHook = workInProgressHook.next = newHook;
      }
    }

    return workInProgressHook;
  }

  function createFunctionComponentUpdateQueue() {
    return {
      lastEffect: null
    };
  }

  function basicStateReducer(state, action) {
    // $FlowFixMe: Flow doesn't like mixed types
    return typeof action === 'function' ? action(state) : action;
  }

  function mountReducer(reducer, initialArg, init) {
    var hook = mountWorkInProgressHook();
    var initialState;

    if (init !== undefined) {
      initialState = init(initialArg);
    } else {
      initialState = initialArg;
    }

    hook.memoizedState = hook.baseState = initialState;
    var queue = hook.queue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: reducer,
      lastRenderedState: initialState
    };
    var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
    return [hook.memoizedState, dispatch];
  }

  function updateReducer(reducer, initialArg, init) {
    var hook = updateWorkInProgressHook();
    var queue = hook.queue;

    if (!(queue !== null)) {
      {
        throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
      }
    }

    queue.lastRenderedReducer = reducer;
    var current = currentHook; // The last rebase update that is NOT part of the base state.

    var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

    var pendingQueue = queue.pending;

    if (pendingQueue !== null) {
      // We have new updates that haven't been processed yet.
      // We'll add them to the base queue.
      if (baseQueue !== null) {
        // Merge the pending queue and the base queue.
        var baseFirst = baseQueue.next;
        var pendingFirst = pendingQueue.next;
        baseQueue.next = pendingFirst;
        pendingQueue.next = baseFirst;
      }

      {
        if (current.baseQueue !== baseQueue) {
          // Internal invariant that should never happen, but feasibly could in
          // the future if we implement resuming, or some form of that.
          error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
        }
      }

      current.baseQueue = baseQueue = pendingQueue;
      queue.pending = null;
    }

    if (baseQueue !== null) {
      // We have a queue to process.
      var first = baseQueue.next;
      var newState = current.baseState;
      var newBaseState = null;
      var newBaseQueueFirst = null;
      var newBaseQueueLast = null;
      var update = first;

      do {
        var updateLane = update.lane;

        if (!isSubsetOfLanes(renderLanes, updateLane)) {
          // Priority is insufficient. Skip this update. If this is the first
          // skipped update, the previous update/state is the new base
          // update/state.
          var clone = {
            lane: updateLane,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };

          if (newBaseQueueLast === null) {
            newBaseQueueFirst = newBaseQueueLast = clone;
            newBaseState = newState;
          } else {
            newBaseQueueLast = newBaseQueueLast.next = clone;
          } // Update the remaining priority in the queue.
          // TODO: Don't need to accumulate this. Instead, we can remove
          // renderLanes from the original lanes.


          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
          markSkippedUpdateLanes(updateLane);
        } else {
          // This update does have sufficient priority.
          if (newBaseQueueLast !== null) {
            var _clone = {
              // This update is going to be committed so we never want uncommit
              // it. Using NoLane works because 0 is a subset of all bitmasks, so
              // this will never be skipped by the check above.
              lane: NoLane,
              action: update.action,
              eagerReducer: update.eagerReducer,
              eagerState: update.eagerState,
              next: null
            };
            newBaseQueueLast = newBaseQueueLast.next = _clone;
          } // Process this update.


          if (update.eagerReducer === reducer) {
            // If this update was processed eagerly, and its reducer matches the
            // current reducer, we can use the eagerly computed state.
            newState = update.eagerState;
          } else {
            var action = update.action;
            newState = reducer(newState, action);
          }
        }

        update = update.next;
      } while (update !== null && update !== first);

      if (newBaseQueueLast === null) {
        newBaseState = newState;
      } else {
        newBaseQueueLast.next = newBaseQueueFirst;
      } // Mark that the fiber performed work, but only if the new state is
      // different from the current state.


      if (!objectIs(newState, hook.memoizedState)) {
        markWorkInProgressReceivedUpdate();
      }

      hook.memoizedState = newState;
      hook.baseState = newBaseState;
      hook.baseQueue = newBaseQueueLast;
      queue.lastRenderedState = newState;
    }

    var dispatch = queue.dispatch;
    return [hook.memoizedState, dispatch];
  }

  function rerenderReducer(reducer, initialArg, init) {
    var hook = updateWorkInProgressHook();
    var queue = hook.queue;

    if (!(queue !== null)) {
      {
        throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
      }
    }

    queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
    // work-in-progress hook.

    var dispatch = queue.dispatch;
    var lastRenderPhaseUpdate = queue.pending;
    var newState = hook.memoizedState;

    if (lastRenderPhaseUpdate !== null) {
      // The queue doesn't persist past this render pass.
      queue.pending = null;
      var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
      var update = firstRenderPhaseUpdate;

      do {
        // Process this render phase update. We don't have to check the
        // priority because it will always be the same as the current
        // render's.
        var action = update.action;
        newState = reducer(newState, action);
        update = update.next;
      } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
      // different from the current state.


      if (!objectIs(newState, hook.memoizedState)) {
        markWorkInProgressReceivedUpdate();
      }

      hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
      // the base state unless the queue is empty.
      // TODO: Not sure if this is the desired semantics, but it's what we
      // do for gDSFP. I can't remember why.

      if (hook.baseQueue === null) {
        hook.baseState = newState;
      }

      queue.lastRenderedState = newState;
    }

    return [newState, dispatch];
  }

  function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
    {
      warnAboutMultipleRenderersDEV(source);
    }

    var getVersion = source._getVersion;
    var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?

    var isSafeToReadFromSource = false; // Check the version first.
    // If this render has already been started with a specific version,
    // we can use it alone to determine if we can safely read from the source.

    var currentRenderVersion = getWorkInProgressVersion(source);

    if (currentRenderVersion !== null) {
      // It's safe to read if the store hasn't been mutated since the last time
      // we read something.
      isSafeToReadFromSource = currentRenderVersion === version;
    } else {
      // If there's no version, then this is the first time we've read from the
      // source during the current render pass, so we need to do a bit more work.
      // What we need to determine is if there are any hooks that already
      // subscribed to the source, and if so, whether there are any pending
      // mutations that haven't been synchronized yet.
      //
      // If there are no pending mutations, then `root.mutableReadLanes` will be
      // empty, and we know we can safely read.
      //
      // If there *are* pending mutations, we may still be able to safely read
      // if the currently rendering lanes are inclusive of the pending mutation
      // lanes, since that guarantees that the value we're about to read from
      // the source is consistent with the values that we read during the most
      // recent mutation.
      isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

      if (isSafeToReadFromSource) {
        // If it's safe to read from this source during the current render,
        // store the version in case other components read from it.
        // A changed version number will let those components know to throw and restart the render.
        setWorkInProgressVersion(source, version);
      }
    }

    if (isSafeToReadFromSource) {
      var snapshot = getSnapshot(source._source);

      {
        if (typeof snapshot === 'function') {
          error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
        }
      }

      return snapshot;
    } else {
      // This handles the special case of a mutable source being shared between renderers.
      // In that case, if the source is mutated between the first and second renderer,
      // The second renderer don't know that it needs to reset the WIP version during unwind,
      // (because the hook only marks sources as dirty if it's written to their WIP version).
      // That would cause this tear check to throw again and eventually be visible to the user.
      // We can avoid this infinite loop by explicitly marking the source as dirty.
      //
      // This can lead to tearing in the first renderer when it resumes,
      // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
      markSourceAsDirty(source);

      {
        {
          throw Error( "Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue." );
        }
      }
    }
  }

  function useMutableSource(hook, source, getSnapshot, subscribe) {
    var root = getWorkInProgressRoot();

    if (!(root !== null)) {
      {
        throw Error( "Expected a work-in-progress root. This is a bug in React. Please file an issue." );
      }
    }

    var getVersion = source._getVersion;
    var version = getVersion(source._source);
    var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

    var _dispatcher$useState = dispatcher.useState(function () {
      return readFromUnsubcribedMutableSource(root, source, getSnapshot);
    }),
        currentSnapshot = _dispatcher$useState[0],
        setSnapshot = _dispatcher$useState[1];

    var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
    // We use it to clear the pending update queue if we have a new source.

    var stateHook = workInProgressHook;
    var memoizedState = hook.memoizedState;
    var refs = memoizedState.refs;
    var prevGetSnapshot = refs.getSnapshot;
    var prevSource = memoizedState.source;
    var prevSubscribe = memoizedState.subscribe;
    var fiber = currentlyRenderingFiber$1;
    hook.memoizedState = {
      refs: refs,
      source: source,
      subscribe: subscribe
    }; // Sync the values needed by our subscription handler after each commit.

    dispatcher.useEffect(function () {
      refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
      // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
      // handleChange() below needs to reference the dispatch function without re-subscribing,
      // so we use a ref to ensure that it always has the latest version.

      refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.

      var maybeNewVersion = getVersion(source._source);

      if (!objectIs(version, maybeNewVersion)) {
        var maybeNewSnapshot = getSnapshot(source._source);

        {
          if (typeof maybeNewSnapshot === 'function') {
            error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
          }
        }

        if (!objectIs(snapshot, maybeNewSnapshot)) {
          setSnapshot(maybeNewSnapshot);
          var lane = requestUpdateLane(fiber);
          markRootMutableRead(root, lane);
        } // If the source mutated between render and now,
        // there may be state updates already scheduled from the old source.
        // Entangle the updates so that they render in the same batch.


        markRootEntangled(root, root.mutableReadLanes);
      }
    }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.

    dispatcher.useEffect(function () {
      var handleChange = function () {
        var latestGetSnapshot = refs.getSnapshot;
        var latestSetSnapshot = refs.setSnapshot;

        try {
          latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.

          var lane = requestUpdateLane(fiber);
          markRootMutableRead(root, lane);
        } catch (error) {
          // A selector might throw after a source mutation.
          // e.g. it might try to read from a part of the store that no longer exists.
          // In this case we should still schedule an update with React.
          // Worst case the selector will throw again and then an error boundary will handle it.
          latestSetSnapshot(function () {
            throw error;
          });
        }
      };

      var unsubscribe = subscribe(source._source, handleChange);

      {
        if (typeof unsubscribe !== 'function') {
          error('Mutable source subscribe function must return an unsubscribe function.');
        }
      }

      return unsubscribe;
    }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
    //
    // If either the source or the subscription have changed we can't can't trust the update queue.
    // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
    //
    // If the getSnapshot function changed, we also shouldn't rely on the update queue.
    // It's possible that the underlying source was mutated between the when the last "change" event fired,
    // and when the current render (with the new getSnapshot function) is processed.
    //
    // In both cases, we need to throw away pending updates (since they are no longer relevant)
    // and treat reading from the source as we do in the mount case.

    if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
      // Create a new queue and setState method,
      // So if there are interleaved updates, they get pushed to the older queue.
      // When this becomes current, the previous queue and dispatch method will be discarded,
      // including any interleaving updates that occur.
      var newQueue = {
        pending: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: snapshot
      };
      newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
      stateHook.queue = newQueue;
      stateHook.baseQueue = null;
      snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
      stateHook.memoizedState = stateHook.baseState = snapshot;
    }

    return snapshot;
  }

  function mountMutableSource(source, getSnapshot, subscribe) {
    var hook = mountWorkInProgressHook();
    hook.memoizedState = {
      refs: {
        getSnapshot: getSnapshot,
        setSnapshot: null
      },
      source: source,
      subscribe: subscribe
    };
    return useMutableSource(hook, source, getSnapshot, subscribe);
  }

  function updateMutableSource(source, getSnapshot, subscribe) {
    var hook = updateWorkInProgressHook();
    return useMutableSource(hook, source, getSnapshot, subscribe);
  }

  function mountState(initialState) {
    var hook = mountWorkInProgressHook();

    if (typeof initialState === 'function') {
      // $FlowFixMe: Flow doesn't like mixed types
      initialState = initialState();
    }

    hook.memoizedState = hook.baseState = initialState;
    var queue = hook.queue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialState
    };
    var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
    return [hook.memoizedState, dispatch];
  }

  function updateState(initialState) {
    return updateReducer(basicStateReducer);
  }

  function rerenderState(initialState) {
    return rerenderReducer(basicStateReducer);
  }

  function pushEffect(tag, create, destroy, deps) {
    var effect = {
      tag: tag,
      create: create,
      destroy: destroy,
      deps: deps,
      // Circular
      next: null
    };
    var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

    if (componentUpdateQueue === null) {
      componentUpdateQueue = createFunctionComponentUpdateQueue();
      currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var lastEffect = componentUpdateQueue.lastEffect;

      if (lastEffect === null) {
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var firstEffect = lastEffect.next;
        lastEffect.next = effect;
        effect.next = firstEffect;
        componentUpdateQueue.lastEffect = effect;
      }
    }

    return effect;
  }

  function mountRef(initialValue) {
    var hook = mountWorkInProgressHook();
    var ref = {
      current: initialValue
    };

    {
      Object.seal(ref);
    }

    hook.memoizedState = ref;
    return ref;
  }

  function updateRef(initialValue) {
    var hook = updateWorkInProgressHook();
    return hook.memoizedState;
  }

  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = mountWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
  }

  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
    var hook = updateWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    var destroy = undefined;

    if (currentHook !== null) {
      var prevEffect = currentHook.memoizedState;
      destroy = prevEffect.destroy;

      if (nextDeps !== null) {
        var prevDeps = prevEffect.deps;

        if (areHookInputsEqual(nextDeps, prevDeps)) {
          pushEffect(hookFlags, create, destroy, nextDeps);
          return;
        }
      }
    }

    currentlyRenderingFiber$1.flags |= fiberFlags;
    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
  }

  function mountEffect(create, deps) {
    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
      }
    }

    return mountEffectImpl(Update | Passive, Passive$1, create, deps);
  }

  function updateEffect(create, deps) {
    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
      }
    }

    return updateEffectImpl(Update | Passive, Passive$1, create, deps);
  }

  function mountLayoutEffect(create, deps) {
    return mountEffectImpl(Update, Layout, create, deps);
  }

  function updateLayoutEffect(create, deps) {
    return updateEffectImpl(Update, Layout, create, deps);
  }

  function imperativeHandleEffect(create, ref) {
    if (typeof ref === 'function') {
      var refCallback = ref;

      var _inst = create();

      refCallback(_inst);
      return function () {
        refCallback(null);
      };
    } else if (ref !== null && ref !== undefined) {
      var refObject = ref;

      {
        if (!refObject.hasOwnProperty('current')) {
          error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
        }
      }

      var _inst2 = create();

      refObject.current = _inst2;
      return function () {
        refObject.current = null;
      };
    }
  }

  function mountImperativeHandle(ref, create, deps) {
    {
      if (typeof create !== 'function') {
        error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
      }
    } // TODO: If deps are provided, should we skip comparing the ref itself?


    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
    return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
  }

  function updateImperativeHandle(ref, create, deps) {
    {
      if (typeof create !== 'function') {
        error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
      }
    } // TODO: If deps are provided, should we skip comparing the ref itself?


    var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
    return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
  }

  function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
  }

  var updateDebugValue = mountDebugValue;

  function mountCallback(callback, deps) {
    var hook = mountWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    hook.memoizedState = [callback, nextDeps];
    return callback;
  }

  function updateCallback(callback, deps) {
    var hook = updateWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    var prevState = hook.memoizedState;

    if (prevState !== null) {
      if (nextDeps !== null) {
        var prevDeps = prevState[1];

        if (areHookInputsEqual(nextDeps, prevDeps)) {
          return prevState[0];
        }
      }
    }

    hook.memoizedState = [callback, nextDeps];
    return callback;
  }

  function mountMemo(nextCreate, deps) {
    var hook = mountWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    var nextValue = nextCreate();
    hook.memoizedState = [nextValue, nextDeps];
    return nextValue;
  }

  function updateMemo(nextCreate, deps) {
    var hook = updateWorkInProgressHook();
    var nextDeps = deps === undefined ? null : deps;
    var prevState = hook.memoizedState;

    if (prevState !== null) {
      // Assume these are defined. If they're not, areHookInputsEqual will warn.
      if (nextDeps !== null) {
        var prevDeps = prevState[1];

        if (areHookInputsEqual(nextDeps, prevDeps)) {
          return prevState[0];
        }
      }
    }

    var nextValue = nextCreate();
    hook.memoizedState = [nextValue, nextDeps];
    return nextValue;
  }

  function mountDeferredValue(value) {
    var _mountState = mountState(value),
        prevValue = _mountState[0],
        setValue = _mountState[1];

    mountEffect(function () {
      var prevTransition = ReactCurrentBatchConfig$1.transition;
      ReactCurrentBatchConfig$1.transition = 1;

      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.transition = prevTransition;
      }
    }, [value]);
    return prevValue;
  }

  function updateDeferredValue(value) {
    var _updateState = updateState(),
        prevValue = _updateState[0],
        setValue = _updateState[1];

    updateEffect(function () {
      var prevTransition = ReactCurrentBatchConfig$1.transition;
      ReactCurrentBatchConfig$1.transition = 1;

      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.transition = prevTransition;
      }
    }, [value]);
    return prevValue;
  }

  function rerenderDeferredValue(value) {
    var _rerenderState = rerenderState(),
        prevValue = _rerenderState[0],
        setValue = _rerenderState[1];

    updateEffect(function () {
      var prevTransition = ReactCurrentBatchConfig$1.transition;
      ReactCurrentBatchConfig$1.transition = 1;

      try {
        setValue(value);
      } finally {
        ReactCurrentBatchConfig$1.transition = prevTransition;
      }
    }, [value]);
    return prevValue;
  }

  function startTransition(setPending, callback) {
    var priorityLevel = getCurrentPriorityLevel();

    {
      runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
        setPending(true);
      });
      runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
        var prevTransition = ReactCurrentBatchConfig$1.transition;
        ReactCurrentBatchConfig$1.transition = 1;

        try {
          setPending(false);
          callback();
        } finally {
          ReactCurrentBatchConfig$1.transition = prevTransition;
        }
      });
    }
  }

  function mountTransition() {
    var _mountState2 = mountState(false),
        isPending = _mountState2[0],
        setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
    // never changes.


    var start = startTransition.bind(null, setPending);
    mountRef(start);
    return [start, isPending];
  }

  function updateTransition() {
    var _updateState2 = updateState(),
        isPending = _updateState2[0];

    var startRef = updateRef();
    var start = startRef.current;
    return [start, isPending];
  }

  function rerenderTransition() {
    var _rerenderState2 = rerenderState(),
        isPending = _rerenderState2[0];

    var startRef = updateRef();
    var start = startRef.current;
    return [start, isPending];
  }

  var isUpdatingOpaqueValueInRenderPhase = false;
  function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
    {
      return isUpdatingOpaqueValueInRenderPhase;
    }
  }

  function warnOnOpaqueIdentifierAccessInDEV(fiber) {
    {
      // TODO: Should warn in effects and callbacks, too
      var name = getComponentName(fiber.type) || 'Unknown';

      if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
        error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');

        didWarnAboutUseOpaqueIdentifier[name] = true;
      }
    }
  }

  function mountOpaqueIdentifier() {
    var makeId =  makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1)) ;

    if (getIsHydrating()) {
      var didUpgrade = false;
      var fiber = currentlyRenderingFiber$1;

      var readValue = function () {
        if (!didUpgrade) {
          // Only upgrade once. This works even inside the render phase because
          // the update is added to a shared queue, which outlasts the
          // in-progress render.
          didUpgrade = true;

          {
            isUpdatingOpaqueValueInRenderPhase = true;
            setId(makeId());
            isUpdatingOpaqueValueInRenderPhase = false;
            warnOnOpaqueIdentifierAccessInDEV(fiber);
          }
        }

        {
          {
            throw Error( "The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly." );
          }
        }
      };

      var id = makeOpaqueHydratingObject(readValue);
      var setId = mountState(id)[1];

      if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
        currentlyRenderingFiber$1.flags |= Update | Passive;
        pushEffect(HasEffect | Passive$1, function () {
          setId(makeId());
        }, undefined, null);
      }

      return id;
    } else {
      var _id = makeId();

      mountState(_id);
      return _id;
    }
  }

  function updateOpaqueIdentifier() {
    var id = updateState()[0];
    return id;
  }

  function rerenderOpaqueIdentifier() {
    var id = rerenderState()[0];
    return id;
  }

  function dispatchAction(fiber, queue, action) {
    {
      if (typeof arguments[3] === 'function') {
        error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
      }
    }

    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = {
      lane: lane,
      action: action,
      eagerReducer: null,
      eagerState: null,
      next: null
    }; // Append the update to the end of the list.

    var pending = queue.pending;

    if (pending === null) {
      // This is the first update. Create a circular list.
      update.next = update;
    } else {
      update.next = pending.next;
      pending.next = update;
    }

    queue.pending = update;
    var alternate = fiber.alternate;

    if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
      // This is a render phase update. Stash it in a lazily-created map of
      // queue -> linked list of updates. After this render pass, we'll restart
      // and apply the stashed updates on top of the work-in-progress hook.
      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
    } else {
      if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
        // The queue is currently empty, which means we can eagerly compute the
        // next state before entering the render phase. If the new state is the
        // same as the current state, we may be able to bail out entirely.
        var lastRenderedReducer = queue.lastRenderedReducer;

        if (lastRenderedReducer !== null) {
          var prevDispatcher;

          {
            prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          }

          try {
            var currentState = queue.lastRenderedState;
            var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
            // it, on the update object. If the reducer hasn't changed by the
            // time we enter the render phase, then the eager state can be used
            // without calling the reducer again.

            update.eagerReducer = lastRenderedReducer;
            update.eagerState = eagerState;

            if (objectIs(eagerState, currentState)) {
              // Fast path. We can bail out without scheduling React to re-render.
              // It's still possible that we'll need to rebase this update later,
              // if the component re-renders for a different reason and by that
              // time the reducer has changed.
              return;
            }
          } catch (error) {// Suppress the error. It will throw again in the render phase.
          } finally {
            {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          }
        }
      }

      {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
          warnIfNotScopedWithMatchingAct(fiber);
          warnIfNotCurrentlyActingUpdatesInDev(fiber);
        }
      }

      scheduleUpdateOnFiber(fiber, lane, eventTime);
    }
  }

  var ContextOnlyDispatcher = {
    readContext: readContext,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useMutableSource: throwInvalidHookError,
    useOpaqueIdentifier: throwInvalidHookError,
    unstable_isNewReconciler: enableNewReconciler
  };
  var HooksDispatcherOnMountInDEV = null;
  var HooksDispatcherOnMountWithHookTypesInDEV = null;
  var HooksDispatcherOnUpdateInDEV = null;
  var HooksDispatcherOnRerenderInDEV = null;
  var InvalidNestedHooksDispatcherOnMountInDEV = null;
  var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
  var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

  {
    var warnInvalidContextAccess = function () {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    };

    var warnInvalidHookAccess = function () {
      error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
    };

    HooksDispatcherOnMountInDEV = {
      readContext: function (context, observedBits) {
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        mountHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        return mountLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        mountHookTypesDev();
        checkDepsAreArrayDev(deps);
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

        try {
          return mountMemo(create, deps);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        mountHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

        try {
          return mountState(initialState);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        mountHookTypesDev();
        return mountDebugValue();
      },
      useDeferredValue: function (value) {
        currentHookNameInDev = 'useDeferredValue';
        mountHookTypesDev();
        return mountDeferredValue(value);
      },
      useTransition: function () {
        currentHookNameInDev = 'useTransition';
        mountHookTypesDev();
        return mountTransition();
      },
      useMutableSource: function (source, getSnapshot, subscribe) {
        currentHookNameInDev = 'useMutableSource';
        mountHookTypesDev();
        return mountMutableSource(source, getSnapshot, subscribe);
      },
      useOpaqueIdentifier: function () {
        currentHookNameInDev = 'useOpaqueIdentifier';
        mountHookTypesDev();
        return mountOpaqueIdentifier();
      },
      unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
      readContext: function (context, observedBits) {
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        updateHookTypesDev();
        return mountCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        updateHookTypesDev();
        return mountEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        updateHookTypesDev();
        return mountImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        updateHookTypesDev();
        return mountLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

        try {
          return mountMemo(create, deps);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        updateHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

        try {
          return mountState(initialState);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        updateHookTypesDev();
        return mountDebugValue();
      },
      useDeferredValue: function (value) {
        currentHookNameInDev = 'useDeferredValue';
        updateHookTypesDev();
        return mountDeferredValue(value);
      },
      useTransition: function () {
        currentHookNameInDev = 'useTransition';
        updateHookTypesDev();
        return mountTransition();
      },
      useMutableSource: function (source, getSnapshot, subscribe) {
        currentHookNameInDev = 'useMutableSource';
        updateHookTypesDev();
        return mountMutableSource(source, getSnapshot, subscribe);
      },
      useOpaqueIdentifier: function () {
        currentHookNameInDev = 'useOpaqueIdentifier';
        updateHookTypesDev();
        return mountOpaqueIdentifier();
      },
      unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
      readContext: function (context, observedBits) {
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        updateHookTypesDev();
        return updateEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        updateHookTypesDev();
        return updateLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

        try {
          return updateMemo(create, deps);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

        try {
          return updateReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        updateHookTypesDev();
        return updateRef();
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

        try {
          return updateState(initialState);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        updateHookTypesDev();
        return updateDebugValue();
      },
      useDeferredValue: function (value) {
        currentHookNameInDev = 'useDeferredValue';
        updateHookTypesDev();
        return updateDeferredValue(value);
      },
      useTransition: function () {
        currentHookNameInDev = 'useTransition';
        updateHookTypesDev();
        return updateTransition();
      },
      useMutableSource: function (source, getSnapshot, subscribe) {
        currentHookNameInDev = 'useMutableSource';
        updateHookTypesDev();
        return updateMutableSource(source, getSnapshot, subscribe);
      },
      useOpaqueIdentifier: function () {
        currentHookNameInDev = 'useOpaqueIdentifier';
        updateHookTypesDev();
        return updateOpaqueIdentifier();
      },
      unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
      readContext: function (context, observedBits) {
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        updateHookTypesDev();
        return updateEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        updateHookTypesDev();
        return updateLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

        try {
          return updateMemo(create, deps);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

        try {
          return rerenderReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        updateHookTypesDev();
        return updateRef();
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

        try {
          return rerenderState(initialState);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        updateHookTypesDev();
        return updateDebugValue();
      },
      useDeferredValue: function (value) {
        currentHookNameInDev = 'useDeferredValue';
        updateHookTypesDev();
        return rerenderDeferredValue(value);
      },
      useTransition: function () {
        currentHookNameInDev = 'useTransition';
        updateHookTypesDev();
        return rerenderTransition();
      },
      useMutableSource: function (source, getSnapshot, subscribe) {
        currentHookNameInDev = 'useMutableSource';
        updateHookTypesDev();
        return updateMutableSource(source, getSnapshot, subscribe);
      },
      useOpaqueIdentifier: function () {
        currentHookNameInDev = 'useOpaqueIdentifier';
        updateHookTypesDev();
        return rerenderOpaqueIdentifier();
      },
      unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
      readContext: function (context, observedBits) {
        warnInvalidContextAccess();
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

        try {
          return mountMemo(create, deps);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

        try {
          return mountReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountRef(initialValue);
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        warnInvalidHookAccess();
        mountHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

        try {
          return mountState(initialState);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountDebugValue();
      },
      useDeferredValue: function (value) {
        currentHookNameInDev = 'useDeferredValue';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountDeferredValue(value);
      },
      useTransition: function () {
        currentHookNameInDev = 'useTransition';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountTransition();
      },
      useMutableSource: function (source, getSnapshot, subscribe) {
        currentHookNameInDev = 'useMutableSource';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountMutableSource(source, getSnapshot, subscribe);
      },
      useOpaqueIdentifier: function () {
        currentHookNameInDev = 'useOpaqueIdentifier';
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountOpaqueIdentifier();
      },
      unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
      readContext: function (context, observedBits) {
        warnInvalidContextAccess();
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

        try {
          return updateMemo(create, deps);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

        try {
          return updateReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateRef();
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

        try {
          return updateState(initialState);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateDebugValue();
      },
      useDeferredValue: function (value) {
        currentHookNameInDev = 'useDeferredValue';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateDeferredValue(value);
      },
      useTransition: function () {
        currentHookNameInDev = 'useTransition';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateTransition();
      },
      useMutableSource: function (source, getSnapshot, subscribe) {
        currentHookNameInDev = 'useMutableSource';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateMutableSource(source, getSnapshot, subscribe);
      },
      useOpaqueIdentifier: function () {
        currentHookNameInDev = 'useOpaqueIdentifier';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateOpaqueIdentifier();
      },
      unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
      readContext: function (context, observedBits) {
        warnInvalidContextAccess();
        return readContext(context, observedBits);
      },
      useCallback: function (callback, deps) {
        currentHookNameInDev = 'useCallback';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateCallback(callback, deps);
      },
      useContext: function (context, observedBits) {
        currentHookNameInDev = 'useContext';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return readContext(context, observedBits);
      },
      useEffect: function (create, deps) {
        currentHookNameInDev = 'useEffect';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateEffect(create, deps);
      },
      useImperativeHandle: function (ref, create, deps) {
        currentHookNameInDev = 'useImperativeHandle';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateImperativeHandle(ref, create, deps);
      },
      useLayoutEffect: function (create, deps) {
        currentHookNameInDev = 'useLayoutEffect';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateLayoutEffect(create, deps);
      },
      useMemo: function (create, deps) {
        currentHookNameInDev = 'useMemo';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

        try {
          return updateMemo(create, deps);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useReducer: function (reducer, initialArg, init) {
        currentHookNameInDev = 'useReducer';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

        try {
          return rerenderReducer(reducer, initialArg, init);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useRef: function (initialValue) {
        currentHookNameInDev = 'useRef';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateRef();
      },
      useState: function (initialState) {
        currentHookNameInDev = 'useState';
        warnInvalidHookAccess();
        updateHookTypesDev();
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

        try {
          return rerenderState(initialState);
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
      },
      useDebugValue: function (value, formatterFn) {
        currentHookNameInDev = 'useDebugValue';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateDebugValue();
      },
      useDeferredValue: function (value) {
        currentHookNameInDev = 'useDeferredValue';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderDeferredValue(value);
      },
      useTransition: function () {
        currentHookNameInDev = 'useTransition';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderTransition();
      },
      useMutableSource: function (source, getSnapshot, subscribe) {
        currentHookNameInDev = 'useMutableSource';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateMutableSource(source, getSnapshot, subscribe);
      },
      useOpaqueIdentifier: function () {
        currentHookNameInDev = 'useOpaqueIdentifier';
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderOpaqueIdentifier();
      },
      unstable_isNewReconciler: enableNewReconciler
    };
  }

  var now$1 = Scheduler.unstable_now;
  var commitTime = 0;
  var profilerStartTime = -1;

  function getCommitTime() {
    return commitTime;
  }

  function recordCommitTime() {

    commitTime = now$1();
  }

  function startProfilerTimer(fiber) {

    profilerStartTime = now$1();

    if (fiber.actualStartTime < 0) {
      fiber.actualStartTime = now$1();
    }
  }

  function stopProfilerTimerIfRunning(fiber) {

    profilerStartTime = -1;
  }

  function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

    if (profilerStartTime >= 0) {
      var elapsedTime = now$1() - profilerStartTime;
      fiber.actualDuration += elapsedTime;

      if (overrideBaseTime) {
        fiber.selfBaseDuration = elapsedTime;
      }

      profilerStartTime = -1;
    }
  }

  function transferActualDuration(fiber) {
    // Transfer time spent rendering these children so we don't lose it
    // after we rerender. This is used as a helper in special cases
    // where we should count the work of multiple passes.
    var child = fiber.child;

    while (child) {
      fiber.actualDuration += child.actualDuration;
      child = child.sibling;
    }
  }

  var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
  var didReceiveUpdate = false;
  var didWarnAboutBadClass;
  var didWarnAboutModulePatternComponent;
  var didWarnAboutContextTypeOnFunctionComponent;
  var didWarnAboutGetDerivedStateOnFunctionComponent;
  var didWarnAboutFunctionRefs;
  var didWarnAboutReassigningProps;
  var didWarnAboutRevealOrder;
  var didWarnAboutTailOptions;

  {
    didWarnAboutBadClass = {};
    didWarnAboutModulePatternComponent = {};
    didWarnAboutContextTypeOnFunctionComponent = {};
    didWarnAboutGetDerivedStateOnFunctionComponent = {};
    didWarnAboutFunctionRefs = {};
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {};
    didWarnAboutTailOptions = {};
  }

  function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
    if (current === null) {
      // If this is a fresh new component that hasn't been rendered yet, we
      // won't update its child set by applying minimal side-effects. Instead,
      // we will add them all to the child before it gets rendered. That means
      // we can optimize this reconciliation pass by not tracking side-effects.
      workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
    } else {
      // If the current child is the same as the work in progress, it means that
      // we haven't yet started any work on these children. Therefore, we use
      // the clone algorithm to create a copy of all the current children.
      // If we had any progressed work already, that is invalid at this point so
      // let's throw it out.
      workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
    }
  }

  function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
    // This function is fork of reconcileChildren. It's used in cases where we
    // want to reconcile without matching against the existing set. This has the
    // effect of all current children being unmounted; even if the type and key
    // are the same, the old child is unmounted and a new child is created.
    //
    // To do this, we're going to go through the reconcile algorithm twice. In
    // the first pass, we schedule a deletion for all the current children by
    // passing null.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
    // pass null in place of where we usually pass the current child set. This has
    // the effect of remounting all children regardless of whether their
    // identities match.

    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
  }

  function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
    // TODO: current can be non-null here even if the component
    // hasn't yet mounted. This happens after the first render suspends.
    // We'll need to figure out if this is fine or can cause issues.
    {
      if (workInProgress.type !== workInProgress.elementType) {
        // Lazy component props can't be validated in createElement
        // because they're only guaranteed to be resolved here.
        var innerPropTypes = Component.propTypes;

        if (innerPropTypes) {
          checkPropTypes(innerPropTypes, nextProps, // Resolved props
          'prop', getComponentName(Component));
        }
      }
    }

    var render = Component.render;
    var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

    var nextChildren;
    prepareToReadContext(workInProgress, renderLanes);

    {
      ReactCurrentOwner$1.current = workInProgress;
      setIsRendering(true);
      nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);

      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        } finally {
          reenableLogs();
        }
      }

      setIsRendering(false);
    }

    if (current !== null && !didReceiveUpdate) {
      bailoutHooks(current, workInProgress, renderLanes);
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    } // React DevTools reads this flag.


    workInProgress.flags |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }

  function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
    if (current === null) {
      var type = Component.type;

      if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
      Component.defaultProps === undefined) {
        var resolvedType = type;

        {
          resolvedType = resolveFunctionForHotReloading(type);
        } // If this is a plain function component without default props,
        // and with only the default shallow comparison, we upgrade it
        // to a SimpleMemoComponent to allow fast path updates.


        workInProgress.tag = SimpleMemoComponent;
        workInProgress.type = resolvedType;

        {
          validateFunctionComponentInDev(workInProgress, type);
        }

        return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
      }

      {
        var innerPropTypes = type.propTypes;

        if (innerPropTypes) {
          // Inner memo component props aren't currently validated in createElement.
          // We could move it there, but we'd still need this for lazy code path.
          checkPropTypes(innerPropTypes, nextProps, // Resolved props
          'prop', getComponentName(type));
        }
      }

      var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
      child.ref = workInProgress.ref;
      child.return = workInProgress;
      workInProgress.child = child;
      return child;
    }

    {
      var _type = Component.type;
      var _innerPropTypes = _type.propTypes;

      if (_innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(_type));
      }
    }

    var currentChild = current.child; // This is always exactly one child

    if (!includesSomeLane(updateLanes, renderLanes)) {
      // This will be the props with resolved defaultProps,
      // unlike current.memoizedProps which will be the unresolved ones.
      var prevProps = currentChild.memoizedProps; // Default to shallow comparison

      var compare = Component.compare;
      compare = compare !== null ? compare : shallowEqual;

      if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
    } // React DevTools reads this flag.


    workInProgress.flags |= PerformedWork;
    var newChild = createWorkInProgress(currentChild, nextProps);
    newChild.ref = workInProgress.ref;
    newChild.return = workInProgress;
    workInProgress.child = newChild;
    return newChild;
  }

  function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
    // TODO: current can be non-null here even if the component
    // hasn't yet mounted. This happens when the inner render suspends.
    // We'll need to figure out if this is fine or can cause issues.
    {
      if (workInProgress.type !== workInProgress.elementType) {
        // Lazy component props can't be validated in createElement
        // because they're only guaranteed to be resolved here.
        var outerMemoType = workInProgress.elementType;

        if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
          // We warn when you define propTypes on lazy()
          // so let's just skip over it to find memo() outer wrapper.
          // Inner props for memo are validated later.
          var lazyComponent = outerMemoType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            outerMemoType = init(payload);
          } catch (x) {
            outerMemoType = null;
          } // Inner propTypes will be validated in the function component path.


          var outerPropTypes = outerMemoType && outerMemoType.propTypes;

          if (outerPropTypes) {
            checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
            'prop', getComponentName(outerMemoType));
          }
        }
      }
    }

    if (current !== null) {
      var prevProps = current.memoizedProps;

      if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
       workInProgress.type === current.type )) {
        didReceiveUpdate = false;

        if (!includesSomeLane(renderLanes, updateLanes)) {
          // The pending lanes were cleared at the beginning of beginWork. We're
          // about to bail out, but there might be other lanes that weren't
          // included in the current render. Usually, the priority level of the
          // remaining updates is accumlated during the evaluation of the
          // component (i.e. when processing the update queue). But since since
          // we're bailing out early *without* evaluating the component, we need
          // to account for it here, too. Reset to the value of the current fiber.
          // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
          // because a MemoComponent fiber does not have hooks or an update queue;
          // rather, it wraps around an inner component, which may or may not
          // contains hooks.
          // TODO: Move the reset at in beginWork out of the common path so that
          // this is no longer necessary.
          workInProgress.lanes = current.lanes;
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
          // This is a special case that only exists for legacy mode.
          // See https://github.com/facebook/react/pull/19216.
          didReceiveUpdate = true;
        }
      }
    }

    return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
  }

  function updateOffscreenComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps;
    var nextChildren = nextProps.children;
    var prevState = current !== null ? current.memoizedState : null;

    if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
      if ((workInProgress.mode & ConcurrentMode) === NoMode) {
        // In legacy sync mode, don't defer the subtree. Render it now.
        // TODO: Figure out what we should do in Blocking mode.
        var nextState = {
          baseLanes: NoLanes
        };
        workInProgress.memoizedState = nextState;
        pushRenderLanes(workInProgress, renderLanes);
      } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
        var nextBaseLanes;

        if (prevState !== null) {
          var prevBaseLanes = prevState.baseLanes;
          nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
        } else {
          nextBaseLanes = renderLanes;
        } // Schedule this fiber to re-render at offscreen priority. Then bailout.


        {
          markSpawnedWork(OffscreenLane);
        }

        workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
        var _nextState = {
          baseLanes: nextBaseLanes
        };
        workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
        // to avoid a push/pop misalignment.

        pushRenderLanes(workInProgress, nextBaseLanes);
        return null;
      } else {
        // Rendering at offscreen, so we can clear the base lanes.
        var _nextState2 = {
          baseLanes: NoLanes
        };
        workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

        var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
        pushRenderLanes(workInProgress, subtreeRenderLanes);
      }
    } else {
      var _subtreeRenderLanes;

      if (prevState !== null) {
        _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state

        workInProgress.memoizedState = null;
      } else {
        // We weren't previously hidden, and we still aren't, so there's nothing
        // special to do. Need to push to the stack regardless, though, to avoid
        // a push/pop misalignment.
        _subtreeRenderLanes = renderLanes;
      }

      pushRenderLanes(workInProgress, _subtreeRenderLanes);
    }

    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  } // Note: These happen to have identical begin phases, for now. We shouldn't hold
  // ourselves to this constraint, though. If the behavior diverges, we should
  // fork the function.


  var updateLegacyHiddenComponent = updateOffscreenComponent;

  function updateFragment(current, workInProgress, renderLanes) {
    var nextChildren = workInProgress.pendingProps;
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }

  function updateMode(current, workInProgress, renderLanes) {
    var nextChildren = workInProgress.pendingProps.children;
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }

  function updateProfiler(current, workInProgress, renderLanes) {
    {
      workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
      // These are reset during render to allow the DevTools commit hook a chance to read them,

      var stateNode = workInProgress.stateNode;
      stateNode.effectDuration = 0;
      stateNode.passiveEffectDuration = 0;
    }

    var nextProps = workInProgress.pendingProps;
    var nextChildren = nextProps.children;
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }

  function markRef(current, workInProgress) {
    var ref = workInProgress.ref;

    if (current === null && ref !== null || current !== null && current.ref !== ref) {
      // Schedule a Ref effect
      workInProgress.flags |= Ref;
    }
  }

  function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
    {
      if (workInProgress.type !== workInProgress.elementType) {
        // Lazy component props can't be validated in createElement
        // because they're only guaranteed to be resolved here.
        var innerPropTypes = Component.propTypes;

        if (innerPropTypes) {
          checkPropTypes(innerPropTypes, nextProps, // Resolved props
          'prop', getComponentName(Component));
        }
      }
    }

    var context;

    {
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
      context = getMaskedContext(workInProgress, unmaskedContext);
    }

    var nextChildren;
    prepareToReadContext(workInProgress, renderLanes);

    {
      ReactCurrentOwner$1.current = workInProgress;
      setIsRendering(true);
      nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);

      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        } finally {
          reenableLogs();
        }
      }

      setIsRendering(false);
    }

    if (current !== null && !didReceiveUpdate) {
      bailoutHooks(current, workInProgress, renderLanes);
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    } // React DevTools reads this flag.


    workInProgress.flags |= PerformedWork;
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }

  function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
    {
      if (workInProgress.type !== workInProgress.elementType) {
        // Lazy component props can't be validated in createElement
        // because they're only guaranteed to be resolved here.
        var innerPropTypes = Component.propTypes;

        if (innerPropTypes) {
          checkPropTypes(innerPropTypes, nextProps, // Resolved props
          'prop', getComponentName(Component));
        }
      }
    } // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.


    var hasContext;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    prepareToReadContext(workInProgress, renderLanes);
    var instance = workInProgress.stateNode;
    var shouldUpdate;

    if (instance === null) {
      if (current !== null) {
        // A class component without an instance only mounts if it suspended
        // inside a non-concurrent tree, in an inconsistent state. We want to
        // treat it like a new mount, even though an empty version of it already
        // committed. Disconnect the alternate pointers.
        current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.flags |= Placement;
      } // In the initial pass we might need to construct the instance.


      constructClassInstance(workInProgress, Component, nextProps);
      mountClassInstance(workInProgress, Component, nextProps, renderLanes);
      shouldUpdate = true;
    } else if (current === null) {
      // In a resume, we'll already have an instance we can reuse.
      shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
    } else {
      shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
    }

    var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

    {
      var inst = workInProgress.stateNode;

      if (shouldUpdate && inst.props !== nextProps) {
        if (!didWarnAboutReassigningProps) {
          error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
        }

        didWarnAboutReassigningProps = true;
      }
    }

    return nextUnitOfWork;
  }

  function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
    // Refs should update even if shouldComponentUpdate returns false
    markRef(current, workInProgress);
    var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

    if (!shouldUpdate && !didCaptureError) {
      // Context providers should defer to sCU for rendering
      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, false);
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }

    var instance = workInProgress.stateNode; // Rerender

    ReactCurrentOwner$1.current = workInProgress;
    var nextChildren;

    if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
      // If we captured an error, but getDerivedStateFromError is not defined,
      // unmount all the children. componentDidCatch will schedule an update to
      // re-render a fallback. This is temporary until we migrate everyone to
      // the new API.
      // TODO: Warn in a future release.
      nextChildren = null;

      {
        stopProfilerTimerIfRunning();
      }
    } else {
      {
        setIsRendering(true);
        nextChildren = instance.render();

        if ( workInProgress.mode & StrictMode) {
          disableLogs();

          try {
            instance.render();
          } finally {
            reenableLogs();
          }
        }

        setIsRendering(false);
      }
    } // React DevTools reads this flag.


    workInProgress.flags |= PerformedWork;

    if (current !== null && didCaptureError) {
      // If we're recovering from an error, reconcile without reusing any of
      // the existing children. Conceptually, the normal children and the children
      // that are shown on error are two different sets, so we shouldn't reuse
      // normal children even if their identities match.
      forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
    } else {
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    } // Memoize state using the values we just used to render.
    // TODO: Restructure so we never read values from the instance.


    workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, true);
    }

    return workInProgress.child;
  }

  function pushHostRootContext(workInProgress) {
    var root = workInProgress.stateNode;

    if (root.pendingContext) {
      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
    } else if (root.context) {
      // Should always be set
      pushTopLevelContextObject(workInProgress, root.context, false);
    }

    pushHostContainer(workInProgress, root.containerInfo);
  }

  function updateHostRoot(current, workInProgress, renderLanes) {
    pushHostRootContext(workInProgress);
    var updateQueue = workInProgress.updateQueue;

    if (!(current !== null && updateQueue !== null)) {
      {
        throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    var nextProps = workInProgress.pendingProps;
    var prevState = workInProgress.memoizedState;
    var prevChildren = prevState !== null ? prevState.element : null;
    cloneUpdateQueue(current, workInProgress);
    processUpdateQueue(workInProgress, nextProps, null, renderLanes);
    var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
    // being called "element".

    var nextChildren = nextState.element;

    if (nextChildren === prevChildren) {
      resetHydrationState();
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }

    var root = workInProgress.stateNode;

    if (root.hydrate && enterHydrationState(workInProgress)) {
      // If we don't have any current children this might be the first pass.
      // We always try to hydrate. If this isn't a hydration pass there won't
      // be any children to hydrate which is effectively the same thing as
      // not hydrating.
      {
        var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;

        if (mutableSourceEagerHydrationData != null) {
          for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
            var mutableSource = mutableSourceEagerHydrationData[i];
            var version = mutableSourceEagerHydrationData[i + 1];
            setWorkInProgressVersion(mutableSource, version);
          }
        }
      }

      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
      workInProgress.child = child;
      var node = child;

      while (node) {
        // Mark each child as hydrating. This is a fast path to know whether this
        // tree is part of a hydrating tree. This is used to determine if a child
        // node has fully mounted yet, and for scheduling event replaying.
        // Conceptually this is similar to Placement in that a new subtree is
        // inserted into the React tree here. It just happens to not need DOM
        // mutations because it already exists.
        node.flags = node.flags & ~Placement | Hydrating;
        node = node.sibling;
      }
    } else {
      // Otherwise reset hydration state in case we aborted and resumed another
      // root.
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
      resetHydrationState();
    }

    return workInProgress.child;
  }

  function updateHostComponent(current, workInProgress, renderLanes) {
    pushHostContext(workInProgress);

    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    }

    var type = workInProgress.type;
    var nextProps = workInProgress.pendingProps;
    var prevProps = current !== null ? current.memoizedProps : null;
    var nextChildren = nextProps.children;
    var isDirectTextChild = shouldSetTextContent(type, nextProps);

    if (isDirectTextChild) {
      // We special case a direct text child of a host node. This is a common
      // case. We won't handle it as a reified child. We will instead handle
      // this in the host environment that also has access to this prop. That
      // avoids allocating another HostText fiber and traversing it.
      nextChildren = null;
    } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
      // If we're switching from a direct text child to a normal child, or to
      // empty, we need to schedule the text content to be reset.
      workInProgress.flags |= ContentReset;
    }

    markRef(current, workInProgress);
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    return workInProgress.child;
  }

  function updateHostText(current, workInProgress) {
    if (current === null) {
      tryToClaimNextHydratableInstance(workInProgress);
    } // Nothing to do here. This is terminal. We'll do the completion step
    // immediately after.


    return null;
  }

  function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
    if (_current !== null) {
      // A lazy component only mounts if it suspended inside a non-
      // concurrent tree, in an inconsistent state. We want to treat it like
      // a new mount, even though an empty version of it already committed.
      // Disconnect the alternate pointers.
      _current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.flags |= Placement;
    }

    var props = workInProgress.pendingProps;
    var lazyComponent = elementType;
    var payload = lazyComponent._payload;
    var init = lazyComponent._init;
    var Component = init(payload); // Store the unwrapped component in the type.

    workInProgress.type = Component;
    var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
    var resolvedProps = resolveDefaultProps(Component, props);
    var child;

    switch (resolvedTag) {
      case FunctionComponent:
        {
          {
            validateFunctionComponentInDev(workInProgress, Component);
            workInProgress.type = Component = resolveFunctionForHotReloading(Component);
          }

          child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
          return child;
        }

      case ClassComponent:
        {
          {
            workInProgress.type = Component = resolveClassForHotReloading(Component);
          }

          child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
          return child;
        }

      case ForwardRef:
        {
          {
            workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
          }

          child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
          return child;
        }

      case MemoComponent:
        {
          {
            if (workInProgress.type !== workInProgress.elementType) {
              var outerPropTypes = Component.propTypes;

              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                'prop', getComponentName(Component));
              }
            }
          }

          child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
          updateLanes, renderLanes);
          return child;
        }
    }

    var hint = '';

    {
      if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
        hint = ' Did you wrap a component in React.lazy() more than once?';
      }
    } // This message intentionally doesn't mention ForwardRef or MemoComponent
    // because the fact that it's a separate type of work is an
    // implementation detail.


    {
      {
        throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
      }
    }
  }

  function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
    if (_current !== null) {
      // An incomplete component only mounts if it suspended inside a non-
      // concurrent tree, in an inconsistent state. We want to treat it like
      // a new mount, even though an empty version of it already committed.
      // Disconnect the alternate pointers.
      _current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.flags |= Placement;
    } // Promote the fiber to a class and try rendering again.


    workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
    // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    prepareToReadContext(workInProgress, renderLanes);
    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
  }

  function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
    if (_current !== null) {
      // An indeterminate component only mounts if it suspended inside a non-
      // concurrent tree, in an inconsistent state. We want to treat it like
      // a new mount, even though an empty version of it already committed.
      // Disconnect the alternate pointers.
      _current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.flags |= Placement;
    }

    var props = workInProgress.pendingProps;
    var context;

    {
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
      context = getMaskedContext(workInProgress, unmaskedContext);
    }

    prepareToReadContext(workInProgress, renderLanes);
    var value;

    {
      if (Component.prototype && typeof Component.prototype.render === 'function') {
        var componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutBadClass[componentName]) {
          error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

          didWarnAboutBadClass[componentName] = true;
        }
      }

      if (workInProgress.mode & StrictMode) {
        ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
      }

      setIsRendering(true);
      ReactCurrentOwner$1.current = workInProgress;
      value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
      setIsRendering(false);
    } // React DevTools reads this flag.


    workInProgress.flags |= PerformedWork;

    {
      // Support for module components is deprecated and is removed behind a flag.
      // Whether or not it would crash later, we want to show a good message in DEV first.
      if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
        var _componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutModulePatternComponent[_componentName]) {
          error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

          didWarnAboutModulePatternComponent[_componentName] = true;
        }
      }
    }

    if ( // Run these checks in production only if the flag is off.
    // Eventually we'll delete this branch altogether.
     typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
      {
        var _componentName2 = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutModulePatternComponent[_componentName2]) {
          error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

          didWarnAboutModulePatternComponent[_componentName2] = true;
        }
      } // Proceed under the assumption that this is a class instance


      workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.

      var hasContext = false;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
      initializeUpdateQueue(workInProgress);
      var getDerivedStateFromProps = Component.getDerivedStateFromProps;

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
      }

      adoptClassInstance(workInProgress, value);
      mountClassInstance(workInProgress, Component, props, renderLanes);
      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    } else {
      // Proceed under the assumption that this is a function component
      workInProgress.tag = FunctionComponent;

      {

        if ( workInProgress.mode & StrictMode) {
          disableLogs();

          try {
            value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
          } finally {
            reenableLogs();
          }
        }
      }

      reconcileChildren(null, workInProgress, value, renderLanes);

      {
        validateFunctionComponentInDev(workInProgress, Component);
      }

      return workInProgress.child;
    }
  }

  function validateFunctionComponentInDev(workInProgress, Component) {
    {
      if (Component) {
        if (Component.childContextTypes) {
          error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
      }

      if (workInProgress.ref !== null) {
        var info = '';
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();

        if (ownerName) {
          info += '\n\nCheck the render method of `' + ownerName + '`.';
        }

        var warningKey = ownerName || workInProgress._debugID || '';
        var debugSource = workInProgress._debugSource;

        if (debugSource) {
          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
        }

        if (!didWarnAboutFunctionRefs[warningKey]) {
          didWarnAboutFunctionRefs[warningKey] = true;

          error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
        }
      }

      if (typeof Component.getDerivedStateFromProps === 'function') {
        var _componentName3 = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
          error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

          didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
        }
      }

      if (typeof Component.contextType === 'object' && Component.contextType !== null) {
        var _componentName4 = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
          error('%s: Function components do not support contextType.', _componentName4);

          didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
        }
      }
    }
  }

  var SUSPENDED_MARKER = {
    dehydrated: null,
    retryLane: NoLane
  };

  function mountSuspenseOffscreenState(renderLanes) {
    return {
      baseLanes: renderLanes
    };
  }

  function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
    return {
      baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
    };
  } // TODO: Probably should inline this back


  function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
    // If we're already showing a fallback, there are cases where we need to
    // remain on that fallback regardless of whether the content has resolved.
    // For example, SuspenseList coordinates when nested content appears.
    if (current !== null) {
      var suspenseState = current.memoizedState;

      if (suspenseState === null) {
        // Currently showing content. Don't hide it, even if ForceSuspenseFallack
        // is true. More precise name might be "ForceRemainSuspenseFallback".
        // Note: This is a factoring smell. Can't remain on a fallback if there's
        // no fallback to remain on.
        return false;
      }
    } // Not currently showing content. Consult the Suspense context.


    return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
  }

  function getRemainingWorkInPrimaryTree(current, renderLanes) {
    // TODO: Should not remove render lanes that were pinged during this render
    return removeLanes(current.childLanes, renderLanes);
  }

  function updateSuspenseComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

    {
      if (shouldSuspend(workInProgress)) {
        workInProgress.flags |= DidCapture;
      }
    }

    var suspenseContext = suspenseStackCursor.current;
    var showFallback = false;
    var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

    if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
      // Something in this boundary's subtree already suspended. Switch to
      // rendering the fallback children.
      showFallback = true;
      workInProgress.flags &= ~DidCapture;
    } else {
      // Attempting the main content
      if (current === null || current.memoizedState !== null) {
        // This is a new mount or this boundary is already showing a fallback state.
        // Mark this subtree context as having at least one invisible parent that could
        // handle the fallback state.
        // Boundaries without fallbacks or should be avoided are not considered since
        // they cannot handle preferred fallback states.
        if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
          suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
        }
      }
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
    pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
    // boundary's children. This involves some custom reconcilation logic. Two
    // main reasons this is so complicated.
    //
    // First, Legacy Mode has different semantics for backwards compatibility. The
    // primary tree will commit in an inconsistent state, so when we do the
    // second pass to render the fallback, we do some exceedingly, uh, clever
    // hacks to make that not totally break. Like transferring effects and
    // deletions from hidden tree. In Concurrent Mode, it's much simpler,
    // because we bailout on the primary tree completely and leave it in its old
    // state, no effects. Same as what we do for Offscreen (except that
    // Offscreen doesn't have the first render pass).
    //
    // Second is hydration. During hydration, the Suspense fiber has a slightly
    // different layout, where the child points to a dehydrated fragment, which
    // contains the DOM rendered by the server.
    //
    // Third, even if you set all that aside, Suspense is like error boundaries in
    // that we first we try to render one tree, and if that fails, we render again
    // and switch to a different tree. Like a try/catch block. So we have to track
    // which branch we're currently rendering. Ideally we would model this using
    // a stack.

    if (current === null) {
      // Initial mount
      // If we're currently hydrating, try to hydrate this boundary.
      // But only if this has a fallback.
      if (nextProps.fallback !== undefined) {
        tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
      }

      var nextPrimaryChildren = nextProps.children;
      var nextFallbackChildren = nextProps.fallback;

      if (showFallback) {
        var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
        var primaryChildFragment = workInProgress.child;
        primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return fallbackFragment;
      } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
        // This is a CPU-bound tree. Skip this tree and show a placeholder to
        // unblock the surrounding content. Then immediately retry after the
        // initial commit.
        var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

        var _primaryChildFragment = workInProgress.child;
        _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
        // get it started back up to attempt the next item. While in terms of
        // priority this work has the same priority as this current render, it's
        // not part of the same transition once the transition has committed. If
        // it's sync, we still want to yield so that it can be painted.
        // Conceptually, this is really the same as pinging. We can use any
        // RetryLane even if it's the one currently rendering since we're leaving
        // it behind on this node.

        workInProgress.lanes = SomeRetryLane;

        {
          markSpawnedWork(SomeRetryLane);
        }

        return _fallbackFragment;
      } else {
        return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
      }
    } else {
      // This is an update.
      // If the current fiber has a SuspenseState, that means it's already showing
      // a fallback.
      var prevState = current.memoizedState;

      if (prevState !== null) {

        if (showFallback) {
          var _nextFallbackChildren2 = nextProps.fallback;
          var _nextPrimaryChildren2 = nextProps.children;

          var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

          var _primaryChildFragment3 = workInProgress.child;
          var prevOffscreenState = current.child.memoizedState;
          _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
          _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
          workInProgress.memoizedState = SUSPENDED_MARKER;
          return _fallbackChildFragment;
        } else {
          var _nextPrimaryChildren3 = nextProps.children;

          var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

          workInProgress.memoizedState = null;
          return _primaryChildFragment4;
        }
      } else {
        // The current tree is not already showing a fallback.
        if (showFallback) {
          // Timed out.
          var _nextFallbackChildren3 = nextProps.fallback;
          var _nextPrimaryChildren4 = nextProps.children;

          var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

          var _primaryChildFragment5 = workInProgress.child;
          var _prevOffscreenState = current.child.memoizedState;
          _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
          _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
          // fallback children.

          workInProgress.memoizedState = SUSPENDED_MARKER;
          return _fallbackChildFragment2;
        } else {
          // Still haven't timed out. Continue rendering the children, like we
          // normally do.
          var _nextPrimaryChildren5 = nextProps.children;

          var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

          workInProgress.memoizedState = null;
          return _primaryChildFragment6;
        }
      }
    }
  }

  function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
    var mode = workInProgress.mode;
    var primaryChildProps = {
      mode: 'visible',
      children: primaryChildren
    };
    var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
    primaryChildFragment.return = workInProgress;
    workInProgress.child = primaryChildFragment;
    return primaryChildFragment;
  }

  function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
    var mode = workInProgress.mode;
    var progressedPrimaryFragment = workInProgress.child;
    var primaryChildProps = {
      mode: 'hidden',
      children: primaryChildren
    };
    var primaryChildFragment;
    var fallbackChildFragment;

    if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
      // In legacy mode, we commit the primary tree as if it successfully
      // completed, even though it's in an inconsistent state.
      primaryChildFragment = progressedPrimaryFragment;
      primaryChildFragment.childLanes = NoLanes;
      primaryChildFragment.pendingProps = primaryChildProps;

      if ( workInProgress.mode & ProfileMode) {
        // Reset the durations from the first pass so they aren't included in the
        // final amounts. This seems counterintuitive, since we're intentionally
        // not measuring part of the render phase, but this makes it match what we
        // do in Concurrent Mode.
        primaryChildFragment.actualDuration = 0;
        primaryChildFragment.actualStartTime = -1;
        primaryChildFragment.selfBaseDuration = 0;
        primaryChildFragment.treeBaseDuration = 0;
      }

      fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
    } else {
      primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
      fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
    }

    primaryChildFragment.return = workInProgress;
    fallbackChildFragment.return = workInProgress;
    primaryChildFragment.sibling = fallbackChildFragment;
    workInProgress.child = primaryChildFragment;
    return fallbackChildFragment;
  }

  function createWorkInProgressOffscreenFiber(current, offscreenProps) {
    // The props argument to `createWorkInProgress` is `any` typed, so we use this
    // wrapper function to constrain it.
    return createWorkInProgress(current, offscreenProps);
  }

  function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
    var currentPrimaryChildFragment = current.child;
    var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
    var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
      mode: 'visible',
      children: primaryChildren
    });

    if ((workInProgress.mode & BlockingMode) === NoMode) {
      primaryChildFragment.lanes = renderLanes;
    }

    primaryChildFragment.return = workInProgress;
    primaryChildFragment.sibling = null;

    if (currentFallbackChildFragment !== null) {
      // Delete the fallback child fragment
      currentFallbackChildFragment.nextEffect = null;
      currentFallbackChildFragment.flags = Deletion;
      workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
    }

    workInProgress.child = primaryChildFragment;
    return primaryChildFragment;
  }

  function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
    var mode = workInProgress.mode;
    var currentPrimaryChildFragment = current.child;
    var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
    var primaryChildProps = {
      mode: 'hidden',
      children: primaryChildren
    };
    var primaryChildFragment;

    if ( // In legacy mode, we commit the primary tree as if it successfully
    // completed, even though it's in an inconsistent state.
    (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
    // already cloned. In legacy mode, the only case where this isn't true is
    // when DevTools forces us to display a fallback; we skip the first render
    // pass entirely and go straight to rendering the fallback. (In Concurrent
    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
    // only codepath.)
    workInProgress.child !== currentPrimaryChildFragment) {
      var progressedPrimaryFragment = workInProgress.child;
      primaryChildFragment = progressedPrimaryFragment;
      primaryChildFragment.childLanes = NoLanes;
      primaryChildFragment.pendingProps = primaryChildProps;

      if ( workInProgress.mode & ProfileMode) {
        // Reset the durations from the first pass so they aren't included in the
        // final amounts. This seems counterintuitive, since we're intentionally
        // not measuring part of the render phase, but this makes it match what we
        // do in Concurrent Mode.
        primaryChildFragment.actualDuration = 0;
        primaryChildFragment.actualStartTime = -1;
        primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
        primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
      } // The fallback fiber was added as a deletion effect during the first pass.
      // However, since we're going to remain on the fallback, we no longer want
      // to delete it. So we need to remove it from the list. Deletions are stored
      // on the same list as effects. We want to keep the effects from the primary
      // tree. So we copy the primary child fragment's effect list, which does not
      // include the fallback deletion effect.


      var progressedLastEffect = primaryChildFragment.lastEffect;

      if (progressedLastEffect !== null) {
        workInProgress.firstEffect = primaryChildFragment.firstEffect;
        workInProgress.lastEffect = progressedLastEffect;
        progressedLastEffect.nextEffect = null;
      } else {
        // TODO: Reset this somewhere else? Lol legacy mode is so weird.
        workInProgress.firstEffect = workInProgress.lastEffect = null;
      }
    } else {
      primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
    }

    var fallbackChildFragment;

    if (currentFallbackChildFragment !== null) {
      fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
    } else {
      fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
      // mounted but this is a new fiber.

      fallbackChildFragment.flags |= Placement;
    }

    fallbackChildFragment.return = workInProgress;
    primaryChildFragment.return = workInProgress;
    primaryChildFragment.sibling = fallbackChildFragment;
    workInProgress.child = primaryChildFragment;
    return fallbackChildFragment;
  }

  function scheduleWorkOnFiber(fiber, renderLanes) {
    fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
    var alternate = fiber.alternate;

    if (alternate !== null) {
      alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
    }

    scheduleWorkOnParentPath(fiber.return, renderLanes);
  }

  function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
    // Mark any Suspense boundaries with fallbacks as having work to do.
    // If they were previously forced into fallbacks, they may now be able
    // to unblock.
    var node = firstChild;

    while (node !== null) {
      if (node.tag === SuspenseComponent) {
        var state = node.memoizedState;

        if (state !== null) {
          scheduleWorkOnFiber(node, renderLanes);
        }
      } else if (node.tag === SuspenseListComponent) {
        // If the tail is hidden there might not be an Suspense boundaries
        // to schedule work on. In this case we have to schedule it on the
        // list itself.
        // We don't have to traverse to the children of the list since
        // the list will propagate the change when it rerenders.
        scheduleWorkOnFiber(node, renderLanes);
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function findLastContentRow(firstChild) {
    // This is going to find the last row among these children that is already
    // showing content on the screen, as opposed to being in fallback state or
    // new. If a row has multiple Suspense boundaries, any of them being in the
    // fallback state, counts as the whole row being in a fallback state.
    // Note that the "rows" will be workInProgress, but any nested children
    // will still be current since we haven't rendered them yet. The mounted
    // order may not be the same as the new order. We use the new order.
    var row = firstChild;
    var lastContentRow = null;

    while (row !== null) {
      var currentRow = row.alternate; // New rows can't be content rows.

      if (currentRow !== null && findFirstSuspended(currentRow) === null) {
        lastContentRow = row;
      }

      row = row.sibling;
    }

    return lastContentRow;
  }

  function validateRevealOrder(revealOrder) {
    {
      if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
        didWarnAboutRevealOrder[revealOrder] = true;

        if (typeof revealOrder === 'string') {
          switch (revealOrder.toLowerCase()) {
            case 'together':
            case 'forwards':
            case 'backwards':
              {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

                break;
              }

            case 'forward':
            case 'backward':
              {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

                break;
              }

            default:
              error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

              break;
          }
        } else {
          error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
      }
    }
  }

  function validateTailOptions(tailMode, revealOrder) {
    {
      if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
        if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
          didWarnAboutTailOptions[tailMode] = true;

          error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
        } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
          didWarnAboutTailOptions[tailMode] = true;

          error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
        }
      }
    }
  }

  function validateSuspenseListNestedChild(childSlot, index) {
    {
      var isArray = Array.isArray(childSlot);
      var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

      if (isArray || isIterable) {
        var type = isArray ? 'array' : 'iterable';

        error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

        return false;
      }
    }

    return true;
  }

  function validateSuspenseListChildren(children, revealOrder) {
    {
      if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
        if (Array.isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            if (!validateSuspenseListNestedChild(children[i], i)) {
              return;
            }
          }
        } else {
          var iteratorFn = getIteratorFn(children);

          if (typeof iteratorFn === 'function') {
            var childrenIterator = iteratorFn.call(children);

            if (childrenIterator) {
              var step = childrenIterator.next();
              var _i = 0;

              for (; !step.done; step = childrenIterator.next()) {
                if (!validateSuspenseListNestedChild(step.value, _i)) {
                  return;
                }

                _i++;
              }
            }
          } else {
            error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
          }
        }
      }
    }
  }

  function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
    var renderState = workInProgress.memoizedState;

    if (renderState === null) {
      workInProgress.memoizedState = {
        isBackwards: isBackwards,
        rendering: null,
        renderingStartTime: 0,
        last: lastContentRow,
        tail: tail,
        tailMode: tailMode,
        lastEffect: lastEffectBeforeRendering
      };
    } else {
      // We can reuse the existing object from previous renders.
      renderState.isBackwards = isBackwards;
      renderState.rendering = null;
      renderState.renderingStartTime = 0;
      renderState.last = lastContentRow;
      renderState.tail = tail;
      renderState.tailMode = tailMode;
      renderState.lastEffect = lastEffectBeforeRendering;
    }
  } // This can end up rendering this component multiple passes.
  // The first pass splits the children fibers into two sets. A head and tail.
  // We first render the head. If anything is in fallback state, we do another
  // pass through beginWork to rerender all children (including the tail) with
  // the force suspend context. If the first render didn't have anything in
  // in fallback state. Then we render each row in the tail one-by-one.
  // That happens in the completeWork phase without going back to beginWork.


  function updateSuspenseListComponent(current, workInProgress, renderLanes) {
    var nextProps = workInProgress.pendingProps;
    var revealOrder = nextProps.revealOrder;
    var tailMode = nextProps.tail;
    var newChildren = nextProps.children;
    validateRevealOrder(revealOrder);
    validateTailOptions(tailMode, revealOrder);
    validateSuspenseListChildren(newChildren, revealOrder);
    reconcileChildren(current, workInProgress, newChildren, renderLanes);
    var suspenseContext = suspenseStackCursor.current;
    var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

    if (shouldForceFallback) {
      suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
      workInProgress.flags |= DidCapture;
    } else {
      var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

      if (didSuspendBefore) {
        // If we previously forced a fallback, we need to schedule work
        // on any nested boundaries to let them know to try to render
        // again. This is the same as context updating.
        propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
      }

      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
    }

    pushSuspenseContext(workInProgress, suspenseContext);

    if ((workInProgress.mode & BlockingMode) === NoMode) {
      // In legacy mode, SuspenseList doesn't work so we just
      // use make it a noop by treating it as the default revealOrder.
      workInProgress.memoizedState = null;
    } else {
      switch (revealOrder) {
        case 'forwards':
          {
            var lastContentRow = findLastContentRow(workInProgress.child);
            var tail;

            if (lastContentRow === null) {
              // The whole list is part of the tail.
              // TODO: We could fast path by just rendering the tail now.
              tail = workInProgress.child;
              workInProgress.child = null;
            } else {
              // Disconnect the tail rows after the content row.
              // We're going to render them separately later.
              tail = lastContentRow.sibling;
              lastContentRow.sibling = null;
            }

            initSuspenseListRenderState(workInProgress, false, // isBackwards
            tail, lastContentRow, tailMode, workInProgress.lastEffect);
            break;
          }

        case 'backwards':
          {
            // We're going to find the first row that has existing content.
            // At the same time we're going to reverse the list of everything
            // we pass in the meantime. That's going to be our tail in reverse
            // order.
            var _tail = null;
            var row = workInProgress.child;
            workInProgress.child = null;

            while (row !== null) {
              var currentRow = row.alternate; // New rows can't be content rows.

              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                // This is the beginning of the main content.
                workInProgress.child = row;
                break;
              }

              var nextRow = row.sibling;
              row.sibling = _tail;
              _tail = row;
              row = nextRow;
            } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


            initSuspenseListRenderState(workInProgress, true, // isBackwards
            _tail, null, // last
            tailMode, workInProgress.lastEffect);
            break;
          }

        case 'together':
          {
            initSuspenseListRenderState(workInProgress, false, // isBackwards
            null, // tail
            null, // last
            undefined, workInProgress.lastEffect);
            break;
          }

        default:
          {
            // The default reveal order is the same as not having
            // a boundary.
            workInProgress.memoizedState = null;
          }
      }
    }

    return workInProgress.child;
  }

  function updatePortalComponent(current, workInProgress, renderLanes) {
    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
    var nextChildren = workInProgress.pendingProps;

    if (current === null) {
      // Portals are special because we don't append the children during mount
      // but at commit. Therefore we need to track insertions which the normal
      // flow doesn't do during mount. This doesn't happen at the root because
      // the root always starts with a "current" with a null child.
      // TODO: Consider unifying this with how the root works.
      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
    } else {
      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    }

    return workInProgress.child;
  }

  var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

  function updateContextProvider(current, workInProgress, renderLanes) {
    var providerType = workInProgress.type;
    var context = providerType._context;
    var newProps = workInProgress.pendingProps;
    var oldProps = workInProgress.memoizedProps;
    var newValue = newProps.value;

    {
      if (!('value' in newProps)) {
        if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
          hasWarnedAboutUsingNoValuePropOnContextProvider = true;

          error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
        }
      }

      var providerPropTypes = workInProgress.type.propTypes;

      if (providerPropTypes) {
        checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
      }
    }

    pushProvider(workInProgress, newValue);

    if (oldProps !== null) {
      var oldValue = oldProps.value;
      var changedBits = calculateChangedBits(context, newValue, oldValue);

      if (changedBits === 0) {
        // No change. Bailout early if children are the same.
        if (oldProps.children === newProps.children && !hasContextChanged()) {
          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
      } else {
        // The context value changed. Search for matching consumers and schedule
        // them to update.
        propagateContextChange(workInProgress, context, changedBits, renderLanes);
      }
    }

    var newChildren = newProps.children;
    reconcileChildren(current, workInProgress, newChildren, renderLanes);
    return workInProgress.child;
  }

  var hasWarnedAboutUsingContextAsConsumer = false;

  function updateContextConsumer(current, workInProgress, renderLanes) {
    var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
    // DEV mode, we create a separate object for Context.Consumer that acts
    // like a proxy to Context. This proxy object adds unnecessary code in PROD
    // so we use the old behaviour (Context.Consumer references Context) to
    // reduce size and overhead. The separate object references context via
    // a property called "_context", which also gives us the ability to check
    // in DEV mode if this property exists or not and warn if it does not.

    {
      if (context._context === undefined) {
        // This may be because it's a Context (rather than a Consumer).
        // Or it may be because it's older React where they're the same thing.
        // We only want to warn if we're sure it's a new React.
        if (context !== context.Consumer) {
          if (!hasWarnedAboutUsingContextAsConsumer) {
            hasWarnedAboutUsingContextAsConsumer = true;

            error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }
        }
      } else {
        context = context._context;
      }
    }

    var newProps = workInProgress.pendingProps;
    var render = newProps.children;

    {
      if (typeof render !== 'function') {
        error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
      }
    }

    prepareToReadContext(workInProgress, renderLanes);
    var newValue = readContext(context, newProps.unstable_observedBits);
    var newChildren;

    {
      ReactCurrentOwner$1.current = workInProgress;
      setIsRendering(true);
      newChildren = render(newValue);
      setIsRendering(false);
    } // React DevTools reads this flag.


    workInProgress.flags |= PerformedWork;
    reconcileChildren(current, workInProgress, newChildren, renderLanes);
    return workInProgress.child;
  }

  function markWorkInProgressReceivedUpdate() {
    didReceiveUpdate = true;
  }

  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
    if (current !== null) {
      // Reuse previous dependencies
      workInProgress.dependencies = current.dependencies;
    }

    {
      // Don't update "base" render times for bailouts.
      stopProfilerTimerIfRunning();
    }

    markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

    if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
      // The children don't have any work either. We can skip them.
      // TODO: Once we add back resuming, we should check if the children are
      // a work-in-progress set. If so, we need to transfer their effects.
      return null;
    } else {
      // This fiber doesn't have work, but its subtree does. Clone the child
      // fibers and continue.
      cloneChildFibers(current, workInProgress);
      return workInProgress.child;
    }
  }

  function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
    {
      var returnFiber = oldWorkInProgress.return;

      if (returnFiber === null) {
        throw new Error('Cannot swap the root fiber.');
      } // Disconnect from the old current.
      // It will get deleted.


      current.alternate = null;
      oldWorkInProgress.alternate = null; // Connect to the new tree.

      newWorkInProgress.index = oldWorkInProgress.index;
      newWorkInProgress.sibling = oldWorkInProgress.sibling;
      newWorkInProgress.return = oldWorkInProgress.return;
      newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

      if (oldWorkInProgress === returnFiber.child) {
        returnFiber.child = newWorkInProgress;
      } else {
        var prevSibling = returnFiber.child;

        if (prevSibling === null) {
          throw new Error('Expected parent to have a child.');
        }

        while (prevSibling.sibling !== oldWorkInProgress) {
          prevSibling = prevSibling.sibling;

          if (prevSibling === null) {
            throw new Error('Expected to find the previous sibling.');
          }
        }

        prevSibling.sibling = newWorkInProgress;
      } // Delete the old fiber and place the new one.
      // Since the old fiber is disconnected, we have to schedule it manually.


      var last = returnFiber.lastEffect;

      if (last !== null) {
        last.nextEffect = current;
        returnFiber.lastEffect = current;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = current;
      }

      current.nextEffect = null;
      current.flags = Deletion;
      newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

      return newWorkInProgress;
    }
  }

  function beginWork(current, workInProgress, renderLanes) {
    var updateLanes = workInProgress.lanes;

    {
      if (workInProgress._debugNeedsRemount && current !== null) {
        // This will restart the begin phase with a new fiber.
        return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
      }
    }

    if (current !== null) {
      var oldProps = current.memoizedProps;
      var newProps = workInProgress.pendingProps;

      if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
       workInProgress.type !== current.type )) {
        // If props or context changed, mark the fiber as having performed work.
        // This may be unset if the props are determined to be equal later (memo).
        didReceiveUpdate = true;
      } else if (!includesSomeLane(renderLanes, updateLanes)) {
        didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
        // the begin phase. There's still some bookkeeping we that needs to be done
        // in this optimized path, mostly pushing stuff onto the stack.

        switch (workInProgress.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress);
            resetHydrationState();
            break;

          case HostComponent:
            pushHostContext(workInProgress);
            break;

          case ClassComponent:
            {
              var Component = workInProgress.type;

              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress);
              }

              break;
            }

          case HostPortal:
            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
            break;

          case ContextProvider:
            {
              var newValue = workInProgress.memoizedProps.value;
              pushProvider(workInProgress, newValue);
              break;
            }

          case Profiler:
            {
              // Profiler should only call onRender when one of its descendants actually rendered.
              var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

              if (hasChildWork) {
                workInProgress.flags |= Update;
              } // Reset effect durations for the next eventual effect phase.
              // These are reset during render to allow the DevTools commit hook a chance to read them,


              var stateNode = workInProgress.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }

            break;

          case SuspenseComponent:
            {
              var state = workInProgress.memoizedState;

              if (state !== null) {
                // whether to retry the primary children, or to skip over it and
                // go straight to the fallback. Check the priority of the primary
                // child fragment.


                var primaryChildFragment = workInProgress.child;
                var primaryChildLanes = primaryChildFragment.childLanes;

                if (includesSomeLane(renderLanes, primaryChildLanes)) {
                  // The primary children have pending work. Use the normal path
                  // to attempt to render the primary children again.
                  return updateSuspenseComponent(current, workInProgress, renderLanes);
                } else {
                  // The primary child fragment does not have pending work marked
                  // on it
                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                  // priority. Bailout.

                  var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

                  if (child !== null) {
                    // The fallback children have pending work. Skip over the
                    // primary children and work on the fallback.
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }

              break;
            }

          case SuspenseListComponent:
            {
              var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

              var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

              if (didSuspendBefore) {
                if (_hasChildWork) {
                  // If something was in fallback state last time, and we have all the
                  // same children then we're still in progressive loading state.
                  // Something might get unblocked by state updates or retries in the
                  // tree which will affect the tail. So we need to use the normal
                  // path to compute the correct tail.
                  return updateSuspenseListComponent(current, workInProgress, renderLanes);
                } // If none of the children had any work, that means that none of
                // them got retried so they'll still be blocked in the same way
                // as before. We can fast bail out.


                workInProgress.flags |= DidCapture;
              } // If nothing suspended before and we're rendering the same children,
              // then the tail doesn't matter. Anything new that suspends will work
              // in the "together" mode, so we can continue from the state we had.


              var renderState = workInProgress.memoizedState;

              if (renderState !== null) {
                // Reset to the "together" mode in case we've started a different
                // update in the past but didn't complete it.
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }

              pushSuspenseContext(workInProgress, suspenseStackCursor.current);

              if (_hasChildWork) {
                break;
              } else {
                // If none of the children had any work, that means that none of
                // them got retried so they'll still be blocked in the same way
                // as before. We can fast bail out.
                return null;
              }
            }

          case OffscreenComponent:
          case LegacyHiddenComponent:
            {
              // Need to check if the tree still needs to be deferred. This is
              // almost identical to the logic used in the normal update path,
              // so we'll just enter that. The only difference is we'll bail out
              // at the next level instead of this one, because the child props
              // have not changed. Which is fine.
              // TODO: Probably should refactor `beginWork` to split the bailout
              // path from the normal path. I'm tempted to do a labeled break here
              // but I won't :)
              workInProgress.lanes = NoLanes;
              return updateOffscreenComponent(current, workInProgress, renderLanes);
            }
        }

        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      } else {
        if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
          // This is a special case that only exists for legacy mode.
          // See https://github.com/facebook/react/pull/19216.
          didReceiveUpdate = true;
        } else {
          // An update was scheduled on this fiber, but there are no new props
          // nor legacy context. Set this to false. If an update queue or context
          // consumer produces a changed value, it will set this to true. Otherwise,
          // the component will assume the children have not changed and bail out.
          didReceiveUpdate = false;
        }
      }
    } else {
      didReceiveUpdate = false;
    } // Before entering the begin phase, clear pending update priority.
    // TODO: This assumes that we're about to evaluate the component and process
    // the update queue. However, there's an exception: SimpleMemoComponent
    // sometimes bails out later in the begin phase. This indicates that we should
    // move this assignment out of the common path and into each branch.


    workInProgress.lanes = NoLanes;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
        {
          return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
        }

      case LazyComponent:
        {
          var elementType = workInProgress.elementType;
          return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
        }

      case FunctionComponent:
        {
          var _Component = workInProgress.type;
          var unresolvedProps = workInProgress.pendingProps;
          var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
          return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
        }

      case ClassComponent:
        {
          var _Component2 = workInProgress.type;
          var _unresolvedProps = workInProgress.pendingProps;

          var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

          return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
        }

      case HostRoot:
        return updateHostRoot(current, workInProgress, renderLanes);

      case HostComponent:
        return updateHostComponent(current, workInProgress, renderLanes);

      case HostText:
        return updateHostText(current, workInProgress);

      case SuspenseComponent:
        return updateSuspenseComponent(current, workInProgress, renderLanes);

      case HostPortal:
        return updatePortalComponent(current, workInProgress, renderLanes);

      case ForwardRef:
        {
          var type = workInProgress.type;
          var _unresolvedProps2 = workInProgress.pendingProps;

          var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

          return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
        }

      case Fragment:
        return updateFragment(current, workInProgress, renderLanes);

      case Mode:
        return updateMode(current, workInProgress, renderLanes);

      case Profiler:
        return updateProfiler(current, workInProgress, renderLanes);

      case ContextProvider:
        return updateContextProvider(current, workInProgress, renderLanes);

      case ContextConsumer:
        return updateContextConsumer(current, workInProgress, renderLanes);

      case MemoComponent:
        {
          var _type2 = workInProgress.type;
          var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

          var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

          {
            if (workInProgress.type !== workInProgress.elementType) {
              var outerPropTypes = _type2.propTypes;

              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                'prop', getComponentName(_type2));
              }
            }
          }

          _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
          return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
        }

      case SimpleMemoComponent:
        {
          return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
        }

      case IncompleteClassComponent:
        {
          var _Component3 = workInProgress.type;
          var _unresolvedProps4 = workInProgress.pendingProps;

          var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

          return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
        }

      case SuspenseListComponent:
        {
          return updateSuspenseListComponent(current, workInProgress, renderLanes);
        }

      case FundamentalComponent:
        {

          break;
        }

      case ScopeComponent:
        {

          break;
        }

      case Block:
        {

          break;
        }

      case OffscreenComponent:
        {
          return updateOffscreenComponent(current, workInProgress, renderLanes);
        }

      case LegacyHiddenComponent:
        {
          return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
        }
    }

    {
      {
        throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }

  function markUpdate(workInProgress) {
    // Tag the fiber with an update effect. This turns a Placement into
    // a PlacementAndUpdate.
    workInProgress.flags |= Update;
  }

  function markRef$1(workInProgress) {
    workInProgress.flags |= Ref;
  }

  var appendAllChildren;
  var updateHostContainer;
  var updateHostComponent$1;
  var updateHostText$1;

  {
    // Mutation mode
    appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
      // We only have the top Fiber that was created but we need recurse down its
      // children to find all the terminal nodes.
      var node = workInProgress.child;

      while (node !== null) {
        if (node.tag === HostComponent || node.tag === HostText) {
          appendInitialChild(parent, node.stateNode);
        } else if (node.tag === HostPortal) ; else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === workInProgress) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    };

    updateHostContainer = function (workInProgress) {// Noop
    };

    updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
      // If we have an alternate, that means this is an update and we need to
      // schedule a side-effect to do the updates.
      var oldProps = current.memoizedProps;

      if (oldProps === newProps) {
        // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
      } // If we get updated because one of our children updated, we don't
      // have newProps so we'll have to reuse them.
      // TODO: Split the update API as separate for the props vs. children.
      // Even better would be if children weren't special cased at all tho.


      var instance = workInProgress.stateNode;
      var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
      // component is hitting the resume path. Figure out why. Possibly
      // related to `hidden`.

      var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

      workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
      // is a new ref we mark this as an update. All the work is done in commitWork.

      if (updatePayload) {
        markUpdate(workInProgress);
      }
    };

    updateHostText$1 = function (current, workInProgress, oldText, newText) {
      // If the text differs, mark it as an update. All the work in done in commitWork.
      if (oldText !== newText) {
        markUpdate(workInProgress);
      }
    };
  }

  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
    if (getIsHydrating()) {
      // If we're hydrating, we should consume as many items as we can
      // so we don't leave any behind.
      return;
    }

    switch (renderState.tailMode) {
      case 'hidden':
        {
          // Any insertions at the end of the tail list after this point
          // should be invisible. If there are already mounted boundaries
          // anything before them are not considered for collapsing.
          // Therefore we need to go through the whole tail to find if
          // there are any.
          var tailNode = renderState.tail;
          var lastTailNode = null;

          while (tailNode !== null) {
            if (tailNode.alternate !== null) {
              lastTailNode = tailNode;
            }

            tailNode = tailNode.sibling;
          } // Next we're simply going to delete all insertions after the
          // last rendered item.


          if (lastTailNode === null) {
            // All remaining items in the tail are insertions.
            renderState.tail = null;
          } else {
            // Detach the insertion after the last node that was already
            // inserted.
            lastTailNode.sibling = null;
          }

          break;
        }

      case 'collapsed':
        {
          // Any insertions at the end of the tail list after this point
          // should be invisible. If there are already mounted boundaries
          // anything before them are not considered for collapsing.
          // Therefore we need to go through the whole tail to find if
          // there are any.
          var _tailNode = renderState.tail;
          var _lastTailNode = null;

          while (_tailNode !== null) {
            if (_tailNode.alternate !== null) {
              _lastTailNode = _tailNode;
            }

            _tailNode = _tailNode.sibling;
          } // Next we're simply going to delete all insertions after the
          // last rendered item.


          if (_lastTailNode === null) {
            // All remaining items in the tail are insertions.
            if (!hasRenderedATailFallback && renderState.tail !== null) {
              // We suspended during the head. We want to show at least one
              // row at the tail. So we'll keep on and cut off the rest.
              renderState.tail.sibling = null;
            } else {
              renderState.tail = null;
            }
          } else {
            // Detach the insertion after the last node that was already
            // inserted.
            _lastTailNode.sibling = null;
          }

          break;
        }
    }
  }

  function completeWork(current, workInProgress, renderLanes) {
    var newProps = workInProgress.pendingProps;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case LazyComponent:
      case SimpleMemoComponent:
      case FunctionComponent:
      case ForwardRef:
      case Fragment:
      case Mode:
      case Profiler:
      case ContextConsumer:
      case MemoComponent:
        return null;

      case ClassComponent:
        {
          var Component = workInProgress.type;

          if (isContextProvider(Component)) {
            popContext(workInProgress);
          }

          return null;
        }

      case HostRoot:
        {
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          resetWorkInProgressVersions();
          var fiberRoot = workInProgress.stateNode;

          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }

          if (current === null || current.child === null) {
            // If we hydrated, pop so that we can delete any remaining children
            // that weren't hydrated.
            var wasHydrated = popHydrationState(workInProgress);

            if (wasHydrated) {
              // If we hydrated, then we'll need to schedule an update for
              // the commit side-effects on the root.
              markUpdate(workInProgress);
            } else if (!fiberRoot.hydrate) {
              // Schedule an effect to clear this container at the start of the next commit.
              // This handles the case of React rendering into a container with previous children.
              // It's also safe to do for updates too, because current.child would only be null
              // if the previous render was null (so the the container would already be empty).
              workInProgress.flags |= Snapshot;
            }
          }

          updateHostContainer(workInProgress);
          return null;
        }

      case HostComponent:
        {
          popHostContext(workInProgress);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress.type;

          if (current !== null && workInProgress.stateNode != null) {
            updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

            if (current.ref !== workInProgress.ref) {
              markRef$1(workInProgress);
            }
          } else {
            if (!newProps) {
              if (!(workInProgress.stateNode !== null)) {
                {
                  throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
                }
              } // This can happen when we abort work.


              return null;
            }

            var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
            // "stack" as the parent. Then append children as we go in beginWork
            // or completeWork depending on whether we want to add them top->down or
            // bottom->up. Top->down is faster in IE11.

            var _wasHydrated = popHydrationState(workInProgress);

            if (_wasHydrated) {
              // TODO: Move this and createInstance step into the beginPhase
              // to consolidate.
              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                // If changes to the hydrated node need to be applied at the
                // commit-phase we mark this as such.
                markUpdate(workInProgress);
              }
            } else {
              var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
              appendAllChildren(instance, workInProgress, false, false);
              workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
              // (eg DOM renderer supports auto-focus for certain elements).
              // Make sure such renderers get scheduled for later work.

              if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress);
              }
            }

            if (workInProgress.ref !== null) {
              // If there is a ref on a host node we need to schedule a callback
              markRef$1(workInProgress);
            }
          }

          return null;
        }

      case HostText:
        {
          var newText = newProps;

          if (current && workInProgress.stateNode != null) {
            var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
            // to schedule a side-effect to do the updates.

            updateHostText$1(current, workInProgress, oldText, newText);
          } else {
            if (typeof newText !== 'string') {
              if (!(workInProgress.stateNode !== null)) {
                {
                  throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
                }
              } // This can happen when we abort work.

            }

            var _rootContainerInstance = getRootHostContainer();

            var _currentHostContext = getHostContext();

            var _wasHydrated2 = popHydrationState(workInProgress);

            if (_wasHydrated2) {
              if (prepareToHydrateHostTextInstance(workInProgress)) {
                markUpdate(workInProgress);
              }
            } else {
              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
            }
          }

          return null;
        }

      case SuspenseComponent:
        {
          popSuspenseContext(workInProgress);
          var nextState = workInProgress.memoizedState;

          if ((workInProgress.flags & DidCapture) !== NoFlags) {
            // Something suspended. Re-render with the fallback children.
            workInProgress.lanes = renderLanes; // Do not reset the effect list.

            if ( (workInProgress.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress);
            }

            return workInProgress;
          }

          var nextDidTimeout = nextState !== null;
          var prevDidTimeout = false;

          if (current === null) {
            if (workInProgress.memoizedProps.fallback !== undefined) {
              popHydrationState(workInProgress);
            }
          } else {
            var prevState = current.memoizedState;
            prevDidTimeout = prevState !== null;
          }

          if (nextDidTimeout && !prevDidTimeout) {
            // If this subtreee is running in blocking mode we can suspend,
            // otherwise we won't suspend.
            // TODO: This will still suspend a synchronous tree if anything
            // in the concurrent tree already suspended during this render.
            // This is a known bug.
            if ((workInProgress.mode & BlockingMode) !== NoMode) {
              // TODO: Move this back to throwException because this is too late
              // if this is a large tree which is common for initial loads. We
              // don't know if we should restart a render or not until we get
              // this marker, and this is too late.
              // If this render already had a ping or lower pri updates,
              // and this is the first time we know we're going to suspend we
              // should be able to immediately restart from within throwException.
              var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                // If this was in an invisible tree or a new render, then showing
                // this boundary is ok.
                renderDidSuspend();
              } else {
                // Otherwise, we're going to have to hide content so we should
                // suspend for longer if possible.
                renderDidSuspendDelayIfPossible();
              }
            }
          }

          {
            // TODO: Only schedule updates if these values are non equal, i.e. it changed.
            if (nextDidTimeout || prevDidTimeout) {
              // If this boundary just timed out, schedule an effect to attach a
              // retry listener to the promise. This flag is also used to hide the
              // primary children. In mutation mode, we also need the flag to
              // *unhide* children that were previously hidden, so check if this
              // is currently timed out, too.
              workInProgress.flags |= Update;
            }
          }

          return null;
        }

      case HostPortal:
        popHostContainer(workInProgress);
        updateHostContainer(workInProgress);

        if (current === null) {
          preparePortalMount(workInProgress.stateNode.containerInfo);
        }

        return null;

      case ContextProvider:
        // Pop provider fiber
        popProvider(workInProgress);
        return null;

      case IncompleteClassComponent:
        {
          // Same as class component case. I put it down here so that the tags are
          // sequential to ensure this switch is compiled to a jump table.
          var _Component = workInProgress.type;

          if (isContextProvider(_Component)) {
            popContext(workInProgress);
          }

          return null;
        }

      case SuspenseListComponent:
        {
          popSuspenseContext(workInProgress);
          var renderState = workInProgress.memoizedState;

          if (renderState === null) {
            // We're running in the default, "independent" mode.
            // We don't do anything in this mode.
            return null;
          }

          var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
          var renderedTail = renderState.rendering;

          if (renderedTail === null) {
            // We just rendered the head.
            if (!didSuspendAlready) {
              // This is the first pass. We need to figure out if anything is still
              // suspended in the rendered set.
              // If new content unsuspended, but there's still some content that
              // didn't. Then we need to do a second pass that forces everything
              // to keep showing their fallbacks.
              // We might be suspended if something in this render pass suspended, or
              // something in the previous committed pass suspended. Otherwise,
              // there's no chance so we can skip the expensive call to
              // findFirstSuspended.
              var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

              if (!cannotBeSuspended) {
                var row = workInProgress.child;

                while (row !== null) {
                  var suspended = findFirstSuspended(row);

                  if (suspended !== null) {
                    didSuspendAlready = true;
                    workInProgress.flags |= DidCapture;
                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                    // part of the second pass. In that case nothing will subscribe to
                    // its thennables. Instead, we'll transfer its thennables to the
                    // SuspenseList so that it can retry if they resolve.
                    // There might be multiple of these in the list but since we're
                    // going to wait for all of them anyway, it doesn't really matter
                    // which ones gets to ping. In theory we could get clever and keep
                    // track of how many dependencies remain but it gets tricky because
                    // in the meantime, we can add/remove/change items and dependencies.
                    // We might bail out of the loop before finding any but that
                    // doesn't matter since that means that the other boundaries that
                    // we did find already has their listeners attached.

                    var newThennables = suspended.updateQueue;

                    if (newThennables !== null) {
                      workInProgress.updateQueue = newThennables;
                      workInProgress.flags |= Update;
                    } // Rerender the whole list, but this time, we'll force fallbacks
                    // to stay in place.
                    // Reset the effect list before doing the second pass since that's now invalid.


                    if (renderState.lastEffect === null) {
                      workInProgress.firstEffect = null;
                    }

                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                    // rerender the children.

                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                    return workInProgress.child;
                  }

                  row = row.sibling;
                }
              }

              if (renderState.tail !== null && now() > getRenderTargetTime()) {
                // We have already passed our CPU deadline but we still have rows
                // left in the tail. We'll just give up further attempts to render
                // the main content and only render fallbacks.
                workInProgress.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                // to get it started back up to attempt the next item. While in terms
                // of priority this work has the same priority as this current render,
                // it's not part of the same transition once the transition has
                // committed. If it's sync, we still want to yield so that it can be
                // painted. Conceptually, this is really the same as pinging.
                // We can use any RetryLane even if it's the one currently rendering
                // since we're leaving it behind on this node.

                workInProgress.lanes = SomeRetryLane;

                {
                  markSpawnedWork(SomeRetryLane);
                }
              }
            } else {
              cutOffTailIfNeeded(renderState, false);
            } // Next we're going to render the tail.

          } else {
            // Append the rendered row to the child list.
            if (!didSuspendAlready) {
              var _suspended = findFirstSuspended(renderedTail);

              if (_suspended !== null) {
                workInProgress.flags |= DidCapture;
                didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                // get lost if this row ends up dropped during a second pass.

                var _newThennables = _suspended.updateQueue;

                if (_newThennables !== null) {
                  workInProgress.updateQueue = _newThennables;
                  workInProgress.flags |= Update;
                }

                cutOffTailIfNeeded(renderState, true); // This might have been modified.

                if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                ) {
                    // We need to delete the row we just rendered.
                    // Reset the effect list to what it was before we rendered this
                    // child. The nested children have already appended themselves.
                    var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                    if (lastEffect !== null) {
                      lastEffect.nextEffect = null;
                    } // We're done.


                    return null;
                  }
              } else if ( // The time it took to render last row is greater than the remaining
              // time we have to render. So rendering one more row would likely
              // exceed it.
              now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                // We have now passed our CPU deadline and we'll just give up further
                // attempts to render the main content and only render fallbacks.
                // The assumption is that this is usually faster.
                workInProgress.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                // to get it started back up to attempt the next item. While in terms
                // of priority this work has the same priority as this current render,
                // it's not part of the same transition once the transition has
                // committed. If it's sync, we still want to yield so that it can be
                // painted. Conceptually, this is really the same as pinging.
                // We can use any RetryLane even if it's the one currently rendering
                // since we're leaving it behind on this node.

                workInProgress.lanes = SomeRetryLane;

                {
                  markSpawnedWork(SomeRetryLane);
                }
              }
            }

            if (renderState.isBackwards) {
              // The effect list of the backwards tail will have been added
              // to the end. This breaks the guarantee that life-cycles fire in
              // sibling order but that isn't a strong guarantee promised by React.
              // Especially since these might also just pop in during future commits.
              // Append to the beginning of the list.
              renderedTail.sibling = workInProgress.child;
              workInProgress.child = renderedTail;
            } else {
              var previousSibling = renderState.last;

              if (previousSibling !== null) {
                previousSibling.sibling = renderedTail;
              } else {
                workInProgress.child = renderedTail;
              }

              renderState.last = renderedTail;
            }
          }

          if (renderState.tail !== null) {
            // We still have tail rows to render.
            // Pop a row.
            var next = renderState.tail;
            renderState.rendering = next;
            renderState.tail = next.sibling;
            renderState.lastEffect = workInProgress.lastEffect;
            renderState.renderingStartTime = now();
            next.sibling = null; // Restore the context.
            // TODO: We can probably just avoid popping it instead and only
            // setting it the first time we go from not suspended to suspended.

            var suspenseContext = suspenseStackCursor.current;

            if (didSuspendAlready) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            } else {
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }

            pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

            return next;
          }

          return null;
        }

      case FundamentalComponent:
        {

          break;
        }

      case ScopeComponent:
        {

          break;
        }

      case Block:

        break;

      case OffscreenComponent:
      case LegacyHiddenComponent:
        {
          popRenderLanes(workInProgress);

          if (current !== null) {
            var _nextState = workInProgress.memoizedState;
            var _prevState = current.memoizedState;
            var prevIsHidden = _prevState !== null;
            var nextIsHidden = _nextState !== null;

            if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
              workInProgress.flags |= Update;
            }
          }

          return null;
        }
    }

    {
      {
        throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }

  function unwindWork(workInProgress, renderLanes) {
    switch (workInProgress.tag) {
      case ClassComponent:
        {
          var Component = workInProgress.type;

          if (isContextProvider(Component)) {
            popContext(workInProgress);
          }

          var flags = workInProgress.flags;

          if (flags & ShouldCapture) {
            workInProgress.flags = flags & ~ShouldCapture | DidCapture;

            if ( (workInProgress.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress);
            }

            return workInProgress;
          }

          return null;
        }

      case HostRoot:
        {
          popHostContainer(workInProgress);
          popTopLevelContextObject(workInProgress);
          resetWorkInProgressVersions();
          var _flags = workInProgress.flags;

          if (!((_flags & DidCapture) === NoFlags)) {
            {
              throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
            }
          }

          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
          return workInProgress;
        }

      case HostComponent:
        {
          // TODO: popHydrationState
          popHostContext(workInProgress);
          return null;
        }

      case SuspenseComponent:
        {
          popSuspenseContext(workInProgress);

          var _flags2 = workInProgress.flags;

          if (_flags2 & ShouldCapture) {
            workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

            if ( (workInProgress.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress);
            }

            return workInProgress;
          }

          return null;
        }

      case SuspenseListComponent:
        {
          popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
          // caught by a nested boundary. If not, it should bubble through.

          return null;
        }

      case HostPortal:
        popHostContainer(workInProgress);
        return null;

      case ContextProvider:
        popProvider(workInProgress);
        return null;

      case OffscreenComponent:
      case LegacyHiddenComponent:
        popRenderLanes(workInProgress);
        return null;

      default:
        return null;
    }
  }

  function unwindInterruptedWork(interruptedWork) {
    switch (interruptedWork.tag) {
      case ClassComponent:
        {
          var childContextTypes = interruptedWork.type.childContextTypes;

          if (childContextTypes !== null && childContextTypes !== undefined) {
            popContext(interruptedWork);
          }

          break;
        }

      case HostRoot:
        {
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          resetWorkInProgressVersions();
          break;
        }

      case HostComponent:
        {
          popHostContext(interruptedWork);
          break;
        }

      case HostPortal:
        popHostContainer(interruptedWork);
        break;

      case SuspenseComponent:
        popSuspenseContext(interruptedWork);
        break;

      case SuspenseListComponent:
        popSuspenseContext(interruptedWork);
        break;

      case ContextProvider:
        popProvider(interruptedWork);
        break;

      case OffscreenComponent:
      case LegacyHiddenComponent:
        popRenderLanes(interruptedWork);
        break;
    }
  }

  function createCapturedValue(value, source) {
    // If the value is an error, call this function immediately after it is thrown
    // so the stack is accurate.
    return {
      value: value,
      source: source,
      stack: getStackByFiberInDevAndProd(source)
    };
  }

  // This module is forked in different environments.
  // By default, return `true` to log errors to the console.
  // Forks can return `false` if this isn't desirable.
  function showErrorDialog(boundary, errorInfo) {
    return true;
  }

  function logCapturedError(boundary, errorInfo) {
    try {
      var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
      // This enables renderers like ReactNative to better manage redbox behavior.

      if (logError === false) {
        return;
      }

      var error = errorInfo.value;

      if (true) {
        var source = errorInfo.source;
        var stack = errorInfo.stack;
        var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
        // `preventDefault()` in window `error` handler.
        // We record this information as an expando on the error.

        if (error != null && error._suppressLogging) {
          if (boundary.tag === ClassComponent) {
            // The error is recoverable and was silenced.
            // Ignore it and don't print the stack addendum.
            // This is handy for testing error boundaries without noise.
            return;
          } // The error is fatal. Since the silencing might have
          // been accidental, we'll surface it anyway.
          // However, the browser would have silenced the original error
          // so we'll print it first, and then print the stack addendum.


          console['error'](error); // Don't transform to our wrapper
          // For a more detailed description of this block, see:
          // https://github.com/facebook/react/pull/13384
        }

        var componentName = source ? getComponentName(source.type) : null;
        var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
        var errorBoundaryMessage;
        var errorBoundaryName = getComponentName(boundary.type);

        if (errorBoundaryName) {
          errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
        } else {
          errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
        }

        var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

        console['error'](combinedMessage); // Don't transform to our wrapper
      }
    } catch (e) {
      // This method must not throw, or React internal state will get messed up.
      // If console.error is overridden, or logCapturedError() shows a dialog that throws,
      // we want to report this error outside of the normal stack as a last resort.
      // https://github.com/facebook/react/issues/13188
      setTimeout(function () {
        throw e;
      });
    }
  }

  var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

  function createRootErrorUpdate(fiber, errorInfo, lane) {
    var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

    update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
    // being called "element".

    update.payload = {
      element: null
    };
    var error = errorInfo.value;

    update.callback = function () {
      onUncaughtError(error);
      logCapturedError(fiber, errorInfo);
    };

    return update;
  }

  function createClassErrorUpdate(fiber, errorInfo, lane) {
    var update = createUpdate(NoTimestamp, lane);
    update.tag = CaptureUpdate;
    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

    if (typeof getDerivedStateFromError === 'function') {
      var error$1 = errorInfo.value;

      update.payload = function () {
        logCapturedError(fiber, errorInfo);
        return getDerivedStateFromError(error$1);
      };
    }

    var inst = fiber.stateNode;

    if (inst !== null && typeof inst.componentDidCatch === 'function') {
      update.callback = function callback() {
        {
          markFailedErrorBoundaryForHotReloading(fiber);
        }

        if (typeof getDerivedStateFromError !== 'function') {
          // To preserve the preexisting retry behavior of error boundaries,
          // we keep track of which ones already failed during this batch.
          // This gets reset before we yield back to the browser.
          // TODO: Warn in strict mode if getDerivedStateFromError is
          // not defined.
          markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

          logCapturedError(fiber, errorInfo);
        }

        var error$1 = errorInfo.value;
        var stack = errorInfo.stack;
        this.componentDidCatch(error$1, {
          componentStack: stack !== null ? stack : ''
        });

        {
          if (typeof getDerivedStateFromError !== 'function') {
            // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            if (!includesSomeLane(fiber.lanes, SyncLane)) {
              error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
            }
          }
        }
      };
    } else {
      update.callback = function () {
        markFailedErrorBoundaryForHotReloading(fiber);
      };
    }

    return update;
  }

  function attachPingListener(root, wakeable, lanes) {
    // Attach a listener to the promise to "ping" the root and retry. But only if
    // one does not already exist for the lanes we're currently rendering (which
    // acts like a "thread ID" here).
    var pingCache = root.pingCache;
    var threadIDs;

    if (pingCache === null) {
      pingCache = root.pingCache = new PossiblyWeakMap$1();
      threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    } else {
      threadIDs = pingCache.get(wakeable);

      if (threadIDs === undefined) {
        threadIDs = new Set();
        pingCache.set(wakeable, threadIDs);
      }
    }

    if (!threadIDs.has(lanes)) {
      // Memoize using the thread ID to prevent redundant listeners.
      threadIDs.add(lanes);
      var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
      wakeable.then(ping, ping);
    }
  }

  function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
    // The source fiber did not complete.
    sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.

    sourceFiber.firstEffect = sourceFiber.lastEffect = null;

    if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
      // This is a wakeable.
      var wakeable = value;

      if ((sourceFiber.mode & BlockingMode) === NoMode) {
        // Reset the memoizedState to what it was before we attempted
        // to render it.
        var currentSource = sourceFiber.alternate;

        if (currentSource) {
          sourceFiber.updateQueue = currentSource.updateQueue;
          sourceFiber.memoizedState = currentSource.memoizedState;
          sourceFiber.lanes = currentSource.lanes;
        } else {
          sourceFiber.updateQueue = null;
          sourceFiber.memoizedState = null;
        }
      }

      var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

      var _workInProgress = returnFiber;

      do {
        if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
          // Found the nearest boundary.
          // Stash the promise on the boundary fiber. If the boundary times out, we'll
          // attach another listener to flip the boundary back to its normal state.
          var wakeables = _workInProgress.updateQueue;

          if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            _workInProgress.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          } // If the boundary is outside of blocking mode, we should *not*
          // suspend the commit. Pretend as if the suspended component rendered
          // null and keep rendering. In the commit phase, we'll schedule a
          // subsequent synchronous update to re-render the Suspense.
          //
          // Note: It doesn't matter whether the component that suspended was
          // inside a blocking mode tree. If the Suspense is outside of it, we
          // should *not* suspend the commit.


          if ((_workInProgress.mode & BlockingMode) === NoMode) {
            _workInProgress.flags |= DidCapture;
            sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
            // But we shouldn't call any lifecycle methods or callbacks. Remove
            // all lifecycle effect tags.

            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;

              if (currentSourceFiber === null) {
                // This is a new mount. Change the tag so it's not mistaken for a
                // completed class component. For example, we should not call
                // componentWillUnmount if it is deleted.
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                // When we try rendering again, we should not reuse the current fiber,
                // since it's known to be in an inconsistent state. Use a force update to
                // prevent a bail out.
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update);
              }
            } // The source fiber did not complete. Mark it with Sync priority to
            // indicate that it still has pending work.


            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.

            return;
          } // Confirmed that the boundary is in a concurrent mode tree. Continue
          // with the normal suspend path.
          //
          // After this we'll use a set of heuristics to determine whether this
          // render pass will run to completion or restart or "suspend" the commit.
          // The actual logic for this is spread out in different places.
          //
          // This first principle is that if we're going to suspend when we complete
          // a root, then we should also restart if we get an update or ping that
          // might unsuspend it, and vice versa. The only reason to suspend is
          // because you think you might want to restart before committing. However,
          // it doesn't make sense to restart only while in the period we're suspended.
          //
          // Restarting too aggressively is also not good because it starves out any
          // intermediate loading state. So we use heuristics to determine when.
          // Suspense Heuristics
          //
          // If nothing threw a Promise or all the same fallbacks are already showing,
          // then don't suspend/restart.
          //
          // If this is an initial render of a new tree of Suspense boundaries and
          // those trigger a fallback, then don't suspend/restart. We want to ensure
          // that we can show the initial loading state as quickly as possible.
          //
          // If we hit a "Delayed" case, such as when we'd switch from content back into
          // a fallback, then we should always suspend/restart. Transitions apply
          // to this case. If none is defined, JND is used instead.
          //
          // If we're already showing a fallback and it gets "retried", allowing us to show
          // another level, but there's still an inner boundary that would show a fallback,
          // then we suspend/restart for 500ms since the last time we showed a fallback
          // anywhere in the tree. This effectively throttles progressive loading into a
          // consistent train of commits. This also gives us an opportunity to restart to
          // get to the completed state slightly earlier.
          //
          // If there's ambiguity due to batching it's resolved in preference of:
          // 1) "delayed", 2) "initial render", 3) "retry".
          //
          // We want to ensure that a "busy" state doesn't get force committed. We want to
          // ensure that new initial loading states can commit as soon as possible.


          attachPingListener(root, wakeable, rootRenderLanes);
          _workInProgress.flags |= ShouldCapture;
          _workInProgress.lanes = rootRenderLanes;
          return;
        } // This boundary already captured during this render. Continue to the next
        // boundary.


        _workInProgress = _workInProgress.return;
      } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
      // TODO: Use invariant so the message is stripped in prod?


      value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
    } // We didn't find a boundary that could handle this type of exception. Start
    // over and traverse parent path again, this time treating the exception
    // as an error.


    renderDidError();
    value = createCapturedValue(value, sourceFiber);
    var workInProgress = returnFiber;

    do {
      switch (workInProgress.tag) {
        case HostRoot:
          {
            var _errorInfo = value;
            workInProgress.flags |= ShouldCapture;
            var lane = pickArbitraryLane(rootRenderLanes);
            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

            var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

            enqueueCapturedUpdate(workInProgress, _update);
            return;
          }

        case ClassComponent:
          // Capture and retry
          var errorInfo = value;
          var ctor = workInProgress.type;
          var instance = workInProgress.stateNode;

          if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
            workInProgress.flags |= ShouldCapture;

            var _lane = pickArbitraryLane(rootRenderLanes);

            workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

            var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

            enqueueCapturedUpdate(workInProgress, _update2);
            return;
          }

          break;
      }

      workInProgress = workInProgress.return;
    } while (workInProgress !== null);
  }

  var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

  {
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
  }

  var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;

  var callComponentWillUnmountWithTimer = function (current, instance) {
    instance.props = current.memoizedProps;
    instance.state = current.memoizedState;

    {
      instance.componentWillUnmount();
    }
  }; // Capture errors so they don't interrupt unmounting.


  function safelyCallComponentWillUnmount(current, instance) {
    {
      invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

      if (hasCaughtError()) {
        var unmountError = clearCaughtError();
        captureCommitPhaseError(current, unmountError);
      }
    }
  }

  function safelyDetachRef(current) {
    var ref = current.ref;

    if (ref !== null) {
      if (typeof ref === 'function') {
        {
          invokeGuardedCallback(null, ref, null, null);

          if (hasCaughtError()) {
            var refError = clearCaughtError();
            captureCommitPhaseError(current, refError);
          }
        }
      } else {
        ref.current = null;
      }
    }
  }

  function safelyCallDestroy(current, destroy) {
    {
      invokeGuardedCallback(null, destroy, null);

      if (hasCaughtError()) {
        var error = clearCaughtError();
        captureCommitPhaseError(current, error);
      }
    }
  }

  function commitBeforeMutationLifeCycles(current, finishedWork) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
      case Block:
        {
          return;
        }

      case ClassComponent:
        {
          if (finishedWork.flags & Snapshot) {
            if (current !== null) {
              var prevProps = current.memoizedProps;
              var prevState = current.memoizedState;
              var instance = finishedWork.stateNode; // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.

              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }

                  if (instance.state !== finishedWork.memoizedState) {
                    error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                }
              }

              var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

              {
                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                  didWarnSet.add(finishedWork.type);

                  error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                }
              }

              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
          }

          return;
        }

      case HostRoot:
        {
          {
            if (finishedWork.flags & Snapshot) {
              var root = finishedWork.stateNode;
              clearContainer(root.containerInfo);
            }
          }

          return;
        }

      case HostComponent:
      case HostText:
      case HostPortal:
      case IncompleteClassComponent:
        // Nothing to do for these component types
        return;
    }

    {
      {
        throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }

  function commitHookEffectListUnmount(tag, finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

    if (lastEffect !== null) {
      var firstEffect = lastEffect.next;
      var effect = firstEffect;

      do {
        if ((effect.tag & tag) === tag) {
          // Unmount
          var destroy = effect.destroy;
          effect.destroy = undefined;

          if (destroy !== undefined) {
            destroy();
          }
        }

        effect = effect.next;
      } while (effect !== firstEffect);
    }
  }

  function commitHookEffectListMount(tag, finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

    if (lastEffect !== null) {
      var firstEffect = lastEffect.next;
      var effect = firstEffect;

      do {
        if ((effect.tag & tag) === tag) {
          // Mount
          var create = effect.create;
          effect.destroy = create();

          {
            var destroy = effect.destroy;

            if (destroy !== undefined && typeof destroy !== 'function') {
              var addendum = void 0;

              if (destroy === null) {
                addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
              } else if (typeof destroy.then === 'function') {
                addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
              } else {
                addendum = ' You returned: ' + destroy;
              }

              error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
            }
          }
        }

        effect = effect.next;
      } while (effect !== firstEffect);
    }
  }

  function schedulePassiveEffects(finishedWork) {
    var updateQueue = finishedWork.updateQueue;
    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

    if (lastEffect !== null) {
      var firstEffect = lastEffect.next;
      var effect = firstEffect;

      do {
        var _effect = effect,
            next = _effect.next,
            tag = _effect.tag;

        if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
          enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
          enqueuePendingPassiveHookEffectMount(finishedWork, effect);
        }

        effect = next;
      } while (effect !== firstEffect);
    }
  }

  function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
      case Block:
        {
          // At this point layout effects have already been destroyed (during mutation phase).
          // This is done to prevent sibling component effects from interfering with each other,
          // e.g. a destroy function in one component should never override a ref set
          // by a create function in another component during the same commit.
          {
            commitHookEffectListMount(Layout | HasEffect, finishedWork);
          }

          schedulePassiveEffects(finishedWork);
          return;
        }

      case ClassComponent:
        {
          var instance = finishedWork.stateNode;

          if (finishedWork.flags & Update) {
            if (current === null) {
              // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }

                  if (instance.state !== finishedWork.memoizedState) {
                    error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                }
              }

              {
                instance.componentDidMount();
              }
            } else {
              var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
              var prevState = current.memoizedState; // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.

              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }

                  if (instance.state !== finishedWork.memoizedState) {
                    error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                  }
                }
              }

              {
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
              }
            }
          } // TODO: I think this is now always non-null by the time it reaches the
          // commit phase. Consider removing the type check.


          var updateQueue = finishedWork.updateQueue;

          if (updateQueue !== null) {
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            } // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.


            commitUpdateQueue(finishedWork, updateQueue, instance);
          }

          return;
        }

      case HostRoot:
        {
          // TODO: I think this is now always non-null by the time it reaches the
          // commit phase. Consider removing the type check.
          var _updateQueue = finishedWork.updateQueue;

          if (_updateQueue !== null) {
            var _instance = null;

            if (finishedWork.child !== null) {
              switch (finishedWork.child.tag) {
                case HostComponent:
                  _instance = getPublicInstance(finishedWork.child.stateNode);
                  break;

                case ClassComponent:
                  _instance = finishedWork.child.stateNode;
                  break;
              }
            }

            commitUpdateQueue(finishedWork, _updateQueue, _instance);
          }

          return;
        }

      case HostComponent:
        {
          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
          // These effects should only be committed when components are first mounted,
          // aka when there is no current/alternate.

          if (current === null && finishedWork.flags & Update) {
            var type = finishedWork.type;
            var props = finishedWork.memoizedProps;
            commitMount(_instance2, type, props);
          }

          return;
        }

      case HostText:
        {
          // We have no life-cycles associated with text.
          return;
        }

      case HostPortal:
        {
          // We have no life-cycles associated with portals.
          return;
        }

      case Profiler:
        {
          {
            var _finishedWork$memoize2 = finishedWork.memoizedProps,
                onCommit = _finishedWork$memoize2.onCommit,
                onRender = _finishedWork$memoize2.onRender;
            var effectDuration = finishedWork.stateNode.effectDuration;
            var commitTime = getCommitTime();

            if (typeof onRender === 'function') {
              {
                onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
              }
            }
          }

          return;
        }

      case SuspenseComponent:
        {
          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
          return;
        }

      case SuspenseListComponent:
      case IncompleteClassComponent:
      case FundamentalComponent:
      case ScopeComponent:
      case OffscreenComponent:
      case LegacyHiddenComponent:
        return;
    }

    {
      {
        throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }

  function hideOrUnhideAllChildren(finishedWork, isHidden) {
    {
      // We only have the top Fiber that was inserted but we need to recurse down its
      // children to find all the terminal nodes.
      var node = finishedWork;

      while (true) {
        if (node.tag === HostComponent) {
          var instance = node.stateNode;

          if (isHidden) {
            hideInstance(instance);
          } else {
            unhideInstance(node.stateNode, node.memoizedProps);
          }
        } else if (node.tag === HostText) {
          var _instance3 = node.stateNode;

          if (isHidden) {
            hideTextInstance(_instance3);
          } else {
            unhideTextInstance(_instance3, node.memoizedProps);
          }
        } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === finishedWork) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
  }

  function commitAttachRef(finishedWork) {
    var ref = finishedWork.ref;

    if (ref !== null) {
      var instance = finishedWork.stateNode;
      var instanceToUse;

      switch (finishedWork.tag) {
        case HostComponent:
          instanceToUse = getPublicInstance(instance);
          break;

        default:
          instanceToUse = instance;
      } // Moved outside to ensure DCE works with this flag

      if (typeof ref === 'function') {
        ref(instanceToUse);
      } else {
        {
          if (!ref.hasOwnProperty('current')) {
            error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
          }
        }

        ref.current = instanceToUse;
      }
    }
  }

  function commitDetachRef(current) {
    var currentRef = current.ref;

    if (currentRef !== null) {
      if (typeof currentRef === 'function') {
        currentRef(null);
      } else {
        currentRef.current = null;
      }
    }
  } // User-originating errors (lifecycles and refs) should not interrupt
  // deletion, so don't let them throw. Host-originating errors should
  // interrupt deletion, so it's okay


  function commitUnmount(finishedRoot, current, renderPriorityLevel) {
    onCommitUnmount(current);

    switch (current.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
      case Block:
        {
          var updateQueue = current.updateQueue;

          if (updateQueue !== null) {
            var lastEffect = updateQueue.lastEffect;

            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;

              do {
                var _effect2 = effect,
                    destroy = _effect2.destroy,
                    tag = _effect2.tag;

                if (destroy !== undefined) {
                  if ((tag & Passive$1) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(current, effect);
                  } else {
                    {
                      safelyCallDestroy(current, destroy);
                    }
                  }
                }

                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }

          return;
        }

      case ClassComponent:
        {
          safelyDetachRef(current);
          var instance = current.stateNode;

          if (typeof instance.componentWillUnmount === 'function') {
            safelyCallComponentWillUnmount(current, instance);
          }

          return;
        }

      case HostComponent:
        {
          safelyDetachRef(current);
          return;
        }

      case HostPortal:
        {
          // TODO: this is recursive.
          // We are also not using this parent because
          // the portal will get pushed immediately.
          {
            unmountHostComponents(finishedRoot, current);
          }

          return;
        }

      case FundamentalComponent:
        {

          return;
        }

      case DehydratedFragment:
        {

          return;
        }

      case ScopeComponent:
        {

          return;
        }
    }
  }

  function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
    // While we're inside a removed host node we don't want to call
    // removeChild on the inner nodes because they're removed by the top
    // call anyway. We also want to call componentWillUnmount on all
    // composites before this host node is removed from the tree. Therefore
    // we do an inner loop while we're still inside the host node.
    var node = root;

    while (true) {
      commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
      // Skip portals because commitUnmount() currently visits them recursively.

      if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
      // If we don't use mutation we drill down into portals here instead.
       node.tag !== HostPortal)) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === root) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === root) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function detachFiberMutation(fiber) {
    // Cut off the return pointers to disconnect it from the tree. Ideally, we
    // should clear the child pointer of the parent alternate to let this
    // get GC:ed but we don't know which for sure which parent is the current
    // one so we'll settle for GC:ing the subtree of this child. This child
    // itself will be GC:ed when the parent updates the next time.
    // Note: we cannot null out sibling here, otherwise it can cause issues
    // with findDOMNode and how it requires the sibling field to carry out
    // traversal in a later effect. See PR #16820. We now clear the sibling
    // field after effects, see: detachFiberAfterEffects.
    //
    // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
    // It may be required if the current component is an error boundary,
    // and one of its descendants throws while unmounting a passive effect.
    fiber.alternate = null;
    fiber.child = null;
    fiber.dependencies = null;
    fiber.firstEffect = null;
    fiber.lastEffect = null;
    fiber.memoizedProps = null;
    fiber.memoizedState = null;
    fiber.pendingProps = null;
    fiber.return = null;
    fiber.updateQueue = null;

    {
      fiber._debugOwner = null;
    }
  }

  function getHostParentFiber(fiber) {
    var parent = fiber.return;

    while (parent !== null) {
      if (isHostParent(parent)) {
        return parent;
      }

      parent = parent.return;
    }

    {
      {
        throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }

  function isHostParent(fiber) {
    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
  }

  function getHostSibling(fiber) {
    // We're going to search forward into the tree until we find a sibling host
    // node. Unfortunately, if multiple insertions are done in a row we have to
    // search past them. This leads to exponential search for the next sibling.
    // TODO: Find a more efficient way to do this.
    var node = fiber;

    siblings: while (true) {
      // If we didn't find anything, let's try the next sibling.
      while (node.sibling === null) {
        if (node.return === null || isHostParent(node.return)) {
          // If we pop out of the root or hit the parent the fiber we are the
          // last sibling.
          return null;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;

      while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
        // If it is not host node and, we might have a host node inside it.
        // Try to search down until we find one.
        if (node.flags & Placement) {
          // If we don't have a child, try the siblings instead.
          continue siblings;
        } // If we don't have a child, try the siblings instead.
        // We also skip portals because they are not part of this host tree.


        if (node.child === null || node.tag === HostPortal) {
          continue siblings;
        } else {
          node.child.return = node;
          node = node.child;
        }
      } // Check if this host node is stable or about to be placed.


      if (!(node.flags & Placement)) {
        // Found it!
        return node.stateNode;
      }
    }
  }

  function commitPlacement(finishedWork) {


    var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

    var parent;
    var isContainer;
    var parentStateNode = parentFiber.stateNode;

    switch (parentFiber.tag) {
      case HostComponent:
        parent = parentStateNode;
        isContainer = false;
        break;

      case HostRoot:
        parent = parentStateNode.containerInfo;
        isContainer = true;
        break;

      case HostPortal:
        parent = parentStateNode.containerInfo;
        isContainer = true;
        break;

      case FundamentalComponent:

      // eslint-disable-next-line-no-fallthrough

      default:
        {
          {
            throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

    }

    if (parentFiber.flags & ContentReset) {
      // Reset the text content of the parent before doing any insertions
      resetTextContent(parent); // Clear ContentReset from the effect tag

      parentFiber.flags &= ~ContentReset;
    }

    var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.

    if (isContainer) {
      insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
    } else {
      insertOrAppendPlacementNode(finishedWork, before, parent);
    }
  }

  function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
    var tag = node.tag;
    var isHost = tag === HostComponent || tag === HostText;

    if (isHost || enableFundamentalAPI ) {
      var stateNode = isHost ? node.stateNode : node.stateNode.instance;

      if (before) {
        insertInContainerBefore(parent, stateNode, before);
      } else {
        appendChildToContainer(parent, stateNode);
      }
    } else if (tag === HostPortal) ; else {
      var child = node.child;

      if (child !== null) {
        insertOrAppendPlacementNodeIntoContainer(child, before, parent);
        var sibling = child.sibling;

        while (sibling !== null) {
          insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
          sibling = sibling.sibling;
        }
      }
    }
  }

  function insertOrAppendPlacementNode(node, before, parent) {
    var tag = node.tag;
    var isHost = tag === HostComponent || tag === HostText;

    if (isHost || enableFundamentalAPI ) {
      var stateNode = isHost ? node.stateNode : node.stateNode.instance;

      if (before) {
        insertBefore(parent, stateNode, before);
      } else {
        appendChild(parent, stateNode);
      }
    } else if (tag === HostPortal) ; else {
      var child = node.child;

      if (child !== null) {
        insertOrAppendPlacementNode(child, before, parent);
        var sibling = child.sibling;

        while (sibling !== null) {
          insertOrAppendPlacementNode(sibling, before, parent);
          sibling = sibling.sibling;
        }
      }
    }
  }

  function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
    // We only have the top Fiber that was deleted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = current; // Each iteration, currentParent is populated with node's host parent if not
    // currentParentIsValid.

    var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

    var currentParent;
    var currentParentIsContainer;

    while (true) {
      if (!currentParentIsValid) {
        var parent = node.return;

        findParent: while (true) {
          if (!(parent !== null)) {
            {
              throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
            }
          }

          var parentStateNode = parent.stateNode;

          switch (parent.tag) {
            case HostComponent:
              currentParent = parentStateNode;
              currentParentIsContainer = false;
              break findParent;

            case HostRoot:
              currentParent = parentStateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;

            case HostPortal:
              currentParent = parentStateNode.containerInfo;
              currentParentIsContainer = true;
              break findParent;

          }

          parent = parent.return;
        }

        currentParentIsValid = true;
      }

      if (node.tag === HostComponent || node.tag === HostText) {
        commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
        // node from the tree.

        if (currentParentIsContainer) {
          removeChildFromContainer(currentParent, node.stateNode);
        } else {
          removeChild(currentParent, node.stateNode);
        } // Don't visit children because we already visited them.

      } else if (node.tag === HostPortal) {
        if (node.child !== null) {
          // When we go into a portal, it becomes the parent to remove from.
          // We will reassign it back when we pop the portal on the way up.
          currentParent = node.stateNode.containerInfo;
          currentParentIsContainer = true; // Visit children because portals might contain host components.

          node.child.return = node;
          node = node.child;
          continue;
        }
      } else {
        commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.

        if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
      }

      if (node === current) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === current) {
          return;
        }

        node = node.return;

        if (node.tag === HostPortal) {
          // When we go out of the portal, we need to restore the parent.
          // Since we don't keep a stack of them, we will search for it.
          currentParentIsValid = false;
        }
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  function commitDeletion(finishedRoot, current, renderPriorityLevel) {
    {
      // Recursively delete all host nodes from the parent.
      // Detach refs and call componentWillUnmount() on the whole subtree.
      unmountHostComponents(finishedRoot, current);
    }

    var alternate = current.alternate;
    detachFiberMutation(current);

    if (alternate !== null) {
      detachFiberMutation(alternate);
    }
  }

  function commitWork(current, finishedWork) {

    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
      case Block:
        {
          // Layout effects are destroyed during the mutation phase so that all
          // destroy functions for all fibers are called before any create functions.
          // This prevents sibling component effects from interfering with each other,
          // e.g. a destroy function in one component should never override a ref set
          // by a create function in another component during the same commit.
          {
            commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
          }

          return;
        }

      case ClassComponent:
        {
          return;
        }

      case HostComponent:
        {
          var instance = finishedWork.stateNode;

          if (instance != null) {
            // Commit the work prepared earlier.
            var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.

            var oldProps = current !== null ? current.memoizedProps : newProps;
            var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

            var updatePayload = finishedWork.updateQueue;
            finishedWork.updateQueue = null;

            if (updatePayload !== null) {
              commitUpdate(instance, updatePayload, type, oldProps, newProps);
            }
          }

          return;
        }

      case HostText:
        {
          if (!(finishedWork.stateNode !== null)) {
            {
              throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
            }
          }

          var textInstance = finishedWork.stateNode;
          var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldText = current !== null ? current.memoizedProps : newText;
          commitTextUpdate(textInstance, oldText, newText);
          return;
        }

      case HostRoot:
        {
          {
            var _root = finishedWork.stateNode;

            if (_root.hydrate) {
              // We've just hydrated. No need to hydrate again.
              _root.hydrate = false;
              commitHydratedContainer(_root.containerInfo);
            }
          }

          return;
        }

      case Profiler:
        {
          return;
        }

      case SuspenseComponent:
        {
          commitSuspenseComponent(finishedWork);
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case SuspenseListComponent:
        {
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case IncompleteClassComponent:
        {
          return;
        }

      case FundamentalComponent:
        {

          break;
        }

      case ScopeComponent:
        {

          break;
        }

      case OffscreenComponent:
      case LegacyHiddenComponent:
        {
          var newState = finishedWork.memoizedState;
          var isHidden = newState !== null;
          hideOrUnhideAllChildren(finishedWork, isHidden);
          return;
        }
    }

    {
      {
        throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }

  function commitSuspenseComponent(finishedWork) {
    var newState = finishedWork.memoizedState;

    if (newState !== null) {
      markCommitTimeOfFallback();

      {
        // Hide the Offscreen component that contains the primary children. TODO:
        // Ideally, this effect would have been scheduled on the Offscreen fiber
        // itself. That's how unhiding works: the Offscreen component schedules an
        // effect on itself. However, in this case, the component didn't complete,
        // so the fiber was never added to the effect list in the normal path. We
        // could have appended it to the effect list in the Suspense component's
        // second pass, but doing it this way is less complicated. This would be
        // simpler if we got rid of the effect list and traversed the tree, like
        // we're planning to do.
        var primaryChildParent = finishedWork.child;
        hideOrUnhideAllChildren(primaryChildParent, true);
      }
    }
  }

  function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

    var newState = finishedWork.memoizedState;

    if (newState === null) {
      var current = finishedWork.alternate;

      if (current !== null) {
        var prevState = current.memoizedState;

        if (prevState !== null) {
          var suspenseInstance = prevState.dehydrated;

          if (suspenseInstance !== null) {
            commitHydratedSuspenseInstance(suspenseInstance);
          }
        }
      }
    }
  }

  function attachSuspenseRetryListeners(finishedWork) {
    // If this boundary just timed out, then it will have a set of wakeables.
    // For each wakeable, attach a listener so that when it resolves, React
    // attempts to re-render the boundary in the primary (pre-timeout) state.
    var wakeables = finishedWork.updateQueue;

    if (wakeables !== null) {
      finishedWork.updateQueue = null;
      var retryCache = finishedWork.stateNode;

      if (retryCache === null) {
        retryCache = finishedWork.stateNode = new PossiblyWeakSet();
      }

      wakeables.forEach(function (wakeable) {
        // Memoize using the boundary fiber to prevent redundant listeners.
        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

        if (!retryCache.has(wakeable)) {
          {
            if (wakeable.__reactDoNotTraceInteractions !== true) {
              retry = tracing$1.unstable_wrap(retry);
            }
          }

          retryCache.add(wakeable);
          wakeable.then(retry, retry);
        }
      });
    }
  } // This function detects when a Suspense boundary goes from visible to hidden.
  // It returns false if the boundary is already hidden.
  // TODO: Use an effect tag.


  function isSuspenseBoundaryBeingHidden(current, finishedWork) {
    if (current !== null) {
      var oldState = current.memoizedState;

      if (oldState === null || oldState.dehydrated !== null) {
        var newState = finishedWork.memoizedState;
        return newState !== null && newState.dehydrated === null;
      }
    }

    return false;
  }

  function commitResetTextContent(current) {

    resetTextContent(current.stateNode);
  }

  var COMPONENT_TYPE = 0;
  var HAS_PSEUDO_CLASS_TYPE = 1;
  var ROLE_TYPE = 2;
  var TEST_NAME_TYPE = 3;
  var TEXT_TYPE = 4;

  if (typeof Symbol === 'function' && Symbol.for) {
    var symbolFor$1 = Symbol.for;
    COMPONENT_TYPE = symbolFor$1('selector.component');
    HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
    ROLE_TYPE = symbolFor$1('selector.role');
    TEST_NAME_TYPE = symbolFor$1('selector.test_id');
    TEXT_TYPE = symbolFor$1('selector.text');
  }
  var commitHooks = [];
  function onCommitRoot$1() {
    {
      commitHooks.forEach(function (commitHook) {
        return commitHook();
      });
    }
  }

  var ceil = Math.ceil;
  var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
      ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
      IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
  var NoContext =
  /*             */
  0;
  var BatchedContext =
  /*               */
  1;
  var EventContext =
  /*                 */
  2;
  var DiscreteEventContext =
  /*         */
  4;
  var LegacyUnbatchedContext =
  /*       */
  8;
  var RenderContext =
  /*                */
  16;
  var CommitContext =
  /*                */
  32;
  var RetryAfterError =
  /*       */
  64;
  var RootIncomplete = 0;
  var RootFatalErrored = 1;
  var RootErrored = 2;
  var RootSuspended = 3;
  var RootSuspendedWithDelay = 4;
  var RootCompleted = 5; // Describes where we are in the React execution stack

  var executionContext = NoContext; // The root we're working on

  var workInProgressRoot = null; // The fiber we're working on

  var workInProgress = null; // The lanes we're rendering

  var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
  // This is a superset of the lanes we started working on at the root. The only
  // case where it's different from `workInProgressRootRenderLanes` is when we
  // enter a subtree that is hidden and needs to be unhidden: Suspense and
  // Offscreen component.
  //
  // Most things in the work loop should deal with workInProgressRootRenderLanes.
  // Most things in begin/complete phases should deal with subtreeRenderLanes.

  var subtreeRenderLanes = NoLanes;
  var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

  var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

  var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
  // slightly different than `renderLanes` because `renderLanes` can change as you
  // enter and exit an Offscreen tree. This value is the combination of all render
  // lanes for the entire render phase.

  var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
  // includes unprocessed updates, not work in bailed out children.

  var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

  var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.

  var workInProgressRootPingedLanes = NoLanes;
  var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
  // model where we don't commit new loading states in too quick succession.

  var globalMostRecentFallbackTime = 0;
  var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
  // more and prefer CPU suspense heuristics instead.

  var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
  // suspense heuristics and opt out of rendering more content.

  var RENDER_TIMEOUT_MS = 500;

  function resetRenderTimer() {
    workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
  }

  function getRenderTargetTime() {
    return workInProgressRootRenderTargetTime;
  }
  var nextEffect = null;
  var hasUncaughtError = false;
  var firstUncaughtError = null;
  var legacyErrorBoundariesThatAlreadyFailed = null;
  var rootDoesHavePassiveEffects = false;
  var rootWithPendingPassiveEffects = null;
  var pendingPassiveEffectsRenderPriority = NoPriority$1;
  var pendingPassiveEffectsLanes = NoLanes;
  var pendingPassiveHookEffectsMount = [];
  var pendingPassiveHookEffectsUnmount = [];
  var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

  var NESTED_UPDATE_LIMIT = 50;
  var nestedUpdateCount = 0;
  var rootWithNestedUpdates = null;
  var NESTED_PASSIVE_UPDATE_LIMIT = 50;
  var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
  // during the commit phase. This enables them to be traced across components
  // that spawn new work during render. E.g. hidden boundaries, suspended SSR
  // hydration or SuspenseList.
  // TODO: Can use a bitmask instead of an array

  var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
  // event times as simultaneous, even if the actual clock time has advanced
  // between the first and second call.

  var currentEventTime = NoTimestamp;
  var currentEventWipLanes = NoLanes;
  var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
  // We warn about state updates for unmounted components differently in this case.

  var isFlushingPassiveEffects = false;
  var focusedInstanceHandle = null;
  var shouldFireAfterActiveInstanceBlur = false;
  function getWorkInProgressRoot() {
    return workInProgressRoot;
  }
  function requestEventTime() {
    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
      // We're inside React, so it's fine to read the actual time.
      return now();
    } // We're not inside React, so we may be in the middle of a browser event.


    if (currentEventTime !== NoTimestamp) {
      // Use the same start time for all updates until we enter React again.
      return currentEventTime;
    } // This is the first update since React yielded. Compute a new start time.


    currentEventTime = now();
    return currentEventTime;
  }
  function requestUpdateLane(fiber) {
    // Special cases
    var mode = fiber.mode;

    if ((mode & BlockingMode) === NoMode) {
      return SyncLane;
    } else if ((mode & ConcurrentMode) === NoMode) {
      return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
    } // The algorithm for assigning an update to a lane should be stable for all
    // updates at the same priority within the same event. To do this, the inputs
    // to the algorithm must be the same. For example, we use the `renderLanes`
    // to avoid choosing a lane that is already in the middle of rendering.
    //
    // However, the "included" lanes could be mutated in between updates in the
    // same event, like if you perform an update inside `flushSync`. Or any other
    // code path that might call `prepareFreshStack`.
    //
    // The trick we use is to cache the first of each of these inputs within an
    // event. Then reset the cached values once we can be sure the event is over.
    // Our heuristic for that is whenever we enter a concurrent work loop.
    //
    // We'll do the same for `currentEventPendingLanes` below.


    if (currentEventWipLanes === NoLanes) {
      currentEventWipLanes = workInProgressRootIncludedLanes;
    }

    var isTransition = requestCurrentTransition() !== NoTransition;

    if (isTransition) {
      if (currentEventPendingLanes !== NoLanes) {
        currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
      }

      return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
    } // TODO: Remove this dependency on the Scheduler priority.
    // To do that, we're replacing it with an update lane priority.


    var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
    // This couples React to the Scheduler internals, so we're replacing it
    // with the currentUpdateLanePriority above. As an example of how this
    // could be problematic, if we're not inside `Scheduler.runWithPriority`,
    // then we'll get the priority of the current running Scheduler task,
    // which is probably not what we want.

    var lane;

    if ( // TODO: Temporary. We're removing the concept of discrete updates.
    (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
      lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
    } else {
      var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);

      lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
    }

    return lane;
  }

  function requestRetryLane(fiber) {
    // This is a fork of `requestUpdateLane` designed specifically for Suspense
    // "retries" — a special update that attempts to flip a Suspense boundary
    // from its placeholder state to its primary/resolved state.
    // Special cases
    var mode = fiber.mode;

    if ((mode & BlockingMode) === NoMode) {
      return SyncLane;
    } else if ((mode & ConcurrentMode) === NoMode) {
      return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
    } // See `requestUpdateLane` for explanation of `currentEventWipLanes`


    if (currentEventWipLanes === NoLanes) {
      currentEventWipLanes = workInProgressRootIncludedLanes;
    }

    return findRetryLane(currentEventWipLanes);
  }

  function scheduleUpdateOnFiber(fiber, lane, eventTime) {
    checkForNestedUpdates();
    warnAboutRenderPhaseUpdatesInDEV(fiber);
    var root = markUpdateLaneFromFiberToRoot(fiber, lane);

    if (root === null) {
      warnAboutUpdateOnUnmountedFiberInDEV(fiber);
      return null;
    } // Mark that the root has a pending update.


    markRootUpdated(root, lane, eventTime);

    if (root === workInProgressRoot) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that there was an interleaved update work on this root. Unless the
      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
      // phase update. In that case, we don't treat render phase updates as if
      // they were interleaved, for backwards compat reasons.
      {
        workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
      }

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: Make sure this doesn't override pings that happen while we've
        // already started rendering.
        markRootSuspended$1(root, workInProgressRootRenderLanes);
      }
    } // TODO: requestUpdateLanePriority also reads the priority. Pass the
    // priority as an argument to that function and this one.


    var priorityLevel = getCurrentPriorityLevel();

    if (lane === SyncLane) {
      if ( // Check if we're inside unbatchedUpdates
      (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
      (executionContext & (RenderContext | CommitContext)) === NoContext) {
        // Register pending interactions on the root to avoid losing traced interaction data.
        schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
        // root inside of batchedUpdates should be synchronous, but layout updates
        // should be deferred until the end of the batch.

        performSyncWorkOnRoot(root);
      } else {
        ensureRootIsScheduled(root, eventTime);
        schedulePendingInteractions(root, lane);

        if (executionContext === NoContext) {
          // Flush the synchronous work now, unless we're already working or inside
          // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
          // scheduleCallbackForFiber to preserve the ability to schedule a callback
          // without immediately flushing it. We only do this for user-initiated
          // updates, to preserve historical behavior of legacy mode.
          resetRenderTimer();
          flushSyncCallbackQueue();
        }
      }
    } else {
      // Schedule a discrete update but only if it's not Sync.
      if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
      // discrete, even inside a discrete event.
      priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
        // This is the result of a discrete event. Track the lowest priority
        // discrete update per root so we can flush them early, if needed.
        if (rootsWithPendingDiscreteUpdates === null) {
          rootsWithPendingDiscreteUpdates = new Set([root]);
        } else {
          rootsWithPendingDiscreteUpdates.add(root);
        }
      } // Schedule other updates after in case the callback is sync.


      ensureRootIsScheduled(root, eventTime);
      schedulePendingInteractions(root, lane);
    } // We use this when assigning a lane for a transition inside
    // `requestUpdateLane`. We assume it's the same as the root being updated,
    // since in the common case of a single root app it probably is. If it's not
    // the same root, then it's not a huge deal, we just might batch more stuff
    // together more than necessary.


    mostRecentlyUpdatedRoot = root;
  } // This is split into a separate function so we can mark a fiber with pending
  // work without treating it as a typical update that originates from an event;
  // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
  // on a fiber.

  function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
    // Update the source fiber's lanes
    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
    var alternate = sourceFiber.alternate;

    if (alternate !== null) {
      alternate.lanes = mergeLanes(alternate.lanes, lane);
    }

    {
      if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
        warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
      }
    } // Walk the parent path to the root and update the child expiration time.


    var node = sourceFiber;
    var parent = sourceFiber.return;

    while (parent !== null) {
      parent.childLanes = mergeLanes(parent.childLanes, lane);
      alternate = parent.alternate;

      if (alternate !== null) {
        alternate.childLanes = mergeLanes(alternate.childLanes, lane);
      } else {
        {
          if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
      }

      node = parent;
      parent = parent.return;
    }

    if (node.tag === HostRoot) {
      var root = node.stateNode;
      return root;
    } else {
      return null;
    }
  } // Use this function to schedule a task for a root. There's only one task per
  // root; if a task was already scheduled, we'll check to make sure the priority
  // of the existing task is the same as the priority of the next level that the
  // root has work on. This function is called on every update, and right before
  // exiting a task.


  function ensureRootIsScheduled(root, currentTime) {
    var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
    // expired so we know to work on those next.

    markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

    var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.

    var newCallbackPriority = returnNextLanesPriority();

    if (nextLanes === NoLanes) {
      // Special case: There's nothing to work on.
      if (existingCallbackNode !== null) {
        cancelCallback(existingCallbackNode);
        root.callbackNode = null;
        root.callbackPriority = NoLanePriority;
      }

      return;
    } // Check if there's an existing task. We may be able to reuse it.


    if (existingCallbackNode !== null) {
      var existingCallbackPriority = root.callbackPriority;

      if (existingCallbackPriority === newCallbackPriority) {
        // The priority hasn't changed. We can reuse the existing task. Exit.
        return;
      } // The priority changed. Cancel the existing callback. We'll schedule a new
      // one below.


      cancelCallback(existingCallbackNode);
    } // Schedule a new callback.


    var newCallbackNode;

    if (newCallbackPriority === SyncLanePriority) {
      // Special case: Sync React callbacks are scheduled on a special
      // internal queue
      newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    } else if (newCallbackPriority === SyncBatchedLanePriority) {
      newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
    } else {
      var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
      newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
    }

    root.callbackPriority = newCallbackPriority;
    root.callbackNode = newCallbackNode;
  } // This is the entry point for every concurrent task, i.e. anything that
  // goes through Scheduler.


  function performConcurrentWorkOnRoot(root) {
    // Since we know we're in a React event, we can clear the current
    // event time. The next update will compute a new event time.
    currentEventTime = NoTimestamp;
    currentEventWipLanes = NoLanes;
    currentEventPendingLanes = NoLanes;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error( "Should not already be working." );
      }
    } // Flush any pending passive effects before deciding which lanes to work on,
    // in case they schedule additional work.


    var originalCallbackNode = root.callbackNode;
    var didFlushPassiveEffects = flushPassiveEffects();

    if (didFlushPassiveEffects) {
      // Something in the passive effect phase may have canceled the current task.
      // Check if the task node for this root was changed.
      if (root.callbackNode !== originalCallbackNode) {
        // The current task was canceled. Exit. We don't need to call
        // `ensureRootIsScheduled` because the check above implies either that
        // there's a new task, or that there's no remaining work on this root.
        return null;
      }
    } // Determine the next expiration time to work on, using the fields stored
    // on the root.


    var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

    if (lanes === NoLanes) {
      // Defensive coding. This is never expected to happen.
      return null;
    }

    var exitStatus = renderRootConcurrent(root, lanes);

    if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
      // The render included lanes that were updated during the render phase.
      // For example, when unhiding a hidden tree, we include all the lanes
      // that were previously skipped when the tree was hidden. That set of
      // lanes is a superset of the lanes we started rendering with.
      //
      // So we'll throw out the current work and restart.
      prepareFreshStack(root, NoLanes);
    } else if (exitStatus !== RootIncomplete) {
      if (exitStatus === RootErrored) {
        executionContext |= RetryAfterError; // If an error occurred during hydration,
        // discard server response and fall back to client side render.

        if (root.hydrate) {
          root.hydrate = false;
          clearContainer(root.containerInfo);
        } // If something threw an error, try rendering one more time. We'll render
        // synchronously to block concurrent data mutations, and we'll includes
        // all pending updates are included. If it still fails after the second
        // attempt, we'll give up and commit the resulting tree.


        lanes = getLanesToRetrySynchronouslyOnError(root);

        if (lanes !== NoLanes) {
          exitStatus = renderRootSync(root, lanes);
        }
      }

      if (exitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        prepareFreshStack(root, NoLanes);
        markRootSuspended$1(root, lanes);
        ensureRootIsScheduled(root, now());
        throw fatalError;
      } // We now have a consistent tree. The next step is either to commit it,
      // or, if something suspended, wait to commit it after a timeout.


      var finishedWork = root.current.alternate;
      root.finishedWork = finishedWork;
      root.finishedLanes = lanes;
      finishConcurrentRender(root, exitStatus, lanes);
    }

    ensureRootIsScheduled(root, now());

    if (root.callbackNode === originalCallbackNode) {
      // The task node scheduled for this root is the same one that's
      // currently executed. Need to return a continuation.
      return performConcurrentWorkOnRoot.bind(null, root);
    }

    return null;
  }

  function finishConcurrentRender(root, exitStatus, lanes) {
    switch (exitStatus) {
      case RootIncomplete:
      case RootFatalErrored:
        {
          {
            {
              throw Error( "Root did not complete. This is a bug in React." );
            }
          }
        }
      // Flow knows about invariant, so it complains if I add a break
      // statement, but eslint doesn't know about invariant, so it complains
      // if I do. eslint-disable-next-line no-fallthrough

      case RootErrored:
        {
          // We should have already attempted to retry this tree. If we reached
          // this point, it errored again. Commit it.
          commitRoot(root);
          break;
        }

      case RootSuspended:
        {
          markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
          // should immediately commit it or wait a bit.

          if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
          !shouldForceFlushFallbacksInDEV()) {
            // This render only included retries, no updates. Throttle committing
            // retries so that we don't show too many loading states too quickly.
            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

            if (msUntilTimeout > 10) {
              var nextLanes = getNextLanes(root, NoLanes);

              if (nextLanes !== NoLanes) {
                // There's additional work on this root.
                break;
              }

              var suspendedLanes = root.suspendedLanes;

              if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                // We should prefer to render the fallback of at the last
                // suspended level. Ping the last suspended level to try
                // rendering it again.
                // FIXME: What if the suspended lanes are Idle? Should not restart.
                var eventTime = requestEventTime();
                markRootPinged(root, suspendedLanes);
                break;
              } // The render is suspended, it hasn't timed out, and there's no
              // lower priority work to do. Instead of committing the fallback
              // immediately, wait for more data to arrive.


              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
              break;
            }
          } // The work expired. Commit immediately.


          commitRoot(root);
          break;
        }

      case RootSuspendedWithDelay:
        {
          markRootSuspended$1(root, lanes);

          if (includesOnlyTransitions(lanes)) {
            // This is a transition, so we should exit without committing a
            // placeholder and without scheduling a timeout. Delay indefinitely
            // until we receive more data.
            break;
          }

          {
            // This is not a transition, but we did trigger an avoided state.
            // Schedule a placeholder to display after a short delay, using the Just
            // Noticeable Difference.
            // TODO: Is the JND optimization worth the added complexity? If this is
            // the only reason we track the event time, then probably not.
            // Consider removing.
            var mostRecentEventTime = getMostRecentEventTime(root, lanes);
            var eventTimeMs = mostRecentEventTime;
            var timeElapsedMs = now() - eventTimeMs;

            var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


            if (_msUntilTimeout > 10) {
              // Instead of committing the fallback immediately, wait for more data
              // to arrive.
              root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
              break;
            }
          } // Commit the placeholder.


          commitRoot(root);
          break;
        }

      case RootCompleted:
        {
          // The work completed. Ready to commit.
          commitRoot(root);
          break;
        }

      default:
        {
          {
            {
              throw Error( "Unknown root exit status." );
            }
          }
        }
    }
  }

  function markRootSuspended$1(root, suspendedLanes) {
    // When suspending, we should always exclude lanes that were pinged or (more
    // rarely, since we try to avoid it) updated during the render phase.
    // TODO: Lol maybe there's a better way to factor this besides this
    // obnoxiously named function :)
    suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
    suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
    markRootSuspended(root, suspendedLanes);
  } // This is the entry point for synchronous tasks that don't go
  // through Scheduler


  function performSyncWorkOnRoot(root) {
    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error( "Should not already be working." );
      }
    }

    flushPassiveEffects();
    var lanes;
    var exitStatus;

    if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
      // There's a partial tree, and at least one of its lanes has expired. Finish
      // rendering it before rendering the rest of the expired work.
      lanes = workInProgressRootRenderLanes;
      exitStatus = renderRootSync(root, lanes);

      if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
        // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // Note that this only happens when part of the tree is rendered
        // concurrently. If the whole tree is rendered synchronously, then there
        // are no interleaved events.
        lanes = getNextLanes(root, lanes);
        exitStatus = renderRootSync(root, lanes);
      }
    } else {
      lanes = getNextLanes(root, NoLanes);
      exitStatus = renderRootSync(root, lanes);
    }

    if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
      executionContext |= RetryAfterError; // If an error occurred during hydration,
      // discard server response and fall back to client side render.

      if (root.hydrate) {
        root.hydrate = false;
        clearContainer(root.containerInfo);
      } // If something threw an error, try rendering one more time. We'll render
      // synchronously to block concurrent data mutations, and we'll includes
      // all pending updates are included. If it still fails after the second
      // attempt, we'll give up and commit the resulting tree.


      lanes = getLanesToRetrySynchronouslyOnError(root);

      if (lanes !== NoLanes) {
        exitStatus = renderRootSync(root, lanes);
      }
    }

    if (exitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      prepareFreshStack(root, NoLanes);
      markRootSuspended$1(root, lanes);
      ensureRootIsScheduled(root, now());
      throw fatalError;
    } // We now have a consistent tree. Because this is a sync render, we
    // will commit it even if something suspended.


    var finishedWork = root.current.alternate;
    root.finishedWork = finishedWork;
    root.finishedLanes = lanes;
    commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
    // pending level.

    ensureRootIsScheduled(root, now());
    return null;
  }
  function flushDiscreteUpdates() {
    // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
    // However, `act` uses `batchedUpdates`, so there's no way to distinguish
    // those two cases. Need to fix this before exposing flushDiscreteUpdates
    // as a public API.
    if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
      {
        if ((executionContext & RenderContext) !== NoContext) {
          error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
        }
      } // We're already rendering, so we can't synchronously flush pending work.
      // This is probably a nested event dispatch triggered by a lifecycle/effect,
      // like `el.focus()`. Exit.


      return;
    }

    flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
    // they fire before the next serial event.

    flushPassiveEffects();
  }

  function flushPendingDiscreteUpdates() {
    if (rootsWithPendingDiscreteUpdates !== null) {
      // For each root with pending discrete updates, schedule a callback to
      // immediately flush them.
      var roots = rootsWithPendingDiscreteUpdates;
      rootsWithPendingDiscreteUpdates = null;
      roots.forEach(function (root) {
        markDiscreteUpdatesExpired(root);
        ensureRootIsScheduled(root, now());
      });
    } // Now flush the immediate queue.


    flushSyncCallbackQueue();
  }

  function batchedUpdates$1(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= BatchedContext;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext;

      if (executionContext === NoContext) {
        // Flush the immediate callbacks that were scheduled during this batch
        resetRenderTimer();
        flushSyncCallbackQueue();
      }
    }
  }
  function batchedEventUpdates$1(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext |= EventContext;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext;

      if (executionContext === NoContext) {
        // Flush the immediate callbacks that were scheduled during this batch
        resetRenderTimer();
        flushSyncCallbackQueue();
      }
    }
  }
  function discreteUpdates$1(fn, a, b, c, d) {
    var prevExecutionContext = executionContext;
    executionContext |= DiscreteEventContext;

    {
      try {
        return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
      } finally {
        executionContext = prevExecutionContext;

        if (executionContext === NoContext) {
          // Flush the immediate callbacks that were scheduled during this batch
          resetRenderTimer();
          flushSyncCallbackQueue();
        }
      }
    }
  }
  function unbatchedUpdates(fn, a) {
    var prevExecutionContext = executionContext;
    executionContext &= ~BatchedContext;
    executionContext |= LegacyUnbatchedContext;

    try {
      return fn(a);
    } finally {
      executionContext = prevExecutionContext;

      if (executionContext === NoContext) {
        // Flush the immediate callbacks that were scheduled during this batch
        resetRenderTimer();
        flushSyncCallbackQueue();
      }
    }
  }
  function flushSync(fn, a) {
    var prevExecutionContext = executionContext;

    if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
      {
        error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
      }

      return fn(a);
    }

    executionContext |= BatchedContext;

    {
      try {
        if (fn) {
          return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
        } else {
          return undefined;
        }
      } finally {
        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
        // Note that this will happen even if batchedUpdates is higher up
        // the stack.

        flushSyncCallbackQueue();
      }
    }
  }
  function pushRenderLanes(fiber, lanes) {
    push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
    subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
    workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
  }
  function popRenderLanes(fiber) {
    subtreeRenderLanes = subtreeRenderLanesCursor.current;
    pop(subtreeRenderLanesCursor, fiber);
  }

  function prepareFreshStack(root, lanes) {
    root.finishedWork = null;
    root.finishedLanes = NoLanes;
    var timeoutHandle = root.timeoutHandle;

    if (timeoutHandle !== noTimeout) {
      // The root previous suspended and scheduled a timeout to commit a fallback
      // state. Now that we have additional work, cancel the timeout.
      root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

      cancelTimeout(timeoutHandle);
    }

    if (workInProgress !== null) {
      var interruptedWork = workInProgress.return;

      while (interruptedWork !== null) {
        unwindInterruptedWork(interruptedWork);
        interruptedWork = interruptedWork.return;
      }
    }

    workInProgressRoot = root;
    workInProgress = createWorkInProgress(root.current, null);
    workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
    workInProgressRootExitStatus = RootIncomplete;
    workInProgressRootFatalError = null;
    workInProgressRootSkippedLanes = NoLanes;
    workInProgressRootUpdatedLanes = NoLanes;
    workInProgressRootPingedLanes = NoLanes;

    {
      spawnedWorkDuringRender = null;
    }

    {
      ReactStrictModeWarnings.discardPendingWarnings();
    }
  }

  function handleError(root, thrownValue) {
    do {
      var erroredWork = workInProgress;

      try {
        // Reset module-level state that was set during the render phase.
        resetContextDependencies();
        resetHooksAfterThrow();
        resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
        // separate issue. Write a regression test using string refs.

        ReactCurrentOwner$2.current = null;

        if (erroredWork === null || erroredWork.return === null) {
          // Expected to be working on a non-root fiber. This is a fatal error
          // because there's no ancestor that can handle it; the root is
          // supposed to capture all errors that weren't caught by an error
          // boundary.
          workInProgressRootExitStatus = RootFatalErrored;
          workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
          // sibling, or the parent if there are no siblings. But since the root
          // has no siblings nor a parent, we set it to null. Usually this is
          // handled by `completeUnitOfWork` or `unwindWork`, but since we're
          // intentionally not calling those, we need set it here.
          // TODO: Consider calling `unwindWork` to pop the contexts.

          workInProgress = null;
          return;
        }

        if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
          // Record the time spent rendering before an error was thrown. This
          // avoids inaccurate Profiler durations in the case of a
          // suspended render.
          stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
        }

        throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
        completeUnitOfWork(erroredWork);
      } catch (yetAnotherThrownValue) {
        // Something in the return path also threw.
        thrownValue = yetAnotherThrownValue;

        if (workInProgress === erroredWork && erroredWork !== null) {
          // If this boundary has already errored, then we had trouble processing
          // the error. Bubble it to the next boundary.
          erroredWork = erroredWork.return;
          workInProgress = erroredWork;
        } else {
          erroredWork = workInProgress;
        }

        continue;
      } // Return to the normal work loop.


      return;
    } while (true);
  }

  function pushDispatcher() {
    var prevDispatcher = ReactCurrentDispatcher$2.current;
    ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

    if (prevDispatcher === null) {
      // The React isomorphic package does not include a default dispatcher.
      // Instead the first renderer will lazily attach one, in order to give
      // nicer error messages.
      return ContextOnlyDispatcher;
    } else {
      return prevDispatcher;
    }
  }

  function popDispatcher(prevDispatcher) {
    ReactCurrentDispatcher$2.current = prevDispatcher;
  }

  function pushInteractions(root) {
    {
      var prevInteractions = tracing$1.__interactionsRef.current;
      tracing$1.__interactionsRef.current = root.memoizedInteractions;
      return prevInteractions;
    }
  }

  function popInteractions(prevInteractions) {
    {
      tracing$1.__interactionsRef.current = prevInteractions;
    }
  }

  function markCommitTimeOfFallback() {
    globalMostRecentFallbackTime = now();
  }
  function markSkippedUpdateLanes(lane) {
    workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
  }
  function renderDidSuspend() {
    if (workInProgressRootExitStatus === RootIncomplete) {
      workInProgressRootExitStatus = RootSuspended;
    }
  }
  function renderDidSuspendDelayIfPossible() {
    if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
      workInProgressRootExitStatus = RootSuspendedWithDelay;
    } // Check if there are updates that we skipped tree that might have unblocked
    // this render.


    if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
      // Mark the current render as suspended so that we switch to working on
      // the updates that were skipped. Usually we only suspend at the end of
      // the render phase.
      // TODO: We should probably always mark the root as suspended immediately
      // (inside this function), since by suspending at the end of the render
      // phase introduces a potential mistake where we suspend lanes that were
      // pinged or updated while we were rendering.
      markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
  }
  function renderDidError() {
    if (workInProgressRootExitStatus !== RootCompleted) {
      workInProgressRootExitStatus = RootErrored;
    }
  } // Called during render to determine if anything has suspended.
  // Returns false if we're not sure.

  function renderHasNotSuspendedYet() {
    // If something errored or completed, we can't really be sure,
    // so those are false.
    return workInProgressRootExitStatus === RootIncomplete;
  }

  function renderRootSync(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
      prepareFreshStack(root, lanes);
      startWorkOnPendingInteractions(root, lanes);
    }

    var prevInteractions = pushInteractions(root);

    do {
      try {
        workLoopSync();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (true);

    resetContextDependencies();

    {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
    popDispatcher(prevDispatcher);

    if (workInProgress !== null) {
      // This is a sync render, so we should have finished the whole tree.
      {
        {
          throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
        }
      }
    }


    workInProgressRoot = null;
    workInProgressRootRenderLanes = NoLanes;
    return workInProgressRootExitStatus;
  } // The work loop is an extremely hot path. Tell Closure not to inline it.

  /** @noinline */


  function workLoopSync() {
    // Already timed out, so perform work without checking if we need to yield.
    while (workInProgress !== null) {
      performUnitOfWork(workInProgress);
    }
  }

  function renderRootConcurrent(root, lanes) {
    var prevExecutionContext = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
      resetRenderTimer();
      prepareFreshStack(root, lanes);
      startWorkOnPendingInteractions(root, lanes);
    }

    var prevInteractions = pushInteractions(root);

    do {
      try {
        workLoopConcurrent();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (true);

    resetContextDependencies();

    {
      popInteractions(prevInteractions);
    }

    popDispatcher(prevDispatcher);
    executionContext = prevExecutionContext;


    if (workInProgress !== null) {

      return RootIncomplete;
    } else {


      workInProgressRoot = null;
      workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

      return workInProgressRootExitStatus;
    }
  }
  /** @noinline */


  function workLoopConcurrent() {
    // Perform work until Scheduler asks us to yield
    while (workInProgress !== null && !shouldYield()) {
      performUnitOfWork(workInProgress);
    }
  }

  function performUnitOfWork(unitOfWork) {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = unitOfWork.alternate;
    setCurrentFiber(unitOfWork);
    var next;

    if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
      startProfilerTimer(unitOfWork);
      next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
      stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
    } else {
      next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
    }

    resetCurrentFiber();
    unitOfWork.memoizedProps = unitOfWork.pendingProps;

    if (next === null) {
      // If this doesn't spawn new work, complete the current work.
      completeUnitOfWork(unitOfWork);
    } else {
      workInProgress = next;
    }

    ReactCurrentOwner$2.current = null;
  }

  function completeUnitOfWork(unitOfWork) {
    // Attempt to complete the current unit of work, then move to the next
    // sibling. If there are no more siblings, return to the parent fiber.
    var completedWork = unitOfWork;

    do {
      // The current, flushed, state of this fiber is the alternate. Ideally
      // nothing should rely on this, but relying on it here means that we don't
      // need an additional field on the work in progress.
      var current = completedWork.alternate;
      var returnFiber = completedWork.return; // Check if the work completed or if something threw.

      if ((completedWork.flags & Incomplete) === NoFlags) {
        setCurrentFiber(completedWork);
        var next = void 0;

        if ( (completedWork.mode & ProfileMode) === NoMode) {
          next = completeWork(current, completedWork, subtreeRenderLanes);
        } else {
          startProfilerTimer(completedWork);
          next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

          stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
        }

        resetCurrentFiber();

        if (next !== null) {
          // Completing this fiber spawned new work. Work on that next.
          workInProgress = next;
          return;
        }

        resetChildLanes(completedWork);

        if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
        (returnFiber.flags & Incomplete) === NoFlags) {
          // Append all the effects of the subtree and this fiber onto the effect
          // list of the parent. The completion order of the children affects the
          // side-effect order.
          if (returnFiber.firstEffect === null) {
            returnFiber.firstEffect = completedWork.firstEffect;
          }

          if (completedWork.lastEffect !== null) {
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
            }

            returnFiber.lastEffect = completedWork.lastEffect;
          } // If this fiber had side-effects, we append it AFTER the children's
          // side-effects. We can perform certain side-effects earlier if needed,
          // by doing multiple passes over the effect list. We don't want to
          // schedule our own side-effect on our own list because if end up
          // reusing children we'll schedule this effect onto itself since we're
          // at the end.


          var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
          // list. PerformedWork effect is read by React DevTools but shouldn't be
          // committed.

          if (flags > PerformedWork) {
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = completedWork;
            } else {
              returnFiber.firstEffect = completedWork;
            }

            returnFiber.lastEffect = completedWork;
          }
        }
      } else {
        // This fiber did not complete because something threw. Pop values off
        // the stack without entering the complete phase. If this is a boundary,
        // capture values if possible.
        var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.


        if (_next !== null) {
          // If completing this work spawned new work, do that next. We'll come
          // back here again.
          // Since we're restarting, remove anything that is not a host effect
          // from the effect tag.
          _next.flags &= HostEffectMask;
          workInProgress = _next;
          return;
        }

        if ( (completedWork.mode & ProfileMode) !== NoMode) {
          // Record the render duration for the fiber that errored.
          stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

          var actualDuration = completedWork.actualDuration;
          var child = completedWork.child;

          while (child !== null) {
            actualDuration += child.actualDuration;
            child = child.sibling;
          }

          completedWork.actualDuration = actualDuration;
        }

        if (returnFiber !== null) {
          // Mark the parent fiber as incomplete and clear its effect list.
          returnFiber.firstEffect = returnFiber.lastEffect = null;
          returnFiber.flags |= Incomplete;
        }
      }

      var siblingFiber = completedWork.sibling;

      if (siblingFiber !== null) {
        // If there is more work to do in this returnFiber, do that next.
        workInProgress = siblingFiber;
        return;
      } // Otherwise, return to the parent


      completedWork = returnFiber; // Update the next thing we're working on in case something throws.

      workInProgress = completedWork;
    } while (completedWork !== null); // We've reached the root.


    if (workInProgressRootExitStatus === RootIncomplete) {
      workInProgressRootExitStatus = RootCompleted;
    }
  }

  function resetChildLanes(completedWork) {
    if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`
    // to switch statement in `completeWork`.
    (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
      // The children of this component are hidden. Don't bubble their
      // expiration times.
      return;
    }

    var newChildLanes = NoLanes; // Bubble up the earliest expiration time.

    if ( (completedWork.mode & ProfileMode) !== NoMode) {
      // In profiling mode, resetChildExpirationTime is also used to reset
      // profiler durations.
      var actualDuration = completedWork.actualDuration;
      var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
      // only be updated if work is done on the fiber (i.e. it doesn't bailout).
      // When work is done, it should bubble to the parent's actualDuration. If
      // the fiber has not been cloned though, (meaning no work was done), then
      // this value will reflect the amount of time spent working on a previous
      // render. In that case it should not bubble. We determine whether it was
      // cloned by comparing the child pointer.

      var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
      var child = completedWork.child;

      while (child !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

        if (shouldBubbleActualDurations) {
          actualDuration += child.actualDuration;
        }

        treeBaseDuration += child.treeBaseDuration;
        child = child.sibling;
      }

      var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

      if (isTimedOutSuspense) {
        // Don't count time spent in a timed out Suspense subtree as part of the base duration.
        var primaryChildFragment = completedWork.child;

        if (primaryChildFragment !== null) {
          treeBaseDuration -= primaryChildFragment.treeBaseDuration;
        }
      }

      completedWork.actualDuration = actualDuration;
      completedWork.treeBaseDuration = treeBaseDuration;
    } else {
      var _child = completedWork.child;

      while (_child !== null) {
        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
        _child = _child.sibling;
      }
    }

    completedWork.childLanes = newChildLanes;
  }

  function commitRoot(root) {
    var renderPriorityLevel = getCurrentPriorityLevel();
    runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
    return null;
  }

  function commitRootImpl(root, renderPriorityLevel) {
    do {
      // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
      // means `flushPassiveEffects` will sometimes result in additional
      // passive effects. So we need to keep flushing in a loop until there are
      // no more pending effects.
      // TODO: Might be better if `flushPassiveEffects` did not automatically
      // flush synchronous work at the end, to avoid factoring hazards like this.
      flushPassiveEffects();
    } while (rootWithPendingPassiveEffects !== null);

    flushRenderPhaseStrictModeWarningsInDEV();

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error( "Should not already be working." );
      }
    }

    var finishedWork = root.finishedWork;
    var lanes = root.finishedLanes;

    if (finishedWork === null) {

      return null;
    }

    root.finishedWork = null;
    root.finishedLanes = NoLanes;

    if (!(finishedWork !== root.current)) {
      {
        throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
      }
    } // commitRoot never returns a continuation; it always finishes synchronously.
    // So we can clear these now to allow a new callback to be scheduled.


    root.callbackNode = null; // Update the first and last pending times on this root. The new first
    // pending time is whatever is left on the root fiber.

    var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
    markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
    // `flushDiscreteUpdates` starts a useless render pass which may cancels
    // a scheduled timeout.

    if (rootsWithPendingDiscreteUpdates !== null) {
      if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
        rootsWithPendingDiscreteUpdates.delete(root);
      }
    }

    if (root === workInProgressRoot) {
      // We can reset these now that they are finished.
      workInProgressRoot = null;
      workInProgress = null;
      workInProgressRootRenderLanes = NoLanes;
    } // Get the list of effects.


    var firstEffect;

    if (finishedWork.flags > PerformedWork) {
      // A fiber's effect list consists only of its children, not itself. So if
      // the root has an effect, we need to add it to the end of the list. The
      // resulting list is the set that would belong to the root's parent, if it
      // had one; that is, all the effects in the tree including the root.
      if (finishedWork.lastEffect !== null) {
        finishedWork.lastEffect.nextEffect = finishedWork;
        firstEffect = finishedWork.firstEffect;
      } else {
        firstEffect = finishedWork;
      }
    } else {
      // There is no effect on the root.
      firstEffect = finishedWork.firstEffect;
    }

    if (firstEffect !== null) {

      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

      ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
      // of the effect list for each phase: all mutation effects come before all
      // layout effects, and so on.
      // The first phase a "before mutation" phase. We use this phase to read the
      // state of the host tree right before we mutate it. This is where
      // getSnapshotBeforeUpdate is called.

      focusedInstanceHandle = prepareForCommit(root.containerInfo);
      shouldFireAfterActiveInstanceBlur = false;
      nextEffect = firstEffect;

      do {
        {
          invokeGuardedCallback(null, commitBeforeMutationEffects, null);

          if (hasCaughtError()) {
            if (!(nextEffect !== null)) {
              {
                throw Error( "Should be working on an effect." );
              }
            }

            var error = clearCaughtError();
            captureCommitPhaseError(nextEffect, error);
            nextEffect = nextEffect.nextEffect;
          }
        }
      } while (nextEffect !== null); // We no longer need to track the active instance fiber


      focusedInstanceHandle = null;

      {
        // Mark the current commit time to be shared by all Profilers in this
        // batch. This enables them to be grouped later.
        recordCommitTime();
      } // The next phase is the mutation phase, where we mutate the host tree.


      nextEffect = firstEffect;

      do {
        {
          invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

          if (hasCaughtError()) {
            if (!(nextEffect !== null)) {
              {
                throw Error( "Should be working on an effect." );
              }
            }

            var _error = clearCaughtError();

            captureCommitPhaseError(nextEffect, _error);
            nextEffect = nextEffect.nextEffect;
          }
        }
      } while (nextEffect !== null);

      resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
      // the mutation phase, so that the previous tree is still current during
      // componentWillUnmount, but before the layout phase, so that the finished
      // work is current during componentDidMount/Update.

      root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
      // the host tree after it's been mutated. The idiomatic use case for this is
      // layout, but class component lifecycles also fire here for legacy reasons.

      nextEffect = firstEffect;

      do {
        {
          invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

          if (hasCaughtError()) {
            if (!(nextEffect !== null)) {
              {
                throw Error( "Should be working on an effect." );
              }
            }

            var _error2 = clearCaughtError();

            captureCommitPhaseError(nextEffect, _error2);
            nextEffect = nextEffect.nextEffect;
          }
        }
      } while (nextEffect !== null);

      nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
      // opportunity to paint.

      requestPaint();

      {
        popInteractions(prevInteractions);
      }

      executionContext = prevExecutionContext;
    } else {
      // No effects.
      root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
      // no effects.
      // TODO: Maybe there's a better way to report this.

      {
        recordCommitTime();
      }
    }

    var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

    if (rootDoesHavePassiveEffects) {
      // This commit has passive effects. Stash a reference to them. But don't
      // schedule a callback until after flushing layout work.
      rootDoesHavePassiveEffects = false;
      rootWithPendingPassiveEffects = root;
      pendingPassiveEffectsLanes = lanes;
      pendingPassiveEffectsRenderPriority = renderPriorityLevel;
    } else {
      // We are done with the effect chain at this point so let's clear the
      // nextEffect pointers to assist with GC. If we have passive effects, we'll
      // clear this in flushPassiveEffects.
      nextEffect = firstEffect;

      while (nextEffect !== null) {
        var nextNextEffect = nextEffect.nextEffect;
        nextEffect.nextEffect = null;

        if (nextEffect.flags & Deletion) {
          detachFiberAfterEffects(nextEffect);
        }

        nextEffect = nextNextEffect;
      }
    } // Read this again, since an effect might have updated it


    remainingLanes = root.pendingLanes; // Check if there's remaining work on this root

    if (remainingLanes !== NoLanes) {
      {
        if (spawnedWorkDuringRender !== null) {
          var expirationTimes = spawnedWorkDuringRender;
          spawnedWorkDuringRender = null;

          for (var i = 0; i < expirationTimes.length; i++) {
            scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
          }
        }

        schedulePendingInteractions(root, remainingLanes);
      }
    } else {
      // If there's no remaining work, we can clear the set of already failed
      // error boundaries.
      legacyErrorBoundariesThatAlreadyFailed = null;
    }

    {
      if (!rootDidHavePassiveEffects) {
        // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root, lanes);
      }
    }

    if (remainingLanes === SyncLane) {
      // Count the number of times the root synchronously re-renders without
      // finishing. If there are too many, it indicates an infinite update loop.
      if (root === rootWithNestedUpdates) {
        nestedUpdateCount++;
      } else {
        nestedUpdateCount = 0;
        rootWithNestedUpdates = root;
      }
    } else {
      nestedUpdateCount = 0;
    }

    onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

    {
      onCommitRoot$1();
    } // Always call this before exiting `commitRoot`, to ensure that any
    // additional work on this root is scheduled.


    ensureRootIsScheduled(root, now());

    if (hasUncaughtError) {
      hasUncaughtError = false;
      var _error3 = firstUncaughtError;
      firstUncaughtError = null;
      throw _error3;
    }

    if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
      // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
      // synchronously, but layout updates should be deferred until the end
      // of the batch.


      return null;
    } // If layout work was scheduled, flush it now.


    flushSyncCallbackQueue();

    return null;
  }

  function commitBeforeMutationEffects() {
    while (nextEffect !== null) {
      var current = nextEffect.alternate;

      if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
        if ((nextEffect.flags & Deletion) !== NoFlags) {
          if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
            shouldFireAfterActiveInstanceBlur = true;
          }
        } else {
          // TODO: Move this out of the hot path using a dedicated effect tag.
          if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
            shouldFireAfterActiveInstanceBlur = true;
          }
        }
      }

      var flags = nextEffect.flags;

      if ((flags & Snapshot) !== NoFlags) {
        setCurrentFiber(nextEffect);
        commitBeforeMutationLifeCycles(current, nextEffect);
        resetCurrentFiber();
      }

      if ((flags & Passive) !== NoFlags) {
        // If there are passive effects, schedule a callback to flush at
        // the earliest opportunity.
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback(NormalPriority$1, function () {
            flushPassiveEffects();
            return null;
          });
        }
      }

      nextEffect = nextEffect.nextEffect;
    }
  }

  function commitMutationEffects(root, renderPriorityLevel) {
    // TODO: Should probably move the bulk of this function to commitWork.
    while (nextEffect !== null) {
      setCurrentFiber(nextEffect);
      var flags = nextEffect.flags;

      if (flags & ContentReset) {
        commitResetTextContent(nextEffect);
      }

      if (flags & Ref) {
        var current = nextEffect.alternate;

        if (current !== null) {
          commitDetachRef(current);
        }
      } // The following switch statement is only concerned about placement,
      // updates, and deletions. To avoid needing to add a case for every possible
      // bitmap value, we remove the secondary effects from the effect tag and
      // switch on that value.


      var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

      switch (primaryFlags) {
        case Placement:
          {
            commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
            // inserted, before any life-cycles like componentDidMount gets called.
            // TODO: findDOMNode doesn't rely on this any more but isMounted does
            // and isMounted is deprecated anyway so we should be able to kill this.

            nextEffect.flags &= ~Placement;
            break;
          }

        case PlacementAndUpdate:
          {
            // Placement
            commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
            // inserted, before any life-cycles like componentDidMount gets called.

            nextEffect.flags &= ~Placement; // Update

            var _current = nextEffect.alternate;
            commitWork(_current, nextEffect);
            break;
          }

        case Hydrating:
          {
            nextEffect.flags &= ~Hydrating;
            break;
          }

        case HydratingAndUpdate:
          {
            nextEffect.flags &= ~Hydrating; // Update

            var _current2 = nextEffect.alternate;
            commitWork(_current2, nextEffect);
            break;
          }

        case Update:
          {
            var _current3 = nextEffect.alternate;
            commitWork(_current3, nextEffect);
            break;
          }

        case Deletion:
          {
            commitDeletion(root, nextEffect);
            break;
          }
      }

      resetCurrentFiber();
      nextEffect = nextEffect.nextEffect;
    }
  }

  function commitLayoutEffects(root, committedLanes) {


    while (nextEffect !== null) {
      setCurrentFiber(nextEffect);
      var flags = nextEffect.flags;

      if (flags & (Update | Callback)) {
        var current = nextEffect.alternate;
        commitLifeCycles(root, current, nextEffect);
      }

      {
        if (flags & Ref) {
          commitAttachRef(nextEffect);
        }
      }

      resetCurrentFiber();
      nextEffect = nextEffect.nextEffect;
    }
  }

  function flushPassiveEffects() {
    // Returns whether passive effects were flushed.
    if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
      var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
      pendingPassiveEffectsRenderPriority = NoPriority$1;

      {
        return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
      }
    }

    return false;
  }
  function enqueuePendingPassiveHookEffectMount(fiber, effect) {
    pendingPassiveHookEffectsMount.push(effect, fiber);

    if (!rootDoesHavePassiveEffects) {
      rootDoesHavePassiveEffects = true;
      scheduleCallback(NormalPriority$1, function () {
        flushPassiveEffects();
        return null;
      });
    }
  }
  function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
    pendingPassiveHookEffectsUnmount.push(effect, fiber);

    {
      fiber.flags |= PassiveUnmountPendingDev;
      var alternate = fiber.alternate;

      if (alternate !== null) {
        alternate.flags |= PassiveUnmountPendingDev;
      }
    }

    if (!rootDoesHavePassiveEffects) {
      rootDoesHavePassiveEffects = true;
      scheduleCallback(NormalPriority$1, function () {
        flushPassiveEffects();
        return null;
      });
    }
  }

  function invokePassiveEffectCreate(effect) {
    var create = effect.create;
    effect.destroy = create();
  }

  function flushPassiveEffectsImpl() {
    if (rootWithPendingPassiveEffects === null) {
      return false;
    }

    var root = rootWithPendingPassiveEffects;
    var lanes = pendingPassiveEffectsLanes;
    rootWithPendingPassiveEffects = null;
    pendingPassiveEffectsLanes = NoLanes;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error( "Cannot flush passive effects while already rendering." );
      }
    }

    {
      isFlushingPassiveEffects = true;
    }

    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
    // before ANY passive effect create functions are called.
    // Otherwise effects in sibling components might interfere with each other.
    // e.g. a destroy function in one component may unintentionally override a ref
    // value set by a create function in another component.
    // Layout effects have the same constraint.
    // First pass: Destroy stale passive effects.

    var unmountEffects = pendingPassiveHookEffectsUnmount;
    pendingPassiveHookEffectsUnmount = [];

    for (var i = 0; i < unmountEffects.length; i += 2) {
      var _effect = unmountEffects[i];
      var fiber = unmountEffects[i + 1];
      var destroy = _effect.destroy;
      _effect.destroy = undefined;

      {
        fiber.flags &= ~PassiveUnmountPendingDev;
        var alternate = fiber.alternate;

        if (alternate !== null) {
          alternate.flags &= ~PassiveUnmountPendingDev;
        }
      }

      if (typeof destroy === 'function') {
        {
          setCurrentFiber(fiber);

          {
            invokeGuardedCallback(null, destroy, null);
          }

          if (hasCaughtError()) {
            if (!(fiber !== null)) {
              {
                throw Error( "Should be working on an effect." );
              }
            }

            var error = clearCaughtError();
            captureCommitPhaseError(fiber, error);
          }

          resetCurrentFiber();
        }
      }
    } // Second pass: Create new passive effects.


    var mountEffects = pendingPassiveHookEffectsMount;
    pendingPassiveHookEffectsMount = [];

    for (var _i = 0; _i < mountEffects.length; _i += 2) {
      var _effect2 = mountEffects[_i];
      var _fiber = mountEffects[_i + 1];

      {
        setCurrentFiber(_fiber);

        {
          invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
        }

        if (hasCaughtError()) {
          if (!(_fiber !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error4 = clearCaughtError();

          captureCommitPhaseError(_fiber, _error4);
        }

        resetCurrentFiber();
      }
    } // Note: This currently assumes there are no passive effects on the root fiber
    // because the root is not part of its own effect list.
    // This could change in the future.


    var effect = root.current.firstEffect;

    while (effect !== null) {
      var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

      effect.nextEffect = null;

      if (effect.flags & Deletion) {
        detachFiberAfterEffects(effect);
      }

      effect = nextNextEffect;
    }

    {
      popInteractions(prevInteractions);
      finishPendingInteractions(root, lanes);
    }

    {
      isFlushingPassiveEffects = false;
    }

    executionContext = prevExecutionContext;
    flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
    // exceeds the limit, we'll fire a warning.

    nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
    return true;
  }

  function isAlreadyFailedLegacyErrorBoundary(instance) {
    return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
  }
  function markLegacyErrorBoundaryAsFailed(instance) {
    if (legacyErrorBoundariesThatAlreadyFailed === null) {
      legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
    } else {
      legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
  }

  function prepareToThrowUncaughtError(error) {
    if (!hasUncaughtError) {
      hasUncaughtError = true;
      firstUncaughtError = error;
    }
  }

  var onUncaughtError = prepareToThrowUncaughtError;

  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
    var errorInfo = createCapturedValue(error, sourceFiber);
    var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
    enqueueUpdate(rootFiber, update);
    var eventTime = requestEventTime();
    var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

    if (root !== null) {
      markRootUpdated(root, SyncLane, eventTime);
      ensureRootIsScheduled(root, eventTime);
      schedulePendingInteractions(root, SyncLane);
    }
  }

  function captureCommitPhaseError(sourceFiber, error) {
    if (sourceFiber.tag === HostRoot) {
      // Error was thrown at the root. There is no parent, so the root
      // itself should capture it.
      captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
      return;
    }

    var fiber = sourceFiber.return;

    while (fiber !== null) {
      if (fiber.tag === HostRoot) {
        captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
        return;
      } else if (fiber.tag === ClassComponent) {
        var ctor = fiber.type;
        var instance = fiber.stateNode;

        if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
          var errorInfo = createCapturedValue(error, sourceFiber);
          var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
          enqueueUpdate(fiber, update);
          var eventTime = requestEventTime();
          var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

          if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
            schedulePendingInteractions(root, SyncLane);
          } else {
            // This component has already been unmounted.
            // We can't schedule any follow up work for the root because the fiber is already unmounted,
            // but we can still call the log-only boundary so the error isn't swallowed.
            //
            // TODO This is only a temporary bandaid for the old reconciler fork.
            // We can delete this special case once the new fork is merged.
            if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              try {
                instance.componentDidCatch(error, errorInfo);
              } catch (errorToIgnore) {// TODO Ignore this error? Rethrow it?
                // This is kind of an edge case.
              }
            }
          }

          return;
        }
      }

      fiber = fiber.return;
    }
  }
  function pingSuspendedRoot(root, wakeable, pingedLanes) {
    var pingCache = root.pingCache;

    if (pingCache !== null) {
      // The wakeable resolved, so we no longer need to memoize, because it will
      // never be thrown again.
      pingCache.delete(wakeable);
    }

    var eventTime = requestEventTime();
    markRootPinged(root, pingedLanes);

    if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
      // Received a ping at the same priority level at which we're currently
      // rendering. We might want to restart this render. This should mirror
      // the logic of whether or not a root suspends once it completes.
      // TODO: If we're rendering sync either due to Sync, Batched or expired,
      // we should probably never restart.
      // If we're suspended with delay, or if it's a retry, we'll always suspend
      // so we can always restart.
      if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
        // Restart from the root.
        prepareFreshStack(root, NoLanes);
      } else {
        // Even though we can't restart right now, we might get an
        // opportunity later. So we mark this render as having a ping.
        workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
      }
    }

    ensureRootIsScheduled(root, eventTime);
    schedulePendingInteractions(root, pingedLanes);
  }

  function retryTimedOutBoundary(boundaryFiber, retryLane) {
    // The boundary fiber (a Suspense component or SuspenseList component)
    // previously was rendered in its fallback state. One of the promises that
    // suspended it has resolved, which means at least part of the tree was
    // likely unblocked. Try rendering again, at a new expiration time.
    if (retryLane === NoLane) {
      retryLane = requestRetryLane(boundaryFiber);
    } // TODO: Special case idle priority?


    var eventTime = requestEventTime();
    var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

    if (root !== null) {
      markRootUpdated(root, retryLane, eventTime);
      ensureRootIsScheduled(root, eventTime);
      schedulePendingInteractions(root, retryLane);
    }
  }
  function resolveRetryWakeable(boundaryFiber, wakeable) {
    var retryLane = NoLane; // Default

    var retryCache;

    {
      retryCache = boundaryFiber.stateNode;
    }

    if (retryCache !== null) {
      // The wakeable resolved, so we no longer need to memoize, because it will
      // never be thrown again.
      retryCache.delete(wakeable);
    }

    retryTimedOutBoundary(boundaryFiber, retryLane);
  } // Computes the next Just Noticeable Difference (JND) boundary.
  // The theory is that a person can't tell the difference between small differences in time.
  // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
  // difference in the experience. However, waiting for longer might mean that we can avoid
  // showing an intermediate loading state. The longer we have already waited, the harder it
  // is to tell small differences in time. Therefore, the longer we've already waited,
  // the longer we can wait additionally. At some point we have to give up though.
  // We pick a train model where the next boundary commits at a consistent schedule.
  // These particular numbers are vague estimates. We expect to adjust them based on research.

  function jnd(timeElapsed) {
    return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
  }

  function checkForNestedUpdates() {
    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = null;

      {
        {
          throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
        }
      }
    }

    {
      if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
        nestedPassiveUpdateCount = 0;

        error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
      }
    }
  }

  function flushRenderPhaseStrictModeWarningsInDEV() {
    {
      ReactStrictModeWarnings.flushLegacyContextWarning();

      {
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
      }
    }
  }

  var didWarnStateUpdateForNotYetMountedComponent = null;

  function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
    {
      if ((executionContext & RenderContext) !== NoContext) {
        // We let the other warning about render phase updates deal with this one.
        return;
      }

      if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
        return;
      }

      var tag = fiber.tag;

      if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
        // Only warn for user-defined components, not internal ones like Suspense.
        return;
      } // We show the whole stack but dedupe on the top component's name because
      // the problematic code almost always lies inside that component.


      var componentName = getComponentName(fiber.type) || 'ReactComponent';

      if (didWarnStateUpdateForNotYetMountedComponent !== null) {
        if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
          return;
        }

        didWarnStateUpdateForNotYetMountedComponent.add(componentName);
      } else {
        didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
      }

      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }

  var didWarnStateUpdateForUnmountedComponent = null;

  function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
    {
      var tag = fiber.tag;

      if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
        // Only warn for user-defined components, not internal ones like Suspense.
        return;
      } // If there are pending passive effects unmounts for this Fiber,
      // we can assume that they would have prevented this update.


      if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
        return;
      } // We show the whole stack but dedupe on the top component's name because
      // the problematic code almost always lies inside that component.


      var componentName = getComponentName(fiber.type) || 'ReactComponent';

      if (didWarnStateUpdateForUnmountedComponent !== null) {
        if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
          return;
        }

        didWarnStateUpdateForUnmountedComponent.add(componentName);
      } else {
        didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
      }

      if (isFlushingPassiveEffects) ; else {
        var previousFiber = current;

        try {
          setCurrentFiber(fiber);

          error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
        } finally {
          if (previousFiber) {
            setCurrentFiber(fiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }
  }

  var beginWork$1;

  {
    var dummyFiber = null;

    beginWork$1 = function (current, unitOfWork, lanes) {
      // If a component throws an error, we replay it again in a synchronously
      // dispatched event, so that the debugger will treat it as an uncaught
      // error See ReactErrorUtils for more information.
      // Before entering the begin phase, copy the work-in-progress onto a dummy
      // fiber. If beginWork throws, we'll use this to reset the state.
      var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

      try {
        return beginWork(current, unitOfWork, lanes);
      } catch (originalError) {
        if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
          // Don't replay promises. Treat everything else like an error.
          throw originalError;
        } // Keep this code in sync with handleError; any changes here must have
        // corresponding changes there.


        resetContextDependencies();
        resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
        // same fiber again.
        // Unwind the failed stack frame

        unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

        assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

        if ( unitOfWork.mode & ProfileMode) {
          // Reset the profiler timer.
          startProfilerTimer(unitOfWork);
        } // Run beginWork again.


        invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

        if (hasCaughtError()) {
          var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
          // Rethrow this error instead of the original one.

          throw replayError;
        } else {
          // This branch is reachable if the render phase is impure.
          throw originalError;
        }
      }
    };
  }

  var didWarnAboutUpdateInRender = false;
  var didWarnAboutUpdateInRenderForAnotherComponent;

  {
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
  }

  function warnAboutRenderPhaseUpdatesInDEV(fiber) {
    {
      if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
            {
              var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

              var dedupeKey = renderingComponentName;

              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

                error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
              }

              break;
            }

          case ClassComponent:
            {
              if (!didWarnAboutUpdateInRender) {
                error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

                didWarnAboutUpdateInRender = true;
              }

              break;
            }
        }
      }
    }
  } // a 'shared' variable that changes when act() opens/closes in tests.


  var IsThisRendererActing = {
    current: false
  };
  function warnIfNotScopedWithMatchingAct(fiber) {
    {
      if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
        var previousFiber = current;

        try {
          setCurrentFiber(fiber);

          error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
          'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
          'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
        } finally {
          if (previousFiber) {
            setCurrentFiber(fiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }
  }
  function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
    {
      if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
        error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
      }
    }
  }

  function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
    {
      if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
        var previousFiber = current;

        try {
          setCurrentFiber(fiber);

          error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
        } finally {
          if (previousFiber) {
            setCurrentFiber(fiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }
  }

  var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

  var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
  // scheduler is the actual recommendation. The alternative could be a testing build,
  // a new lib, or whatever; we dunno just yet. This message is for early adopters
  // to get their tests right.

  function warnIfUnmockedScheduler(fiber) {
    {
      if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
        if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
          didWarnAboutUnmockedScheduler = true;

          error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
          "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
        }
      }
    }
  }

  function computeThreadID(root, lane) {
    // Interaction threads are unique per root and expiration time.
    // NOTE: Intentionally unsound cast. All that matters is that it's a number
    // and it represents a batch of work. Could make a helper function instead,
    // but meh this is fine for now.
    return lane * 1000 + root.interactionThreadID;
  }

  function markSpawnedWork(lane) {

    if (spawnedWorkDuringRender === null) {
      spawnedWorkDuringRender = [lane];
    } else {
      spawnedWorkDuringRender.push(lane);
    }
  }

  function scheduleInteractions(root, lane, interactions) {

    if (interactions.size > 0) {
      var pendingInteractionMap = root.pendingInteractionMap;
      var pendingInteractions = pendingInteractionMap.get(lane);

      if (pendingInteractions != null) {
        interactions.forEach(function (interaction) {
          if (!pendingInteractions.has(interaction)) {
            // Update the pending async work count for previously unscheduled interaction.
            interaction.__count++;
          }

          pendingInteractions.add(interaction);
        });
      } else {
        pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.

        interactions.forEach(function (interaction) {
          interaction.__count++;
        });
      }

      var subscriber = tracing$1.__subscriberRef.current;

      if (subscriber !== null) {
        var threadID = computeThreadID(root, lane);
        subscriber.onWorkScheduled(interactions, threadID);
      }
    }
  }

  function schedulePendingInteractions(root, lane) {

    scheduleInteractions(root, lane, tracing$1.__interactionsRef.current);
  }

  function startWorkOnPendingInteractions(root, lanes) {
    // we can accurately attribute time spent working on it, And so that cascading
    // work triggered during the render phase will be associated with it.


    var interactions = new Set();
    root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
      if (includesSomeLane(lanes, scheduledLane)) {
        scheduledInteractions.forEach(function (interaction) {
          return interactions.add(interaction);
        });
      }
    }); // Store the current set of interactions on the FiberRoot for a few reasons:
    // We can re-use it in hot functions like performConcurrentWorkOnRoot()
    // without having to recalculate it. We will also use it in commitWork() to
    // pass to any Profiler onRender() hooks. This also provides DevTools with a
    // way to access it when the onCommitRoot() hook is called.

    root.memoizedInteractions = interactions;

    if (interactions.size > 0) {
      var subscriber = tracing$1.__subscriberRef.current;

      if (subscriber !== null) {
        var threadID = computeThreadID(root, lanes);

        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          // If the subscriber throws, rethrow it in a separate task
          scheduleCallback(ImmediatePriority$1, function () {
            throw error;
          });
        }
      }
    }
  }

  function finishPendingInteractions(root, committedLanes) {

    var remainingLanesAfterCommit = root.pendingLanes;
    var subscriber;

    try {
      subscriber = tracing$1.__subscriberRef.current;

      if (subscriber !== null && root.memoizedInteractions.size > 0) {
        // FIXME: More than one lane can finish in a single commit.
        var threadID = computeThreadID(root, committedLanes);
        subscriber.onWorkStopped(root.memoizedInteractions, threadID);
      }
    } catch (error) {
      // If the subscriber throws, rethrow it in a separate task
      scheduleCallback(ImmediatePriority$1, function () {
        throw error;
      });
    } finally {
      // Clear completed interactions from the pending Map.
      // Unless the render was suspended or cascading work was scheduled,
      // In which case– leave pending interactions until the subsequent render.
      var pendingInteractionMap = root.pendingInteractionMap;
      pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
        // Only decrement the pending interaction count if we're done.
        // If there's still work at the current priority,
        // That indicates that we are waiting for suspense data.
        if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
          pendingInteractionMap.delete(lane);
          scheduledInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber !== null && interaction.__count === 0) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                // If the subscriber throws, rethrow it in a separate task
                scheduleCallback(ImmediatePriority$1, function () {
                  throw error;
                });
              }
            }
          });
        }
      });
    }
  } // `act` testing API

  function shouldForceFlushFallbacksInDEV() {
    // Never force flush in production. This function should get stripped out.
    return  actingUpdatesScopeDepth > 0;
  }
  // so we can tell if any async act() calls try to run in parallel.


  var actingUpdatesScopeDepth = 0;

  function detachFiberAfterEffects(fiber) {
    fiber.sibling = null;
    fiber.stateNode = null;
  }

  var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

  var failedBoundaries = null;
  var setRefreshHandler = function (handler) {
    {
      resolveFamily = handler;
    }
  };
  function resolveFunctionForHotReloading(type) {
    {
      if (resolveFamily === null) {
        // Hot reloading is disabled.
        return type;
      }

      var family = resolveFamily(type);

      if (family === undefined) {
        return type;
      } // Use the latest known implementation.


      return family.current;
    }
  }
  function resolveClassForHotReloading(type) {
    // No implementation differences.
    return resolveFunctionForHotReloading(type);
  }
  function resolveForwardRefForHotReloading(type) {
    {
      if (resolveFamily === null) {
        // Hot reloading is disabled.
        return type;
      }

      var family = resolveFamily(type);

      if (family === undefined) {
        // Check if we're dealing with a real forwardRef. Don't want to crash early.
        if (type !== null && type !== undefined && typeof type.render === 'function') {
          // ForwardRef is special because its resolved .type is an object,
          // but it's possible that we only have its inner render function in the map.
          // If that inner render function is different, we'll build a new forwardRef type.
          var currentRender = resolveFunctionForHotReloading(type.render);

          if (type.render !== currentRender) {
            var syntheticType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: currentRender
            };

            if (type.displayName !== undefined) {
              syntheticType.displayName = type.displayName;
            }

            return syntheticType;
          }
        }

        return type;
      } // Use the latest known implementation.


      return family.current;
    }
  }
  function isCompatibleFamilyForHotReloading(fiber, element) {
    {
      if (resolveFamily === null) {
        // Hot reloading is disabled.
        return false;
      }

      var prevType = fiber.elementType;
      var nextType = element.type; // If we got here, we know types aren't === equal.

      var needsCompareFamilies = false;
      var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

      switch (fiber.tag) {
        case ClassComponent:
          {
            if (typeof nextType === 'function') {
              needsCompareFamilies = true;
            }

            break;
          }

        case FunctionComponent:
          {
            if (typeof nextType === 'function') {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              // We don't know the inner type yet.
              // We're going to assume that the lazy inner type is stable,
              // and so it is sufficient to avoid reconciling it away.
              // We're not going to unwrap or actually use the new lazy type.
              needsCompareFamilies = true;
            }

            break;
          }

        case ForwardRef:
          {
            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }

            break;
          }

        case MemoComponent:
        case SimpleMemoComponent:
          {
            if ($$typeofNextType === REACT_MEMO_TYPE) {
              // TODO: if it was but can no longer be simple,
              // we shouldn't set this.
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }

            break;
          }

        default:
          return false;
      } // Check if both types have a family and it's the same one.


      if (needsCompareFamilies) {
        // Note: memo() and forwardRef() we'll compare outer rather than inner type.
        // This means both of them need to be registered to preserve state.
        // If we unwrapped and compared the inner types for wrappers instead,
        // then we would risk falsely saying two separate memo(Foo)
        // calls are equivalent because they wrap the same Foo function.
        var prevFamily = resolveFamily(prevType);

        if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
          return true;
        }
      }

      return false;
    }
  }
  function markFailedErrorBoundaryForHotReloading(fiber) {
    {
      if (resolveFamily === null) {
        // Hot reloading is disabled.
        return;
      }

      if (typeof WeakSet !== 'function') {
        return;
      }

      if (failedBoundaries === null) {
        failedBoundaries = new WeakSet();
      }

      failedBoundaries.add(fiber);
    }
  }
  var scheduleRefresh = function (root, update) {
    {
      if (resolveFamily === null) {
        // Hot reloading is disabled.
        return;
      }

      var staleFamilies = update.staleFamilies,
          updatedFamilies = update.updatedFamilies;
      flushPassiveEffects();
      flushSync(function () {
        scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
      });
    }
  };
  var scheduleRoot = function (root, element) {
    {
      if (root.context !== emptyContextObject) {
        // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
      }

      flushPassiveEffects();
      flushSync(function () {
        updateContainer(element, root, null, null);
      });
    }
  };

  function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
    {
      var alternate = fiber.alternate,
          child = fiber.child,
          sibling = fiber.sibling,
          tag = fiber.tag,
          type = fiber.type;
      var candidateType = null;

      switch (tag) {
        case FunctionComponent:
        case SimpleMemoComponent:
        case ClassComponent:
          candidateType = type;
          break;

        case ForwardRef:
          candidateType = type.render;
          break;
      }

      if (resolveFamily === null) {
        throw new Error('Expected resolveFamily to be set during hot reload.');
      }

      var needsRender = false;
      var needsRemount = false;

      if (candidateType !== null) {
        var family = resolveFamily(candidateType);

        if (family !== undefined) {
          if (staleFamilies.has(family)) {
            needsRemount = true;
          } else if (updatedFamilies.has(family)) {
            if (tag === ClassComponent) {
              needsRemount = true;
            } else {
              needsRender = true;
            }
          }
        }
      }

      if (failedBoundaries !== null) {
        if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
          needsRemount = true;
        }
      }

      if (needsRemount) {
        fiber._debugNeedsRemount = true;
      }

      if (needsRemount || needsRender) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      }

      if (child !== null && !needsRemount) {
        scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
      }

      if (sibling !== null) {
        scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
      }
    }
  }

  var findHostInstancesForRefresh = function (root, families) {
    {
      var hostInstances = new Set();
      var types = new Set(families.map(function (family) {
        return family.current;
      }));
      findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
      return hostInstances;
    }
  };

  function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
    {
      var child = fiber.child,
          sibling = fiber.sibling,
          tag = fiber.tag,
          type = fiber.type;
      var candidateType = null;

      switch (tag) {
        case FunctionComponent:
        case SimpleMemoComponent:
        case ClassComponent:
          candidateType = type;
          break;

        case ForwardRef:
          candidateType = type.render;
          break;
      }

      var didMatch = false;

      if (candidateType !== null) {
        if (types.has(candidateType)) {
          didMatch = true;
        }
      }

      if (didMatch) {
        // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
      } else {
        // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) {
          findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        }
      }

      if (sibling !== null) {
        findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
      }
    }
  }

  function findHostInstancesForFiberShallowly(fiber, hostInstances) {
    {
      var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

      if (foundHostInstances) {
        return;
      } // If we didn't find any host children, fallback to closest host parent.


      var node = fiber;

      while (true) {
        switch (node.tag) {
          case HostComponent:
            hostInstances.add(node.stateNode);
            return;

          case HostPortal:
            hostInstances.add(node.stateNode.containerInfo);
            return;

          case HostRoot:
            hostInstances.add(node.stateNode.containerInfo);
            return;
        }

        if (node.return === null) {
          throw new Error('Expected to reach root first.');
        }

        node = node.return;
      }
    }
  }

  function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
    {
      var node = fiber;
      var foundHostInstances = false;

      while (true) {
        if (node.tag === HostComponent) {
          // We got a match.
          foundHostInstances = true;
          hostInstances.add(node.stateNode); // There may still be more, so keep searching.
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === fiber) {
          return foundHostInstances;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === fiber) {
            return foundHostInstances;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    return false;
  }

  var hasBadMapPolyfill;

  {
    hasBadMapPolyfill = false;

    try {
      var nonExtensibleObject = Object.preventExtensions({});
      /* eslint-disable no-new */

      new Map([[nonExtensibleObject, null]]);
      new Set([nonExtensibleObject]);
      /* eslint-enable no-new */
    } catch (e) {
      // TODO: Consider warning about bad polyfills
      hasBadMapPolyfill = true;
    }
  }

  var debugCounter = 1;

  function FiberNode(tag, pendingProps, key, mode) {
    // Instance
    this.tag = tag;
    this.key = key;
    this.elementType = null;
    this.type = null;
    this.stateNode = null; // Fiber

    this.return = null;
    this.child = null;
    this.sibling = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = pendingProps;
    this.memoizedProps = null;
    this.updateQueue = null;
    this.memoizedState = null;
    this.dependencies = null;
    this.mode = mode; // Effects

    this.flags = NoFlags;
    this.nextEffect = null;
    this.firstEffect = null;
    this.lastEffect = null;
    this.lanes = NoLanes;
    this.childLanes = NoLanes;
    this.alternate = null;

    {
      // Note: The following is done to avoid a v8 performance cliff.
      //
      // Initializing the fields below to smis and later updating them with
      // double values will cause Fibers to end up having separate shapes.
      // This behavior/bug has something to do with Object.preventExtension().
      // Fortunately this only impacts DEV builds.
      // Unfortunately it makes React unusably slow for some applications.
      // To work around this, initialize the fields below with doubles.
      //
      // Learn more about this here:
      // https://github.com/facebook/react/issues/14365
      // https://bugs.chromium.org/p/v8/issues/detail?id=8538
      this.actualDuration = Number.NaN;
      this.actualStartTime = Number.NaN;
      this.selfBaseDuration = Number.NaN;
      this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
      // This won't trigger the performance cliff mentioned above,
      // and it simplifies other profiler code (including DevTools).

      this.actualDuration = 0;
      this.actualStartTime = -1;
      this.selfBaseDuration = 0;
      this.treeBaseDuration = 0;
    }

    {
      // This isn't directly used but is handy for debugging internals:
      this._debugID = debugCounter++;
      this._debugSource = null;
      this._debugOwner = null;
      this._debugNeedsRemount = false;
      this._debugHookTypes = null;

      if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
        Object.preventExtensions(this);
      }
    }
  } // This is a constructor function, rather than a POJO constructor, still
  // please ensure we do the following:
  // 1) Nobody should add any instance methods on this. Instance methods can be
  //    more difficult to predict when they get optimized and they are almost
  //    never inlined properly in static compilers.
  // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
  //    always know when it is a fiber.
  // 3) We might want to experiment with using numeric keys since they are easier
  //    to optimize in a non-JIT environment.
  // 4) We can easily go from a constructor to a createFiber object literal if that
  //    is faster.
  // 5) It should be easy to port this to a C struct and keep a C implementation
  //    compatible.


  var createFiber = function (tag, pendingProps, key, mode) {
    // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
    return new FiberNode(tag, pendingProps, key, mode);
  };

  function shouldConstruct$1(Component) {
    var prototype = Component.prototype;
    return !!(prototype && prototype.isReactComponent);
  }

  function isSimpleFunctionComponent(type) {
    return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
  }
  function resolveLazyComponentTag(Component) {
    if (typeof Component === 'function') {
      return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
    } else if (Component !== undefined && Component !== null) {
      var $$typeof = Component.$$typeof;

      if ($$typeof === REACT_FORWARD_REF_TYPE) {
        return ForwardRef;
      }

      if ($$typeof === REACT_MEMO_TYPE) {
        return MemoComponent;
      }
    }

    return IndeterminateComponent;
  } // This is used to create an alternate fiber to do work on.

  function createWorkInProgress(current, pendingProps) {
    var workInProgress = current.alternate;

    if (workInProgress === null) {
      // We use a double buffering pooling technique because we know that we'll
      // only ever need at most two versions of a tree. We pool the "other" unused
      // node that we're free to reuse. This is lazily created to avoid allocating
      // extra objects for things that are never updated. It also allow us to
      // reclaim the extra memory if needed.
      workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
      workInProgress.elementType = current.elementType;
      workInProgress.type = current.type;
      workInProgress.stateNode = current.stateNode;

      {
        // DEV-only fields
        workInProgress._debugID = current._debugID;
        workInProgress._debugSource = current._debugSource;
        workInProgress._debugOwner = current._debugOwner;
        workInProgress._debugHookTypes = current._debugHookTypes;
      }

      workInProgress.alternate = current;
      current.alternate = workInProgress;
    } else {
      workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

      workInProgress.type = current.type; // We already have an alternate.
      // Reset the effect tag.

      workInProgress.flags = NoFlags; // The effect list is no longer valid.

      workInProgress.nextEffect = null;
      workInProgress.firstEffect = null;
      workInProgress.lastEffect = null;

      {
        // We intentionally reset, rather than copy, actualDuration & actualStartTime.
        // This prevents time from endlessly accumulating in new commits.
        // This has the downside of resetting values for different priority renders,
        // But works for yielding (the common case) and should support resuming.
        workInProgress.actualDuration = 0;
        workInProgress.actualStartTime = -1;
      }
    }

    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      lanes: currentDependencies.lanes,
      firstContext: currentDependencies.firstContext
    }; // These will be overridden during the parent's reconciliation

    workInProgress.sibling = current.sibling;
    workInProgress.index = current.index;
    workInProgress.ref = current.ref;

    {
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }

    {
      workInProgress._debugNeedsRemount = current._debugNeedsRemount;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
        case FunctionComponent:
        case SimpleMemoComponent:
          workInProgress.type = resolveFunctionForHotReloading(current.type);
          break;

        case ClassComponent:
          workInProgress.type = resolveClassForHotReloading(current.type);
          break;

        case ForwardRef:
          workInProgress.type = resolveForwardRefForHotReloading(current.type);
          break;
      }
    }

    return workInProgress;
  } // Used to reuse a Fiber for a second pass.

  function resetWorkInProgress(workInProgress, renderLanes) {
    // This resets the Fiber to what createFiber or createWorkInProgress would
    // have set the values to before during the first pass. Ideally this wouldn't
    // be necessary but unfortunately many code paths reads from the workInProgress
    // when they should be reading from current and writing to workInProgress.
    // We assume pendingProps, index, key, ref, return are still untouched to
    // avoid doing another reconciliation.
    // Reset the effect tag but keep any Placement tags, since that's something
    // that child fiber is setting, not the reconciliation.
    workInProgress.flags &= Placement; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;
    var current = workInProgress.alternate;

    if (current === null) {
      // Reset to createFiber's initial values.
      workInProgress.childLanes = NoLanes;
      workInProgress.lanes = renderLanes;
      workInProgress.child = null;
      workInProgress.memoizedProps = null;
      workInProgress.memoizedState = null;
      workInProgress.updateQueue = null;
      workInProgress.dependencies = null;
      workInProgress.stateNode = null;

      {
        // Note: We don't reset the actualTime counts. It's useful to accumulate
        // actual time across multiple render passes.
        workInProgress.selfBaseDuration = 0;
        workInProgress.treeBaseDuration = 0;
      }
    } else {
      // Reset to the cloned values that createWorkInProgress would've.
      workInProgress.childLanes = current.childLanes;
      workInProgress.lanes = current.lanes;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

      workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
      // it cannot be shared with the current fiber.

      var currentDependencies = current.dependencies;
      workInProgress.dependencies = currentDependencies === null ? null : {
        lanes: currentDependencies.lanes,
        firstContext: currentDependencies.firstContext
      };

      {
        // Note: We don't reset the actualTime counts. It's useful to accumulate
        // actual time across multiple render passes.
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }
    }

    return workInProgress;
  }
  function createHostRootFiber(tag) {
    var mode;

    if (tag === ConcurrentRoot) {
      mode = ConcurrentMode | BlockingMode | StrictMode;
    } else if (tag === BlockingRoot) {
      mode = BlockingMode | StrictMode;
    } else {
      mode = NoMode;
    }

    if ( isDevToolsPresent) {
      // Always collect profile timings when DevTools are present.
      // This enables DevTools to start capturing timing at any point–
      // Without some nodes in the tree having empty base times.
      mode |= ProfileMode;
    }

    return createFiber(HostRoot, null, null, mode);
  }
  function createFiberFromTypeAndProps(type, // React$ElementType
  key, pendingProps, owner, mode, lanes) {
    var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

    var resolvedType = type;

    if (typeof type === 'function') {
      if (shouldConstruct$1(type)) {
        fiberTag = ClassComponent;

        {
          resolvedType = resolveClassForHotReloading(resolvedType);
        }
      } else {
        {
          resolvedType = resolveFunctionForHotReloading(resolvedType);
        }
      }
    } else if (typeof type === 'string') {
      fiberTag = HostComponent;
    } else {
      getTag: switch (type) {
        case REACT_FRAGMENT_TYPE:
          return createFiberFromFragment(pendingProps.children, mode, lanes, key);

        case REACT_DEBUG_TRACING_MODE_TYPE:
          fiberTag = Mode;
          mode |= DebugTracingMode;
          break;

        case REACT_STRICT_MODE_TYPE:
          fiberTag = Mode;
          mode |= StrictMode;
          break;

        case REACT_PROFILER_TYPE:
          return createFiberFromProfiler(pendingProps, mode, lanes, key);

        case REACT_SUSPENSE_TYPE:
          return createFiberFromSuspense(pendingProps, mode, lanes, key);

        case REACT_SUSPENSE_LIST_TYPE:
          return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

        case REACT_OFFSCREEN_TYPE:
          return createFiberFromOffscreen(pendingProps, mode, lanes, key);

        case REACT_LEGACY_HIDDEN_TYPE:
          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

        case REACT_SCOPE_TYPE:

        // eslint-disable-next-line no-fallthrough

        default:
          {
            if (typeof type === 'object' && type !== null) {
              switch (type.$$typeof) {
                case REACT_PROVIDER_TYPE:
                  fiberTag = ContextProvider;
                  break getTag;

                case REACT_CONTEXT_TYPE:
                  // This is a consumer
                  fiberTag = ContextConsumer;
                  break getTag;

                case REACT_FORWARD_REF_TYPE:
                  fiberTag = ForwardRef;

                  {
                    resolvedType = resolveForwardRefForHotReloading(resolvedType);
                  }

                  break getTag;

                case REACT_MEMO_TYPE:
                  fiberTag = MemoComponent;
                  break getTag;

                case REACT_LAZY_TYPE:
                  fiberTag = LazyComponent;
                  resolvedType = null;
                  break getTag;

                case REACT_BLOCK_TYPE:
                  fiberTag = Block;
                  break getTag;
              }
            }

            var info = '';

            {
              if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
              }

              var ownerName = owner ? getComponentName(owner.type) : null;

              if (ownerName) {
                info += '\n\nCheck the render method of `' + ownerName + '`.';
              }
            }

            {
              {
                throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
              }
            }
          }
      }
    }

    var fiber = createFiber(fiberTag, pendingProps, key, mode);
    fiber.elementType = type;
    fiber.type = resolvedType;
    fiber.lanes = lanes;

    {
      fiber._debugOwner = owner;
    }

    return fiber;
  }
  function createFiberFromElement(element, mode, lanes) {
    var owner = null;

    {
      owner = element._owner;
    }

    var type = element.type;
    var key = element.key;
    var pendingProps = element.props;
    var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

    {
      fiber._debugSource = element._source;
      fiber._debugOwner = element._owner;
    }

    return fiber;
  }
  function createFiberFromFragment(elements, mode, lanes, key) {
    var fiber = createFiber(Fragment, elements, key, mode);
    fiber.lanes = lanes;
    return fiber;
  }

  function createFiberFromProfiler(pendingProps, mode, lanes, key) {
    {
      if (typeof pendingProps.id !== 'string') {
        error('Profiler must specify an "id" as a prop');
      }
    }

    var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

    fiber.elementType = REACT_PROFILER_TYPE;
    fiber.type = REACT_PROFILER_TYPE;
    fiber.lanes = lanes;

    {
      fiber.stateNode = {
        effectDuration: 0,
        passiveEffectDuration: 0
      };
    }

    return fiber;
  }

  function createFiberFromSuspense(pendingProps, mode, lanes, key) {
    var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.

    fiber.type = REACT_SUSPENSE_TYPE;
    fiber.elementType = REACT_SUSPENSE_TYPE;
    fiber.lanes = lanes;
    return fiber;
  }
  function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
    var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

    {
      // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
      // This needs to be fixed in getComponentName so that it relies on the tag
      // instead.
      fiber.type = REACT_SUSPENSE_LIST_TYPE;
    }

    fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
    fiber.lanes = lanes;
    return fiber;
  }
  function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
    var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.

    {
      fiber.type = REACT_OFFSCREEN_TYPE;
    }

    fiber.elementType = REACT_OFFSCREEN_TYPE;
    fiber.lanes = lanes;
    return fiber;
  }
  function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
    var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.

    {
      fiber.type = REACT_LEGACY_HIDDEN_TYPE;
    }

    fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
    fiber.lanes = lanes;
    return fiber;
  }
  function createFiberFromText(content, mode, lanes) {
    var fiber = createFiber(HostText, content, null, mode);
    fiber.lanes = lanes;
    return fiber;
  }
  function createFiberFromHostInstanceForDeletion() {
    var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

    fiber.elementType = 'DELETED';
    fiber.type = 'DELETED';
    return fiber;
  }
  function createFiberFromPortal(portal, mode, lanes) {
    var pendingProps = portal.children !== null ? portal.children : [];
    var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
    fiber.lanes = lanes;
    fiber.stateNode = {
      containerInfo: portal.containerInfo,
      pendingChildren: null,
      // Used by persistent updates
      implementation: portal.implementation
    };
    return fiber;
  } // Used for stashing WIP properties to replay failed work in DEV.

  function assignFiberPropertiesInDEV(target, source) {
    if (target === null) {
      // This Fiber's initial properties will always be overwritten.
      // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
      target = createFiber(IndeterminateComponent, null, null, NoMode);
    } // This is intentionally written as a list of all properties.
    // We tried to use Object.assign() instead but this is called in
    // the hottest path, and Object.assign() was too slow:
    // https://github.com/facebook/react/issues/12502
    // This code is DEV-only so size is not a concern.


    target.tag = source.tag;
    target.key = source.key;
    target.elementType = source.elementType;
    target.type = source.type;
    target.stateNode = source.stateNode;
    target.return = source.return;
    target.child = source.child;
    target.sibling = source.sibling;
    target.index = source.index;
    target.ref = source.ref;
    target.pendingProps = source.pendingProps;
    target.memoizedProps = source.memoizedProps;
    target.updateQueue = source.updateQueue;
    target.memoizedState = source.memoizedState;
    target.dependencies = source.dependencies;
    target.mode = source.mode;
    target.flags = source.flags;
    target.nextEffect = source.nextEffect;
    target.firstEffect = source.firstEffect;
    target.lastEffect = source.lastEffect;
    target.lanes = source.lanes;
    target.childLanes = source.childLanes;
    target.alternate = source.alternate;

    {
      target.actualDuration = source.actualDuration;
      target.actualStartTime = source.actualStartTime;
      target.selfBaseDuration = source.selfBaseDuration;
      target.treeBaseDuration = source.treeBaseDuration;
    }

    target._debugID = source._debugID;
    target._debugSource = source._debugSource;
    target._debugOwner = source._debugOwner;
    target._debugNeedsRemount = source._debugNeedsRemount;
    target._debugHookTypes = source._debugHookTypes;
    return target;
  }

  function FiberRootNode(containerInfo, tag, hydrate) {
    this.tag = tag;
    this.containerInfo = containerInfo;
    this.pendingChildren = null;
    this.current = null;
    this.pingCache = null;
    this.finishedWork = null;
    this.timeoutHandle = noTimeout;
    this.context = null;
    this.pendingContext = null;
    this.hydrate = hydrate;
    this.callbackNode = null;
    this.callbackPriority = NoLanePriority;
    this.eventTimes = createLaneMap(NoLanes);
    this.expirationTimes = createLaneMap(NoTimestamp);
    this.pendingLanes = NoLanes;
    this.suspendedLanes = NoLanes;
    this.pingedLanes = NoLanes;
    this.expiredLanes = NoLanes;
    this.mutableReadLanes = NoLanes;
    this.finishedLanes = NoLanes;
    this.entangledLanes = NoLanes;
    this.entanglements = createLaneMap(NoLanes);

    {
      this.mutableSourceEagerHydrationData = null;
    }

    {
      this.interactionThreadID = tracing$1.unstable_getThreadID();
      this.memoizedInteractions = new Set();
      this.pendingInteractionMap = new Map();
    }

    {
      switch (tag) {
        case BlockingRoot:
          this._debugRootType = 'createBlockingRoot()';
          break;

        case ConcurrentRoot:
          this._debugRootType = 'createRoot()';
          break;

        case LegacyRoot:
          this._debugRootType = 'createLegacyRoot()';
          break;
      }
    }
  }

  function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
    var root = new FiberRootNode(containerInfo, tag, hydrate);
    // stateNode is any.


    var uninitializedFiber = createHostRootFiber(tag);
    root.current = uninitializedFiber;
    uninitializedFiber.stateNode = root;
    initializeUpdateQueue(uninitializedFiber);
    return root;
  }

  // This ensures that the version used for server rendering matches the one
  // that is eventually read during hydration.
  // If they don't match there's a potential tear and a full deopt render is required.

  function registerMutableSourceForHydration(root, mutableSource) {
    var getVersion = mutableSource._getVersion;
    var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
    // Retaining it forever may interfere with GC.

    if (root.mutableSourceEagerHydrationData == null) {
      root.mutableSourceEagerHydrationData = [mutableSource, version];
    } else {
      root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
  }

  function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
  implementation) {
    var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    return {
      // This tag allow us to uniquely identify this as a React Portal
      $$typeof: REACT_PORTAL_TYPE,
      key: key == null ? null : '' + key,
      children: children,
      containerInfo: containerInfo,
      implementation: implementation
    };
  }

  var didWarnAboutNestedUpdates;
  var didWarnAboutFindNodeInStrictMode;

  {
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {};
  }

  function getContextForSubtree(parentComponent) {
    if (!parentComponent) {
      return emptyContextObject;
    }

    var fiber = get(parentComponent);
    var parentContext = findCurrentUnmaskedContext(fiber);

    if (fiber.tag === ClassComponent) {
      var Component = fiber.type;

      if (isContextProvider(Component)) {
        return processChildContext(fiber, Component, parentContext);
      }
    }

    return parentContext;
  }

  function findHostInstanceWithWarning(component, methodName) {
    {
      var fiber = get(component);

      if (fiber === undefined) {
        if (typeof component.render === 'function') {
          {
            {
              throw Error( "Unable to find node on an unmounted component." );
            }
          }
        } else {
          {
            {
              throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
            }
          }
        }
      }

      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      if (hostFiber.mode & StrictMode) {
        var componentName = getComponentName(fiber.type) || 'Component';

        if (!didWarnAboutFindNodeInStrictMode[componentName]) {
          didWarnAboutFindNodeInStrictMode[componentName] = true;
          var previousFiber = current;

          try {
            setCurrentFiber(hostFiber);

            if (fiber.mode & StrictMode) {
              error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
            } else {
              error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
            }
          } finally {
            // Ideally this should reset to previous but this shouldn't be called in
            // render and there's another warning for that anyway.
            if (previousFiber) {
              setCurrentFiber(previousFiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }

      return hostFiber.stateNode;
    }
  }

  function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
    return createFiberRoot(containerInfo, tag, hydrate);
  }
  function updateContainer(element, container, parentComponent, callback) {
    {
      onScheduleRoot(container, element);
    }

    var current$1 = container.current;
    var eventTime = requestEventTime();

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfUnmockedScheduler(current$1);
        warnIfNotScopedWithMatchingAct(current$1);
      }
    }

    var lane = requestUpdateLane(current$1);

    var context = getContextForSubtree(parentComponent);

    if (container.context === null) {
      container.context = context;
    } else {
      container.pendingContext = context;
    }

    {
      if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
        didWarnAboutNestedUpdates = true;

        error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
      }
    }

    var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
    // being called "element".

    update.payload = {
      element: element
    };
    callback = callback === undefined ? null : callback;

    if (callback !== null) {
      {
        if (typeof callback !== 'function') {
          error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
        }
      }

      update.callback = callback;
    }

    enqueueUpdate(current$1, update);
    scheduleUpdateOnFiber(current$1, lane, eventTime);
    return lane;
  }
  function getPublicRootInstance(container) {
    var containerFiber = container.current;

    if (!containerFiber.child) {
      return null;
    }

    switch (containerFiber.child.tag) {
      case HostComponent:
        return getPublicInstance(containerFiber.child.stateNode);

      default:
        return containerFiber.child.stateNode;
    }
  }

  function markRetryLaneImpl(fiber, retryLane) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState !== null && suspenseState.dehydrated !== null) {
      suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    }
  } // Increases the priority of thennables when they resolve within this boundary.


  function markRetryLaneIfNotHydrated(fiber, retryLane) {
    markRetryLaneImpl(fiber, retryLane);
    var alternate = fiber.alternate;

    if (alternate) {
      markRetryLaneImpl(alternate, retryLane);
    }
  }

  function attemptUserBlockingHydration$1(fiber) {
    if (fiber.tag !== SuspenseComponent) {
      // We ignore HostRoots here because we can't increase
      // their priority and they should not suspend on I/O,
      // since you have to wrap anything that might suspend in
      // Suspense.
      return;
    }

    var eventTime = requestEventTime();
    var lane = InputDiscreteHydrationLane;
    scheduleUpdateOnFiber(fiber, lane, eventTime);
    markRetryLaneIfNotHydrated(fiber, lane);
  }
  function attemptContinuousHydration$1(fiber) {
    if (fiber.tag !== SuspenseComponent) {
      // We ignore HostRoots here because we can't increase
      // their priority and they should not suspend on I/O,
      // since you have to wrap anything that might suspend in
      // Suspense.
      return;
    }

    var eventTime = requestEventTime();
    var lane = SelectiveHydrationLane;
    scheduleUpdateOnFiber(fiber, lane, eventTime);
    markRetryLaneIfNotHydrated(fiber, lane);
  }
  function attemptHydrationAtCurrentPriority$1(fiber) {
    if (fiber.tag !== SuspenseComponent) {
      // We ignore HostRoots here because we can't increase
      // their priority other than synchronously flush it.
      return;
    }

    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    scheduleUpdateOnFiber(fiber, lane, eventTime);
    markRetryLaneIfNotHydrated(fiber, lane);
  }
  function runWithPriority$2(priority, fn) {

    try {
      setCurrentUpdateLanePriority(priority);
      return fn();
    } finally {
    }
  }
  function findHostInstanceWithNoPortals(fiber) {
    var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.tag === FundamentalComponent) {
      return hostFiber.stateNode.instance;
    }

    return hostFiber.stateNode;
  }

  var shouldSuspendImpl = function (fiber) {
    return false;
  };

  function shouldSuspend(fiber) {
    return shouldSuspendImpl(fiber);
  }
  var overrideHookState = null;
  var overrideHookStateDeletePath = null;
  var overrideHookStateRenamePath = null;
  var overrideProps = null;
  var overridePropsDeletePath = null;
  var overridePropsRenamePath = null;
  var scheduleUpdate = null;
  var setSuspenseHandler = null;

  {
    var copyWithDeleteImpl = function (obj, path, index) {
      var key = path[index];
      var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

      if (index + 1 === path.length) {
        if (Array.isArray(updated)) {
          updated.splice(key, 1);
        } else {
          delete updated[key];
        }

        return updated;
      } // $FlowFixMe number or string is fine here


      updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
      return updated;
    };

    var copyWithDelete = function (obj, path) {
      return copyWithDeleteImpl(obj, path, 0);
    };

    var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
      var oldKey = oldPath[index];
      var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

      if (index + 1 === oldPath.length) {
        var newKey = newPath[index]; // $FlowFixMe number or string is fine here

        updated[newKey] = updated[oldKey];

        if (Array.isArray(updated)) {
          updated.splice(oldKey, 1);
        } else {
          delete updated[oldKey];
        }
      } else {
        // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
        obj[oldKey], oldPath, newPath, index + 1);
      }

      return updated;
    };

    var copyWithRename = function (obj, oldPath, newPath) {
      if (oldPath.length !== newPath.length) {
        warn('copyWithRename() expects paths of the same length');

        return;
      } else {
        for (var i = 0; i < newPath.length - 1; i++) {
          if (oldPath[i] !== newPath[i]) {
            warn('copyWithRename() expects paths to be the same except for the deepest key');

            return;
          }
        }
      }

      return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };

    var copyWithSetImpl = function (obj, path, index, value) {
      if (index >= path.length) {
        return value;
      }

      var key = path[index];
      var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

      updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
      return updated;
    };

    var copyWithSet = function (obj, path, value) {
      return copyWithSetImpl(obj, path, 0, value);
    };

    var findHook = function (fiber, id) {
      // For now, the "id" of stateful hooks is just the stateful hook index.
      // This may change in the future with e.g. nested hooks.
      var currentHook = fiber.memoizedState;

      while (currentHook !== null && id > 0) {
        currentHook = currentHook.next;
        id--;
      }

      return currentHook;
    }; // Support DevTools editable values for useState and useReducer.


    overrideHookState = function (fiber, id, path, value) {
      var hook = findHook(fiber, id);

      if (hook !== null) {
        var newState = copyWithSet(hook.memoizedState, path, value);
        hook.memoizedState = newState;
        hook.baseState = newState; // We aren't actually adding an update to the queue,
        // because there is no update we can add for useReducer hooks that won't trigger an error.
        // (There's no appropriate action type for DevTools overrides.)
        // As a result though, React will see the scheduled update as a noop and bailout.
        // Shallow cloning props works as a workaround for now to bypass the bailout check.

        fiber.memoizedProps = _assign({}, fiber.memoizedProps);
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      }
    };

    overrideHookStateDeletePath = function (fiber, id, path) {
      var hook = findHook(fiber, id);

      if (hook !== null) {
        var newState = copyWithDelete(hook.memoizedState, path);
        hook.memoizedState = newState;
        hook.baseState = newState; // We aren't actually adding an update to the queue,
        // because there is no update we can add for useReducer hooks that won't trigger an error.
        // (There's no appropriate action type for DevTools overrides.)
        // As a result though, React will see the scheduled update as a noop and bailout.
        // Shallow cloning props works as a workaround for now to bypass the bailout check.

        fiber.memoizedProps = _assign({}, fiber.memoizedProps);
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      }
    };

    overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
      var hook = findHook(fiber, id);

      if (hook !== null) {
        var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
        hook.memoizedState = newState;
        hook.baseState = newState; // We aren't actually adding an update to the queue,
        // because there is no update we can add for useReducer hooks that won't trigger an error.
        // (There's no appropriate action type for DevTools overrides.)
        // As a result though, React will see the scheduled update as a noop and bailout.
        // Shallow cloning props works as a workaround for now to bypass the bailout check.

        fiber.memoizedProps = _assign({}, fiber.memoizedProps);
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
      }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


    overrideProps = function (fiber, path, value) {
      fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

      if (fiber.alternate) {
        fiber.alternate.pendingProps = fiber.pendingProps;
      }

      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };

    overridePropsDeletePath = function (fiber, path) {
      fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

      if (fiber.alternate) {
        fiber.alternate.pendingProps = fiber.pendingProps;
      }

      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };

    overridePropsRenamePath = function (fiber, oldPath, newPath) {
      fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

      if (fiber.alternate) {
        fiber.alternate.pendingProps = fiber.pendingProps;
      }

      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };

    scheduleUpdate = function (fiber) {
      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };

    setSuspenseHandler = function (newShouldSuspendImpl) {
      shouldSuspendImpl = newShouldSuspendImpl;
    };
  }

  function findHostInstanceByFiber(fiber) {
    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    return hostFiber.stateNode;
  }

  function emptyFindFiberByHostInstance(instance) {
    return null;
  }

  function getCurrentFiberForDevTools() {
    return current;
  }

  function injectIntoDevTools(devToolsConfig) {
    var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    return injectInternals({
      bundleType: devToolsConfig.bundleType,
      version: devToolsConfig.version,
      rendererPackageName: devToolsConfig.rendererPackageName,
      rendererConfig: devToolsConfig.rendererConfig,
      overrideHookState: overrideHookState,
      overrideHookStateDeletePath: overrideHookStateDeletePath,
      overrideHookStateRenamePath: overrideHookStateRenamePath,
      overrideProps: overrideProps,
      overridePropsDeletePath: overridePropsDeletePath,
      overridePropsRenamePath: overridePropsRenamePath,
      setSuspenseHandler: setSuspenseHandler,
      scheduleUpdate: scheduleUpdate,
      currentDispatcherRef: ReactCurrentDispatcher,
      findHostInstanceByFiber: findHostInstanceByFiber,
      findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
      // React Refresh
      findHostInstancesForRefresh:  findHostInstancesForRefresh ,
      scheduleRefresh:  scheduleRefresh ,
      scheduleRoot:  scheduleRoot ,
      setRefreshHandler:  setRefreshHandler ,
      // Enables DevTools to append owner stacks to error messages in DEV mode.
      getCurrentFiber:  getCurrentFiberForDevTools 
    });
  }

  function ReactDOMRoot(container, options) {
    this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
  }

  function ReactDOMBlockingRoot(container, tag, options) {
    this._internalRoot = createRootImpl(container, tag, options);
  }

  ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
    var root = this._internalRoot;

    {
      if (typeof arguments[1] === 'function') {
        error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
      }

      var container = root.containerInfo;

      if (container.nodeType !== COMMENT_NODE) {
        var hostInstance = findHostInstanceWithNoPortals(root.current);

        if (hostInstance) {
          if (hostInstance.parentNode !== container) {
            error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
          }
        }
      }
    }

    updateContainer(children, root, null, null);
  };

  ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
    {
      if (typeof arguments[0] === 'function') {
        error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
      }
    }

    var root = this._internalRoot;
    var container = root.containerInfo;
    updateContainer(null, root, null, function () {
      unmarkContainerAsRoot(container);
    });
  };

  function createRootImpl(container, tag, options) {
    // Tag is either LegacyRoot or Concurrent Root
    var hydrate = options != null && options.hydrate === true;
    var hydrationCallbacks = options != null && options.hydrationOptions || null;
    var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
    var root = createContainer(container, tag, hydrate);
    markContainerAsRoot(root.current, container);
    var containerNodeType = container.nodeType;

    {
      var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
      listenToAllSupportedEvents(rootContainerElement);
    }

    if (mutableSources) {
      for (var i = 0; i < mutableSources.length; i++) {
        var mutableSource = mutableSources[i];
        registerMutableSourceForHydration(root, mutableSource);
      }
    }

    return root;
  }
  function createLegacyRoot(container, options) {
    return new ReactDOMBlockingRoot(container, LegacyRoot, options);
  }
  function isValidContainer(node) {
    return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
  }

  var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
  var topLevelUpdateWarnings;
  var warnedAboutHydrateAPI = false;

  {
    topLevelUpdateWarnings = function (container) {
      if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
        var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

        if (hostInstance) {
          if (hostInstance.parentNode !== container) {
            error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
          }
        }
      }

      var isRootRenderedBySomeReact = !!container._reactRootContainer;
      var rootEl = getReactRootElementInContainer(container);
      var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

      if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
        error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
      }

      if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
        error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
      }
    };
  }

  function getReactRootElementInContainer(container) {
    if (!container) {
      return null;
    }

    if (container.nodeType === DOCUMENT_NODE) {
      return container.documentElement;
    } else {
      return container.firstChild;
    }
  }

  function shouldHydrateDueToLegacyHeuristic(container) {
    var rootElement = getReactRootElementInContainer(container);
    return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
  }

  function legacyCreateRootFromDOMContainer(container, forceHydrate) {
    var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

    if (!shouldHydrate) {
      var warned = false;
      var rootSibling;

      while (rootSibling = container.lastChild) {
        {
          if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
            warned = true;

            error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
          }
        }

        container.removeChild(rootSibling);
      }
    }

    {
      if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
        warnedAboutHydrateAPI = true;

        warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
      }
    }

    return createLegacyRoot(container, shouldHydrate ? {
      hydrate: true
    } : undefined);
  }

  function warnOnInvalidCallback$1(callback, callerName) {
    {
      if (callback !== null && typeof callback !== 'function') {
        error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
      }
    }
  }

  function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
    {
      topLevelUpdateWarnings(container);
      warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
    } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
    // member of intersection type." Whyyyyyy.


    var root = container._reactRootContainer;
    var fiberRoot;

    if (!root) {
      // Initial mount
      root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
      fiberRoot = root._internalRoot;

      if (typeof callback === 'function') {
        var originalCallback = callback;

        callback = function () {
          var instance = getPublicRootInstance(fiberRoot);
          originalCallback.call(instance);
        };
      } // Initial mount should not be batched.


      unbatchedUpdates(function () {
        updateContainer(children, fiberRoot, parentComponent, callback);
      });
    } else {
      fiberRoot = root._internalRoot;

      if (typeof callback === 'function') {
        var _originalCallback = callback;

        callback = function () {
          var instance = getPublicRootInstance(fiberRoot);

          _originalCallback.call(instance);
        };
      } // Update


      updateContainer(children, fiberRoot, parentComponent, callback);
    }

    return getPublicRootInstance(fiberRoot);
  }

  function findDOMNode(componentOrElement) {
    {
      var owner = ReactCurrentOwner$3.current;

      if (owner !== null && owner.stateNode !== null) {
        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

        if (!warnedAboutRefsInRender) {
          error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
        }

        owner.stateNode._warnedAboutRefsInRender = true;
      }
    }

    if (componentOrElement == null) {
      return null;
    }

    if (componentOrElement.nodeType === ELEMENT_NODE) {
      return componentOrElement;
    }

    {
      return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
  }
  function hydrate(element, container, callback) {
    if (!isValidContainer(container)) {
      {
        throw Error( "Target container is not a DOM element." );
      }
    }

    {
      var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

      if (isModernRoot) {
        error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
      }
    } // TODO: throw or warn if we couldn't hydrate?


    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
  }
  function render(element, container, callback) {
    if (!isValidContainer(container)) {
      {
        throw Error( "Target container is not a DOM element." );
      }
    }

    {
      var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

      if (isModernRoot) {
        error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
      }
    }

    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
  }
  function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
    if (!isValidContainer(containerNode)) {
      {
        throw Error( "Target container is not a DOM element." );
      }
    }

    if (!(parentComponent != null && has(parentComponent))) {
      {
        throw Error( "parentComponent must be a valid React Component" );
      }
    }

    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
  }
  function unmountComponentAtNode(container) {
    if (!isValidContainer(container)) {
      {
        throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
      }
    }

    {
      var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

      if (isModernRoot) {
        error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
      }
    }

    if (container._reactRootContainer) {
      {
        var rootEl = getReactRootElementInContainer(container);
        var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

        if (renderedByDifferentReact) {
          error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
        }
      } // Unmount should not be batched.


      unbatchedUpdates(function () {
        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
          // $FlowFixMe This should probably use `delete container._reactRootContainer`
          container._reactRootContainer = null;
          unmarkContainerAsRoot(container);
        });
      }); // If you call unmountComponentAtNode twice in quick succession, you'll
      // get `true` twice. That's probably fine?

      return true;
    } else {
      {
        var _rootEl = getReactRootElementInContainer(container);

        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

        var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

        if (hasNonRootReactChild) {
          error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
        }
      }

      return false;
    }
  }

  setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
  setAttemptContinuousHydration(attemptContinuousHydration$1);
  setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
  setAttemptHydrationAtPriority(runWithPriority$2);
  var didWarnAboutUnstableCreatePortal = false;

  {
    if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
    Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
    Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
      error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
    }
  }

  setRestoreImplementation(restoreControlledState$3);
  setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

  function createPortal$1(children, container) {
    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (!isValidContainer(container)) {
      {
        throw Error( "Target container is not a DOM element." );
      }
    } // TODO: pass ReactDOM portal implementation as third argument
    // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


    return createPortal(children, container, null, key);
  }

  function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

    return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
  }

  function unstable_createPortal(children, container) {
    var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    {
      if (!didWarnAboutUnstableCreatePortal) {
        didWarnAboutUnstableCreatePortal = true;

        warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
      }
    }

    return createPortal$1(children, container, key);
  }

  var Internals = {
    // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
    // This is an array for better minification.
    Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
    IsThisRendererActing]
  };
  var foundDevTools = injectIntoDevTools({
    findFiberByHostInstance: getClosestInstanceFromNode,
    bundleType:  1 ,
    version: ReactVersion,
    rendererPackageName: 'react-dom'
  });

  {
    if (!foundDevTools && canUseDOM && window.top === window.self) {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

        if (/^(https?|file):$/.test(protocol)) {
          // eslint-disable-next-line react-internal/no-production-logging
          console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
        }
      }
    }
  }

  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
  exports.createPortal = createPortal$1;
  exports.findDOMNode = findDOMNode;
  exports.flushSync = flushSync;
  exports.hydrate = hydrate;
  exports.render = render;
  exports.unmountComponentAtNode = unmountComponentAtNode;
  exports.unstable_batchedUpdates = batchedUpdates$1;
  exports.unstable_createPortal = unstable_createPortal;
  exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
  exports.version = ReactVersion;
    })();
  }
  });

  var reactDom = createCommonjsModule(function (module) {

  {
    module.exports = reactDom_development;
  }
  });

  /**
   * Return if a node is a DOM node. Else will return by `findDOMNode`
   */

  function findDOMNode(node) {
    if (node instanceof HTMLElement) {
      return node;
    }

    return reactDom.findDOMNode(node);
  }

  var reactIs_development = createCommonjsModule(function (module, exports) {



  {
    (function() {

  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var hasSymbol = typeof Symbol === 'function' && Symbol.for;
  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
  // (unstable) APIs that have been removed. Can we remove the symbols?

  var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
  var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
  var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
  var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
  var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
  var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
  var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
  var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
  var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
  var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

  function isValidElementType(type) {
    return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
  }

  function typeOf(object) {
    if (typeof object === 'object' && object !== null) {
      var $$typeof = object.$$typeof;

      switch ($$typeof) {
        case REACT_ELEMENT_TYPE:
          var type = object.type;

          switch (type) {
            case REACT_ASYNC_MODE_TYPE:
            case REACT_CONCURRENT_MODE_TYPE:
            case REACT_FRAGMENT_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_SUSPENSE_TYPE:
              return type;

            default:
              var $$typeofType = type && type.$$typeof;

              switch ($$typeofType) {
                case REACT_CONTEXT_TYPE:
                case REACT_FORWARD_REF_TYPE:
                case REACT_LAZY_TYPE:
                case REACT_MEMO_TYPE:
                case REACT_PROVIDER_TYPE:
                  return $$typeofType;

                default:
                  return $$typeof;
              }

          }

        case REACT_PORTAL_TYPE:
          return $$typeof;
      }
    }

    return undefined;
  } // AsyncMode is deprecated along with isAsyncMode

  var AsyncMode = REACT_ASYNC_MODE_TYPE;
  var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
  var ContextConsumer = REACT_CONTEXT_TYPE;
  var ContextProvider = REACT_PROVIDER_TYPE;
  var Element = REACT_ELEMENT_TYPE;
  var ForwardRef = REACT_FORWARD_REF_TYPE;
  var Fragment = REACT_FRAGMENT_TYPE;
  var Lazy = REACT_LAZY_TYPE;
  var Memo = REACT_MEMO_TYPE;
  var Portal = REACT_PORTAL_TYPE;
  var Profiler = REACT_PROFILER_TYPE;
  var StrictMode = REACT_STRICT_MODE_TYPE;
  var Suspense = REACT_SUSPENSE_TYPE;
  var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

  function isAsyncMode(object) {
    {
      if (!hasWarnedAboutDeprecatedIsAsyncMode) {
        hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

        console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
      }
    }

    return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
  }
  function isConcurrentMode(object) {
    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
  }
  function isContextConsumer(object) {
    return typeOf(object) === REACT_CONTEXT_TYPE;
  }
  function isContextProvider(object) {
    return typeOf(object) === REACT_PROVIDER_TYPE;
  }
  function isElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
  function isForwardRef(object) {
    return typeOf(object) === REACT_FORWARD_REF_TYPE;
  }
  function isFragment(object) {
    return typeOf(object) === REACT_FRAGMENT_TYPE;
  }
  function isLazy(object) {
    return typeOf(object) === REACT_LAZY_TYPE;
  }
  function isMemo(object) {
    return typeOf(object) === REACT_MEMO_TYPE;
  }
  function isPortal(object) {
    return typeOf(object) === REACT_PORTAL_TYPE;
  }
  function isProfiler(object) {
    return typeOf(object) === REACT_PROFILER_TYPE;
  }
  function isStrictMode(object) {
    return typeOf(object) === REACT_STRICT_MODE_TYPE;
  }
  function isSuspense(object) {
    return typeOf(object) === REACT_SUSPENSE_TYPE;
  }

  exports.AsyncMode = AsyncMode;
  exports.ConcurrentMode = ConcurrentMode;
  exports.ContextConsumer = ContextConsumer;
  exports.ContextProvider = ContextProvider;
  exports.Element = Element;
  exports.ForwardRef = ForwardRef;
  exports.Fragment = Fragment;
  exports.Lazy = Lazy;
  exports.Memo = Memo;
  exports.Portal = Portal;
  exports.Profiler = Profiler;
  exports.StrictMode = StrictMode;
  exports.Suspense = Suspense;
  exports.isAsyncMode = isAsyncMode;
  exports.isConcurrentMode = isConcurrentMode;
  exports.isContextConsumer = isContextConsumer;
  exports.isContextProvider = isContextProvider;
  exports.isElement = isElement;
  exports.isForwardRef = isForwardRef;
  exports.isFragment = isFragment;
  exports.isLazy = isLazy;
  exports.isMemo = isMemo;
  exports.isPortal = isPortal;
  exports.isProfiler = isProfiler;
  exports.isStrictMode = isStrictMode;
  exports.isSuspense = isSuspense;
  exports.isValidElementType = isValidElementType;
  exports.typeOf = typeOf;
    })();
  }
  });

  var reactIs = createCommonjsModule(function (module) {

  {
    module.exports = reactIs_development;
  }
  });

  function toArray(children) {
    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ret = [];
    React__default['default'].Children.forEach(children, function (child) {
      if ((child === undefined || child === null) && !option.keepEmpty) {
        return;
      }

      if (Array.isArray(child)) {
        ret = ret.concat(toArray(child));
      } else if (reactIs.isFragment(child) && child.props) {
        ret = ret.concat(toArray(child.props.children, option));
      } else {
        ret.push(child);
      }
    });
    return ret;
  }

  /* eslint-disable no-console */
  var warned = {};
  function warning(valid, message) {
    // Support uglify
    if ( !valid && console !== undefined) {
      console.error("Warning: ".concat(message));
    }
  }
  function note(valid, message) {
    // Support uglify
    if ( !valid && console !== undefined) {
      console.warn("Note: ".concat(message));
    }
  }
  function call(method, valid, message) {
    if (!valid && !warned[message]) {
      method(false, message);
      warned[message] = true;
    }
  }
  function warningOnce(valid, message) {
    call(warning, valid, message);
  }
  function noteOnce(valid, message) {
    call(note, valid, message);
  }
  /* eslint-enable */

  function fillRef(ref, node) {
    if (typeof ref === 'function') {
      ref(node);
    } else if (_typeof$1(ref) === 'object' && ref && 'current' in ref) {
      ref.current = node;
    }
  }
  /**
   * Merge refs into one ref function to support ref passing.
   */

  function composeRef() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }

    return function (node) {
      refs.forEach(function (ref) {
        fillRef(ref, node);
      });
    };
  }
  function supportRef(nodeOrComponent) {
    var _type$prototype, _nodeOrComponent$prot;

    var type = reactIs.isMemo(nodeOrComponent) ? nodeOrComponent.type.type : nodeOrComponent.type; // Function component node

    if (typeof type === 'function' && !((_type$prototype = type.prototype) === null || _type$prototype === void 0 ? void 0 : _type$prototype.render)) {
      return false;
    } // Class component


    if (typeof nodeOrComponent === 'function' && !((_nodeOrComponent$prot = nodeOrComponent.prototype) === null || _nodeOrComponent$prot === void 0 ? void 0 : _nodeOrComponent$prot.render)) {
      return false;
    }

    return true;
  }
  /* eslint-enable */

  /**
   * A collection of shims that provide minimal functionality of the ES6 collections.
   *
   * These implementations are not meant to be used outside of the ResizeObserver
   * modules as they cover only a limited range of use cases.
   */
  /* eslint-disable require-jsdoc, valid-jsdoc */
  var MapShim = (function () {
      if (typeof Map !== 'undefined') {
          return Map;
      }
      /**
       * Returns index in provided array that matches the specified key.
       *
       * @param {Array<Array>} arr
       * @param {*} key
       * @returns {number}
       */
      function getIndex(arr, key) {
          var result = -1;
          arr.some(function (entry, index) {
              if (entry[0] === key) {
                  result = index;
                  return true;
              }
              return false;
          });
          return result;
      }
      return /** @class */ (function () {
          function class_1() {
              this.__entries__ = [];
          }
          Object.defineProperty(class_1.prototype, "size", {
              /**
               * @returns {boolean}
               */
              get: function () {
                  return this.__entries__.length;
              },
              enumerable: true,
              configurable: true
          });
          /**
           * @param {*} key
           * @returns {*}
           */
          class_1.prototype.get = function (key) {
              var index = getIndex(this.__entries__, key);
              var entry = this.__entries__[index];
              return entry && entry[1];
          };
          /**
           * @param {*} key
           * @param {*} value
           * @returns {void}
           */
          class_1.prototype.set = function (key, value) {
              var index = getIndex(this.__entries__, key);
              if (~index) {
                  this.__entries__[index][1] = value;
              }
              else {
                  this.__entries__.push([key, value]);
              }
          };
          /**
           * @param {*} key
           * @returns {void}
           */
          class_1.prototype.delete = function (key) {
              var entries = this.__entries__;
              var index = getIndex(entries, key);
              if (~index) {
                  entries.splice(index, 1);
              }
          };
          /**
           * @param {*} key
           * @returns {void}
           */
          class_1.prototype.has = function (key) {
              return !!~getIndex(this.__entries__, key);
          };
          /**
           * @returns {void}
           */
          class_1.prototype.clear = function () {
              this.__entries__.splice(0);
          };
          /**
           * @param {Function} callback
           * @param {*} [ctx=null]
           * @returns {void}
           */
          class_1.prototype.forEach = function (callback, ctx) {
              if (ctx === void 0) { ctx = null; }
              for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                  var entry = _a[_i];
                  callback.call(ctx, entry[1], entry[0]);
              }
          };
          return class_1;
      }());
  })();

  /**
   * Detects whether window and document objects are available in current environment.
   */
  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

  // Returns global object of a current environment.
  var global$1 = (function () {
      if (typeof global !== 'undefined' && global.Math === Math) {
          return global;
      }
      if (typeof self !== 'undefined' && self.Math === Math) {
          return self;
      }
      if (typeof window !== 'undefined' && window.Math === Math) {
          return window;
      }
      // eslint-disable-next-line no-new-func
      return Function('return this')();
  })();

  /**
   * A shim for the requestAnimationFrame which falls back to the setTimeout if
   * first one is not supported.
   *
   * @returns {number} Requests' identifier.
   */
  var requestAnimationFrame$1 = (function () {
      if (typeof requestAnimationFrame === 'function') {
          // It's required to use a bounded function because IE sometimes throws
          // an "Invalid calling object" error if rAF is invoked without the global
          // object on the left hand side.
          return requestAnimationFrame.bind(global$1);
      }
      return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
  })();

  // Defines minimum timeout before adding a trailing call.
  var trailingTimeout = 2;
  /**
   * Creates a wrapper function which ensures that provided callback will be
   * invoked only once during the specified delay period.
   *
   * @param {Function} callback - Function to be invoked after the delay period.
   * @param {number} delay - Delay after which to invoke callback.
   * @returns {Function}
   */
  function throttle (callback, delay) {
      var leadingCall = false, trailingCall = false, lastCallTime = 0;
      /**
       * Invokes the original callback function and schedules new invocation if
       * the "proxy" was called during current request.
       *
       * @returns {void}
       */
      function resolvePending() {
          if (leadingCall) {
              leadingCall = false;
              callback();
          }
          if (trailingCall) {
              proxy();
          }
      }
      /**
       * Callback invoked after the specified delay. It will further postpone
       * invocation of the original function delegating it to the
       * requestAnimationFrame.
       *
       * @returns {void}
       */
      function timeoutCallback() {
          requestAnimationFrame$1(resolvePending);
      }
      /**
       * Schedules invocation of the original function.
       *
       * @returns {void}
       */
      function proxy() {
          var timeStamp = Date.now();
          if (leadingCall) {
              // Reject immediately following calls.
              if (timeStamp - lastCallTime < trailingTimeout) {
                  return;
              }
              // Schedule new call to be in invoked when the pending one is resolved.
              // This is important for "transitions" which never actually start
              // immediately so there is a chance that we might miss one if change
              // happens amids the pending invocation.
              trailingCall = true;
          }
          else {
              leadingCall = true;
              trailingCall = false;
              setTimeout(timeoutCallback, delay);
          }
          lastCallTime = timeStamp;
      }
      return proxy;
  }

  // Minimum delay before invoking the update of observers.
  var REFRESH_DELAY = 20;
  // A list of substrings of CSS properties used to find transition events that
  // might affect dimensions of observed elements.
  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
  // Check if MutationObserver is available.
  var mutationObserverSupported = typeof MutationObserver !== 'undefined';
  /**
   * Singleton controller class which handles updates of ResizeObserver instances.
   */
  var ResizeObserverController = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserverController.
       *
       * @private
       */
      function ResizeObserverController() {
          /**
           * Indicates whether DOM listeners have been added.
           *
           * @private {boolean}
           */
          this.connected_ = false;
          /**
           * Tells that controller has subscribed for Mutation Events.
           *
           * @private {boolean}
           */
          this.mutationEventsAdded_ = false;
          /**
           * Keeps reference to the instance of MutationObserver.
           *
           * @private {MutationObserver}
           */
          this.mutationsObserver_ = null;
          /**
           * A list of connected observers.
           *
           * @private {Array<ResizeObserverSPI>}
           */
          this.observers_ = [];
          this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
          this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
      }
      /**
       * Adds observer to observers list.
       *
       * @param {ResizeObserverSPI} observer - Observer to be added.
       * @returns {void}
       */
      ResizeObserverController.prototype.addObserver = function (observer) {
          if (!~this.observers_.indexOf(observer)) {
              this.observers_.push(observer);
          }
          // Add listeners if they haven't been added yet.
          if (!this.connected_) {
              this.connect_();
          }
      };
      /**
       * Removes observer from observers list.
       *
       * @param {ResizeObserverSPI} observer - Observer to be removed.
       * @returns {void}
       */
      ResizeObserverController.prototype.removeObserver = function (observer) {
          var observers = this.observers_;
          var index = observers.indexOf(observer);
          // Remove observer if it's present in registry.
          if (~index) {
              observers.splice(index, 1);
          }
          // Remove listeners if controller has no connected observers.
          if (!observers.length && this.connected_) {
              this.disconnect_();
          }
      };
      /**
       * Invokes the update of observers. It will continue running updates insofar
       * it detects changes.
       *
       * @returns {void}
       */
      ResizeObserverController.prototype.refresh = function () {
          var changesDetected = this.updateObservers_();
          // Continue running updates if changes have been detected as there might
          // be future ones caused by CSS transitions.
          if (changesDetected) {
              this.refresh();
          }
      };
      /**
       * Updates every observer from observers list and notifies them of queued
       * entries.
       *
       * @private
       * @returns {boolean} Returns "true" if any observer has detected changes in
       *      dimensions of it's elements.
       */
      ResizeObserverController.prototype.updateObservers_ = function () {
          // Collect observers that have active observations.
          var activeObservers = this.observers_.filter(function (observer) {
              return observer.gatherActive(), observer.hasActive();
          });
          // Deliver notifications in a separate cycle in order to avoid any
          // collisions between observers, e.g. when multiple instances of
          // ResizeObserver are tracking the same element and the callback of one
          // of them changes content dimensions of the observed target. Sometimes
          // this may result in notifications being blocked for the rest of observers.
          activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
          return activeObservers.length > 0;
      };
      /**
       * Initializes DOM listeners.
       *
       * @private
       * @returns {void}
       */
      ResizeObserverController.prototype.connect_ = function () {
          // Do nothing if running in a non-browser environment or if listeners
          // have been already added.
          if (!isBrowser || this.connected_) {
              return;
          }
          // Subscription to the "Transitionend" event is used as a workaround for
          // delayed transitions. This way it's possible to capture at least the
          // final state of an element.
          document.addEventListener('transitionend', this.onTransitionEnd_);
          window.addEventListener('resize', this.refresh);
          if (mutationObserverSupported) {
              this.mutationsObserver_ = new MutationObserver(this.refresh);
              this.mutationsObserver_.observe(document, {
                  attributes: true,
                  childList: true,
                  characterData: true,
                  subtree: true
              });
          }
          else {
              document.addEventListener('DOMSubtreeModified', this.refresh);
              this.mutationEventsAdded_ = true;
          }
          this.connected_ = true;
      };
      /**
       * Removes DOM listeners.
       *
       * @private
       * @returns {void}
       */
      ResizeObserverController.prototype.disconnect_ = function () {
          // Do nothing if running in a non-browser environment or if listeners
          // have been already removed.
          if (!isBrowser || !this.connected_) {
              return;
          }
          document.removeEventListener('transitionend', this.onTransitionEnd_);
          window.removeEventListener('resize', this.refresh);
          if (this.mutationsObserver_) {
              this.mutationsObserver_.disconnect();
          }
          if (this.mutationEventsAdded_) {
              document.removeEventListener('DOMSubtreeModified', this.refresh);
          }
          this.mutationsObserver_ = null;
          this.mutationEventsAdded_ = false;
          this.connected_ = false;
      };
      /**
       * "Transitionend" event handler.
       *
       * @private
       * @param {TransitionEvent} event
       * @returns {void}
       */
      ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
          var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
          // Detect whether transition may affect dimensions of an element.
          var isReflowProperty = transitionKeys.some(function (key) {
              return !!~propertyName.indexOf(key);
          });
          if (isReflowProperty) {
              this.refresh();
          }
      };
      /**
       * Returns instance of the ResizeObserverController.
       *
       * @returns {ResizeObserverController}
       */
      ResizeObserverController.getInstance = function () {
          if (!this.instance_) {
              this.instance_ = new ResizeObserverController();
          }
          return this.instance_;
      };
      /**
       * Holds reference to the controller's instance.
       *
       * @private {ResizeObserverController}
       */
      ResizeObserverController.instance_ = null;
      return ResizeObserverController;
  }());

  /**
   * Defines non-writable/enumerable properties of the provided target object.
   *
   * @param {Object} target - Object for which to define properties.
   * @param {Object} props - Properties to be defined.
   * @returns {Object} Target object.
   */
  var defineConfigurable = (function (target, props) {
      for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
          var key = _a[_i];
          Object.defineProperty(target, key, {
              value: props[key],
              enumerable: false,
              writable: false,
              configurable: true
          });
      }
      return target;
  });

  /**
   * Returns the global object associated with provided element.
   *
   * @param {Object} target
   * @returns {Object}
   */
  var getWindowOf = (function (target) {
      // Assume that the element is an instance of Node, which means that it
      // has the "ownerDocument" property from which we can retrieve a
      // corresponding global object.
      var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
      // Return the local global object if it's not possible extract one from
      // provided element.
      return ownerGlobal || global$1;
  });

  // Placeholder of an empty content rectangle.
  var emptyRect = createRectInit(0, 0, 0, 0);
  /**
   * Converts provided string to a number.
   *
   * @param {number|string} value
   * @returns {number}
   */
  function toFloat(value) {
      return parseFloat(value) || 0;
  }
  /**
   * Extracts borders size from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @param {...string} positions - Borders positions (top, right, ...)
   * @returns {number}
   */
  function getBordersSize(styles) {
      var positions = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          positions[_i - 1] = arguments[_i];
      }
      return positions.reduce(function (size, position) {
          var value = styles['border-' + position + '-width'];
          return size + toFloat(value);
      }, 0);
  }
  /**
   * Extracts paddings sizes from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @returns {Object} Paddings box.
   */
  function getPaddings(styles) {
      var positions = ['top', 'right', 'bottom', 'left'];
      var paddings = {};
      for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
          var position = positions_1[_i];
          var value = styles['padding-' + position];
          paddings[position] = toFloat(value);
      }
      return paddings;
  }
  /**
   * Calculates content rectangle of provided SVG element.
   *
   * @param {SVGGraphicsElement} target - Element content rectangle of which needs
   *      to be calculated.
   * @returns {DOMRectInit}
   */
  function getSVGContentRect(target) {
      var bbox = target.getBBox();
      return createRectInit(0, 0, bbox.width, bbox.height);
  }
  /**
   * Calculates content rectangle of provided HTMLElement.
   *
   * @param {HTMLElement} target - Element for which to calculate the content rectangle.
   * @returns {DOMRectInit}
   */
  function getHTMLElementContentRect(target) {
      // Client width & height properties can't be
      // used exclusively as they provide rounded values.
      var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
      // By this condition we can catch all non-replaced inline, hidden and
      // detached elements. Though elements with width & height properties less
      // than 0.5 will be discarded as well.
      //
      // Without it we would need to implement separate methods for each of
      // those cases and it's not possible to perform a precise and performance
      // effective test for hidden elements. E.g. even jQuery's ':visible' filter
      // gives wrong results for elements with width & height less than 0.5.
      if (!clientWidth && !clientHeight) {
          return emptyRect;
      }
      var styles = getWindowOf(target).getComputedStyle(target);
      var paddings = getPaddings(styles);
      var horizPad = paddings.left + paddings.right;
      var vertPad = paddings.top + paddings.bottom;
      // Computed styles of width & height are being used because they are the
      // only dimensions available to JS that contain non-rounded values. It could
      // be possible to utilize the getBoundingClientRect if only it's data wasn't
      // affected by CSS transformations let alone paddings, borders and scroll bars.
      var width = toFloat(styles.width), height = toFloat(styles.height);
      // Width & height include paddings and borders when the 'border-box' box
      // model is applied (except for IE).
      if (styles.boxSizing === 'border-box') {
          // Following conditions are required to handle Internet Explorer which
          // doesn't include paddings and borders to computed CSS dimensions.
          //
          // We can say that if CSS dimensions + paddings are equal to the "client"
          // properties then it's either IE, and thus we don't need to subtract
          // anything, or an element merely doesn't have paddings/borders styles.
          if (Math.round(width + horizPad) !== clientWidth) {
              width -= getBordersSize(styles, 'left', 'right') + horizPad;
          }
          if (Math.round(height + vertPad) !== clientHeight) {
              height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
          }
      }
      // Following steps can't be applied to the document's root element as its
      // client[Width/Height] properties represent viewport area of the window.
      // Besides, it's as well not necessary as the <html> itself neither has
      // rendered scroll bars nor it can be clipped.
      if (!isDocumentElement(target)) {
          // In some browsers (only in Firefox, actually) CSS width & height
          // include scroll bars size which can be removed at this step as scroll
          // bars are the only difference between rounded dimensions + paddings
          // and "client" properties, though that is not always true in Chrome.
          var vertScrollbar = Math.round(width + horizPad) - clientWidth;
          var horizScrollbar = Math.round(height + vertPad) - clientHeight;
          // Chrome has a rather weird rounding of "client" properties.
          // E.g. for an element with content width of 314.2px it sometimes gives
          // the client width of 315px and for the width of 314.7px it may give
          // 314px. And it doesn't happen all the time. So just ignore this delta
          // as a non-relevant.
          if (Math.abs(vertScrollbar) !== 1) {
              width -= vertScrollbar;
          }
          if (Math.abs(horizScrollbar) !== 1) {
              height -= horizScrollbar;
          }
      }
      return createRectInit(paddings.left, paddings.top, width, height);
  }
  /**
   * Checks whether provided element is an instance of the SVGGraphicsElement.
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  var isSVGGraphicsElement = (function () {
      // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
      // interface.
      if (typeof SVGGraphicsElement !== 'undefined') {
          return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
      }
      // If it's so, then check that element is at least an instance of the
      // SVGElement and that it has the "getBBox" method.
      // eslint-disable-next-line no-extra-parens
      return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
          typeof target.getBBox === 'function'); };
  })();
  /**
   * Checks whether provided element is a document element (<html>).
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  function isDocumentElement(target) {
      return target === getWindowOf(target).document.documentElement;
  }
  /**
   * Calculates an appropriate content rectangle for provided html or svg element.
   *
   * @param {Element} target - Element content rectangle of which needs to be calculated.
   * @returns {DOMRectInit}
   */
  function getContentRect(target) {
      if (!isBrowser) {
          return emptyRect;
      }
      if (isSVGGraphicsElement(target)) {
          return getSVGContentRect(target);
      }
      return getHTMLElementContentRect(target);
  }
  /**
   * Creates rectangle with an interface of the DOMRectReadOnly.
   * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
   *
   * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
   * @returns {DOMRectReadOnly}
   */
  function createReadOnlyRect(_a) {
      var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
      // If DOMRectReadOnly is available use it as a prototype for the rectangle.
      var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
      var rect = Object.create(Constr.prototype);
      // Rectangle's properties are not writable and non-enumerable.
      defineConfigurable(rect, {
          x: x, y: y, width: width, height: height,
          top: y,
          right: x + width,
          bottom: height + y,
          left: x
      });
      return rect;
  }
  /**
   * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
   * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
   *
   * @param {number} x - X coordinate.
   * @param {number} y - Y coordinate.
   * @param {number} width - Rectangle's width.
   * @param {number} height - Rectangle's height.
   * @returns {DOMRectInit}
   */
  function createRectInit(x, y, width, height) {
      return { x: x, y: y, width: width, height: height };
  }

  /**
   * Class that is responsible for computations of the content rectangle of
   * provided DOM element and for keeping track of it's changes.
   */
  var ResizeObservation = /** @class */ (function () {
      /**
       * Creates an instance of ResizeObservation.
       *
       * @param {Element} target - Element to be observed.
       */
      function ResizeObservation(target) {
          /**
           * Broadcasted width of content rectangle.
           *
           * @type {number}
           */
          this.broadcastWidth = 0;
          /**
           * Broadcasted height of content rectangle.
           *
           * @type {number}
           */
          this.broadcastHeight = 0;
          /**
           * Reference to the last observed content rectangle.
           *
           * @private {DOMRectInit}
           */
          this.contentRect_ = createRectInit(0, 0, 0, 0);
          this.target = target;
      }
      /**
       * Updates content rectangle and tells whether it's width or height properties
       * have changed since the last broadcast.
       *
       * @returns {boolean}
       */
      ResizeObservation.prototype.isActive = function () {
          var rect = getContentRect(this.target);
          this.contentRect_ = rect;
          return (rect.width !== this.broadcastWidth ||
              rect.height !== this.broadcastHeight);
      };
      /**
       * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
       * from the corresponding properties of the last observed content rectangle.
       *
       * @returns {DOMRectInit} Last observed content rectangle.
       */
      ResizeObservation.prototype.broadcastRect = function () {
          var rect = this.contentRect_;
          this.broadcastWidth = rect.width;
          this.broadcastHeight = rect.height;
          return rect;
      };
      return ResizeObservation;
  }());

  var ResizeObserverEntry = /** @class */ (function () {
      /**
       * Creates an instance of ResizeObserverEntry.
       *
       * @param {Element} target - Element that is being observed.
       * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
       */
      function ResizeObserverEntry(target, rectInit) {
          var contentRect = createReadOnlyRect(rectInit);
          // According to the specification following properties are not writable
          // and are also not enumerable in the native implementation.
          //
          // Property accessors are not being used as they'd require to define a
          // private WeakMap storage which may cause memory leaks in browsers that
          // don't support this type of collections.
          defineConfigurable(this, { target: target, contentRect: contentRect });
      }
      return ResizeObserverEntry;
  }());

  var ResizeObserverSPI = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserver.
       *
       * @param {ResizeObserverCallback} callback - Callback function that is invoked
       *      when one of the observed elements changes it's content dimensions.
       * @param {ResizeObserverController} controller - Controller instance which
       *      is responsible for the updates of observer.
       * @param {ResizeObserver} callbackCtx - Reference to the public
       *      ResizeObserver instance which will be passed to callback function.
       */
      function ResizeObserverSPI(callback, controller, callbackCtx) {
          /**
           * Collection of resize observations that have detected changes in dimensions
           * of elements.
           *
           * @private {Array<ResizeObservation>}
           */
          this.activeObservations_ = [];
          /**
           * Registry of the ResizeObservation instances.
           *
           * @private {Map<Element, ResizeObservation>}
           */
          this.observations_ = new MapShim();
          if (typeof callback !== 'function') {
              throw new TypeError('The callback provided as parameter 1 is not a function.');
          }
          this.callback_ = callback;
          this.controller_ = controller;
          this.callbackCtx_ = callbackCtx;
      }
      /**
       * Starts observing provided element.
       *
       * @param {Element} target - Element to be observed.
       * @returns {void}
       */
      ResizeObserverSPI.prototype.observe = function (target) {
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          // Do nothing if current environment doesn't have the Element interface.
          if (typeof Element === 'undefined' || !(Element instanceof Object)) {
              return;
          }
          if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
          }
          var observations = this.observations_;
          // Do nothing if element is already being observed.
          if (observations.has(target)) {
              return;
          }
          observations.set(target, new ResizeObservation(target));
          this.controller_.addObserver(this);
          // Force the update of observations.
          this.controller_.refresh();
      };
      /**
       * Stops observing provided element.
       *
       * @param {Element} target - Element to stop observing.
       * @returns {void}
       */
      ResizeObserverSPI.prototype.unobserve = function (target) {
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          // Do nothing if current environment doesn't have the Element interface.
          if (typeof Element === 'undefined' || !(Element instanceof Object)) {
              return;
          }
          if (!(target instanceof getWindowOf(target).Element)) {
              throw new TypeError('parameter 1 is not of type "Element".');
          }
          var observations = this.observations_;
          // Do nothing if element is not being observed.
          if (!observations.has(target)) {
              return;
          }
          observations.delete(target);
          if (!observations.size) {
              this.controller_.removeObserver(this);
          }
      };
      /**
       * Stops observing all elements.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.disconnect = function () {
          this.clearActive();
          this.observations_.clear();
          this.controller_.removeObserver(this);
      };
      /**
       * Collects observation instances the associated element of which has changed
       * it's content rectangle.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.gatherActive = function () {
          var _this = this;
          this.clearActive();
          this.observations_.forEach(function (observation) {
              if (observation.isActive()) {
                  _this.activeObservations_.push(observation);
              }
          });
      };
      /**
       * Invokes initial callback function with a list of ResizeObserverEntry
       * instances collected from active resize observations.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.broadcastActive = function () {
          // Do nothing if observer doesn't have active observations.
          if (!this.hasActive()) {
              return;
          }
          var ctx = this.callbackCtx_;
          // Create ResizeObserverEntry instance for every active observation.
          var entries = this.activeObservations_.map(function (observation) {
              return new ResizeObserverEntry(observation.target, observation.broadcastRect());
          });
          this.callback_.call(ctx, entries, ctx);
          this.clearActive();
      };
      /**
       * Clears the collection of active observations.
       *
       * @returns {void}
       */
      ResizeObserverSPI.prototype.clearActive = function () {
          this.activeObservations_.splice(0);
      };
      /**
       * Tells whether observer has active observations.
       *
       * @returns {boolean}
       */
      ResizeObserverSPI.prototype.hasActive = function () {
          return this.activeObservations_.length > 0;
      };
      return ResizeObserverSPI;
  }());

  // Registry of internal observers. If WeakMap is not available use current shim
  // for the Map collection as it has all required methods and because WeakMap
  // can't be fully polyfilled anyway.
  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
  /**
   * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
   * exposing only those methods and properties that are defined in the spec.
   */
  var ResizeObserver = /** @class */ (function () {
      /**
       * Creates a new instance of ResizeObserver.
       *
       * @param {ResizeObserverCallback} callback - Callback that is invoked when
       *      dimensions of the observed elements change.
       */
      function ResizeObserver(callback) {
          if (!(this instanceof ResizeObserver)) {
              throw new TypeError('Cannot call a class as a function.');
          }
          if (!arguments.length) {
              throw new TypeError('1 argument required, but only 0 present.');
          }
          var controller = ResizeObserverController.getInstance();
          var observer = new ResizeObserverSPI(callback, controller, this);
          observers.set(this, observer);
      }
      return ResizeObserver;
  }());
  // Expose public methods of ResizeObserver.
  [
      'observe',
      'unobserve',
      'disconnect'
  ].forEach(function (method) {
      ResizeObserver.prototype[method] = function () {
          var _a;
          return (_a = observers.get(this))[method].apply(_a, arguments);
      };
  });

  var index = (function () {
      // Export existing implementation if available.
      if (typeof global$1.ResizeObserver !== 'undefined') {
          return global$1.ResizeObserver;
      }
      return ResizeObserver;
  })();

  var INTERNAL_PREFIX_KEY = 'rc-observer-key'; // Still need to be compatible with React 15, we use class component here

  var ReactResizeObserver = /*#__PURE__*/function (_React$Component) {
    _inherits(ReactResizeObserver, _React$Component);

    var _super = _createSuper(ReactResizeObserver);

    function ReactResizeObserver() {
      var _this;

      _classCallCheck(this, ReactResizeObserver);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.resizeObserver = null;
      _this.childNode = null;
      _this.currentElement = null;
      _this.state = {
        width: 0,
        height: 0,
        offsetHeight: 0,
        offsetWidth: 0
      };

      _this.onResize = function (entries) {
        var onResize = _this.props.onResize;
        var target = entries[0].target;

        var _target$getBoundingCl = target.getBoundingClientRect(),
            width = _target$getBoundingCl.width,
            height = _target$getBoundingCl.height;

        var offsetWidth = target.offsetWidth,
            offsetHeight = target.offsetHeight;
        /**
         * Resize observer trigger when content size changed.
         * In most case we just care about element size,
         * let's use `boundary` instead of `contentRect` here to avoid shaking.
         */

        var fixedWidth = Math.floor(width);
        var fixedHeight = Math.floor(height);

        if (_this.state.width !== fixedWidth || _this.state.height !== fixedHeight || _this.state.offsetWidth !== offsetWidth || _this.state.offsetHeight !== offsetHeight) {
          var size = {
            width: fixedWidth,
            height: fixedHeight,
            offsetWidth: offsetWidth,
            offsetHeight: offsetHeight
          };

          _this.setState(size);

          if (onResize) {
            var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;
            var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight; // defer the callback but not defer to next frame

            Promise.resolve().then(function () {
              onResize(_objectSpread2$1(_objectSpread2$1({}, size), {}, {
                offsetWidth: mergedOffsetWidth,
                offsetHeight: mergedOffsetHeight
              }), target);
            });
          }
        }
      };

      _this.setChildNode = function (node) {
        _this.childNode = node;
      };

      return _this;
    }

    _createClass(ReactResizeObserver, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.onComponentUpdated();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.onComponentUpdated();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.destroyObserver();
      }
    }, {
      key: "onComponentUpdated",
      value: function onComponentUpdated() {
        var disabled = this.props.disabled; // Unregister if disabled

        if (disabled) {
          this.destroyObserver();
          return;
        } // Unregister if element changed


        var element = findDOMNode(this.childNode || this);
        var elementChanged = element !== this.currentElement;

        if (elementChanged) {
          this.destroyObserver();
          this.currentElement = element;
        }

        if (!this.resizeObserver && element) {
          this.resizeObserver = new index(this.onResize);
          this.resizeObserver.observe(element);
        }
      }
    }, {
      key: "destroyObserver",
      value: function destroyObserver() {
        if (this.resizeObserver) {
          this.resizeObserver.disconnect();
          this.resizeObserver = null;
        }
      }
    }, {
      key: "render",
      value: function render() {
        var children = this.props.children;
        var childNodes = toArray(children);

        if (childNodes.length > 1) {
          warningOnce(false, 'Find more than one child node with `children` in ResizeObserver. Will only observe first one.');
        } else if (childNodes.length === 0) {
          warningOnce(false, '`children` of ResizeObserver is empty. Nothing is in observe.');
          return null;
        }

        var childNode = childNodes[0];

        if ( /*#__PURE__*/React.isValidElement(childNode) && supportRef(childNode)) {
          var ref = childNode.ref;
          childNodes[0] = /*#__PURE__*/React.cloneElement(childNode, {
            ref: composeRef(ref, this.setChildNode)
          });
        }

        return childNodes.length === 1 ? childNodes[0] : childNodes.map(function (node, index) {
          if (! /*#__PURE__*/React.isValidElement(node) || 'key' in node && node.key !== null) {
            return node;
          }

          return /*#__PURE__*/React.cloneElement(node, {
            key: "".concat(INTERNAL_PREFIX_KEY, "-").concat(index)
          });
        });
      }
    }]);

    return ReactResizeObserver;
  }(React.Component);

  ReactResizeObserver.displayName = 'ResizeObserver';

  var IconContext = /*#__PURE__*/React.createContext({});

  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _arrayWithoutHoles$1(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
  }

  function _iterableToArray$1(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
  }

  function _nonIterableSpread$1() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray$1(arr) {
    return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
  }

  var HOOK_MARK = 'RC_FORM_INTERNAL_HOOKS'; // eslint-disable-next-line @typescript-eslint/no-explicit-any

  var warningFunc = function warningFunc() {
    warningOnce(false, 'Can not find FormContext. Please make sure you wrap Field under Form.');
  };

  var Context = /*#__PURE__*/React.createContext({
    getFieldValue: warningFunc,
    getFieldsValue: warningFunc,
    getFieldError: warningFunc,
    getFieldWarning: warningFunc,
    getFieldsError: warningFunc,
    isFieldsTouched: warningFunc,
    isFieldTouched: warningFunc,
    isFieldValidating: warningFunc,
    isFieldsValidating: warningFunc,
    resetFields: warningFunc,
    setFields: warningFunc,
    setFieldsValue: warningFunc,
    validateFields: warningFunc,
    submit: warningFunc,
    getInternalHooks: function getInternalHooks() {
      warningFunc();
      return {
        dispatch: warningFunc,
        initEntityValue: warningFunc,
        registerField: warningFunc,
        useSubscribe: warningFunc,
        setInitialValues: warningFunc,
        setCallbacks: warningFunc,
        getFields: warningFunc,
        setValidateMessages: warningFunc,
        setPreserve: warningFunc,
        getInitialValue: warningFunc
      };
    }
  });

  function toArray$1(value) {
    if (value === undefined || value === null) {
      return [];
    }

    return Array.isArray(value) ? value : [value];
  }

  var runtime_1 = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(Gp, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    });
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    define(Gp, iteratorSymbol, function() {
      return this;
    });

    define(Gp, "toString", function() {
      return "[object Generator]";
    });

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, in modern engines
    // we can explicitly access globalThis. In older engines we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    if (typeof globalThis === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }
  });

  var regenerator = runtime_1;

  function asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator$1(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _extends$2() {
    _extends$2 = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends$2.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;

    _setPrototypeOf$1(subClass, superClass);
  }

  function _getPrototypeOf$1(o) {
    _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf$1(o);
  }

  function _setPrototypeOf$1(o, p) {
    _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf$1(o, p);
  }

  function _isNativeReflectConstruct$1() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct$1()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf$1(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf$1(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf$1(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  /* eslint no-console:0 */
  var formatRegExp = /%[sdj%]/g;
  var warning$1 = function warning() {}; // don't print warning message when in production env or node runtime

  if (typeof process !== 'undefined' && process.env && "development" !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
    warning$1 = function warning(type, errors) {
      if (typeof console !== 'undefined' && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === 'undefined') {
        if (errors.every(function (e) {
          return typeof e === 'string';
        })) {
          console.warn(type, errors);
        }
      }
    };
  }

  function convertFieldsError(errors) {
    if (!errors || !errors.length) return null;
    var fields = {};
    errors.forEach(function (error) {
      var field = error.field;
      fields[field] = fields[field] || [];
      fields[field].push(error);
    });
    return fields;
  }
  function format(template) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var i = 0;
    var len = args.length;

    if (typeof template === 'function') {
      return template.apply(null, args);
    }

    if (typeof template === 'string') {
      var str = template.replace(formatRegExp, function (x) {
        if (x === '%%') {
          return '%';
        }

        if (i >= len) {
          return x;
        }

        switch (x) {
          case '%s':
            return String(args[i++]);

          case '%d':
            return Number(args[i++]);

          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }

            break;

          default:
            return x;
        }
      });
      return str;
    }

    return template;
  }

  function isNativeStringType(type) {
    return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'date' || type === 'pattern';
  }

  function isEmptyValue(value, type) {
    if (value === undefined || value === null) {
      return true;
    }

    if (type === 'array' && Array.isArray(value) && !value.length) {
      return true;
    }

    if (isNativeStringType(type) && typeof value === 'string' && !value) {
      return true;
    }

    return false;
  }

  function asyncParallelArray(arr, func, callback) {
    var results = [];
    var total = 0;
    var arrLength = arr.length;

    function count(errors) {
      results.push.apply(results, errors || []);
      total++;

      if (total === arrLength) {
        callback(results);
      }
    }

    arr.forEach(function (a) {
      func(a, count);
    });
  }

  function asyncSerialArray(arr, func, callback) {
    var index = 0;
    var arrLength = arr.length;

    function next(errors) {
      if (errors && errors.length) {
        callback(errors);
        return;
      }

      var original = index;
      index = index + 1;

      if (original < arrLength) {
        func(arr[original], next);
      } else {
        callback([]);
      }
    }

    next([]);
  }

  function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function (k) {
      ret.push.apply(ret, objArr[k] || []);
    });
    return ret;
  }

  var AsyncValidationError = /*#__PURE__*/function (_Error) {
    _inheritsLoose(AsyncValidationError, _Error);

    function AsyncValidationError(errors, fields) {
      var _this;

      _this = _Error.call(this, 'Async Validation Error') || this;
      _this.errors = errors;
      _this.fields = fields;
      return _this;
    }

    return AsyncValidationError;
  }( /*#__PURE__*/_wrapNativeSuper(Error));
  function asyncMap(objArr, option, func, callback, source) {
    if (option.first) {
      var _pending = new Promise(function (resolve, reject) {
        var next = function next(errors) {
          callback(errors);
          return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);
        };

        var flattenArr = flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func, next);
      });

      _pending["catch"](function (e) {
        return e;
      });

      return _pending;
    }

    var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total = 0;
    var results = [];
    var pending = new Promise(function (resolve, reject) {
      var next = function next(errors) {
        results.push.apply(results, errors);
        total++;

        if (total === objArrLength) {
          callback(results);
          return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
        }
      };

      if (!objArrKeys.length) {
        callback(results);
        resolve(source);
      }

      objArrKeys.forEach(function (key) {
        var arr = objArr[key];

        if (firstFields.indexOf(key) !== -1) {
          asyncSerialArray(arr, func, next);
        } else {
          asyncParallelArray(arr, func, next);
        }
      });
    });
    pending["catch"](function (e) {
      return e;
    });
    return pending;
  }

  function isErrorObj(obj) {
    return !!(obj && obj.message !== undefined);
  }

  function getValue(value, path) {
    var v = value;

    for (var i = 0; i < path.length; i++) {
      if (v == undefined) {
        return v;
      }

      v = v[path[i]];
    }

    return v;
  }

  function complementError(rule, source) {
    return function (oe) {
      var fieldValue;

      if (rule.fullFields) {
        fieldValue = getValue(source, rule.fullFields);
      } else {
        fieldValue = source[oe.field || rule.fullField];
      }

      if (isErrorObj(oe)) {
        oe.field = oe.field || rule.fullField;
        oe.fieldValue = fieldValue;
        return oe;
      }

      return {
        message: typeof oe === 'function' ? oe() : oe,
        fieldValue: fieldValue,
        field: oe.field || rule.fullField
      };
    };
  }
  function deepMerge(target, source) {
    if (source) {
      for (var s in source) {
        if (source.hasOwnProperty(s)) {
          var value = source[s];

          if (typeof value === 'object' && typeof target[s] === 'object') {
            target[s] = _extends$2({}, target[s], value);
          } else {
            target[s] = value;
          }
        }
      }
    }

    return target;
  }

  var required$1 = function required(rule, value, source, errors, options, type) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type || rule.type))) {
      errors.push(format(options.messages.required, rule.fullField));
    }
  };

  /**
   *  Rule for validating whitespace.
   *
   *  @param rule The validation rule.
   *  @param value The value of the field on the source object.
   *  @param source The source object being validated.
   *  @param errors An array of errors that this rule may add
   *  validation errors to.
   *  @param options The validation options.
   *  @param options.messages The validation messages.
   */

  var whitespace = function whitespace(rule, value, source, errors, options) {
    if (/^\s+$/.test(value) || value === '') {
      errors.push(format(options.messages.whitespace, rule.fullField));
    }
  };

  /* eslint max-len:0 */

  var pattern$2 = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
    url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", 'i'),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  var types = {
    integer: function integer(value) {
      return types.number(value) && parseInt(value, 10) === value;
    },
    "float": function float(value) {
      return types.number(value) && !types.integer(value);
    },
    array: function array(value) {
      return Array.isArray(value);
    },
    regexp: function regexp(value) {
      if (value instanceof RegExp) {
        return true;
      }

      try {
        return !!new RegExp(value);
      } catch (e) {
        return false;
      }
    },
    date: function date(value) {
      return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function' && !isNaN(value.getTime());
    },
    number: function number(value) {
      if (isNaN(value)) {
        return false;
      }

      return typeof value === 'number';
    },
    object: function object(value) {
      return typeof value === 'object' && !types.array(value);
    },
    method: function method(value) {
      return typeof value === 'function';
    },
    email: function email(value) {
      return typeof value === 'string' && value.length <= 320 && !!value.match(pattern$2.email);
    },
    url: function url(value) {
      return typeof value === 'string' && value.length <= 2048 && !!value.match(pattern$2.url);
    },
    hex: function hex(value) {
      return typeof value === 'string' && !!value.match(pattern$2.hex);
    }
  };

  var type$1 = function type(rule, value, source, errors, options) {
    if (rule.required && value === undefined) {
      required$1(rule, value, source, errors, options);
      return;
    }

    var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];
    var ruleType = rule.type;

    if (custom.indexOf(ruleType) > -1) {
      if (!types[ruleType](value)) {
        errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
      } // straight typeof check

    } else if (ruleType && typeof value !== rule.type) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  };

  var range = function range(rule, value, source, errors, options) {
    var len = typeof rule.len === 'number';
    var min = typeof rule.min === 'number';
    var max = typeof rule.max === 'number'; // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）

    var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var val = value;
    var key = null;
    var num = typeof value === 'number';
    var str = typeof value === 'string';
    var arr = Array.isArray(value);

    if (num) {
      key = 'number';
    } else if (str) {
      key = 'string';
    } else if (arr) {
      key = 'array';
    } // if the value is not of a supported type for range validation
    // the validation rule rule should use the
    // type property to also test for a particular type


    if (!key) {
      return false;
    }

    if (arr) {
      val = value.length;
    }

    if (str) {
      // 处理码点大于U+010000的文字length属性不准确的bug，如"𠮷𠮷𠮷".lenght !== 3
      val = value.replace(spRegexp, '_').length;
    }

    if (len) {
      if (val !== rule.len) {
        errors.push(format(options.messages[key].len, rule.fullField, rule.len));
      }
    } else if (min && !max && val < rule.min) {
      errors.push(format(options.messages[key].min, rule.fullField, rule.min));
    } else if (max && !min && val > rule.max) {
      errors.push(format(options.messages[key].max, rule.fullField, rule.max));
    } else if (min && max && (val < rule.min || val > rule.max)) {
      errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
    }
  };

  var ENUM$1 = 'enum';

  var enumerable$1 = function enumerable(rule, value, source, errors, options) {
    rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];

    if (rule[ENUM$1].indexOf(value) === -1) {
      errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(', ')));
    }
  };

  var pattern$1 = function pattern(rule, value, source, errors, options) {
    if (rule.pattern) {
      if (rule.pattern instanceof RegExp) {
        // if a RegExp instance is passed, reset `lastIndex` in case its `global`
        // flag is accidentally set to `true`, which in a validation scenario
        // is not necessary and the result might be misleading
        rule.pattern.lastIndex = 0;

        if (!rule.pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      } else if (typeof rule.pattern === 'string') {
        var _pattern = new RegExp(rule.pattern);

        if (!_pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      }
    }
  };

  var rules = {
    required: required$1,
    whitespace: whitespace,
    type: type$1,
    range: range,
    "enum": enumerable$1,
    pattern: pattern$1
  };

  var string = function string(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value, 'string') && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options, 'string');

      if (!isEmptyValue(value, 'string')) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
        rules.pattern(rule, value, source, errors, options);

        if (rule.whitespace === true) {
          rules.whitespace(rule, value, source, errors, options);
        }
      }
    }

    callback(errors);
  };

  var method = function method(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var number = function number(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (value === '') {
        value = undefined;
      }

      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var _boolean = function _boolean(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var regexp = function regexp(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (!isEmptyValue(value)) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var integer = function integer(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var floatFn = function floatFn(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var array = function array(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if ((value === undefined || value === null) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options, 'array');

      if (value !== undefined && value !== null) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var object = function object(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var ENUM = 'enum';

  var enumerable = function enumerable(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (value !== undefined) {
        rules[ENUM](rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var pattern = function pattern(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value, 'string') && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (!isEmptyValue(value, 'string')) {
        rules.pattern(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var date = function date(rule, value, callback, source, options) {
    // console.log('integer rule called %j', rule);
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field); // console.log('validate on %s value', value);

    if (validate) {
      if (isEmptyValue(value, 'date') && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);

      if (!isEmptyValue(value, 'date')) {
        var dateObject;

        if (value instanceof Date) {
          dateObject = value;
        } else {
          dateObject = new Date(value);
        }

        rules.type(rule, dateObject, source, errors, options);

        if (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors, options);
        }
      }
    }

    callback(errors);
  };

  var required = function required(rule, value, callback, source, options) {
    var errors = [];
    var type = Array.isArray(value) ? 'array' : typeof value;
    rules.required(rule, value, source, errors, options, type);
    callback(errors);
  };

  var type = function type(rule, value, callback, source, options) {
    var ruleType = rule.type;
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value, ruleType) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options, ruleType);

      if (!isEmptyValue(value, ruleType)) {
        rules.type(rule, value, source, errors, options);
      }
    }

    callback(errors);
  };

  var any = function any(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);

    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }

      rules.required(rule, value, source, errors, options);
    }

    callback(errors);
  };

  var validators = {
    string: string,
    method: method,
    number: number,
    "boolean": _boolean,
    regexp: regexp,
    integer: integer,
    "float": floatFn,
    array: array,
    object: object,
    "enum": enumerable,
    pattern: pattern,
    date: date,
    url: type,
    hex: type,
    email: type,
    required: required,
    any: any
  };

  function newMessages() {
    return {
      "default": 'Validation error on field %s',
      required: '%s is required',
      "enum": '%s must be one of %s',
      whitespace: '%s cannot be empty',
      date: {
        format: '%s date %s is invalid for format %s',
        parse: '%s date could not be parsed, %s is invalid ',
        invalid: '%s date %s is invalid'
      },
      types: {
        string: '%s is not a %s',
        method: '%s is not a %s (function)',
        array: '%s is not an %s',
        object: '%s is not an %s',
        number: '%s is not a %s',
        date: '%s is not a %s',
        "boolean": '%s is not a %s',
        integer: '%s is not an %s',
        "float": '%s is not a %s',
        regexp: '%s is not a valid %s',
        email: '%s is not a valid %s',
        url: '%s is not a valid %s',
        hex: '%s is not a valid %s'
      },
      string: {
        len: '%s must be exactly %s characters',
        min: '%s must be at least %s characters',
        max: '%s cannot be longer than %s characters',
        range: '%s must be between %s and %s characters'
      },
      number: {
        len: '%s must equal %s',
        min: '%s cannot be less than %s',
        max: '%s cannot be greater than %s',
        range: '%s must be between %s and %s'
      },
      array: {
        len: '%s must be exactly %s in length',
        min: '%s cannot be less than %s in length',
        max: '%s cannot be greater than %s in length',
        range: '%s must be between %s and %s in length'
      },
      pattern: {
        mismatch: '%s value %s does not match pattern %s'
      },
      clone: function clone() {
        var cloned = JSON.parse(JSON.stringify(this));
        cloned.clone = this.clone;
        return cloned;
      }
    };
  }
  var messages = newMessages();

  /**
   *  Encapsulates a validation schema.
   *
   *  @param descriptor An object declaring validation rules
   *  for this schema.
   */

  var Schema = /*#__PURE__*/function () {
    // ========================= Static =========================
    // ======================== Instance ========================
    function Schema(descriptor) {
      this.rules = null;
      this._messages = messages;
      this.define(descriptor);
    }

    var _proto = Schema.prototype;

    _proto.define = function define(rules) {
      var _this = this;

      if (!rules) {
        throw new Error('Cannot configure a schema with no rules');
      }

      if (typeof rules !== 'object' || Array.isArray(rules)) {
        throw new Error('Rules must be an object');
      }

      this.rules = {};
      Object.keys(rules).forEach(function (name) {
        var item = rules[name];
        _this.rules[name] = Array.isArray(item) ? item : [item];
      });
    };

    _proto.messages = function messages(_messages) {
      if (_messages) {
        this._messages = deepMerge(newMessages(), _messages);
      }

      return this._messages;
    };

    _proto.validate = function validate(source_, o, oc) {
      var _this2 = this;

      if (o === void 0) {
        o = {};
      }

      if (oc === void 0) {
        oc = function oc() {};
      }

      var source = source_;
      var options = o;
      var callback = oc;

      if (typeof options === 'function') {
        callback = options;
        options = {};
      }

      if (!this.rules || Object.keys(this.rules).length === 0) {
        if (callback) {
          callback(null, source);
        }

        return Promise.resolve(source);
      }

      function complete(results) {
        var errors = [];
        var fields = {};

        function add(e) {
          if (Array.isArray(e)) {
            var _errors;

            errors = (_errors = errors).concat.apply(_errors, e);
          } else {
            errors.push(e);
          }
        }

        for (var i = 0; i < results.length; i++) {
          add(results[i]);
        }

        if (!errors.length) {
          callback(null, source);
        } else {
          fields = convertFieldsError(errors);
          callback(errors, fields);
        }
      }

      if (options.messages) {
        var messages$1 = this.messages();

        if (messages$1 === messages) {
          messages$1 = newMessages();
        }

        deepMerge(messages$1, options.messages);
        options.messages = messages$1;
      } else {
        options.messages = this.messages();
      }

      var series = {};
      var keys = options.keys || Object.keys(this.rules);
      keys.forEach(function (z) {
        var arr = _this2.rules[z];
        var value = source[z];
        arr.forEach(function (r) {
          var rule = r;

          if (typeof rule.transform === 'function') {
            if (source === source_) {
              source = _extends$2({}, source);
            }

            value = source[z] = rule.transform(value);
          }

          if (typeof rule === 'function') {
            rule = {
              validator: rule
            };
          } else {
            rule = _extends$2({}, rule);
          } // Fill validator. Skip if nothing need to validate


          rule.validator = _this2.getValidationMethod(rule);

          if (!rule.validator) {
            return;
          }

          rule.field = z;
          rule.fullField = rule.fullField || z;
          rule.type = _this2.getType(rule);
          series[z] = series[z] || [];
          series[z].push({
            rule: rule,
            value: value,
            source: source,
            field: z
          });
        });
      });
      var errorFields = {};
      return asyncMap(series, options, function (data, doIt) {
        var rule = data.rule;
        var deep = (rule.type === 'object' || rule.type === 'array') && (typeof rule.fields === 'object' || typeof rule.defaultField === 'object');
        deep = deep && (rule.required || !rule.required && data.value);
        rule.field = data.field;

        function addFullField(key, schema) {
          return _extends$2({}, schema, {
            fullField: rule.fullField + "." + key,
            fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]
          });
        }

        function cb(e) {
          if (e === void 0) {
            e = [];
          }

          var errorList = Array.isArray(e) ? e : [e];

          if (!options.suppressWarning && errorList.length) {
            Schema.warning('async-validator:', errorList);
          }

          if (errorList.length && rule.message !== undefined) {
            errorList = [].concat(rule.message);
          } // Fill error info


          var filledErrors = errorList.map(complementError(rule, source));

          if (options.first && filledErrors.length) {
            errorFields[rule.field] = 1;
            return doIt(filledErrors);
          }

          if (!deep) {
            doIt(filledErrors);
          } else {
            // if rule is required but the target object
            // does not exist fail at the rule level and don't
            // go deeper
            if (rule.required && !data.value) {
              if (rule.message !== undefined) {
                filledErrors = [].concat(rule.message).map(complementError(rule, source));
              } else if (options.error) {
                filledErrors = [options.error(rule, format(options.messages.required, rule.field))];
              }

              return doIt(filledErrors);
            }

            var fieldsSchema = {};

            if (rule.defaultField) {
              Object.keys(data.value).map(function (key) {
                fieldsSchema[key] = rule.defaultField;
              });
            }

            fieldsSchema = _extends$2({}, fieldsSchema, data.rule.fields);
            var paredFieldsSchema = {};
            Object.keys(fieldsSchema).forEach(function (field) {
              var fieldSchema = fieldsSchema[field];
              var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
              paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
            });
            var schema = new Schema(paredFieldsSchema);
            schema.messages(options.messages);

            if (data.rule.options) {
              data.rule.options.messages = options.messages;
              data.rule.options.error = options.error;
            }

            schema.validate(data.value, data.rule.options || options, function (errs) {
              var finalErrors = [];

              if (filledErrors && filledErrors.length) {
                finalErrors.push.apply(finalErrors, filledErrors);
              }

              if (errs && errs.length) {
                finalErrors.push.apply(finalErrors, errs);
              }

              doIt(finalErrors.length ? finalErrors : null);
            });
          }
        }

        var res;

        if (rule.asyncValidator) {
          res = rule.asyncValidator(rule, data.value, cb, data.source, options);
        } else if (rule.validator) {
          res = rule.validator(rule, data.value, cb, data.source, options);

          if (res === true) {
            cb();
          } else if (res === false) {
            cb(typeof rule.message === 'function' ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
          } else if (res instanceof Array) {
            cb(res);
          } else if (res instanceof Error) {
            cb(res.message);
          }
        }

        if (res && res.then) {
          res.then(function () {
            return cb();
          }, function (e) {
            return cb(e);
          });
        }
      }, function (results) {
        complete(results);
      }, source);
    };

    _proto.getType = function getType(rule) {
      if (rule.type === undefined && rule.pattern instanceof RegExp) {
        rule.type = 'pattern';
      }

      if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) {
        throw new Error(format('Unknown rule type %s', rule.type));
      }

      return rule.type || 'string';
    };

    _proto.getValidationMethod = function getValidationMethod(rule) {
      if (typeof rule.validator === 'function') {
        return rule.validator;
      }

      var keys = Object.keys(rule);
      var messageIndex = keys.indexOf('message');

      if (messageIndex !== -1) {
        keys.splice(messageIndex, 1);
      }

      if (keys.length === 1 && keys[0] === 'required') {
        return validators.required;
      }

      return validators[this.getType(rule)] || undefined;
    };

    return Schema;
  }();

  Schema.register = function register(type, validator) {
    if (typeof validator !== 'function') {
      throw new Error('Cannot register a validator by type, validator is not a function');
    }

    validators[type] = validator;
  };

  Schema.warning = warning$1;
  Schema.messages = messages;
  Schema.validators = validators;

  var typeTemplate = "'${name}' is not a valid ${type}";
  var defaultValidateMessages = {
    default: "Validation error on field '${name}'",
    required: "'${name}' is required",
    enum: "'${name}' must be one of [${enum}]",
    whitespace: "'${name}' cannot be empty",
    date: {
      format: "'${name}' is invalid for format date",
      parse: "'${name}' could not be parsed as date",
      invalid: "'${name}' is invalid date"
    },
    types: {
      string: typeTemplate,
      method: typeTemplate,
      array: typeTemplate,
      object: typeTemplate,
      number: typeTemplate,
      date: typeTemplate,
      boolean: typeTemplate,
      integer: typeTemplate,
      float: typeTemplate,
      regexp: typeTemplate,
      email: typeTemplate,
      url: typeTemplate,
      hex: typeTemplate
    },
    string: {
      len: "'${name}' must be exactly ${len} characters",
      min: "'${name}' must be at least ${min} characters",
      max: "'${name}' cannot be longer than ${max} characters",
      range: "'${name}' must be between ${min} and ${max} characters"
    },
    number: {
      len: "'${name}' must equal ${len}",
      min: "'${name}' cannot be less than ${min}",
      max: "'${name}' cannot be greater than ${max}",
      range: "'${name}' must be between ${min} and ${max}"
    },
    array: {
      len: "'${name}' must be exactly ${len} in length",
      min: "'${name}' cannot be less than ${min} in length",
      max: "'${name}' cannot be greater than ${max} in length",
      range: "'${name}' must be between ${min} and ${max} in length"
    },
    pattern: {
      mismatch: "'${name}' does not match pattern ${pattern}"
    }
  };

  function get(entity, path) {
    var current = entity;

    for (var i = 0; i < path.length; i += 1) {
      if (current === null || current === undefined) {
        return undefined;
      }

      current = current[path[i]];
    }

    return current;
  }

  function _arrayWithHoles$1(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toArray(arr) {
    return _arrayWithHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableRest$1();
  }

  function internalSet(entity, paths, value, removeIfUndefined) {
    if (!paths.length) {
      return value;
    }

    var _paths = _toArray(paths),
        path = _paths[0],
        restPath = _paths.slice(1);

    var clone;

    if (!entity && typeof path === 'number') {
      clone = [];
    } else if (Array.isArray(entity)) {
      clone = _toConsumableArray$1(entity);
    } else {
      clone = _objectSpread2$1({}, entity);
    } // Delete prop if `removeIfUndefined` and value is undefined


    if (removeIfUndefined && value === undefined && restPath.length === 1) {
      delete clone[path][restPath[0]];
    } else {
      clone[path] = internalSet(clone[path], restPath, value, removeIfUndefined);
    }

    return clone;
  }

  function set(entity, paths, value) {
    var removeIfUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    // Do nothing if `removeIfUndefined` and parent object not exist
    if (paths.length && removeIfUndefined && value === undefined && !get(entity, paths.slice(0, -1))) {
      return entity;
    }

    return internalSet(entity, paths, value, removeIfUndefined);
  }

  /**
   * Convert name to internal supported format.
   * This function should keep since we still thinking if need support like `a.b.c` format.
   * 'a' => ['a']
   * 123 => [123]
   * ['a', 123] => ['a', 123]
   */

  function getNamePath(path) {
    return toArray$1(path);
  }
  function getValue$1(store, namePath) {
    var value = get(store, namePath);
    return value;
  }
  function setValue(store, namePath, value) {
    var removeIfUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    var newStore = set(store, namePath, value, removeIfUndefined);
    return newStore;
  }
  function cloneByNamePathList(store, namePathList) {
    var newStore = {};
    namePathList.forEach(function (namePath) {
      var value = getValue$1(store, namePath);
      newStore = setValue(newStore, namePath, value);
    });
    return newStore;
  }
  function containsNamePath(namePathList, namePath) {
    return namePathList && namePathList.some(function (path) {
      return matchNamePath(path, namePath);
    });
  }

  function isObject(obj) {
    return _typeof$1(obj) === 'object' && obj !== null && Object.getPrototypeOf(obj) === Object.prototype;
  }
  /**
   * Copy values into store and return a new values object
   * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }
   */


  function internalSetValues(store, values) {
    var newStore = Array.isArray(store) ? _toConsumableArray$1(store) : _objectSpread2$1({}, store);

    if (!values) {
      return newStore;
    }

    Object.keys(values).forEach(function (key) {
      var prevValue = newStore[key];
      var value = values[key]; // If both are object (but target is not array), we use recursion to set deep value

      var recursive = isObject(prevValue) && isObject(value);
      newStore[key] = recursive ? internalSetValues(prevValue, value || {}) : value;
    });
    return newStore;
  }

  function setValues(store) {
    for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      restValues[_key - 1] = arguments[_key];
    }

    return restValues.reduce(function (current, newStore) {
      return internalSetValues(current, newStore);
    }, store);
  }
  function matchNamePath(namePath, changedNamePath) {
    if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {
      return false;
    }

    return namePath.every(function (nameUnit, i) {
      return changedNamePath[i] === nameUnit;
    });
  }
  function isSimilar(source, target) {
    if (source === target) {
      return true;
    }

    if (!source && target || source && !target) {
      return false;
    }

    if (!source || !target || _typeof$1(source) !== 'object' || _typeof$1(target) !== 'object') {
      return false;
    }

    var sourceKeys = Object.keys(source);
    var targetKeys = Object.keys(target);
    var keys = new Set([].concat(_toConsumableArray$1(sourceKeys), _toConsumableArray$1(targetKeys)));
    return _toConsumableArray$1(keys).every(function (key) {
      var sourceValue = source[key];
      var targetValue = target[key];

      if (typeof sourceValue === 'function' && typeof targetValue === 'function') {
        return true;
      }

      return sourceValue === targetValue;
    });
  }
  function defaultGetValueFromEvent(valuePropName) {
    var event = arguments.length <= 1 ? undefined : arguments[1];

    if (event && event.target && valuePropName in event.target) {
      return event.target[valuePropName];
    }

    return event;
  }
  /**
   * Moves an array item from one position in an array to another.
   *
   * Note: This is a pure function so a new array will be returned, instead
   * of altering the array argument.
   *
   * @param array         Array in which to move an item.         (required)
   * @param moveIndex     The index of the item to move.          (required)
   * @param toIndex       The index to move item at moveIndex to. (required)
   */

  function move(array, moveIndex, toIndex) {
    var length = array.length;

    if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {
      return array;
    }

    var item = array[moveIndex];
    var diff = moveIndex - toIndex;

    if (diff > 0) {
      // move left
      return [].concat(_toConsumableArray$1(array.slice(0, toIndex)), [item], _toConsumableArray$1(array.slice(toIndex, moveIndex)), _toConsumableArray$1(array.slice(moveIndex + 1, length)));
    }

    if (diff < 0) {
      // move right
      return [].concat(_toConsumableArray$1(array.slice(0, moveIndex)), _toConsumableArray$1(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray$1(array.slice(toIndex + 1, length)));
    }

    return array;
  }

  var AsyncValidator = Schema;
  /**
   * Replace with template.
   *   `I'm ${name}` + { name: 'bamboo' } = I'm bamboo
   */

  function replaceMessage(template, kv) {
    return template.replace(/\$\{\w+\}/g, function (str) {
      var key = str.slice(2, -1);
      return kv[key];
    });
  }

  function validateRule(_x, _x2, _x3, _x4, _x5) {
    return _validateRule.apply(this, arguments);
  }
  /**
   * We use `async-validator` to validate the value.
   * But only check one value in a time to avoid namePath validate issue.
   */


  function _validateRule() {
    _validateRule = _asyncToGenerator$1( /*#__PURE__*/regenerator.mark(function _callee2(name, value, rule, options, messageVariables) {
      var cloneRule, subRuleField, validator, messages, result, subResults, kv, fillVariableResult;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              cloneRule = _objectSpread2$1({}, rule); // Bug of `async-validator`
              // https://github.com/react-component/field-form/issues/316
              // https://github.com/react-component/field-form/issues/313

              delete cloneRule.ruleIndex; // We should special handle array validate

              subRuleField = null;

              if (cloneRule && cloneRule.type === 'array' && cloneRule.defaultField) {
                subRuleField = cloneRule.defaultField;
                delete cloneRule.defaultField;
              }

              validator = new AsyncValidator(_defineProperty$1({}, name, [cloneRule]));
              messages = setValues({}, defaultValidateMessages, options.validateMessages);
              validator.messages(messages);
              result = [];
              _context2.prev = 8;
              _context2.next = 11;
              return Promise.resolve(validator.validate(_defineProperty$1({}, name, value), _objectSpread2$1({}, options)));

            case 11:
              _context2.next = 16;
              break;

            case 13:
              _context2.prev = 13;
              _context2.t0 = _context2["catch"](8);

              if (_context2.t0.errors) {
                result = _context2.t0.errors.map(function (_ref4, index) {
                  var message = _ref4.message;
                  return (// Wrap ReactNode with `key`

                    /*#__PURE__*/
                    React.isValidElement(message) ? /*#__PURE__*/React.cloneElement(message, {
                      key: "error_".concat(index)
                    }) : message
                  );
                });
              } else {
                console.error(_context2.t0);
                result = [messages.default];
              }

            case 16:
              if (!(!result.length && subRuleField)) {
                _context2.next = 21;
                break;
              }

              _context2.next = 19;
              return Promise.all(value.map(function (subValue, i) {
                return validateRule("".concat(name, ".").concat(i), subValue, subRuleField, options, messageVariables);
              }));

            case 19:
              subResults = _context2.sent;
              return _context2.abrupt("return", subResults.reduce(function (prev, errors) {
                return [].concat(_toConsumableArray$1(prev), _toConsumableArray$1(errors));
              }, []));

            case 21:
              // Replace message with variables
              kv = _objectSpread2$1(_objectSpread2$1({}, rule), {}, {
                name: name,
                enum: (rule.enum || []).join(', ')
              }, messageVariables);
              fillVariableResult = result.map(function (error) {
                if (typeof error === 'string') {
                  return replaceMessage(error, kv);
                }

                return error;
              });
              return _context2.abrupt("return", fillVariableResult);

            case 24:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[8, 13]]);
    }));
    return _validateRule.apply(this, arguments);
  }

  function validateRules(namePath, value, rules, options, validateFirst, messageVariables) {
    var name = namePath.join('.'); // Fill rule with context

    var filledRules = rules.map(function (currentRule, ruleIndex) {
      var originValidatorFunc = currentRule.validator;

      var cloneRule = _objectSpread2$1(_objectSpread2$1({}, currentRule), {}, {
        ruleIndex: ruleIndex
      }); // Replace validator if needed


      if (originValidatorFunc) {
        cloneRule.validator = function (rule, val, callback) {
          var hasPromise = false; // Wrap callback only accept when promise not provided

          var wrappedCallback = function wrappedCallback() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            // Wait a tick to make sure return type is a promise
            Promise.resolve().then(function () {
              warningOnce(!hasPromise, 'Your validator function has already return a promise. `callback` will be ignored.');

              if (!hasPromise) {
                callback.apply(void 0, args);
              }
            });
          }; // Get promise


          var promise = originValidatorFunc(rule, val, wrappedCallback);
          hasPromise = promise && typeof promise.then === 'function' && typeof promise.catch === 'function';
          /**
           * 1. Use promise as the first priority.
           * 2. If promise not exist, use callback with warning instead
           */

          warningOnce(hasPromise, '`callback` is deprecated. Please return a promise instead.');

          if (hasPromise) {
            promise.then(function () {
              callback();
            }).catch(function (err) {
              callback(err || ' ');
            });
          }
        };
      }

      return cloneRule;
    }).sort(function (_ref, _ref2) {
      var w1 = _ref.warningOnly,
          i1 = _ref.ruleIndex;
      var w2 = _ref2.warningOnly,
          i2 = _ref2.ruleIndex;

      if (!!w1 === !!w2) {
        // Let keep origin order
        return i1 - i2;
      }

      if (w1) {
        return 1;
      }

      return -1;
    }); // Do validate rules

    var summaryPromise;

    if (validateFirst === true) {
      // >>>>> Validate by serialization
      summaryPromise = new Promise( /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator$1( /*#__PURE__*/regenerator.mark(function _callee(resolve, reject) {
          var i, rule, errors;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  i = 0;

                case 1:
                  if (!(i < filledRules.length)) {
                    _context.next = 12;
                    break;
                  }

                  rule = filledRules[i];
                  _context.next = 5;
                  return validateRule(name, value, rule, options, messageVariables);

                case 5:
                  errors = _context.sent;

                  if (!errors.length) {
                    _context.next = 9;
                    break;
                  }

                  reject([{
                    errors: errors,
                    rule: rule
                  }]);
                  return _context.abrupt("return");

                case 9:
                  i += 1;
                  _context.next = 1;
                  break;

                case 12:
                  /* eslint-enable */
                  resolve([]);

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x6, _x7) {
          return _ref3.apply(this, arguments);
        };
      }());
    } else {
      // >>>>> Validate by parallel
      var rulePromises = filledRules.map(function (rule) {
        return validateRule(name, value, rule, options, messageVariables).then(function (errors) {
          return {
            errors: errors,
            rule: rule
          };
        });
      });
      summaryPromise = (validateFirst ? finishOnFirstFailed(rulePromises) : finishOnAllFailed(rulePromises)).then(function (errors) {
        // Always change to rejection for Field to catch
        return Promise.reject(errors);
      });
    } // Internal catch error to avoid console error log.


    summaryPromise.catch(function (e) {
      return e;
    });
    return summaryPromise;
  }

  function finishOnAllFailed(_x8) {
    return _finishOnAllFailed.apply(this, arguments);
  }

  function _finishOnAllFailed() {
    _finishOnAllFailed = _asyncToGenerator$1( /*#__PURE__*/regenerator.mark(function _callee3(rulePromises) {
      return regenerator.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", Promise.all(rulePromises).then(function (errorsList) {
                var _ref5;

                var errors = (_ref5 = []).concat.apply(_ref5, _toConsumableArray$1(errorsList));

                return errors;
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _finishOnAllFailed.apply(this, arguments);
  }

  function finishOnFirstFailed(_x9) {
    return _finishOnFirstFailed.apply(this, arguments);
  }

  function _finishOnFirstFailed() {
    _finishOnFirstFailed = _asyncToGenerator$1( /*#__PURE__*/regenerator.mark(function _callee4(rulePromises) {
      var count;
      return regenerator.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              count = 0;
              return _context4.abrupt("return", new Promise(function (resolve) {
                rulePromises.forEach(function (promise) {
                  promise.then(function (ruleError) {
                    if (ruleError.errors.length) {
                      resolve([ruleError]);
                    }

                    count += 1;

                    if (count === rulePromises.length) {
                      resolve([]);
                    }
                  });
                });
              }));

            case 2:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));
    return _finishOnFirstFailed.apply(this, arguments);
  }

  var _excluded = ["name"];
  var EMPTY_ERRORS = [];

  function requireUpdate(shouldUpdate, prev, next, prevValue, nextValue, info) {
    if (typeof shouldUpdate === 'function') {
      return shouldUpdate(prev, next, 'source' in info ? {
        source: info.source
      } : {});
    }

    return prevValue !== nextValue;
  } // We use Class instead of Hooks here since it will cost much code by using Hooks.


  var Field = /*#__PURE__*/function (_React$Component) {
    _inherits(Field, _React$Component);

    var _super = _createSuper(Field);

    /**
     * Follow state should not management in State since it will async update by React.
     * This makes first render of form can not get correct state value.
     */

    /**
     * Mark when touched & validated. Currently only used for `dependencies`.
     * Note that we do not think field with `initialValue` is dirty
     * but this will be by `isFieldDirty` func.
     */
    // ============================== Subscriptions ==============================
    function Field(props) {
      var _this;

      _classCallCheck(this, Field);

      _this = _super.call(this, props); // Register on init

      _this.state = {
        resetCount: 0
      };
      _this.cancelRegisterFunc = null;
      _this.mounted = false;
      _this.touched = false;
      _this.dirty = false;
      _this.validatePromise = null;
      _this.prevValidating = void 0;
      _this.errors = EMPTY_ERRORS;
      _this.warnings = EMPTY_ERRORS;

      _this.cancelRegister = function () {
        var _this$props = _this.props,
            preserve = _this$props.preserve,
            isListField = _this$props.isListField,
            name = _this$props.name;

        if (_this.cancelRegisterFunc) {
          _this.cancelRegisterFunc(isListField, preserve, getNamePath(name));
        }

        _this.cancelRegisterFunc = null;
      };

      _this.getNamePath = function () {
        var _this$props2 = _this.props,
            name = _this$props2.name,
            fieldContext = _this$props2.fieldContext;
        var _fieldContext$prefixN = fieldContext.prefixName,
            prefixName = _fieldContext$prefixN === void 0 ? [] : _fieldContext$prefixN;
        return name !== undefined ? [].concat(_toConsumableArray$1(prefixName), _toConsumableArray$1(name)) : [];
      };

      _this.getRules = function () {
        var _this$props3 = _this.props,
            _this$props3$rules = _this$props3.rules,
            rules = _this$props3$rules === void 0 ? [] : _this$props3$rules,
            fieldContext = _this$props3.fieldContext;
        return rules.map(function (rule) {
          if (typeof rule === 'function') {
            return rule(fieldContext);
          }

          return rule;
        });
      };

      _this.refresh = function () {
        if (!_this.mounted) return;
        /**
         * Clean up current node.
         */

        _this.setState(function (_ref) {
          var resetCount = _ref.resetCount;
          return {
            resetCount: resetCount + 1
          };
        });
      };

      _this.triggerMetaEvent = function (destroy) {
        var onMetaChange = _this.props.onMetaChange;
        onMetaChange === null || onMetaChange === void 0 ? void 0 : onMetaChange(_objectSpread2$1(_objectSpread2$1({}, _this.getMeta()), {}, {
          destroy: destroy
        }));
      };

      _this.onStoreChange = function (prevStore, namePathList, info) {
        var _this$props4 = _this.props,
            shouldUpdate = _this$props4.shouldUpdate,
            _this$props4$dependen = _this$props4.dependencies,
            dependencies = _this$props4$dependen === void 0 ? [] : _this$props4$dependen,
            onReset = _this$props4.onReset;
        var store = info.store;

        var namePath = _this.getNamePath();

        var prevValue = _this.getValue(prevStore);

        var curValue = _this.getValue(store);

        var namePathMatch = namePathList && containsNamePath(namePathList, namePath); // `setFieldsValue` is a quick access to update related status

        if (info.type === 'valueUpdate' && info.source === 'external' && prevValue !== curValue) {
          _this.touched = true;
          _this.dirty = true;
          _this.validatePromise = null;
          _this.errors = EMPTY_ERRORS;
          _this.warnings = EMPTY_ERRORS;

          _this.triggerMetaEvent();
        }

        switch (info.type) {
          case 'reset':
            if (!namePathList || namePathMatch) {
              // Clean up state
              _this.touched = false;
              _this.dirty = false;
              _this.validatePromise = null;
              _this.errors = EMPTY_ERRORS;
              _this.warnings = EMPTY_ERRORS;

              _this.triggerMetaEvent();

              onReset === null || onReset === void 0 ? void 0 : onReset();

              _this.refresh();

              return;
            }

            break;

          case 'setField':
            {
              if (namePathMatch) {
                var data = info.data;

                if ('touched' in data) {
                  _this.touched = data.touched;
                }

                if ('validating' in data && !('originRCField' in data)) {
                  _this.validatePromise = data.validating ? Promise.resolve([]) : null;
                }

                if ('errors' in data) {
                  _this.errors = data.errors || EMPTY_ERRORS;
                }

                if ('warnings' in data) {
                  _this.warnings = data.warnings || EMPTY_ERRORS;
                }

                _this.dirty = true;

                _this.triggerMetaEvent();

                _this.reRender();

                return;
              } // Handle update by `setField` with `shouldUpdate`


              if (shouldUpdate && !namePath.length && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
                _this.reRender();

                return;
              }

              break;
            }

          case 'dependenciesUpdate':
            {
              /**
               * Trigger when marked `dependencies` updated. Related fields will all update
               */
              var dependencyList = dependencies.map(getNamePath); // No need for `namePathMath` check and `shouldUpdate` check, since `valueUpdate` will be
              // emitted earlier and they will work there
              // If set it may cause unnecessary twice rerendering

              if (dependencyList.some(function (dependency) {
                return containsNamePath(info.relatedFields, dependency);
              })) {
                _this.reRender();

                return;
              }

              break;
            }

          default:
            // 1. If `namePath` exists in `namePathList`, means it's related value and should update
            //      For example <List name="list"><Field name={['list', 0]}></List>
            //      If `namePathList` is [['list']] (List value update), Field should be updated
            //      If `namePathList` is [['list', 0]] (Field value update), List shouldn't be updated
            // 2.
            //   2.1 If `dependencies` is set, `name` is not set and `shouldUpdate` is not set,
            //       don't use `shouldUpdate`. `dependencies` is view as a shortcut if `shouldUpdate`
            //       is not provided
            //   2.2 If `shouldUpdate` provided, use customize logic to update the field
            //       else to check if value changed
            if (namePathMatch || (!dependencies.length || namePath.length || shouldUpdate) && requireUpdate(shouldUpdate, prevStore, store, prevValue, curValue, info)) {
              _this.reRender();

              return;
            }

            break;
        }

        if (shouldUpdate === true) {
          _this.reRender();
        }
      };

      _this.validateRules = function (options) {
        // We should fixed namePath & value to avoid developer change then by form function
        var namePath = _this.getNamePath();

        var currentValue = _this.getValue(); // Force change to async to avoid rule OOD under renderProps field


        var rootPromise = Promise.resolve().then(function () {
          if (!_this.mounted) {
            return [];
          }

          var _this$props5 = _this.props,
              _this$props5$validate = _this$props5.validateFirst,
              validateFirst = _this$props5$validate === void 0 ? false : _this$props5$validate,
              messageVariables = _this$props5.messageVariables;

          var _ref2 = options || {},
              triggerName = _ref2.triggerName;

          var filteredRules = _this.getRules();

          if (triggerName) {
            filteredRules = filteredRules.filter(function (rule) {
              var validateTrigger = rule.validateTrigger;

              if (!validateTrigger) {
                return true;
              }

              var triggerList = toArray$1(validateTrigger);
              return triggerList.includes(triggerName);
            });
          }

          var promise = validateRules(namePath, currentValue, filteredRules, options, validateFirst, messageVariables);
          promise.catch(function (e) {
            return e;
          }).then(function () {
            var ruleErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EMPTY_ERRORS;

            if (_this.validatePromise === rootPromise) {
              _this.validatePromise = null; // Get errors & warnings

              var nextErrors = [];
              var nextWarnings = [];
              ruleErrors.forEach(function (_ref3) {
                var warningOnly = _ref3.rule.warningOnly,
                    _ref3$errors = _ref3.errors,
                    errors = _ref3$errors === void 0 ? EMPTY_ERRORS : _ref3$errors;

                if (warningOnly) {
                  nextWarnings.push.apply(nextWarnings, _toConsumableArray$1(errors));
                } else {
                  nextErrors.push.apply(nextErrors, _toConsumableArray$1(errors));
                }
              });
              _this.errors = nextErrors;
              _this.warnings = nextWarnings;

              _this.triggerMetaEvent();

              _this.reRender();
            }
          });
          return promise;
        });
        _this.validatePromise = rootPromise;
        _this.dirty = true;
        _this.errors = EMPTY_ERRORS;
        _this.warnings = EMPTY_ERRORS;

        _this.triggerMetaEvent(); // Force trigger re-render since we need sync renderProps with new meta


        _this.reRender();

        return rootPromise;
      };

      _this.isFieldValidating = function () {
        return !!_this.validatePromise;
      };

      _this.isFieldTouched = function () {
        return _this.touched;
      };

      _this.isFieldDirty = function () {
        // Touched or validate or has initialValue
        if (_this.dirty || _this.props.initialValue !== undefined) {
          return true;
        } // Form set initialValue


        var fieldContext = _this.props.fieldContext;

        var _fieldContext$getInte = fieldContext.getInternalHooks(HOOK_MARK),
            getInitialValue = _fieldContext$getInte.getInitialValue;

        if (getInitialValue(_this.getNamePath()) !== undefined) {
          return true;
        }

        return false;
      };

      _this.getErrors = function () {
        return _this.errors;
      };

      _this.getWarnings = function () {
        return _this.warnings;
      };

      _this.isListField = function () {
        return _this.props.isListField;
      };

      _this.isList = function () {
        return _this.props.isList;
      };

      _this.isPreserve = function () {
        return _this.props.preserve;
      };

      _this.getMeta = function () {
        // Make error & validating in cache to save perf
        _this.prevValidating = _this.isFieldValidating();
        var meta = {
          touched: _this.isFieldTouched(),
          validating: _this.prevValidating,
          errors: _this.errors,
          warnings: _this.warnings,
          name: _this.getNamePath()
        };
        return meta;
      };

      _this.getOnlyChild = function (children) {
        // Support render props
        if (typeof children === 'function') {
          var meta = _this.getMeta();

          return _objectSpread2$1(_objectSpread2$1({}, _this.getOnlyChild(children(_this.getControlled(), meta, _this.props.fieldContext))), {}, {
            isFunction: true
          });
        } // Filed element only


        var childList = toArray(children);

        if (childList.length !== 1 || ! /*#__PURE__*/React.isValidElement(childList[0])) {
          return {
            child: childList,
            isFunction: false
          };
        }

        return {
          child: childList[0],
          isFunction: false
        };
      };

      _this.getValue = function (store) {
        var getFieldsValue = _this.props.fieldContext.getFieldsValue;

        var namePath = _this.getNamePath();

        return getValue$1(store || getFieldsValue(true), namePath);
      };

      _this.getControlled = function () {
        var childProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var _this$props6 = _this.props,
            trigger = _this$props6.trigger,
            validateTrigger = _this$props6.validateTrigger,
            getValueFromEvent = _this$props6.getValueFromEvent,
            normalize = _this$props6.normalize,
            valuePropName = _this$props6.valuePropName,
            getValueProps = _this$props6.getValueProps,
            fieldContext = _this$props6.fieldContext;
        var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : fieldContext.validateTrigger;

        var namePath = _this.getNamePath();

        var getInternalHooks = fieldContext.getInternalHooks,
            getFieldsValue = fieldContext.getFieldsValue;

        var _getInternalHooks = getInternalHooks(HOOK_MARK),
            dispatch = _getInternalHooks.dispatch;

        var value = _this.getValue();

        var mergedGetValueProps = getValueProps || function (val) {
          return _defineProperty$1({}, valuePropName, val);
        }; // eslint-disable-next-line @typescript-eslint/no-explicit-any


        var originTriggerFunc = childProps[trigger];

        var control = _objectSpread2$1(_objectSpread2$1({}, childProps), mergedGetValueProps(value)); // Add trigger


        control[trigger] = function () {
          // Mark as touched
          _this.touched = true;
          _this.dirty = true;

          _this.triggerMetaEvent();

          var newValue;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (getValueFromEvent) {
            newValue = getValueFromEvent.apply(void 0, args);
          } else {
            newValue = defaultGetValueFromEvent.apply(void 0, [valuePropName].concat(args));
          }

          if (normalize) {
            newValue = normalize(newValue, value, getFieldsValue(true));
          }

          dispatch({
            type: 'updateValue',
            namePath: namePath,
            value: newValue
          });

          if (originTriggerFunc) {
            originTriggerFunc.apply(void 0, args);
          }
        }; // Add validateTrigger


        var validateTriggerList = toArray$1(mergedValidateTrigger || []);
        validateTriggerList.forEach(function (triggerName) {
          // Wrap additional function of component, so that we can get latest value from store
          var originTrigger = control[triggerName];

          control[triggerName] = function () {
            if (originTrigger) {
              originTrigger.apply(void 0, arguments);
            } // Always use latest rules


            var rules = _this.props.rules;

            if (rules && rules.length) {
              // We dispatch validate to root,
              // since it will update related data with other field with same name
              dispatch({
                type: 'validateField',
                namePath: namePath,
                triggerName: triggerName
              });
            }
          };
        });
        return control;
      };

      if (props.fieldContext) {
        var getInternalHooks = props.fieldContext.getInternalHooks;

        var _getInternalHooks2 = getInternalHooks(HOOK_MARK),
            initEntityValue = _getInternalHooks2.initEntityValue;

        initEntityValue(_assertThisInitialized(_this));
      }

      return _this;
    }

    _createClass(Field, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this$props7 = this.props,
            shouldUpdate = _this$props7.shouldUpdate,
            fieldContext = _this$props7.fieldContext;
        this.mounted = true; // Register on init

        if (fieldContext) {
          var getInternalHooks = fieldContext.getInternalHooks;

          var _getInternalHooks3 = getInternalHooks(HOOK_MARK),
              registerField = _getInternalHooks3.registerField;

          this.cancelRegisterFunc = registerField(this);
        } // One more render for component in case fields not ready


        if (shouldUpdate === true) {
          this.reRender();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.cancelRegister();
        this.triggerMetaEvent(true);
        this.mounted = false;
      }
    }, {
      key: "reRender",
      value: function reRender() {
        if (!this.mounted) return;
        this.forceUpdate();
      }
    }, {
      key: "render",
      value: function render() {
        var resetCount = this.state.resetCount;
        var children = this.props.children;

        var _this$getOnlyChild = this.getOnlyChild(children),
            child = _this$getOnlyChild.child,
            isFunction = _this$getOnlyChild.isFunction; // Not need to `cloneElement` since user can handle this in render function self


        var returnChildNode;

        if (isFunction) {
          returnChildNode = child;
        } else if ( /*#__PURE__*/React.isValidElement(child)) {
          returnChildNode = /*#__PURE__*/React.cloneElement(child, this.getControlled(child.props));
        } else {
          warningOnce(!child, '`children` of Field is not validate ReactElement.');
          returnChildNode = child;
        }

        return /*#__PURE__*/React.createElement(React.Fragment, {
          key: resetCount
        }, returnChildNode);
      }
    }]);

    return Field;
  }(React.Component);

  Field.contextType = Context;
  Field.defaultProps = {
    trigger: 'onChange',
    valuePropName: 'value'
  };

  function WrapperField(_ref5) {
    var name = _ref5.name,
        restProps = _objectWithoutProperties$1(_ref5, _excluded);

    var fieldContext = React.useContext(Context);
    var namePath = name !== undefined ? getNamePath(name) : undefined;
    var key = 'keep';

    if (!restProps.isListField) {
      key = "_".concat((namePath || []).join('_'));
    } // Warning if it's a directly list field.
    // We can still support multiple level field preserve.


    if ( restProps.preserve === false && restProps.isListField && namePath.length <= 1) {
      warningOnce(false, '`preserve` should not apply on Form.List fields.');
    }

    return /*#__PURE__*/React.createElement(Field, _extends$1({
      key: key,
      name: namePath
    }, restProps, {
      fieldContext: fieldContext
    }));
  }

  var List = function List(_ref) {
    var name = _ref.name,
        initialValue = _ref.initialValue,
        children = _ref.children,
        rules = _ref.rules,
        validateTrigger = _ref.validateTrigger;
    var context = React.useContext(Context);
    var keyRef = React.useRef({
      keys: [],
      id: 0
    });
    var keyManager = keyRef.current; // User should not pass `children` as other type.

    if (typeof children !== 'function') {
      warningOnce(false, 'Form.List only accepts function as children.');
      return null;
    }

    var parentPrefixName = getNamePath(context.prefixName) || [];
    var prefixName = [].concat(_toConsumableArray$1(parentPrefixName), _toConsumableArray$1(getNamePath(name)));

    var shouldUpdate = function shouldUpdate(prevValue, nextValue, _ref2) {
      var source = _ref2.source;

      if (source === 'internal') {
        return false;
      }

      return prevValue !== nextValue;
    };

    return /*#__PURE__*/React.createElement(Context.Provider, {
      value: _objectSpread2$1(_objectSpread2$1({}, context), {}, {
        prefixName: prefixName
      })
    }, /*#__PURE__*/React.createElement(WrapperField, {
      name: [],
      shouldUpdate: shouldUpdate,
      rules: rules,
      validateTrigger: validateTrigger,
      initialValue: initialValue,
      isList: true
    }, function (_ref3, meta) {
      var _ref3$value = _ref3.value,
          value = _ref3$value === void 0 ? [] : _ref3$value,
          onChange = _ref3.onChange;
      var getFieldValue = context.getFieldValue;

      var getNewValue = function getNewValue() {
        var values = getFieldValue(prefixName || []);
        return values || [];
      };
      /**
       * Always get latest value in case user update fields by `form` api.
       */


      var operations = {
        add: function add(defaultValue, index) {
          // Mapping keys
          var newValue = getNewValue();

          if (index >= 0 && index <= newValue.length) {
            keyManager.keys = [].concat(_toConsumableArray$1(keyManager.keys.slice(0, index)), [keyManager.id], _toConsumableArray$1(keyManager.keys.slice(index)));
            onChange([].concat(_toConsumableArray$1(newValue.slice(0, index)), [defaultValue], _toConsumableArray$1(newValue.slice(index))));
          } else {
            if ( (index < 0 || index > newValue.length)) {
              warningOnce(false, 'The second parameter of the add function should be a valid positive number.');
            }

            keyManager.keys = [].concat(_toConsumableArray$1(keyManager.keys), [keyManager.id]);
            onChange([].concat(_toConsumableArray$1(newValue), [defaultValue]));
          }

          keyManager.id += 1;
        },
        remove: function remove(index) {
          var newValue = getNewValue();
          var indexSet = new Set(Array.isArray(index) ? index : [index]);

          if (indexSet.size <= 0) {
            return;
          }

          keyManager.keys = keyManager.keys.filter(function (_, keysIndex) {
            return !indexSet.has(keysIndex);
          }); // Trigger store change

          onChange(newValue.filter(function (_, valueIndex) {
            return !indexSet.has(valueIndex);
          }));
        },
        move: function move$1(from, to) {
          if (from === to) {
            return;
          }

          var newValue = getNewValue(); // Do not handle out of range

          if (from < 0 || from >= newValue.length || to < 0 || to >= newValue.length) {
            return;
          }

          keyManager.keys = move(keyManager.keys, from, to); // Trigger store change

          onChange(move(newValue, from, to));
        }
      };
      var listValue = value || [];

      if (!Array.isArray(listValue)) {
        listValue = [];

        {
          warningOnce(false, "Current value of '".concat(prefixName.join(' > '), "' is not an array type."));
        }
      }

      return children(listValue.map(function (__, index) {
        var key = keyManager.keys[index];

        if (key === undefined) {
          keyManager.keys[index] = keyManager.id;
          key = keyManager.keys[index];
          keyManager.id += 1;
        }

        return {
          name: index,
          key: key,
          isListField: true
        };
      }), operations, meta);
    }));
  };

  function _iterableToArrayLimit$1(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _slicedToArray$1(arr, i) {
    return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1();
  }

  function allPromiseFinish(promiseList) {
    var hasError = false;
    var count = promiseList.length;
    var results = [];

    if (!promiseList.length) {
      return Promise.resolve([]);
    }

    return new Promise(function (resolve, reject) {
      promiseList.forEach(function (promise, index) {
        promise.catch(function (e) {
          hasError = true;
          return e;
        }).then(function (result) {
          count -= 1;
          results[index] = result;

          if (count > 0) {
            return;
          }

          if (hasError) {
            reject(results);
          }

          resolve(results);
        });
      });
    });
  }

  var SPLIT = '__@field_split__';
  /**
   * Convert name path into string to fast the fetch speed of Map.
   */

  function normalize(namePath) {
    return namePath.map(function (cell) {
      return "".concat(_typeof$1(cell), ":").concat(cell);
    }) // Magic split
    .join(SPLIT);
  }
  /**
   * NameMap like a `Map` but accepts `string[]` as key.
   */


  var NameMap = /*#__PURE__*/function () {
    function NameMap() {
      _classCallCheck(this, NameMap);

      this.kvs = new Map();
    }

    _createClass(NameMap, [{
      key: "set",
      value: function set(key, value) {
        this.kvs.set(normalize(key), value);
      }
    }, {
      key: "get",
      value: function get(key) {
        return this.kvs.get(normalize(key));
      }
    }, {
      key: "update",
      value: function update(key, updater) {
        var origin = this.get(key);
        var next = updater(origin);

        if (!next) {
          this.delete(key);
        } else {
          this.set(key, next);
        }
      }
    }, {
      key: "delete",
      value: function _delete(key) {
        this.kvs.delete(normalize(key));
      } // Since we only use this in test, let simply realize this

    }, {
      key: "map",
      value: function map(callback) {
        return _toConsumableArray$1(this.kvs.entries()).map(function (_ref) {
          var _ref2 = _slicedToArray$1(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          var cells = key.split(SPLIT);
          return callback({
            key: cells.map(function (cell) {
              var _cell$match = cell.match(/^([^:]*):(.*)$/),
                  _cell$match2 = _slicedToArray$1(_cell$match, 3),
                  type = _cell$match2[1],
                  unit = _cell$match2[2];

              return type === 'number' ? Number(unit) : unit;
            }),
            value: value
          });
        });
      }
    }, {
      key: "toJSON",
      value: function toJSON() {
        var json = {};
        this.map(function (_ref3) {
          var key = _ref3.key,
              value = _ref3.value;
          json[key.join('.')] = value;
          return null;
        });
        return json;
      }
    }]);

    return NameMap;
  }();

  var _excluded$1 = ["name", "errors"];
  var FormStore = function FormStore(forceRootUpdate) {
    var _this = this;

    _classCallCheck(this, FormStore);

    this.formHooked = false;
    this.forceRootUpdate = void 0;
    this.subscribable = true;
    this.store = {};
    this.fieldEntities = [];
    this.initialValues = {};
    this.callbacks = {};
    this.validateMessages = null;
    this.preserve = null;
    this.lastValidatePromise = null;

    this.getForm = function () {
      return {
        getFieldValue: _this.getFieldValue,
        getFieldsValue: _this.getFieldsValue,
        getFieldError: _this.getFieldError,
        getFieldWarning: _this.getFieldWarning,
        getFieldsError: _this.getFieldsError,
        isFieldsTouched: _this.isFieldsTouched,
        isFieldTouched: _this.isFieldTouched,
        isFieldValidating: _this.isFieldValidating,
        isFieldsValidating: _this.isFieldsValidating,
        resetFields: _this.resetFields,
        setFields: _this.setFields,
        setFieldsValue: _this.setFieldsValue,
        validateFields: _this.validateFields,
        submit: _this.submit,
        getInternalHooks: _this.getInternalHooks
      };
    };

    this.getInternalHooks = function (key) {
      if (key === HOOK_MARK) {
        _this.formHooked = true;
        return {
          dispatch: _this.dispatch,
          initEntityValue: _this.initEntityValue,
          registerField: _this.registerField,
          useSubscribe: _this.useSubscribe,
          setInitialValues: _this.setInitialValues,
          setCallbacks: _this.setCallbacks,
          setValidateMessages: _this.setValidateMessages,
          getFields: _this.getFields,
          setPreserve: _this.setPreserve,
          getInitialValue: _this.getInitialValue
        };
      }

      warningOnce(false, '`getInternalHooks` is internal usage. Should not call directly.');
      return null;
    };

    this.useSubscribe = function (subscribable) {
      _this.subscribable = subscribable;
    };

    this.setInitialValues = function (initialValues, init) {
      _this.initialValues = initialValues || {};

      if (init) {
        _this.store = setValues({}, initialValues, _this.store);
      }
    };

    this.getInitialValue = function (namePath) {
      return getValue$1(_this.initialValues, namePath);
    };

    this.setCallbacks = function (callbacks) {
      _this.callbacks = callbacks;
    };

    this.setValidateMessages = function (validateMessages) {
      _this.validateMessages = validateMessages;
    };

    this.setPreserve = function (preserve) {
      _this.preserve = preserve;
    };

    this.timeoutId = null;

    this.warningUnhooked = function () {
      if ( !_this.timeoutId && typeof window !== 'undefined') {
        _this.timeoutId = setTimeout(function () {
          _this.timeoutId = null;

          if (!_this.formHooked) {
            warningOnce(false, 'Instance created by `useForm` is not connected to any Form element. Forget to pass `form` prop?');
          }
        });
      }
    };

    this.getFieldEntities = function () {
      var pure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (!pure) {
        return _this.fieldEntities;
      }

      return _this.fieldEntities.filter(function (field) {
        return field.getNamePath().length;
      });
    };

    this.getFieldsMap = function () {
      var pure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var cache = new NameMap();

      _this.getFieldEntities(pure).forEach(function (field) {
        var namePath = field.getNamePath();
        cache.set(namePath, field);
      });

      return cache;
    };

    this.getFieldEntitiesForNamePathList = function (nameList) {
      if (!nameList) {
        return _this.getFieldEntities(true);
      }

      var cache = _this.getFieldsMap(true);

      return nameList.map(function (name) {
        var namePath = getNamePath(name);
        return cache.get(namePath) || {
          INVALIDATE_NAME_PATH: getNamePath(name)
        };
      });
    };

    this.getFieldsValue = function (nameList, filterFunc) {
      _this.warningUnhooked();

      if (nameList === true && !filterFunc) {
        return _this.store;
      }

      var fieldEntities = _this.getFieldEntitiesForNamePathList(Array.isArray(nameList) ? nameList : null);

      var filteredNameList = [];
      fieldEntities.forEach(function (entity) {
        var _entity$isListField;

        var namePath = 'INVALIDATE_NAME_PATH' in entity ? entity.INVALIDATE_NAME_PATH : entity.getNamePath(); // Ignore when it's a list item and not specific the namePath,
        // since parent field is already take in count

        if (!nameList && ((_entity$isListField = entity.isListField) === null || _entity$isListField === void 0 ? void 0 : _entity$isListField.call(entity))) {
          return;
        }

        if (!filterFunc) {
          filteredNameList.push(namePath);
        } else {
          var meta = 'getMeta' in entity ? entity.getMeta() : null;

          if (filterFunc(meta)) {
            filteredNameList.push(namePath);
          }
        }
      });
      return cloneByNamePathList(_this.store, filteredNameList.map(getNamePath));
    };

    this.getFieldValue = function (name) {
      _this.warningUnhooked();

      var namePath = getNamePath(name);
      return getValue$1(_this.store, namePath);
    };

    this.getFieldsError = function (nameList) {
      _this.warningUnhooked();

      var fieldEntities = _this.getFieldEntitiesForNamePathList(nameList);

      return fieldEntities.map(function (entity, index) {
        if (entity && !('INVALIDATE_NAME_PATH' in entity)) {
          return {
            name: entity.getNamePath(),
            errors: entity.getErrors(),
            warnings: entity.getWarnings()
          };
        }

        return {
          name: getNamePath(nameList[index]),
          errors: [],
          warnings: []
        };
      });
    };

    this.getFieldError = function (name) {
      _this.warningUnhooked();

      var namePath = getNamePath(name);

      var fieldError = _this.getFieldsError([namePath])[0];

      return fieldError.errors;
    };

    this.getFieldWarning = function (name) {
      _this.warningUnhooked();

      var namePath = getNamePath(name);

      var fieldError = _this.getFieldsError([namePath])[0];

      return fieldError.warnings;
    };

    this.isFieldsTouched = function () {
      _this.warningUnhooked();

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var arg0 = args[0],
          arg1 = args[1];
      var namePathList;
      var isAllFieldsTouched = false;

      if (args.length === 0) {
        namePathList = null;
      } else if (args.length === 1) {
        if (Array.isArray(arg0)) {
          namePathList = arg0.map(getNamePath);
          isAllFieldsTouched = false;
        } else {
          namePathList = null;
          isAllFieldsTouched = arg0;
        }
      } else {
        namePathList = arg0.map(getNamePath);
        isAllFieldsTouched = arg1;
      }

      var fieldEntities = _this.getFieldEntities(true);

      var isFieldTouched = function isFieldTouched(field) {
        return field.isFieldTouched();
      }; // ===== Will get fully compare when not config namePathList =====


      if (!namePathList) {
        return isAllFieldsTouched ? fieldEntities.every(isFieldTouched) : fieldEntities.some(isFieldTouched);
      } // Generate a nest tree for validate


      var map = new NameMap();
      namePathList.forEach(function (shortNamePath) {
        map.set(shortNamePath, []);
      });
      fieldEntities.forEach(function (field) {
        var fieldNamePath = field.getNamePath(); // Find matched entity and put into list

        namePathList.forEach(function (shortNamePath) {
          if (shortNamePath.every(function (nameUnit, i) {
            return fieldNamePath[i] === nameUnit;
          })) {
            map.update(shortNamePath, function (list) {
              return [].concat(_toConsumableArray$1(list), [field]);
            });
          }
        });
      }); // Check if NameMap value is touched

      var isNamePathListTouched = function isNamePathListTouched(entities) {
        return entities.some(isFieldTouched);
      };

      var namePathListEntities = map.map(function (_ref) {
        var value = _ref.value;
        return value;
      });
      return isAllFieldsTouched ? namePathListEntities.every(isNamePathListTouched) : namePathListEntities.some(isNamePathListTouched);
    };

    this.isFieldTouched = function (name) {
      _this.warningUnhooked();

      return _this.isFieldsTouched([name]);
    };

    this.isFieldsValidating = function (nameList) {
      _this.warningUnhooked();

      var fieldEntities = _this.getFieldEntities();

      if (!nameList) {
        return fieldEntities.some(function (testField) {
          return testField.isFieldValidating();
        });
      }

      var namePathList = nameList.map(getNamePath);
      return fieldEntities.some(function (testField) {
        var fieldNamePath = testField.getNamePath();
        return containsNamePath(namePathList, fieldNamePath) && testField.isFieldValidating();
      });
    };

    this.isFieldValidating = function (name) {
      _this.warningUnhooked();

      return _this.isFieldsValidating([name]);
    };

    this.resetWithFieldInitialValue = function () {
      var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // Create cache
      var cache = new NameMap();

      var fieldEntities = _this.getFieldEntities(true);

      fieldEntities.forEach(function (field) {
        var initialValue = field.props.initialValue;
        var namePath = field.getNamePath(); // Record only if has `initialValue`

        if (initialValue !== undefined) {
          var records = cache.get(namePath) || new Set();
          records.add({
            entity: field,
            value: initialValue
          });
          cache.set(namePath, records);
        }
      }); // Reset

      var resetWithFields = function resetWithFields(entities) {
        entities.forEach(function (field) {
          var initialValue = field.props.initialValue;

          if (initialValue !== undefined) {
            var namePath = field.getNamePath();

            var formInitialValue = _this.getInitialValue(namePath);

            if (formInitialValue !== undefined) {
              // Warning if conflict with form initialValues and do not modify value
              warningOnce(false, "Form already set 'initialValues' with path '".concat(namePath.join('.'), "'. Field can not overwrite it."));
            } else {
              var records = cache.get(namePath);

              if (records && records.size > 1) {
                // Warning if multiple field set `initialValue`and do not modify value
                warningOnce(false, "Multiple Field with path '".concat(namePath.join('.'), "' set 'initialValue'. Can not decide which one to pick."));
              } else if (records) {
                var originValue = _this.getFieldValue(namePath); // Set `initialValue`


                if (!info.skipExist || originValue === undefined) {
                  _this.store = setValue(_this.store, namePath, _toConsumableArray$1(records)[0].value);
                }
              }
            }
          }
        });
      };

      var requiredFieldEntities;

      if (info.entities) {
        requiredFieldEntities = info.entities;
      } else if (info.namePathList) {
        requiredFieldEntities = [];
        info.namePathList.forEach(function (namePath) {
          var records = cache.get(namePath);

          if (records) {
            var _requiredFieldEntitie;

            (_requiredFieldEntitie = requiredFieldEntities).push.apply(_requiredFieldEntitie, _toConsumableArray$1(_toConsumableArray$1(records).map(function (r) {
              return r.entity;
            })));
          }
        });
      } else {
        requiredFieldEntities = fieldEntities;
      }

      resetWithFields(requiredFieldEntities);
    };

    this.resetFields = function (nameList) {
      _this.warningUnhooked();

      var prevStore = _this.store;

      if (!nameList) {
        _this.store = setValues({}, _this.initialValues);

        _this.resetWithFieldInitialValue();

        _this.notifyObservers(prevStore, null, {
          type: 'reset'
        });

        return;
      } // Reset by `nameList`


      var namePathList = nameList.map(getNamePath);
      namePathList.forEach(function (namePath) {
        var initialValue = _this.getInitialValue(namePath);

        _this.store = setValue(_this.store, namePath, initialValue);
      });

      _this.resetWithFieldInitialValue({
        namePathList: namePathList
      });

      _this.notifyObservers(prevStore, namePathList, {
        type: 'reset'
      });
    };

    this.setFields = function (fields) {
      _this.warningUnhooked();

      var prevStore = _this.store;
      fields.forEach(function (fieldData) {
        var name = fieldData.name,
            errors = fieldData.errors,
            data = _objectWithoutProperties$1(fieldData, _excluded$1);

        var namePath = getNamePath(name); // Value

        if ('value' in data) {
          _this.store = setValue(_this.store, namePath, data.value);
        }

        _this.notifyObservers(prevStore, [namePath], {
          type: 'setField',
          data: fieldData
        });
      });
    };

    this.getFields = function () {
      var entities = _this.getFieldEntities(true);

      var fields = entities.map(function (field) {
        var namePath = field.getNamePath();
        var meta = field.getMeta();

        var fieldData = _objectSpread2$1(_objectSpread2$1({}, meta), {}, {
          name: namePath,
          value: _this.getFieldValue(namePath)
        });

        Object.defineProperty(fieldData, 'originRCField', {
          value: true
        });
        return fieldData;
      });
      return fields;
    };

    this.initEntityValue = function (entity) {
      var initialValue = entity.props.initialValue;

      if (initialValue !== undefined) {
        var namePath = entity.getNamePath();
        var prevValue = getValue$1(_this.store, namePath);

        if (prevValue === undefined) {
          _this.store = setValue(_this.store, namePath, initialValue);
        }
      }
    };

    this.registerField = function (entity) {
      _this.fieldEntities.push(entity); // Set initial values


      if (entity.props.initialValue !== undefined) {
        var prevStore = _this.store;

        _this.resetWithFieldInitialValue({
          entities: [entity],
          skipExist: true
        });

        _this.notifyObservers(prevStore, [entity.getNamePath()], {
          type: 'valueUpdate',
          source: 'internal'
        });
      } // un-register field callback


      return function (isListField, preserve) {
        var subNamePath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        _this.fieldEntities = _this.fieldEntities.filter(function (item) {
          return item !== entity;
        }); // Clean up store value if not preserve

        var mergedPreserve = preserve !== undefined ? preserve : _this.preserve;

        if (mergedPreserve === false && (!isListField || subNamePath.length > 1)) {
          var namePath = entity.getNamePath();
          var defaultValue = isListField ? undefined : getValue$1(_this.initialValues, namePath);

          if (namePath.length && _this.getFieldValue(namePath) !== defaultValue && _this.fieldEntities.every(function (field) {
            return (// Only reset when no namePath exist
              !matchNamePath(field.getNamePath(), namePath)
            );
          })) {
            _this.store = setValue(_this.store, namePath, defaultValue, true);
          }
        }
      };
    };

    this.dispatch = function (action) {
      switch (action.type) {
        case 'updateValue':
          {
            var namePath = action.namePath,
                value = action.value;

            _this.updateValue(namePath, value);

            break;
          }

        case 'validateField':
          {
            var _namePath = action.namePath,
                triggerName = action.triggerName;

            _this.validateFields([_namePath], {
              triggerName: triggerName
            });

            break;
          }

      }
    };

    this.notifyObservers = function (prevStore, namePathList, info) {
      if (_this.subscribable) {
        var mergedInfo = _objectSpread2$1(_objectSpread2$1({}, info), {}, {
          store: _this.getFieldsValue(true)
        });

        _this.getFieldEntities().forEach(function (_ref2) {
          var onStoreChange = _ref2.onStoreChange;
          onStoreChange(prevStore, namePathList, mergedInfo);
        });
      } else {
        _this.forceRootUpdate();
      }
    };

    this.updateValue = function (name, value) {
      var namePath = getNamePath(name);
      var prevStore = _this.store;
      _this.store = setValue(_this.store, namePath, value);

      _this.notifyObservers(prevStore, [namePath], {
        type: 'valueUpdate',
        source: 'internal'
      }); // Notify dependencies children with parent update
      // We need delay to trigger validate in case Field is under render props


      var childrenFields = _this.getDependencyChildrenFields(namePath);

      if (childrenFields.length) {
        _this.validateFields(childrenFields);
      }

      _this.notifyObservers(prevStore, childrenFields, {
        type: 'dependenciesUpdate',
        relatedFields: [namePath].concat(_toConsumableArray$1(childrenFields))
      }); // trigger callback function


      var onValuesChange = _this.callbacks.onValuesChange;

      if (onValuesChange) {
        var changedValues = cloneByNamePathList(_this.store, [namePath]);
        onValuesChange(changedValues, _this.getFieldsValue());
      }

      _this.triggerOnFieldsChange([namePath].concat(_toConsumableArray$1(childrenFields)));
    };

    this.setFieldsValue = function (store) {
      _this.warningUnhooked();

      var prevStore = _this.store;

      if (store) {
        _this.store = setValues(_this.store, store);
      }

      _this.notifyObservers(prevStore, null, {
        type: 'valueUpdate',
        source: 'external'
      });
    };

    this.getDependencyChildrenFields = function (rootNamePath) {
      var children = new Set();
      var childrenFields = [];
      var dependencies2fields = new NameMap();
      /**
       * Generate maps
       * Can use cache to save perf if user report performance issue with this
       */

      _this.getFieldEntities().forEach(function (field) {
        var dependencies = field.props.dependencies;
        (dependencies || []).forEach(function (dependency) {
          var dependencyNamePath = getNamePath(dependency);
          dependencies2fields.update(dependencyNamePath, function () {
            var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Set();
            fields.add(field);
            return fields;
          });
        });
      });

      var fillChildren = function fillChildren(namePath) {
        var fields = dependencies2fields.get(namePath) || new Set();
        fields.forEach(function (field) {
          if (!children.has(field)) {
            children.add(field);
            var fieldNamePath = field.getNamePath();

            if (field.isFieldDirty() && fieldNamePath.length) {
              childrenFields.push(fieldNamePath);
              fillChildren(fieldNamePath);
            }
          }
        });
      };

      fillChildren(rootNamePath);
      return childrenFields;
    };

    this.triggerOnFieldsChange = function (namePathList, filedErrors) {
      var onFieldsChange = _this.callbacks.onFieldsChange;

      if (onFieldsChange) {
        var fields = _this.getFields();
        /**
         * Fill errors since `fields` may be replaced by controlled fields
         */


        if (filedErrors) {
          var cache = new NameMap();
          filedErrors.forEach(function (_ref3) {
            var name = _ref3.name,
                errors = _ref3.errors;
            cache.set(name, errors);
          });
          fields.forEach(function (field) {
            // eslint-disable-next-line no-param-reassign
            field.errors = cache.get(field.name) || field.errors;
          });
        }

        var changedFields = fields.filter(function (_ref4) {
          var fieldName = _ref4.name;
          return containsNamePath(namePathList, fieldName);
        });
        onFieldsChange(changedFields, fields);
      }
    };

    this.validateFields = function (nameList, options) {
      _this.warningUnhooked();

      var provideNameList = !!nameList;
      var namePathList = provideNameList ? nameList.map(getNamePath) : []; // Collect result in promise list

      var promiseList = [];

      _this.getFieldEntities(true).forEach(function (field) {
        // Add field if not provide `nameList`
        if (!provideNameList) {
          namePathList.push(field.getNamePath());
        }
        /**
         * Recursive validate if configured.
         * TODO: perf improvement @zombieJ
         */


        if ((options === null || options === void 0 ? void 0 : options.recursive) && provideNameList) {
          var namePath = field.getNamePath();

          if ( // nameList[i] === undefined 说明是以 nameList 开头的
          // ['name'] -> ['name','list']
          namePath.every(function (nameUnit, i) {
            return nameList[i] === nameUnit || nameList[i] === undefined;
          })) {
            namePathList.push(namePath);
          }
        } // Skip if without rule


        if (!field.props.rules || !field.props.rules.length) {
          return;
        }

        var fieldNamePath = field.getNamePath(); // Add field validate rule in to promise list

        if (!provideNameList || containsNamePath(namePathList, fieldNamePath)) {
          var promise = field.validateRules(_objectSpread2$1({
            validateMessages: _objectSpread2$1(_objectSpread2$1({}, defaultValidateMessages), _this.validateMessages)
          }, options)); // Wrap promise with field

          promiseList.push(promise.then(function () {
            return {
              name: fieldNamePath,
              errors: [],
              warnings: []
            };
          }).catch(function (ruleErrors) {
            var mergedErrors = [];
            var mergedWarnings = [];
            ruleErrors.forEach(function (_ref5) {
              var warningOnly = _ref5.rule.warningOnly,
                  errors = _ref5.errors;

              if (warningOnly) {
                mergedWarnings.push.apply(mergedWarnings, _toConsumableArray$1(errors));
              } else {
                mergedErrors.push.apply(mergedErrors, _toConsumableArray$1(errors));
              }
            });

            if (mergedErrors.length) {
              return Promise.reject({
                name: fieldNamePath,
                errors: mergedErrors,
                warnings: mergedWarnings
              });
            }

            return {
              name: fieldNamePath,
              errors: mergedErrors,
              warnings: mergedWarnings
            };
          }));
        }
      });

      var summaryPromise = allPromiseFinish(promiseList);
      _this.lastValidatePromise = summaryPromise; // Notify fields with rule that validate has finished and need update

      summaryPromise.catch(function (results) {
        return results;
      }).then(function (results) {
        var resultNamePathList = results.map(function (_ref6) {
          var name = _ref6.name;
          return name;
        });

        _this.notifyObservers(_this.store, resultNamePathList, {
          type: 'validateFinish'
        });

        _this.triggerOnFieldsChange(resultNamePathList, results);
      });
      var returnPromise = summaryPromise.then(function () {
        if (_this.lastValidatePromise === summaryPromise) {
          return Promise.resolve(_this.getFieldsValue(namePathList));
        }

        return Promise.reject([]);
      }).catch(function (results) {
        var errorList = results.filter(function (result) {
          return result && result.errors.length;
        });
        return Promise.reject({
          values: _this.getFieldsValue(namePathList),
          errorFields: errorList,
          outOfDate: _this.lastValidatePromise !== summaryPromise
        });
      }); // Do not throw in console

      returnPromise.catch(function (e) {
        return e;
      });
      return returnPromise;
    };

    this.submit = function () {
      _this.warningUnhooked();

      _this.validateFields().then(function (values) {
        var onFinish = _this.callbacks.onFinish;

        if (onFinish) {
          try {
            onFinish(values);
          } catch (err) {
            // Should print error if user `onFinish` callback failed
            console.error(err);
          }
        }
      }).catch(function (e) {
        var onFinishFailed = _this.callbacks.onFinishFailed;

        if (onFinishFailed) {
          onFinishFailed(e);
        }
      });
    };

    this.forceRootUpdate = forceRootUpdate;
  };

  function useForm(form) {
    var formRef = React.useRef();

    var _React$useState = React.useState({}),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        forceUpdate = _React$useState2[1];

    if (!formRef.current) {
      if (form) {
        formRef.current = form;
      } else {
        // Create a new FormStore if not provided
        var forceReRender = function forceReRender() {
          forceUpdate({});
        };

        var formStore = new FormStore(forceReRender);
        formRef.current = formStore.getForm();
      }
    }

    return [formRef.current];
  }

  var FormContext = /*#__PURE__*/React.createContext({
    triggerFormChange: function triggerFormChange() {},
    triggerFormFinish: function triggerFormFinish() {},
    registerForm: function registerForm() {},
    unregisterForm: function unregisterForm() {}
  });

  var FormProvider = function FormProvider(_ref) {
    var validateMessages = _ref.validateMessages,
        onFormChange = _ref.onFormChange,
        onFormFinish = _ref.onFormFinish,
        children = _ref.children;
    var formContext = React.useContext(FormContext);
    var formsRef = React.useRef({});
    return /*#__PURE__*/React.createElement(FormContext.Provider, {
      value: _objectSpread2$1(_objectSpread2$1({}, formContext), {}, {
        validateMessages: _objectSpread2$1(_objectSpread2$1({}, formContext.validateMessages), validateMessages),
        // =========================================================
        // =                  Global Form Control                  =
        // =========================================================
        triggerFormChange: function triggerFormChange(name, changedFields) {
          if (onFormChange) {
            onFormChange(name, {
              changedFields: changedFields,
              forms: formsRef.current
            });
          }

          formContext.triggerFormChange(name, changedFields);
        },
        triggerFormFinish: function triggerFormFinish(name, values) {
          if (onFormFinish) {
            onFormFinish(name, {
              values: values,
              forms: formsRef.current
            });
          }

          formContext.triggerFormFinish(name, values);
        },
        registerForm: function registerForm(name, form) {
          if (name) {
            formsRef.current = _objectSpread2$1(_objectSpread2$1({}, formsRef.current), {}, _defineProperty$1({}, name, form));
          }

          formContext.registerForm(name, form);
        },
        unregisterForm: function unregisterForm(name) {
          var newForms = _objectSpread2$1({}, formsRef.current);

          delete newForms[name];
          formsRef.current = newForms;
          formContext.unregisterForm(name);
        }
      })
    }, children);
  };

  var _excluded$2 = ["name", "initialValues", "fields", "form", "preserve", "children", "component", "validateMessages", "validateTrigger", "onValuesChange", "onFieldsChange", "onFinish", "onFinishFailed"];

  var Form = function Form(_ref, ref) {
    var name = _ref.name,
        initialValues = _ref.initialValues,
        fields = _ref.fields,
        form = _ref.form,
        preserve = _ref.preserve,
        children = _ref.children,
        _ref$component = _ref.component,
        Component = _ref$component === void 0 ? 'form' : _ref$component,
        validateMessages = _ref.validateMessages,
        _ref$validateTrigger = _ref.validateTrigger,
        validateTrigger = _ref$validateTrigger === void 0 ? 'onChange' : _ref$validateTrigger,
        onValuesChange = _ref.onValuesChange,
        _onFieldsChange = _ref.onFieldsChange,
        _onFinish = _ref.onFinish,
        onFinishFailed = _ref.onFinishFailed,
        restProps = _objectWithoutProperties$1(_ref, _excluded$2);

    var formContext = React.useContext(FormContext); // We customize handle event since Context will makes all the consumer re-render:
    // https://reactjs.org/docs/context.html#contextprovider

    var _useForm = useForm(form),
        _useForm2 = _slicedToArray$1(_useForm, 1),
        formInstance = _useForm2[0];

    var _formInstance$getInte = formInstance.getInternalHooks(HOOK_MARK),
        useSubscribe = _formInstance$getInte.useSubscribe,
        setInitialValues = _formInstance$getInte.setInitialValues,
        setCallbacks = _formInstance$getInte.setCallbacks,
        setValidateMessages = _formInstance$getInte.setValidateMessages,
        setPreserve = _formInstance$getInte.setPreserve; // Pass ref with form instance


    React.useImperativeHandle(ref, function () {
      return formInstance;
    }); // Register form into Context

    React.useEffect(function () {
      formContext.registerForm(name, formInstance);
      return function () {
        formContext.unregisterForm(name);
      };
    }, [formContext, formInstance, name]); // Pass props to store

    setValidateMessages(_objectSpread2$1(_objectSpread2$1({}, formContext.validateMessages), validateMessages));
    setCallbacks({
      onValuesChange: onValuesChange,
      onFieldsChange: function onFieldsChange(changedFields) {
        formContext.triggerFormChange(name, changedFields);

        if (_onFieldsChange) {
          for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            rest[_key - 1] = arguments[_key];
          }

          _onFieldsChange.apply(void 0, [changedFields].concat(rest));
        }
      },
      onFinish: function onFinish(values) {
        formContext.triggerFormFinish(name, values);

        if (_onFinish) {
          _onFinish(values);
        }
      },
      onFinishFailed: onFinishFailed
    });
    setPreserve(preserve); // Set initial value, init store value when first mount

    var mountRef = React.useRef(null);
    setInitialValues(initialValues, !mountRef.current);

    if (!mountRef.current) {
      mountRef.current = true;
    } // Prepare children by `children` type


    var childrenNode = children;
    var childrenRenderProps = typeof children === 'function';

    if (childrenRenderProps) {
      var values = formInstance.getFieldsValue(true);
      childrenNode = children(values, formInstance);
    } // Not use subscribe when using render props


    useSubscribe(!childrenRenderProps); // Listen if fields provided. We use ref to save prev data here to avoid additional render

    var prevFieldsRef = React.useRef();
    React.useEffect(function () {
      if (!isSimilar(prevFieldsRef.current || [], fields || [])) {
        formInstance.setFields(fields || []);
      }

      prevFieldsRef.current = fields;
    }, [fields, formInstance]);
    var formContextValue = React.useMemo(function () {
      return _objectSpread2$1(_objectSpread2$1({}, formInstance), {}, {
        validateTrigger: validateTrigger
      });
    }, [formInstance, validateTrigger]);
    var wrapperNode = /*#__PURE__*/React.createElement(Context.Provider, {
      value: formContextValue
    }, childrenNode);

    if (Component === false) {
      return wrapperNode;
    }

    return /*#__PURE__*/React.createElement(Component, _extends$1({}, restProps, {
      onSubmit: function onSubmit(event) {
        event.preventDefault();
        event.stopPropagation();
        formInstance.submit();
      },
      onReset: function onReset(event) {
        var _restProps$onReset;

        event.preventDefault();
        formInstance.resetFields();
        (_restProps$onReset = restProps.onReset) === null || _restProps$onReset === void 0 ? void 0 : _restProps$onReset.call(restProps, event);
      }
    }), wrapperNode);
  };

  var InternalForm = /*#__PURE__*/React.forwardRef(Form);
  var RefForm = InternalForm;
  RefForm.FormProvider = FormProvider;
  RefForm.Field = WrapperField;
  RefForm.List = List;
  RefForm.useForm = useForm;

  function useMemo(getValue, condition, shouldUpdate) {
    var cacheRef = React.useRef({});

    if (!('value' in cacheRef.current) || shouldUpdate(cacheRef.current.condition, condition)) {
      cacheRef.current.value = getValue();
      cacheRef.current.condition = condition;
    }

    return cacheRef.current.value;
  }

  var devWarning = (function (valid, component, message) {
    warningOnce(valid, "[antd: ".concat(component, "] ").concat(message));
  });

  var enUS = {
    // Options.jsx
    items_per_page: '/ page',
    jump_to: 'Go to',
    jump_to_confirm: 'confirm',
    page: 'Page',
    // Pagination.jsx
    prev_page: 'Previous Page',
    next_page: 'Next Page',
    prev_5: 'Previous 5 Pages',
    next_5: 'Next 5 Pages',
    prev_3: 'Previous 3 Pages',
    next_3: 'Next 3 Pages',
    page_size: 'Page Size'
  };

  var locale = {
    locale: 'en_US',
    today: 'Today',
    now: 'Now',
    backToToday: 'Back to today',
    ok: 'Ok',
    clear: 'Clear',
    month: 'Month',
    year: 'Year',
    timeSelect: 'select time',
    dateSelect: 'select date',
    weekSelect: 'Choose a week',
    monthSelect: 'Choose a month',
    yearSelect: 'Choose a year',
    decadeSelect: 'Choose a decade',
    yearFormat: 'YYYY',
    dateFormat: 'M/D/YYYY',
    dayFormat: 'D',
    dateTimeFormat: 'M/D/YYYY HH:mm:ss',
    monthBeforeYear: true,
    previousMonth: 'Previous month (PageUp)',
    nextMonth: 'Next month (PageDown)',
    previousYear: 'Last year (Control + left)',
    nextYear: 'Next year (Control + right)',
    previousDecade: 'Last decade',
    nextDecade: 'Next decade',
    previousCentury: 'Last century',
    nextCentury: 'Next century'
  };

  var locale$1 = {
    placeholder: 'Select time',
    rangePlaceholder: ['Start time', 'End time']
  };

  var locale$2 = {
    lang: _extends$1({
      placeholder: 'Select date',
      yearPlaceholder: 'Select year',
      quarterPlaceholder: 'Select quarter',
      monthPlaceholder: 'Select month',
      weekPlaceholder: 'Select week',
      rangePlaceholder: ['Start date', 'End date'],
      rangeYearPlaceholder: ['Start year', 'End year'],
      rangeMonthPlaceholder: ['Start month', 'End month'],
      rangeWeekPlaceholder: ['Start week', 'End week']
    }, locale),
    timePickerLocale: _extends$1({}, locale$1)
  }; // All settings at:

  /* eslint-disable no-template-curly-in-string */
  var typeTemplate$1 = '${label} is not a valid ${type}';
  var localeValues = {
    locale: 'en',
    Pagination: enUS,
    DatePicker: locale$2,
    TimePicker: locale$1,
    Calendar: locale$2,
    global: {
      placeholder: 'Please select'
    },
    Table: {
      filterTitle: 'Filter menu',
      filterConfirm: 'OK',
      filterReset: 'Reset',
      filterEmptyText: 'No filters',
      filterCheckall: 'Select all items',
      filterSearchPlaceholder: 'Search in filters',
      emptyText: 'No data',
      selectAll: 'Select current page',
      selectInvert: 'Invert current page',
      selectNone: 'Clear all data',
      selectionAll: 'Select all data',
      sortTitle: 'Sort',
      expand: 'Expand row',
      collapse: 'Collapse row',
      triggerDesc: 'Click to sort descending',
      triggerAsc: 'Click to sort ascending',
      cancelSort: 'Click to cancel sorting'
    },
    Modal: {
      okText: 'OK',
      cancelText: 'Cancel',
      justOkText: 'OK'
    },
    Popconfirm: {
      okText: 'OK',
      cancelText: 'Cancel'
    },
    Transfer: {
      titles: ['', ''],
      searchPlaceholder: 'Search here',
      itemUnit: 'item',
      itemsUnit: 'items',
      remove: 'Remove',
      selectCurrent: 'Select current page',
      removeCurrent: 'Remove current page',
      selectAll: 'Select all data',
      removeAll: 'Remove all data',
      selectInvert: 'Invert current page'
    },
    Upload: {
      uploading: 'Uploading...',
      removeFile: 'Remove file',
      uploadError: 'Upload error',
      previewFile: 'Preview file',
      downloadFile: 'Download file'
    },
    Empty: {
      description: 'No Data'
    },
    Icon: {
      icon: 'icon'
    },
    Text: {
      edit: 'Edit',
      copy: 'Copy',
      copied: 'Copied',
      expand: 'Expand'
    },
    PageHeader: {
      back: 'Back'
    },
    Form: {
      optional: '(optional)',
      defaultValidateMessages: {
        "default": 'Field validation error for ${label}',
        required: 'Please enter ${label}',
        "enum": '${label} must be one of [${enum}]',
        whitespace: '${label} cannot be a blank character',
        date: {
          format: '${label} date format is invalid',
          parse: '${label} cannot be converted to a date',
          invalid: '${label} is an invalid date'
        },
        types: {
          string: typeTemplate$1,
          method: typeTemplate$1,
          array: typeTemplate$1,
          object: typeTemplate$1,
          number: typeTemplate$1,
          date: typeTemplate$1,
          "boolean": typeTemplate$1,
          integer: typeTemplate$1,
          "float": typeTemplate$1,
          regexp: typeTemplate$1,
          email: typeTemplate$1,
          url: typeTemplate$1,
          hex: typeTemplate$1
        },
        string: {
          len: '${label} must be ${len} characters',
          min: '${label} must be at least ${min} characters',
          max: '${label} must be up to ${max} characters',
          range: '${label} must be between ${min}-${max} characters'
        },
        number: {
          len: '${label} must be equal to ${len}',
          min: '${label} must be minimum ${min}',
          max: '${label} must be maximum ${max}',
          range: '${label} must be between ${min}-${max}'
        },
        array: {
          len: 'Must be ${len} ${label}',
          min: 'At least ${min} ${label}',
          max: 'At most ${max} ${label}',
          range: 'The amount of ${label} must be between ${min}-${max}'
        },
        pattern: {
          mismatch: '${label} does not match the pattern ${pattern}'
        }
      }
    },
    Image: {
      preview: 'Preview'
    }
  };

  var runtimeLocale = _extends$1({}, localeValues.Modal);

  function changeConfirmLocale(newLocale) {
    if (newLocale) {
      runtimeLocale = _extends$1(_extends$1({}, runtimeLocale), newLocale);
    } else {
      runtimeLocale = _extends$1({}, localeValues.Modal);
    }
  }
  function getConfirmLocale() {
    return runtimeLocale;
  }

  var LocaleContext = /*#__PURE__*/React.createContext(undefined);

  var ANT_MARK = 'internalMark';

  var LocaleProvider = /*#__PURE__*/function (_React$Component) {
    _inherits(LocaleProvider, _React$Component);

    var _super = _createSuper(LocaleProvider);

    function LocaleProvider(props) {
      var _this;

      _classCallCheck(this, LocaleProvider);

      _this = _super.call(this, props);
      changeConfirmLocale(props.locale && props.locale.Modal);
      devWarning(props._ANT_MARK__ === ANT_MARK, 'LocaleProvider', '`LocaleProvider` is deprecated. Please use `locale` with `ConfigProvider` instead: http://u.ant.design/locale');
      return _this;
    }

    _createClass(LocaleProvider, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        changeConfirmLocale(this.props.locale && this.props.locale.Modal);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var locale = this.props.locale;

        if (prevProps.locale !== locale) {
          changeConfirmLocale(locale && locale.Modal);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        changeConfirmLocale();
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            locale = _this$props.locale,
            children = _this$props.children;
        return /*#__PURE__*/React.createElement(LocaleContext.Provider, {
          value: _extends$1(_extends$1({}, locale), {
            exist: true
          })
        }, children);
      }
    }]);

    return LocaleProvider;
  }(React.Component);
  LocaleProvider.defaultProps = {
    locale: {}
  };

  var LocaleReceiver = /*#__PURE__*/function (_React$Component) {
    _inherits(LocaleReceiver, _React$Component);

    var _super = _createSuper(LocaleReceiver);

    function LocaleReceiver() {
      _classCallCheck(this, LocaleReceiver);

      return _super.apply(this, arguments);
    }

    _createClass(LocaleReceiver, [{
      key: "getLocale",
      value: function getLocale() {
        var _this$props = this.props,
            componentName = _this$props.componentName,
            defaultLocale = _this$props.defaultLocale;
        var locale = defaultLocale || localeValues[componentName !== null && componentName !== void 0 ? componentName : 'global'];
        var antLocale = this.context;
        var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
        return _extends$1(_extends$1({}, locale instanceof Function ? locale() : locale), localeFromContext || {});
      }
    }, {
      key: "getLocaleCode",
      value: function getLocaleCode() {
        var antLocale = this.context;
        var localeCode = antLocale && antLocale.locale; // Had use LocaleProvide but didn't set locale

        if (antLocale && antLocale.exist && !localeCode) {
          return localeValues.locale;
        }

        return localeCode;
      }
    }, {
      key: "render",
      value: function render() {
        return this.props.children(this.getLocale(), this.getLocaleCode(), this.context);
      }
    }]);

    return LocaleReceiver;
  }(React.Component);
  LocaleReceiver.defaultProps = {
    componentName: 'global'
  };
  LocaleReceiver.contextType = LocaleContext;
  function useLocaleReceiver(componentName, defaultLocale) {
    var antLocale = React.useContext(LocaleContext);
    var componentLocale = React.useMemo(function () {
      var locale = defaultLocale || localeValues[componentName || 'global'];
      var localeFromContext = componentName && antLocale ? antLocale[componentName] : {};
      return _extends$1(_extends$1({}, typeof locale === 'function' ? locale() : locale), localeFromContext || {});
    }, [componentName, defaultLocale, antLocale]);
    return [componentLocale];
  }

  var Empty = function Empty() {
    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls;

    var prefixCls = getPrefixCls('empty-img-default');
    return /*#__PURE__*/React.createElement("svg", {
      className: prefixCls,
      width: "184",
      height: "152",
      viewBox: "0 0 184 152",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/React.createElement("g", {
      fill: "none",
      fillRule: "evenodd"
    }, /*#__PURE__*/React.createElement("g", {
      transform: "translate(24 31.67)"
    }, /*#__PURE__*/React.createElement("ellipse", {
      className: "".concat(prefixCls, "-ellipse"),
      cx: "67.797",
      cy: "106.89",
      rx: "67.797",
      ry: "12.668"
    }), /*#__PURE__*/React.createElement("path", {
      className: "".concat(prefixCls, "-path-1"),
      d: "M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"
    }), /*#__PURE__*/React.createElement("path", {
      className: "".concat(prefixCls, "-path-2"),
      d: "M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",
      transform: "translate(13.56)"
    }), /*#__PURE__*/React.createElement("path", {
      className: "".concat(prefixCls, "-path-3"),
      d: "M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"
    }), /*#__PURE__*/React.createElement("path", {
      className: "".concat(prefixCls, "-path-4"),
      d: "M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"
    })), /*#__PURE__*/React.createElement("path", {
      className: "".concat(prefixCls, "-path-5"),
      d: "M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"
    }), /*#__PURE__*/React.createElement("g", {
      className: "".concat(prefixCls, "-g"),
      transform: "translate(149.65 15.383)"
    }, /*#__PURE__*/React.createElement("ellipse", {
      cx: "20.654",
      cy: "3.167",
      rx: "2.849",
      ry: "2.815"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"
    }))));
  };

  var Simple = function Simple() {
    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls;

    var prefixCls = getPrefixCls('empty-img-simple');
    return /*#__PURE__*/React.createElement("svg", {
      className: prefixCls,
      width: "64",
      height: "41",
      viewBox: "0 0 64 41",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/React.createElement("g", {
      transform: "translate(0 1)",
      fill: "none",
      fillRule: "evenodd"
    }, /*#__PURE__*/React.createElement("ellipse", {
      className: "".concat(prefixCls, "-ellipse"),
      cx: "32",
      cy: "33",
      rx: "32",
      ry: "7"
    }), /*#__PURE__*/React.createElement("g", {
      className: "".concat(prefixCls, "-g"),
      fillRule: "nonzero"
    }, /*#__PURE__*/React.createElement("path", {
      d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
      className: "".concat(prefixCls, "-path")
    }))));
  };

  var __rest = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var defaultEmptyImg = /*#__PURE__*/React.createElement(Empty, null);
  var simpleEmptyImg = /*#__PURE__*/React.createElement(Simple, null);

  var Empty$1 = function Empty(_a) {
    var className = _a.className,
        customizePrefixCls = _a.prefixCls,
        _a$image = _a.image,
        image = _a$image === void 0 ? defaultEmptyImg : _a$image,
        description = _a.description,
        children = _a.children,
        imageStyle = _a.imageStyle,
        restProps = __rest(_a, ["className", "prefixCls", "image", "description", "children", "imageStyle"]);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    return /*#__PURE__*/React.createElement(LocaleReceiver, {
      componentName: "Empty"
    }, function (locale) {
      var _classNames;

      var prefixCls = getPrefixCls('empty', customizePrefixCls);
      var des = typeof description !== 'undefined' ? description : locale.description;
      var alt = typeof des === 'string' ? des : 'empty';
      var imageNode = null;

      if (typeof image === 'string') {
        imageNode = /*#__PURE__*/React.createElement("img", {
          alt: alt,
          src: image
        });
      } else {
        imageNode = image;
      }

      return /*#__PURE__*/React.createElement("div", _extends$1({
        className: classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-normal"), image === simpleEmptyImg), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className)
      }, restProps), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-image"),
        style: imageStyle
      }, imageNode), des && /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-description")
      }, des), children && /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, children));
    });
  };

  Empty$1.PRESENTED_IMAGE_DEFAULT = defaultEmptyImg;
  Empty$1.PRESENTED_IMAGE_SIMPLE = simpleEmptyImg;

  var renderEmpty = function renderEmpty(componentName) {
    return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
      var getPrefixCls = _ref.getPrefixCls;
      var prefix = getPrefixCls('empty');

      switch (componentName) {
        case 'Table':
        case 'List':
          return /*#__PURE__*/React.createElement(Empty$1, {
            image: Empty$1.PRESENTED_IMAGE_SIMPLE
          });

        case 'Select':
        case 'TreeSelect':
        case 'Cascader':
        case 'Transfer':
        case 'Mentions':
          return /*#__PURE__*/React.createElement(Empty$1, {
            image: Empty$1.PRESENTED_IMAGE_SIMPLE,
            className: "".concat(prefix, "-small")
          });

        default:
          return /*#__PURE__*/React.createElement(Empty$1, null);
      }
    });
  };

  var defaultGetPrefixCls = function defaultGetPrefixCls(suffixCls, customizePrefixCls) {
    if (customizePrefixCls) return customizePrefixCls;
    return suffixCls ? "ant-".concat(suffixCls) : 'ant';
  };

  var ConfigContext = /*#__PURE__*/React.createContext({
    // We provide a default function for Context without provider
    getPrefixCls: defaultGetPrefixCls,
    renderEmpty: renderEmpty
  });
  var ConfigConsumer = ConfigContext.Consumer;

  var SizeContext = /*#__PURE__*/React.createContext(undefined);
  var SizeContextProvider = function SizeContextProvider(_ref) {
    var children = _ref.children,
        size = _ref.size;
    return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (originSize) {
      return /*#__PURE__*/React.createElement(SizeContext.Provider, {
        value: size || originSize
      }, children);
    });
  };

  function canUseDom() {
    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  }

  // Event wrapper. Copy from react source code

  function makePrefixMap(styleProp, eventName) {
    var prefixes = {};
    prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
    prefixes["Webkit".concat(styleProp)] = "webkit".concat(eventName);
    prefixes["Moz".concat(styleProp)] = "moz".concat(eventName);
    prefixes["ms".concat(styleProp)] = "MS".concat(eventName);
    prefixes["O".concat(styleProp)] = "o".concat(eventName.toLowerCase());
    return prefixes;
  }

  function getVendorPrefixes(domSupport, win) {
    var prefixes = {
      animationend: makePrefixMap('Animation', 'AnimationEnd'),
      transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };

    if (domSupport) {
      if (!('AnimationEvent' in win)) {
        delete prefixes.animationend.animation;
      }

      if (!('TransitionEvent' in win)) {
        delete prefixes.transitionend.transition;
      }
    }

    return prefixes;
  }
  var vendorPrefixes = getVendorPrefixes(canUseDom(), typeof window !== 'undefined' ? window : {});
  var style = {};

  if (canUseDom()) {
    var _document$createEleme = document.createElement('div');

    style = _document$createEleme.style;
  }

  var prefixedEventNames = {};
  function getVendorPrefixedEventName(eventName) {
    if (prefixedEventNames[eventName]) {
      return prefixedEventNames[eventName];
    }

    var prefixMap = vendorPrefixes[eventName];

    if (prefixMap) {
      var stylePropList = Object.keys(prefixMap);
      var len = stylePropList.length;

      for (var i = 0; i < len; i += 1) {
        var styleProp = stylePropList[i];

        if (Object.prototype.hasOwnProperty.call(prefixMap, styleProp) && styleProp in style) {
          prefixedEventNames[eventName] = prefixMap[styleProp];
          return prefixedEventNames[eventName];
        }
      }
    }

    return '';
  }
  var internalAnimationEndName = getVendorPrefixedEventName('animationend');
  var internalTransitionEndName = getVendorPrefixedEventName('transitionend');
  var supportTransition = !!(internalAnimationEndName && internalTransitionEndName);
  var animationEndName = internalAnimationEndName || 'animationend';
  var transitionEndName = internalTransitionEndName || 'transitionend';
  function getTransitionName(transitionName, transitionType) {
    if (!transitionName) return null;

    if (_typeof$1(transitionName) === 'object') {
      var type = transitionType.replace(/-\w/g, function (match) {
        return match[1].toUpperCase();
      });
      return transitionName[type];
    }

    return "".concat(transitionName, "-").concat(transitionType);
  }

  var STATUS_NONE = 'none';
  var STATUS_APPEAR = 'appear';
  var STATUS_ENTER = 'enter';
  var STATUS_LEAVE = 'leave';
  var STEP_NONE = 'none';
  var STEP_PREPARE = 'prepare';
  var STEP_START = 'start';
  var STEP_ACTIVE = 'active';
  var STEP_ACTIVATED = 'end';

  function useMountStatus(defaultValue) {
    var destroyRef = React.useRef(false);

    var _useState = React.useState(defaultValue),
        _useState2 = _slicedToArray$1(_useState, 2),
        val = _useState2[0],
        setVal = _useState2[1];

    function setValue(next) {
      if (!destroyRef.current) {
        setVal(next);
      }
    }

    React.useEffect(function () {
      return function () {
        destroyRef.current = true;
      };
    }, []);
    return [val, setValue];
  }

  var useIsomorphicLayoutEffect = canUseDom() ? React.useLayoutEffect : React.useEffect;

  var raf = function raf(callback) {
    return +setTimeout(callback, 16);
  };

  var caf = function caf(num) {
    return clearTimeout(num);
  };

  if (typeof window !== 'undefined' && 'requestAnimationFrame' in window) {
    raf = function raf(callback) {
      return window.requestAnimationFrame(callback);
    };

    caf = function caf(handle) {
      return window.cancelAnimationFrame(handle);
    };
  }

  var rafUUID = 0;
  var rafIds = new Map();

  function cleanup(id) {
    rafIds.delete(id);
  }

  function wrapperRaf(callback) {
    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    rafUUID += 1;
    var id = rafUUID;

    function callRef(leftTimes) {
      if (leftTimes === 0) {
        // Clean up
        cleanup(id); // Trigger

        callback();
      } else {
        // Next raf
        var realId = raf(function () {
          callRef(leftTimes - 1);
        }); // Bind real raf id

        rafIds.set(id, realId);
      }
    }

    callRef(times);
    return id;
  }

  wrapperRaf.cancel = function (id) {
    var realId = rafIds.get(id);
    cleanup(realId);
    return caf(realId);
  };

  var useNextFrame = (function () {
    var nextFrameRef = React.useRef(null);

    function cancelNextFrame() {
      wrapperRaf.cancel(nextFrameRef.current);
    }

    function nextFrame(callback) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
      cancelNextFrame();
      var nextFrameId = wrapperRaf(function () {
        if (delay <= 1) {
          callback({
            isCanceled: function isCanceled() {
              return nextFrameId !== nextFrameRef.current;
            }
          });
        } else {
          nextFrame(callback, delay - 1);
        }
      });
      nextFrameRef.current = nextFrameId;
    }

    React.useEffect(function () {
      return function () {
        cancelNextFrame();
      };
    }, []);
    return [nextFrame, cancelNextFrame];
  });

  var STEP_QUEUE = [STEP_PREPARE, STEP_START, STEP_ACTIVE, STEP_ACTIVATED];
  /** Skip current step */

  var SkipStep = false;
  /** Current step should be update in */

  var DoStep = true;
  function isActive(step) {
    return step === STEP_ACTIVE || step === STEP_ACTIVATED;
  }
  var useStepQueue = (function (status, callback) {
    var _React$useState = React.useState(STEP_NONE),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        step = _React$useState2[0],
        setStep = _React$useState2[1];

    var _useNextFrame = useNextFrame(),
        _useNextFrame2 = _slicedToArray$1(_useNextFrame, 2),
        nextFrame = _useNextFrame2[0],
        cancelNextFrame = _useNextFrame2[1];

    function startQueue() {
      setStep(STEP_PREPARE);
    }

    useIsomorphicLayoutEffect(function () {
      if (step !== STEP_NONE && step !== STEP_ACTIVATED) {
        var index = STEP_QUEUE.indexOf(step);
        var nextStep = STEP_QUEUE[index + 1];
        var result = callback(step);

        if (result === SkipStep) {
          // Skip when no needed
          setStep(nextStep);
        } else {
          // Do as frame for step update
          nextFrame(function (info) {
            function doNext() {
              // Skip since current queue is ood
              if (info.isCanceled()) return;
              setStep(nextStep);
            }

            if (result === true) {
              doNext();
            } else {
              // Only promise should be async
              Promise.resolve(result).then(doNext);
            }
          });
        }
      }
    }, [status, step]);
    React.useEffect(function () {
      return function () {
        cancelNextFrame();
      };
    }, []);
    return [startQueue, step];
  });

  var useDomMotionEvents = (function (callback) {
    var cacheElementRef = React.useRef(); // Cache callback

    var callbackRef = React.useRef(callback);
    callbackRef.current = callback; // Internal motion event handler

    var onInternalMotionEnd = React.useCallback(function (event) {
      callbackRef.current(event);
    }, []); // Remove events

    function removeMotionEvents(element) {
      if (element) {
        element.removeEventListener(transitionEndName, onInternalMotionEnd);
        element.removeEventListener(animationEndName, onInternalMotionEnd);
      }
    } // Patch events


    function patchMotionEvents(element) {
      if (cacheElementRef.current && cacheElementRef.current !== element) {
        removeMotionEvents(cacheElementRef.current);
      }

      if (element && element !== cacheElementRef.current) {
        element.addEventListener(transitionEndName, onInternalMotionEnd);
        element.addEventListener(animationEndName, onInternalMotionEnd); // Save as cache in case dom removed trigger by `motionDeadline`

        cacheElementRef.current = element;
      }
    } // Clean up when removed


    React.useEffect(function () {
      return function () {
        removeMotionEvents(cacheElementRef.current);
      };
    }, []);
    return [patchMotionEvents, removeMotionEvents];
  });

  function useStatus(supportMotion, visible, getElement, _ref) {
    var _ref$motionEnter = _ref.motionEnter,
        motionEnter = _ref$motionEnter === void 0 ? true : _ref$motionEnter,
        _ref$motionAppear = _ref.motionAppear,
        motionAppear = _ref$motionAppear === void 0 ? true : _ref$motionAppear,
        _ref$motionLeave = _ref.motionLeave,
        motionLeave = _ref$motionLeave === void 0 ? true : _ref$motionLeave,
        motionDeadline = _ref.motionDeadline,
        motionLeaveImmediately = _ref.motionLeaveImmediately,
        onAppearPrepare = _ref.onAppearPrepare,
        onEnterPrepare = _ref.onEnterPrepare,
        onLeavePrepare = _ref.onLeavePrepare,
        onAppearStart = _ref.onAppearStart,
        onEnterStart = _ref.onEnterStart,
        onLeaveStart = _ref.onLeaveStart,
        onAppearActive = _ref.onAppearActive,
        onEnterActive = _ref.onEnterActive,
        onLeaveActive = _ref.onLeaveActive,
        onAppearEnd = _ref.onAppearEnd,
        onEnterEnd = _ref.onEnterEnd,
        onLeaveEnd = _ref.onLeaveEnd,
        onVisibleChanged = _ref.onVisibleChanged;

    // Used for outer render usage to avoid `visible: false & status: none` to render nothing
    var _useState = useMountStatus(),
        _useState2 = _slicedToArray$1(_useState, 2),
        asyncVisible = _useState2[0],
        setAsyncVisible = _useState2[1];

    var _useState3 = useMountStatus(STATUS_NONE),
        _useState4 = _slicedToArray$1(_useState3, 2),
        status = _useState4[0],
        setStatus = _useState4[1];

    var _useState5 = useMountStatus(null),
        _useState6 = _slicedToArray$1(_useState5, 2),
        style = _useState6[0],
        setStyle = _useState6[1];

    var mountedRef = React.useRef(false);
    var deadlineRef = React.useRef(null);
    var destroyedRef = React.useRef(false); // =========================== Dom Node ===========================

    var cacheElementRef = React.useRef(null);

    function getDomElement() {
      var element = getElement();
      return element || cacheElementRef.current;
    } // ========================== Motion End ==========================


    var activeRef = React.useRef(false);

    function onInternalMotionEnd(event) {
      var element = getDomElement();

      if (event && !event.deadline && event.target !== element) {
        // event exists
        // not initiated by deadline
        // transitionEnd not fired by inner elements
        return;
      }

      var canEnd;

      if (status === STATUS_APPEAR && activeRef.current) {
        canEnd = onAppearEnd === null || onAppearEnd === void 0 ? void 0 : onAppearEnd(element, event);
      } else if (status === STATUS_ENTER && activeRef.current) {
        canEnd = onEnterEnd === null || onEnterEnd === void 0 ? void 0 : onEnterEnd(element, event);
      } else if (status === STATUS_LEAVE && activeRef.current) {
        canEnd = onLeaveEnd === null || onLeaveEnd === void 0 ? void 0 : onLeaveEnd(element, event);
      } // Only update status when `canEnd` and not destroyed


      if (canEnd !== false && !destroyedRef.current) {
        setStatus(STATUS_NONE);
        setStyle(null);
      }
    }

    var _useDomMotionEvents = useDomMotionEvents(onInternalMotionEnd),
        _useDomMotionEvents2 = _slicedToArray$1(_useDomMotionEvents, 1),
        patchMotionEvents = _useDomMotionEvents2[0]; // ============================= Step =============================


    var eventHandlers = React.useMemo(function () {
      var _ref2, _ref3, _ref4;

      switch (status) {
        case 'appear':
          return _ref2 = {}, _defineProperty$1(_ref2, STEP_PREPARE, onAppearPrepare), _defineProperty$1(_ref2, STEP_START, onAppearStart), _defineProperty$1(_ref2, STEP_ACTIVE, onAppearActive), _ref2;

        case 'enter':
          return _ref3 = {}, _defineProperty$1(_ref3, STEP_PREPARE, onEnterPrepare), _defineProperty$1(_ref3, STEP_START, onEnterStart), _defineProperty$1(_ref3, STEP_ACTIVE, onEnterActive), _ref3;

        case 'leave':
          return _ref4 = {}, _defineProperty$1(_ref4, STEP_PREPARE, onLeavePrepare), _defineProperty$1(_ref4, STEP_START, onLeaveStart), _defineProperty$1(_ref4, STEP_ACTIVE, onLeaveActive), _ref4;

        default:
          return {};
      }
    }, [status]);

    var _useStepQueue = useStepQueue(status, function (newStep) {
      // Only prepare step can be skip
      if (newStep === STEP_PREPARE) {
        var onPrepare = eventHandlers[STEP_PREPARE];

        if (!onPrepare) {
          return SkipStep;
        }

        return onPrepare(getDomElement());
      } // Rest step is sync update


      // Rest step is sync update
      if (step in eventHandlers) {
        var _eventHandlers$step;

        setStyle(((_eventHandlers$step = eventHandlers[step]) === null || _eventHandlers$step === void 0 ? void 0 : _eventHandlers$step.call(eventHandlers, getDomElement(), null)) || null);
      }

      if (step === STEP_ACTIVE) {
        // Patch events when motion needed
        patchMotionEvents(getDomElement());

        if (motionDeadline > 0) {
          clearTimeout(deadlineRef.current);
          deadlineRef.current = setTimeout(function () {
            onInternalMotionEnd({
              deadline: true
            });
          }, motionDeadline);
        }
      }

      return DoStep;
    }),
        _useStepQueue2 = _slicedToArray$1(_useStepQueue, 2),
        startStep = _useStepQueue2[0],
        step = _useStepQueue2[1];

    var active = isActive(step);
    activeRef.current = active; // ============================ Status ============================
    // Update with new status

    useIsomorphicLayoutEffect(function () {
      setAsyncVisible(visible);
      var isMounted = mountedRef.current;
      mountedRef.current = true;

      if (!supportMotion) {
        return;
      }

      var nextStatus; // Appear

      if (!isMounted && visible && motionAppear) {
        nextStatus = STATUS_APPEAR;
      } // Enter


      if (isMounted && visible && motionEnter) {
        nextStatus = STATUS_ENTER;
      } // Leave


      if (isMounted && !visible && motionLeave || !isMounted && motionLeaveImmediately && !visible && motionLeave) {
        nextStatus = STATUS_LEAVE;
      } // Update to next status


      if (nextStatus) {
        setStatus(nextStatus);
        startStep();
      }
    }, [visible]); // ============================ Effect ============================
    // Reset when motion changed

    React.useEffect(function () {
      if ( // Cancel appear
      status === STATUS_APPEAR && !motionAppear || // Cancel enter
      status === STATUS_ENTER && !motionEnter || // Cancel leave
      status === STATUS_LEAVE && !motionLeave) {
        setStatus(STATUS_NONE);
      }
    }, [motionAppear, motionEnter, motionLeave]);
    React.useEffect(function () {
      return function () {
        clearTimeout(deadlineRef.current);
        destroyedRef.current = true;
      };
    }, []); // Trigger `onVisibleChanged`

    React.useEffect(function () {
      if (asyncVisible !== undefined && status === STATUS_NONE) {
        onVisibleChanged === null || onVisibleChanged === void 0 ? void 0 : onVisibleChanged(asyncVisible);
      }
    }, [asyncVisible, status]); // ============================ Styles ============================

    var mergedStyle = style;

    if (eventHandlers[STEP_PREPARE] && step === STEP_START) {
      mergedStyle = _objectSpread2$1({
        transition: 'none'
      }, mergedStyle);
    }

    return [status, step, mergedStyle, asyncVisible !== null && asyncVisible !== void 0 ? asyncVisible : visible];
  }

  var DomWrapper = /*#__PURE__*/function (_React$Component) {
    _inherits(DomWrapper, _React$Component);

    var _super = _createSuper(DomWrapper);

    function DomWrapper() {
      _classCallCheck(this, DomWrapper);

      return _super.apply(this, arguments);
    }

    _createClass(DomWrapper, [{
      key: "render",
      value: function render() {
        return this.props.children;
      }
    }]);

    return DomWrapper;
  }(React.Component);

  /**
   * `transitionSupport` is used for none transition test case.
   * Default we use browser transition event support check.
   */

  function genCSSMotion(config) {
    var transitionSupport = config;

    if (_typeof$1(config) === 'object') {
      transitionSupport = config.transitionSupport;
    }

    function isSupportTransition(props) {
      return !!(props.motionName && transitionSupport);
    }

    var CSSMotion = /*#__PURE__*/React.forwardRef(function (props, ref) {
      var _props$visible = props.visible,
          visible = _props$visible === void 0 ? true : _props$visible,
          _props$removeOnLeave = props.removeOnLeave,
          removeOnLeave = _props$removeOnLeave === void 0 ? true : _props$removeOnLeave,
          forceRender = props.forceRender,
          children = props.children,
          motionName = props.motionName,
          leavedClassName = props.leavedClassName,
          eventProps = props.eventProps;
      var supportMotion = isSupportTransition(props); // Ref to the react node, it may be a HTMLElement

      var nodeRef = React.useRef(); // Ref to the dom wrapper in case ref can not pass to HTMLElement

      var wrapperNodeRef = React.useRef();

      function getDomElement() {
        try {
          return findDOMNode(nodeRef.current || wrapperNodeRef.current);
        } catch (e) {
          // Only happen when `motionDeadline` trigger but element removed.
          return null;
        }
      }

      var _useStatus = useStatus(supportMotion, visible, getDomElement, props),
          _useStatus2 = _slicedToArray$1(_useStatus, 4),
          status = _useStatus2[0],
          statusStep = _useStatus2[1],
          statusStyle = _useStatus2[2],
          mergedVisible = _useStatus2[3]; // Record whether content has rended
      // Will return null for un-rendered even when `removeOnLeave={false}`


      var renderedRef = React.useRef(mergedVisible);

      if (mergedVisible) {
        renderedRef.current = true;
      } // ====================== Refs ======================


      var originRef = React.useRef(ref);
      originRef.current = ref;
      var setNodeRef = React.useCallback(function (node) {
        nodeRef.current = node;
        fillRef(originRef.current, node);
      }, []); // ===================== Render =====================

      var motionChildren;

      var mergedProps = _objectSpread2$1(_objectSpread2$1({}, eventProps), {}, {
        visible: visible
      });

      if (!children) {
        // No children
        motionChildren = null;
      } else if (status === STATUS_NONE || !isSupportTransition(props)) {
        // Stable children
        if (mergedVisible) {
          motionChildren = children(_objectSpread2$1({}, mergedProps), setNodeRef);
        } else if (!removeOnLeave && renderedRef.current) {
          motionChildren = children(_objectSpread2$1(_objectSpread2$1({}, mergedProps), {}, {
            className: leavedClassName
          }), setNodeRef);
        } else if (forceRender) {
          motionChildren = children(_objectSpread2$1(_objectSpread2$1({}, mergedProps), {}, {
            style: {
              display: 'none'
            }
          }), setNodeRef);
        } else {
          motionChildren = null;
        }
      } else {
        var _classNames;

        // In motion
        var statusSuffix;

        if (statusStep === STEP_PREPARE) {
          statusSuffix = 'prepare';
        } else if (isActive(statusStep)) {
          statusSuffix = 'active';
        } else if (statusStep === STEP_START) {
          statusSuffix = 'start';
        }

        motionChildren = children(_objectSpread2$1(_objectSpread2$1({}, mergedProps), {}, {
          className: classnames(getTransitionName(motionName, status), (_classNames = {}, _defineProperty$1(_classNames, getTransitionName(motionName, "".concat(status, "-").concat(statusSuffix)), statusSuffix), _defineProperty$1(_classNames, motionName, typeof motionName === 'string'), _classNames)),
          style: statusStyle
        }), setNodeRef);
      }

      return /*#__PURE__*/React.createElement(DomWrapper, {
        ref: wrapperNodeRef
      }, motionChildren);
    });
    CSSMotion.displayName = 'CSSMotion';
    return CSSMotion;
  }
  var CSSMotion = genCSSMotion(supportTransition);

  var STATUS_ADD = 'add';
  var STATUS_KEEP = 'keep';
  var STATUS_REMOVE = 'remove';
  var STATUS_REMOVED = 'removed';
  function wrapKeyToObject(key) {
    var keyObj;

    if (key && _typeof$1(key) === 'object' && 'key' in key) {
      keyObj = key;
    } else {
      keyObj = {
        key: key
      };
    }

    return _objectSpread2$1(_objectSpread2$1({}, keyObj), {}, {
      key: String(keyObj.key)
    });
  }
  function parseKeys() {
    var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return keys.map(wrapKeyToObject);
  }
  function diffKeys() {
    var prevKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var currentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var list = [];
    var currentIndex = 0;
    var currentLen = currentKeys.length;
    var prevKeyObjects = parseKeys(prevKeys);
    var currentKeyObjects = parseKeys(currentKeys); // Check prev keys to insert or keep

    prevKeyObjects.forEach(function (keyObj) {
      var hit = false;

      for (var i = currentIndex; i < currentLen; i += 1) {
        var currentKeyObj = currentKeyObjects[i];

        if (currentKeyObj.key === keyObj.key) {
          // New added keys should add before current key
          if (currentIndex < i) {
            list = list.concat(currentKeyObjects.slice(currentIndex, i).map(function (obj) {
              return _objectSpread2$1(_objectSpread2$1({}, obj), {}, {
                status: STATUS_ADD
              });
            }));
            currentIndex = i;
          }

          list.push(_objectSpread2$1(_objectSpread2$1({}, currentKeyObj), {}, {
            status: STATUS_KEEP
          }));
          currentIndex += 1;
          hit = true;
          break;
        }
      } // If not hit, it means key is removed


      if (!hit) {
        list.push(_objectSpread2$1(_objectSpread2$1({}, keyObj), {}, {
          status: STATUS_REMOVE
        }));
      }
    }); // Add rest to the list

    if (currentIndex < currentLen) {
      list = list.concat(currentKeyObjects.slice(currentIndex).map(function (obj) {
        return _objectSpread2$1(_objectSpread2$1({}, obj), {}, {
          status: STATUS_ADD
        });
      }));
    }
    /**
     * Merge same key when it remove and add again:
     *    [1 - add, 2 - keep, 1 - remove] -> [1 - keep, 2 - keep]
     */


    var keys = {};
    list.forEach(function (_ref) {
      var key = _ref.key;
      keys[key] = (keys[key] || 0) + 1;
    });
    var duplicatedKeys = Object.keys(keys).filter(function (key) {
      return keys[key] > 1;
    });
    duplicatedKeys.forEach(function (matchKey) {
      // Remove `STATUS_REMOVE` node.
      list = list.filter(function (_ref2) {
        var key = _ref2.key,
            status = _ref2.status;
        return key !== matchKey || status !== STATUS_REMOVE;
      }); // Update `STATUS_ADD` to `STATUS_KEEP`

      list.forEach(function (node) {
        if (node.key === matchKey) {
          // eslint-disable-next-line no-param-reassign
          node.status = STATUS_KEEP;
        }
      });
    });
    return list;
  }

  var MOTION_PROP_NAMES = ['eventProps', 'visible', 'children', 'motionName', 'motionAppear', 'motionEnter', 'motionLeave', 'motionLeaveImmediately', 'motionDeadline', 'removeOnLeave', 'leavedClassName', 'onAppearStart', 'onAppearActive', 'onAppearEnd', 'onEnterStart', 'onEnterActive', 'onEnterEnd', 'onLeaveStart', 'onLeaveActive', 'onLeaveEnd'];
  /**
   * Generate a CSSMotionList component with config
   * @param transitionSupport No need since CSSMotionList no longer depends on transition support
   * @param CSSMotion CSSMotion component
   */

  function genCSSMotionList(transitionSupport) {
    var CSSMotion$1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CSSMotion;

    var CSSMotionList = /*#__PURE__*/function (_React$Component) {
      _inherits(CSSMotionList, _React$Component);

      var _super = _createSuper(CSSMotionList);

      function CSSMotionList() {
        var _this;

        _classCallCheck(this, CSSMotionList);

        _this = _super.apply(this, arguments);
        _this.state = {
          keyEntities: []
        };

        _this.removeKey = function (removeKey) {
          _this.setState(function (_ref) {
            var keyEntities = _ref.keyEntities;
            return {
              keyEntities: keyEntities.map(function (entity) {
                if (entity.key !== removeKey) return entity;
                return _objectSpread2$1(_objectSpread2$1({}, entity), {}, {
                  status: STATUS_REMOVED
                });
              })
            };
          });
        };

        return _this;
      }

      _createClass(CSSMotionList, [{
        key: "render",
        value: function render() {
          var _this2 = this;

          var keyEntities = this.state.keyEntities;

          var _this$props = this.props,
              component = _this$props.component,
              children = _this$props.children,
              _onVisibleChanged = _this$props.onVisibleChanged,
              restProps = _objectWithoutProperties$1(_this$props, ["component", "children", "onVisibleChanged"]);

          var Component = component || React.Fragment;
          var motionProps = {};
          MOTION_PROP_NAMES.forEach(function (prop) {
            motionProps[prop] = restProps[prop];
            delete restProps[prop];
          });
          delete restProps.keys;
          return /*#__PURE__*/React.createElement(Component, restProps, keyEntities.map(function (_ref2) {
            var status = _ref2.status,
                eventProps = _objectWithoutProperties$1(_ref2, ["status"]);

            var visible = status === STATUS_ADD || status === STATUS_KEEP;
            return /*#__PURE__*/React.createElement(CSSMotion$1, _extends$1({}, motionProps, {
              key: eventProps.key,
              visible: visible,
              eventProps: eventProps,
              onVisibleChanged: function onVisibleChanged(changedVisible) {
                _onVisibleChanged === null || _onVisibleChanged === void 0 ? void 0 : _onVisibleChanged(changedVisible, {
                  key: eventProps.key
                });

                if (!changedVisible) {
                  _this2.removeKey(eventProps.key);
                }
              }
            }), children);
          }));
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref3, _ref4) {
          var keys = _ref3.keys;
          var keyEntities = _ref4.keyEntities;
          var parsedKeyObjects = parseKeys(keys);
          var mixedKeyEntities = diffKeys(keyEntities, parsedKeyObjects);
          return {
            keyEntities: mixedKeyEntities.filter(function (entity) {
              var prevEntity = keyEntities.find(function (_ref5) {
                var key = _ref5.key;
                return entity.key === key;
              }); // Remove if already mark as removed

              if (prevEntity && prevEntity.status === STATUS_REMOVED && entity.status === STATUS_REMOVE) {
                return false;
              }

              return true;
            })
          };
        }
      }]);

      return CSSMotionList;
    }(React.Component);

    CSSMotionList.defaultProps = {
      component: 'div'
    };
    return CSSMotionList;
  }
  var CSSMotionList = genCSSMotionList(supportTransition);

  var Notice = /*#__PURE__*/function (_Component) {
    _inherits(Notice, _Component);

    var _super = _createSuper(Notice);

    function Notice() {
      var _this;

      _classCallCheck(this, Notice);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.closeTimer = null;

      _this.close = function (e) {
        if (e) {
          e.stopPropagation();
        }

        _this.clearCloseTimer();

        var _this$props = _this.props,
            onClose = _this$props.onClose,
            noticeKey = _this$props.noticeKey;

        if (onClose) {
          onClose(noticeKey);
        }
      };

      _this.startCloseTimer = function () {
        if (_this.props.duration) {
          _this.closeTimer = window.setTimeout(function () {
            _this.close();
          }, _this.props.duration * 1000);
        }
      };

      _this.clearCloseTimer = function () {
        if (_this.closeTimer) {
          clearTimeout(_this.closeTimer);
          _this.closeTimer = null;
        }
      };

      return _this;
    }

    _createClass(Notice, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.startCloseTimer();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.props.duration !== prevProps.duration || this.props.updateMark !== prevProps.updateMark || // Visible again need reset timer
        this.props.visible !== prevProps.visible && this.props.visible) {
          this.restartCloseTimer();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.clearCloseTimer();
      }
    }, {
      key: "restartCloseTimer",
      value: function restartCloseTimer() {
        this.clearCloseTimer();
        this.startCloseTimer();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$props2 = this.props,
            prefixCls = _this$props2.prefixCls,
            className = _this$props2.className,
            closable = _this$props2.closable,
            closeIcon = _this$props2.closeIcon,
            style = _this$props2.style,
            onClick = _this$props2.onClick,
            children = _this$props2.children,
            holder = _this$props2.holder;
        var componentClass = "".concat(prefixCls, "-notice");
        var dataOrAriaAttributeProps = Object.keys(this.props).reduce(function (acc, key) {
          if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role') {
            acc[key] = _this2.props[key];
          }

          return acc;
        }, {});
        var node = /*#__PURE__*/React.createElement("div", _extends$1({
          className: classnames(componentClass, className, _defineProperty$1({}, "".concat(componentClass, "-closable"), closable)),
          style: style,
          onMouseEnter: this.clearCloseTimer,
          onMouseLeave: this.startCloseTimer,
          onClick: onClick
        }, dataOrAriaAttributeProps), /*#__PURE__*/React.createElement("div", {
          className: "".concat(componentClass, "-content")
        }, children), closable ? /*#__PURE__*/React.createElement("a", {
          tabIndex: 0,
          onClick: this.close,
          className: "".concat(componentClass, "-close")
        }, closeIcon || /*#__PURE__*/React.createElement("span", {
          className: "".concat(componentClass, "-close-x")
        })) : null);

        if (holder) {
          return /*#__PURE__*/reactDom.createPortal(node, holder);
        }

        return node;
      }
    }]);

    return Notice;
  }(React.Component);

  Notice.defaultProps = {
    onClose: function onClose() {},
    duration: 1.5
  };

  function useNotification(notificationInstance) {
    var createdRef = React.useRef({});

    var _React$useState = React.useState([]),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        elements = _React$useState2[0],
        setElements = _React$useState2[1];

    function notify(noticeProps) {
      var firstMount = true;
      notificationInstance.add(noticeProps, function (div, props) {
        var key = props.key;

        if (div && (!createdRef.current[key] || firstMount)) {
          var noticeEle = /*#__PURE__*/React.createElement(Notice, _extends$1({}, props, {
            holder: div
          }));
          createdRef.current[key] = noticeEle;
          setElements(function (originElements) {
            var index = originElements.findIndex(function (ele) {
              return ele.key === props.key;
            });

            if (index === -1) {
              return [].concat(_toConsumableArray$1(originElements), [noticeEle]);
            }

            var cloneList = _toConsumableArray$1(originElements);

            cloneList[index] = noticeEle;
            return cloneList;
          });
        }

        firstMount = false;
      });
    }

    return [notify, /*#__PURE__*/React.createElement(React.Fragment, null, elements)];
  }

  var seed = 0;
  var now = Date.now();

  function getUuid() {
    var id = seed;
    seed += 1;
    return "rcNotification_".concat(now, "_").concat(id);
  }

  var Notification = /*#__PURE__*/function (_Component) {
    _inherits(Notification, _Component);

    var _super = _createSuper(Notification);

    function Notification() {
      var _this;

      _classCallCheck(this, Notification);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        notices: []
      };
      _this.hookRefs = new Map();

      _this.add = function (originNotice, holderCallback) {
        var key = originNotice.key || getUuid();

        var notice = _objectSpread2$1(_objectSpread2$1({}, originNotice), {}, {
          key: key
        });

        var maxCount = _this.props.maxCount;

        _this.setState(function (previousState) {
          var notices = previousState.notices;
          var noticeIndex = notices.map(function (v) {
            return v.notice.key;
          }).indexOf(key);
          var updatedNotices = notices.concat();

          if (noticeIndex !== -1) {
            updatedNotices.splice(noticeIndex, 1, {
              notice: notice,
              holderCallback: holderCallback
            });
          } else {
            if (maxCount && notices.length >= maxCount) {
              // XXX, use key of first item to update new added (let React to move exsiting
              // instead of remove and mount). Same key was used before for both a) external
              // manual control and b) internal react 'key' prop , which is not that good.
              // eslint-disable-next-line no-param-reassign
              // zombieJ: Not know why use `updateKey`. This makes Notice infinite loop in jest.
              // Change to `updateMark` for compare instead.
              // https://github.com/react-component/notification/commit/32299e6be396f94040bfa82517eea940db947ece
              notice.key = updatedNotices[0].notice.key;
              notice.updateMark = getUuid(); // zombieJ: That's why. User may close by key directly.
              // We need record this but not re-render to avoid upper issue
              // https://github.com/react-component/notification/issues/129

              notice.userPassKey = key;
              updatedNotices.shift();
            }

            updatedNotices.push({
              notice: notice,
              holderCallback: holderCallback
            });
          }

          return {
            notices: updatedNotices
          };
        });
      };

      _this.remove = function (removeKey) {
        _this.setState(function (_ref) {
          var notices = _ref.notices;
          return {
            notices: notices.filter(function (_ref2) {
              var _ref2$notice = _ref2.notice,
                  key = _ref2$notice.key,
                  userPassKey = _ref2$notice.userPassKey;
              var mergedKey = userPassKey || key;
              return mergedKey !== removeKey;
            })
          };
        });
      };

      _this.noticePropsMap = {};
      return _this;
    }

    _createClass(Notification, [{
      key: "getTransitionName",
      value: function getTransitionName() {
        var _this$props = this.props,
            prefixCls = _this$props.prefixCls,
            animation = _this$props.animation;
        var transitionName = this.props.transitionName;

        if (!transitionName && animation) {
          transitionName = "".concat(prefixCls, "-").concat(animation);
        }

        return transitionName;
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var notices = this.state.notices;
        var _this$props2 = this.props,
            prefixCls = _this$props2.prefixCls,
            className = _this$props2.className,
            closeIcon = _this$props2.closeIcon,
            style = _this$props2.style;
        var noticeKeys = [];
        notices.forEach(function (_ref3, index) {
          var notice = _ref3.notice,
              holderCallback = _ref3.holderCallback;
          var updateMark = index === notices.length - 1 ? notice.updateMark : undefined;
          var key = notice.key,
              userPassKey = notice.userPassKey;

          var noticeProps = _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({
            prefixCls: prefixCls,
            closeIcon: closeIcon
          }, notice), notice.props), {}, {
            key: key,
            noticeKey: userPassKey || key,
            updateMark: updateMark,
            onClose: function onClose(noticeKey) {
              var _notice$onClose;

              _this2.remove(noticeKey);

              (_notice$onClose = notice.onClose) === null || _notice$onClose === void 0 ? void 0 : _notice$onClose.call(notice);
            },
            onClick: notice.onClick,
            children: notice.content
          }); // Give to motion


          noticeKeys.push(key);
          _this2.noticePropsMap[key] = {
            props: noticeProps,
            holderCallback: holderCallback
          };
        });
        return /*#__PURE__*/React.createElement("div", {
          className: classnames(prefixCls, className),
          style: style
        }, /*#__PURE__*/React.createElement(CSSMotionList, {
          keys: noticeKeys,
          motionName: this.getTransitionName(),
          onVisibleChanged: function onVisibleChanged(changedVisible, _ref4) {
            var key = _ref4.key;

            if (!changedVisible) {
              delete _this2.noticePropsMap[key];
            }
          }
        }, function (_ref5) {
          var key = _ref5.key,
              motionClassName = _ref5.className,
              motionStyle = _ref5.style,
              visible = _ref5.visible;
          var _this2$noticePropsMap = _this2.noticePropsMap[key],
              noticeProps = _this2$noticePropsMap.props,
              holderCallback = _this2$noticePropsMap.holderCallback;

          if (holderCallback) {
            return /*#__PURE__*/React.createElement("div", {
              key: key,
              className: classnames(motionClassName, "".concat(prefixCls, "-hook-holder")),
              style: _objectSpread2$1({}, motionStyle),
              ref: function ref(div) {
                if (typeof key === 'undefined') {
                  return;
                }

                if (div) {
                  _this2.hookRefs.set(key, div);

                  holderCallback(div, noticeProps);
                } else {
                  _this2.hookRefs.delete(key);
                }
              }
            });
          }

          return /*#__PURE__*/React.createElement(Notice, _extends$1({}, noticeProps, {
            className: classnames(motionClassName, noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.className),
            style: _objectSpread2$1(_objectSpread2$1({}, motionStyle), noticeProps === null || noticeProps === void 0 ? void 0 : noticeProps.style),
            visible: visible
          }));
        }));
      }
    }]);

    return Notification;
  }(React.Component);

  Notification.newInstance = void 0;
  Notification.defaultProps = {
    prefixCls: 'rc-notification',
    animation: 'fade',
    style: {
      top: 65,
      left: '50%'
    }
  };

  Notification.newInstance = function newNotificationInstance(properties, callback) {
    var _ref6 = properties || {},
        getContainer = _ref6.getContainer,
        props = _objectWithoutProperties$1(_ref6, ["getContainer"]);

    var div = document.createElement('div');

    if (getContainer) {
      var root = getContainer();
      root.appendChild(div);
    } else {
      document.body.appendChild(div);
    }

    var called = false;

    function ref(notification) {
      if (called) {
        return;
      }

      called = true;
      callback({
        notice: function notice(noticeProps) {
          notification.add(noticeProps);
        },
        removeNotice: function removeNotice(key) {
          notification.remove(key);
        },
        component: notification,
        destroy: function destroy() {
          reactDom.unmountComponentAtNode(div);

          if (div.parentNode) {
            div.parentNode.removeChild(div);
          }
        },
        // Hooks
        useNotification: function useNotification$1() {
          return useNotification(notification);
        }
      });
    } // Only used for test case usage

    reactDom.render( /*#__PURE__*/React.createElement(Notification, _extends$1({}, props, {
      ref: ref
    })), div);
  };

  // This icon file is generated automatically.
  var LoadingOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z" } }] }, "name": "loading", "theme": "outlined" };

  /**
   * Take input from [0, n] and return it as [0, 1]
   * @hidden
   */
  function bound01(n, max) {
      if (isOnePointZero(n)) {
          n = '100%';
      }
      var isPercent = isPercentage(n);
      n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
      // Automatically convert percentage into number
      if (isPercent) {
          n = parseInt(String(n * max), 10) / 100;
      }
      // Handle floating point rounding errors
      if (Math.abs(n - max) < 0.000001) {
          return 1;
      }
      // Convert into [0, 1] range if it isn't already
      if (max === 360) {
          // If n is a hue given in degrees,
          // wrap around out-of-range values into [0, 360] range
          // then convert into [0, 1].
          n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));
      }
      else {
          // If n not a hue given in degrees
          // Convert into [0, 1] range if it isn't already.
          n = (n % max) / parseFloat(String(max));
      }
      return n;
  }
  /**
   * Force a number between 0 and 1
   * @hidden
   */
  function clamp01(val) {
      return Math.min(1, Math.max(0, val));
  }
  /**
   * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
   * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
   * @hidden
   */
  function isOnePointZero(n) {
      return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;
  }
  /**
   * Check to see if string passed in is a percentage
   * @hidden
   */
  function isPercentage(n) {
      return typeof n === 'string' && n.indexOf('%') !== -1;
  }
  /**
   * Return a valid alpha value [0,1] with all invalid values being set to 1
   * @hidden
   */
  function boundAlpha(a) {
      a = parseFloat(a);
      if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
      }
      return a;
  }
  /**
   * Replace a decimal with it's percentage value
   * @hidden
   */
  function convertToPercentage(n) {
      if (n <= 1) {
          return Number(n) * 100 + "%";
      }
      return n;
  }
  /**
   * Force a hex value to have 2 characters
   * @hidden
   */
  function pad2(c) {
      return c.length === 1 ? '0' + c : String(c);
  }

  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
  /**
   * Handle bounds / percentage checking to conform to CSS color spec
   * <http://www.w3.org/TR/css3-color/>
   * *Assumes:* r, g, b in [0, 255] or [0, 1]
   * *Returns:* { r, g, b } in [0, 255]
   */
  function rgbToRgb(r, g, b) {
      return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255,
      };
  }
  /**
   * Converts an RGB color value to HSL.
   * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
   * *Returns:* { h, s, l } in [0,1]
   */
  function rgbToHsl(r, g, b) {
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var h = 0;
      var s = 0;
      var l = (max + min) / 2;
      if (max === min) {
          s = 0;
          h = 0; // achromatic
      }
      else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          switch (max) {
              case r:
                  h = (g - b) / d + (g < b ? 6 : 0);
                  break;
              case g:
                  h = (b - r) / d + 2;
                  break;
              case b:
                  h = (r - g) / d + 4;
                  break;
          }
          h /= 6;
      }
      return { h: h, s: s, l: l };
  }
  function hue2rgb(p, q, t) {
      if (t < 0) {
          t += 1;
      }
      if (t > 1) {
          t -= 1;
      }
      if (t < 1 / 6) {
          return p + (q - p) * (6 * t);
      }
      if (t < 1 / 2) {
          return q;
      }
      if (t < 2 / 3) {
          return p + (q - p) * (2 / 3 - t) * 6;
      }
      return p;
  }
  /**
   * Converts an HSL color value to RGB.
   *
   * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
   * *Returns:* { r, g, b } in the set [0, 255]
   */
  function hslToRgb(h, s, l) {
      var r;
      var g;
      var b;
      h = bound01(h, 360);
      s = bound01(s, 100);
      l = bound01(l, 100);
      if (s === 0) {
          // achromatic
          g = l;
          b = l;
          r = l;
      }
      else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
      }
      return { r: r * 255, g: g * 255, b: b * 255 };
  }
  /**
   * Converts an RGB color value to HSV
   *
   * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
   * *Returns:* { h, s, v } in [0,1]
   */
  function rgbToHsv(r, g, b) {
      r = bound01(r, 255);
      g = bound01(g, 255);
      b = bound01(b, 255);
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var h = 0;
      var v = max;
      var d = max - min;
      var s = max === 0 ? 0 : d / max;
      if (max === min) {
          h = 0; // achromatic
      }
      else {
          switch (max) {
              case r:
                  h = (g - b) / d + (g < b ? 6 : 0);
                  break;
              case g:
                  h = (b - r) / d + 2;
                  break;
              case b:
                  h = (r - g) / d + 4;
                  break;
          }
          h /= 6;
      }
      return { h: h, s: s, v: v };
  }
  /**
   * Converts an HSV color value to RGB.
   *
   * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
   * *Returns:* { r, g, b } in the set [0, 255]
   */
  function hsvToRgb(h, s, v) {
      h = bound01(h, 360) * 6;
      s = bound01(s, 100);
      v = bound01(v, 100);
      var i = Math.floor(h);
      var f = h - i;
      var p = v * (1 - s);
      var q = v * (1 - f * s);
      var t = v * (1 - (1 - f) * s);
      var mod = i % 6;
      var r = [v, q, p, p, t, v][mod];
      var g = [t, v, v, q, p, p][mod];
      var b = [p, p, t, v, v, q][mod];
      return { r: r * 255, g: g * 255, b: b * 255 };
  }
  /**
   * Converts an RGB color to hex
   *
   * Assumes r, g, and b are contained in the set [0, 255]
   * Returns a 3 or 6 character hex
   */
  function rgbToHex(r, g, b, allow3Char) {
      var hex = [
          pad2(Math.round(r).toString(16)),
          pad2(Math.round(g).toString(16)),
          pad2(Math.round(b).toString(16)),
      ];
      // Return a 3 character hex if possible
      if (allow3Char &&
          hex[0].startsWith(hex[0].charAt(1)) &&
          hex[1].startsWith(hex[1].charAt(1)) &&
          hex[2].startsWith(hex[2].charAt(1))) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
      }
      return hex.join('');
  }
  /**
   * Converts an RGBA color plus alpha transparency to hex
   *
   * Assumes r, g, b are contained in the set [0, 255] and
   * a in [0, 1]. Returns a 4 or 8 character rgba hex
   */
  // eslint-disable-next-line max-params
  function rgbaToHex(r, g, b, a, allow4Char) {
      var hex = [
          pad2(Math.round(r).toString(16)),
          pad2(Math.round(g).toString(16)),
          pad2(Math.round(b).toString(16)),
          pad2(convertDecimalToHex(a)),
      ];
      // Return a 4 character hex if possible
      if (allow4Char &&
          hex[0].startsWith(hex[0].charAt(1)) &&
          hex[1].startsWith(hex[1].charAt(1)) &&
          hex[2].startsWith(hex[2].charAt(1)) &&
          hex[3].startsWith(hex[3].charAt(1))) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
      }
      return hex.join('');
  }
  /** Converts a decimal to a hex value */
  function convertDecimalToHex(d) {
      return Math.round(parseFloat(d) * 255).toString(16);
  }
  /** Converts a hex value to a decimal */
  function convertHexToDecimal(h) {
      return parseIntFromHex(h) / 255;
  }
  /** Parse a base-16 hex value into a base-10 integer */
  function parseIntFromHex(val) {
      return parseInt(val, 16);
  }
  function numberInputToObject(color) {
      return {
          r: color >> 16,
          g: (color & 0xff00) >> 8,
          b: color & 0xff,
      };
  }

  // https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json
  /**
   * @hidden
   */
  var names = {
      aliceblue: '#f0f8ff',
      antiquewhite: '#faebd7',
      aqua: '#00ffff',
      aquamarine: '#7fffd4',
      azure: '#f0ffff',
      beige: '#f5f5dc',
      bisque: '#ffe4c4',
      black: '#000000',
      blanchedalmond: '#ffebcd',
      blue: '#0000ff',
      blueviolet: '#8a2be2',
      brown: '#a52a2a',
      burlywood: '#deb887',
      cadetblue: '#5f9ea0',
      chartreuse: '#7fff00',
      chocolate: '#d2691e',
      coral: '#ff7f50',
      cornflowerblue: '#6495ed',
      cornsilk: '#fff8dc',
      crimson: '#dc143c',
      cyan: '#00ffff',
      darkblue: '#00008b',
      darkcyan: '#008b8b',
      darkgoldenrod: '#b8860b',
      darkgray: '#a9a9a9',
      darkgreen: '#006400',
      darkgrey: '#a9a9a9',
      darkkhaki: '#bdb76b',
      darkmagenta: '#8b008b',
      darkolivegreen: '#556b2f',
      darkorange: '#ff8c00',
      darkorchid: '#9932cc',
      darkred: '#8b0000',
      darksalmon: '#e9967a',
      darkseagreen: '#8fbc8f',
      darkslateblue: '#483d8b',
      darkslategray: '#2f4f4f',
      darkslategrey: '#2f4f4f',
      darkturquoise: '#00ced1',
      darkviolet: '#9400d3',
      deeppink: '#ff1493',
      deepskyblue: '#00bfff',
      dimgray: '#696969',
      dimgrey: '#696969',
      dodgerblue: '#1e90ff',
      firebrick: '#b22222',
      floralwhite: '#fffaf0',
      forestgreen: '#228b22',
      fuchsia: '#ff00ff',
      gainsboro: '#dcdcdc',
      ghostwhite: '#f8f8ff',
      goldenrod: '#daa520',
      gold: '#ffd700',
      gray: '#808080',
      green: '#008000',
      greenyellow: '#adff2f',
      grey: '#808080',
      honeydew: '#f0fff0',
      hotpink: '#ff69b4',
      indianred: '#cd5c5c',
      indigo: '#4b0082',
      ivory: '#fffff0',
      khaki: '#f0e68c',
      lavenderblush: '#fff0f5',
      lavender: '#e6e6fa',
      lawngreen: '#7cfc00',
      lemonchiffon: '#fffacd',
      lightblue: '#add8e6',
      lightcoral: '#f08080',
      lightcyan: '#e0ffff',
      lightgoldenrodyellow: '#fafad2',
      lightgray: '#d3d3d3',
      lightgreen: '#90ee90',
      lightgrey: '#d3d3d3',
      lightpink: '#ffb6c1',
      lightsalmon: '#ffa07a',
      lightseagreen: '#20b2aa',
      lightskyblue: '#87cefa',
      lightslategray: '#778899',
      lightslategrey: '#778899',
      lightsteelblue: '#b0c4de',
      lightyellow: '#ffffe0',
      lime: '#00ff00',
      limegreen: '#32cd32',
      linen: '#faf0e6',
      magenta: '#ff00ff',
      maroon: '#800000',
      mediumaquamarine: '#66cdaa',
      mediumblue: '#0000cd',
      mediumorchid: '#ba55d3',
      mediumpurple: '#9370db',
      mediumseagreen: '#3cb371',
      mediumslateblue: '#7b68ee',
      mediumspringgreen: '#00fa9a',
      mediumturquoise: '#48d1cc',
      mediumvioletred: '#c71585',
      midnightblue: '#191970',
      mintcream: '#f5fffa',
      mistyrose: '#ffe4e1',
      moccasin: '#ffe4b5',
      navajowhite: '#ffdead',
      navy: '#000080',
      oldlace: '#fdf5e6',
      olive: '#808000',
      olivedrab: '#6b8e23',
      orange: '#ffa500',
      orangered: '#ff4500',
      orchid: '#da70d6',
      palegoldenrod: '#eee8aa',
      palegreen: '#98fb98',
      paleturquoise: '#afeeee',
      palevioletred: '#db7093',
      papayawhip: '#ffefd5',
      peachpuff: '#ffdab9',
      peru: '#cd853f',
      pink: '#ffc0cb',
      plum: '#dda0dd',
      powderblue: '#b0e0e6',
      purple: '#800080',
      rebeccapurple: '#663399',
      red: '#ff0000',
      rosybrown: '#bc8f8f',
      royalblue: '#4169e1',
      saddlebrown: '#8b4513',
      salmon: '#fa8072',
      sandybrown: '#f4a460',
      seagreen: '#2e8b57',
      seashell: '#fff5ee',
      sienna: '#a0522d',
      silver: '#c0c0c0',
      skyblue: '#87ceeb',
      slateblue: '#6a5acd',
      slategray: '#708090',
      slategrey: '#708090',
      snow: '#fffafa',
      springgreen: '#00ff7f',
      steelblue: '#4682b4',
      tan: '#d2b48c',
      teal: '#008080',
      thistle: '#d8bfd8',
      tomato: '#ff6347',
      turquoise: '#40e0d0',
      violet: '#ee82ee',
      wheat: '#f5deb3',
      white: '#ffffff',
      whitesmoke: '#f5f5f5',
      yellow: '#ffff00',
      yellowgreen: '#9acd32',
  };

  /**
   * Given a string or object, convert that input to RGB
   *
   * Possible string inputs:
   * ```
   * "red"
   * "#f00" or "f00"
   * "#ff0000" or "ff0000"
   * "#ff000000" or "ff000000"
   * "rgb 255 0 0" or "rgb (255, 0, 0)"
   * "rgb 1.0 0 0" or "rgb (1, 0, 0)"
   * "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
   * "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
   * "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
   * "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
   * "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
   * ```
   */
  function inputToRGB(color) {
      var rgb = { r: 0, g: 0, b: 0 };
      var a = 1;
      var s = null;
      var v = null;
      var l = null;
      var ok = false;
      var format = false;
      if (typeof color === 'string') {
          color = stringInputToObject(color);
      }
      if (typeof color === 'object') {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
              rgb = rgbToRgb(color.r, color.g, color.b);
              ok = true;
              format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
              s = convertToPercentage(color.s);
              v = convertToPercentage(color.v);
              rgb = hsvToRgb(color.h, s, v);
              ok = true;
              format = 'hsv';
          }
          else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
              s = convertToPercentage(color.s);
              l = convertToPercentage(color.l);
              rgb = hslToRgb(color.h, s, l);
              ok = true;
              format = 'hsl';
          }
          if (Object.prototype.hasOwnProperty.call(color, 'a')) {
              a = color.a;
          }
      }
      a = boundAlpha(a);
      return {
          ok: ok,
          format: color.format || format,
          r: Math.min(255, Math.max(rgb.r, 0)),
          g: Math.min(255, Math.max(rgb.g, 0)),
          b: Math.min(255, Math.max(rgb.b, 0)),
          a: a,
      };
  }
  // <http://www.w3.org/TR/css3-values/#integers>
  var CSS_INTEGER = '[-\\+]?\\d+%?';
  // <http://www.w3.org/TR/css3-values/#number-value>
  var CSS_NUMBER = '[-\\+]?\\d*\\.\\d+%?';
  // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
  var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  // Actual matching.
  // Parentheses and commas are optional, but not required.
  // Whitespace can take the place of commas or opening paren
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var matchers = {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),
      rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),
      hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),
      hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),
      hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),
      hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  };
  /**
   * Permissive string parsing.  Take in a number of formats, and output an object
   * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
   */
  function stringInputToObject(color) {
      color = color.trim().toLowerCase();
      if (color.length === 0) {
          return false;
      }
      var named = false;
      if (names[color]) {
          color = names[color];
          named = true;
      }
      else if (color === 'transparent') {
          return { r: 0, g: 0, b: 0, a: 0, format: 'name' };
      }
      // Try to match string input using regular expressions.
      // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
      // Just return an object and let the conversion functions handle that.
      // This way the result will be the same whether the tinycolor is initialized with string or object.
      var match = matchers.rgb.exec(color);
      if (match) {
          return { r: match[1], g: match[2], b: match[3] };
      }
      match = matchers.rgba.exec(color);
      if (match) {
          return { r: match[1], g: match[2], b: match[3], a: match[4] };
      }
      match = matchers.hsl.exec(color);
      if (match) {
          return { h: match[1], s: match[2], l: match[3] };
      }
      match = matchers.hsla.exec(color);
      if (match) {
          return { h: match[1], s: match[2], l: match[3], a: match[4] };
      }
      match = matchers.hsv.exec(color);
      if (match) {
          return { h: match[1], s: match[2], v: match[3] };
      }
      match = matchers.hsva.exec(color);
      if (match) {
          return { h: match[1], s: match[2], v: match[3], a: match[4] };
      }
      match = matchers.hex8.exec(color);
      if (match) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              a: convertHexToDecimal(match[4]),
              format: named ? 'name' : 'hex8',
          };
      }
      match = matchers.hex6.exec(color);
      if (match) {
          return {
              r: parseIntFromHex(match[1]),
              g: parseIntFromHex(match[2]),
              b: parseIntFromHex(match[3]),
              format: named ? 'name' : 'hex',
          };
      }
      match = matchers.hex4.exec(color);
      if (match) {
          return {
              r: parseIntFromHex(match[1] + match[1]),
              g: parseIntFromHex(match[2] + match[2]),
              b: parseIntFromHex(match[3] + match[3]),
              a: convertHexToDecimal(match[4] + match[4]),
              format: named ? 'name' : 'hex8',
          };
      }
      match = matchers.hex3.exec(color);
      if (match) {
          return {
              r: parseIntFromHex(match[1] + match[1]),
              g: parseIntFromHex(match[2] + match[2]),
              b: parseIntFromHex(match[3] + match[3]),
              format: named ? 'name' : 'hex',
          };
      }
      return false;
  }
  /**
   * Check to see if it looks like a CSS unit
   * (see `matchers` above for definition).
   */
  function isValidCSSUnit(color) {
      return Boolean(matchers.CSS_UNIT.exec(String(color)));
  }

  var TinyColor = /** @class */ (function () {
      function TinyColor(color, opts) {
          if (color === void 0) { color = ''; }
          if (opts === void 0) { opts = {}; }
          var _a;
          // If input is already a tinycolor, return itself
          if (color instanceof TinyColor) {
              // eslint-disable-next-line no-constructor-return
              return color;
          }
          if (typeof color === 'number') {
              color = numberInputToObject(color);
          }
          this.originalInput = color;
          var rgb = inputToRGB(color);
          this.originalInput = color;
          this.r = rgb.r;
          this.g = rgb.g;
          this.b = rgb.b;
          this.a = rgb.a;
          this.roundA = Math.round(100 * this.a) / 100;
          this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;
          this.gradientType = opts.gradientType;
          // Don't let the range of [0,255] come back in [0,1].
          // Potentially lose a little bit of precision here, but will fix issues where
          // .5 gets interpreted as half of the total, instead of half of 1
          // If it was supposed to be 128, this was already taken care of by `inputToRgb`
          if (this.r < 1) {
              this.r = Math.round(this.r);
          }
          if (this.g < 1) {
              this.g = Math.round(this.g);
          }
          if (this.b < 1) {
              this.b = Math.round(this.b);
          }
          this.isValid = rgb.ok;
      }
      TinyColor.prototype.isDark = function () {
          return this.getBrightness() < 128;
      };
      TinyColor.prototype.isLight = function () {
          return !this.isDark();
      };
      /**
       * Returns the perceived brightness of the color, from 0-255.
       */
      TinyColor.prototype.getBrightness = function () {
          // http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
      };
      /**
       * Returns the perceived luminance of a color, from 0-1.
       */
      TinyColor.prototype.getLuminance = function () {
          // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();
          var R;
          var G;
          var B;
          var RsRGB = rgb.r / 255;
          var GsRGB = rgb.g / 255;
          var BsRGB = rgb.b / 255;
          if (RsRGB <= 0.03928) {
              R = RsRGB / 12.92;
          }
          else {
              // eslint-disable-next-line prefer-exponentiation-operator
              R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
          }
          if (GsRGB <= 0.03928) {
              G = GsRGB / 12.92;
          }
          else {
              // eslint-disable-next-line prefer-exponentiation-operator
              G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
          }
          if (BsRGB <= 0.03928) {
              B = BsRGB / 12.92;
          }
          else {
              // eslint-disable-next-line prefer-exponentiation-operator
              B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
          }
          return 0.2126 * R + 0.7152 * G + 0.0722 * B;
      };
      /**
       * Returns the alpha value of a color, from 0-1.
       */
      TinyColor.prototype.getAlpha = function () {
          return this.a;
      };
      /**
       * Sets the alpha value on the current color.
       *
       * @param alpha - The new alpha value. The accepted range is 0-1.
       */
      TinyColor.prototype.setAlpha = function (alpha) {
          this.a = boundAlpha(alpha);
          this.roundA = Math.round(100 * this.a) / 100;
          return this;
      };
      /**
       * Returns the object as a HSVA object.
       */
      TinyColor.prototype.toHsv = function () {
          var hsv = rgbToHsv(this.r, this.g, this.b);
          return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
      };
      /**
       * Returns the hsva values interpolated into a string with the following format:
       * "hsva(xxx, xxx, xxx, xx)".
       */
      TinyColor.prototype.toHsvString = function () {
          var hsv = rgbToHsv(this.r, this.g, this.b);
          var h = Math.round(hsv.h * 360);
          var s = Math.round(hsv.s * 100);
          var v = Math.round(hsv.v * 100);
          return this.a === 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this.roundA + ")";
      };
      /**
       * Returns the object as a HSLA object.
       */
      TinyColor.prototype.toHsl = function () {
          var hsl = rgbToHsl(this.r, this.g, this.b);
          return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
      };
      /**
       * Returns the hsla values interpolated into a string with the following format:
       * "hsla(xxx, xxx, xxx, xx)".
       */
      TinyColor.prototype.toHslString = function () {
          var hsl = rgbToHsl(this.r, this.g, this.b);
          var h = Math.round(hsl.h * 360);
          var s = Math.round(hsl.s * 100);
          var l = Math.round(hsl.l * 100);
          return this.a === 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this.roundA + ")";
      };
      /**
       * Returns the hex value of the color.
       * @param allow3Char will shorten hex value to 3 char if possible
       */
      TinyColor.prototype.toHex = function (allow3Char) {
          if (allow3Char === void 0) { allow3Char = false; }
          return rgbToHex(this.r, this.g, this.b, allow3Char);
      };
      /**
       * Returns the hex value of the color -with a # appened.
       * @param allow3Char will shorten hex value to 3 char if possible
       */
      TinyColor.prototype.toHexString = function (allow3Char) {
          if (allow3Char === void 0) { allow3Char = false; }
          return '#' + this.toHex(allow3Char);
      };
      /**
       * Returns the hex 8 value of the color.
       * @param allow4Char will shorten hex value to 4 char if possible
       */
      TinyColor.prototype.toHex8 = function (allow4Char) {
          if (allow4Char === void 0) { allow4Char = false; }
          return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
      };
      /**
       * Returns the hex 8 value of the color -with a # appened.
       * @param allow4Char will shorten hex value to 4 char if possible
       */
      TinyColor.prototype.toHex8String = function (allow4Char) {
          if (allow4Char === void 0) { allow4Char = false; }
          return '#' + this.toHex8(allow4Char);
      };
      /**
       * Returns the object as a RGBA object.
       */
      TinyColor.prototype.toRgb = function () {
          return {
              r: Math.round(this.r),
              g: Math.round(this.g),
              b: Math.round(this.b),
              a: this.a,
          };
      };
      /**
       * Returns the RGBA values interpolated into a string with the following format:
       * "RGBA(xxx, xxx, xxx, xx)".
       */
      TinyColor.prototype.toRgbString = function () {
          var r = Math.round(this.r);
          var g = Math.round(this.g);
          var b = Math.round(this.b);
          return this.a === 1 ? "rgb(" + r + ", " + g + ", " + b + ")" : "rgba(" + r + ", " + g + ", " + b + ", " + this.roundA + ")";
      };
      /**
       * Returns the object as a RGBA object.
       */
      TinyColor.prototype.toPercentageRgb = function () {
          var fmt = function (x) { return Math.round(bound01(x, 255) * 100) + "%"; };
          return {
              r: fmt(this.r),
              g: fmt(this.g),
              b: fmt(this.b),
              a: this.a,
          };
      };
      /**
       * Returns the RGBA relative values interpolated into a string
       */
      TinyColor.prototype.toPercentageRgbString = function () {
          var rnd = function (x) { return Math.round(bound01(x, 255) * 100); };
          return this.a === 1
              ? "rgb(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%)"
              : "rgba(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%, " + this.roundA + ")";
      };
      /**
       * The 'real' name of the color -if there is one.
       */
      TinyColor.prototype.toName = function () {
          if (this.a === 0) {
              return 'transparent';
          }
          if (this.a < 1) {
              return false;
          }
          var hex = '#' + rgbToHex(this.r, this.g, this.b, false);
          for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {
              var _b = _a[_i], key = _b[0], value = _b[1];
              if (hex === value) {
                  return key;
              }
          }
          return false;
      };
      TinyColor.prototype.toString = function (format) {
          var formatSet = Boolean(format);
          format = format !== null && format !== void 0 ? format : this.format;
          var formattedString = false;
          var hasAlpha = this.a < 1 && this.a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');
          if (needsAlphaFormat) {
              // Special case for "transparent", all other non-alpha formats
              // will return rgba when there is transparency.
              if (format === 'name' && this.a === 0) {
                  return this.toName();
              }
              return this.toRgbString();
          }
          if (format === 'rgb') {
              formattedString = this.toRgbString();
          }
          if (format === 'prgb') {
              formattedString = this.toPercentageRgbString();
          }
          if (format === 'hex' || format === 'hex6') {
              formattedString = this.toHexString();
          }
          if (format === 'hex3') {
              formattedString = this.toHexString(true);
          }
          if (format === 'hex4') {
              formattedString = this.toHex8String(true);
          }
          if (format === 'hex8') {
              formattedString = this.toHex8String();
          }
          if (format === 'name') {
              formattedString = this.toName();
          }
          if (format === 'hsl') {
              formattedString = this.toHslString();
          }
          if (format === 'hsv') {
              formattedString = this.toHsvString();
          }
          return formattedString || this.toHexString();
      };
      TinyColor.prototype.toNumber = function () {
          return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
      };
      TinyColor.prototype.clone = function () {
          return new TinyColor(this.toString());
      };
      /**
       * Lighten the color a given amount. Providing 100 will always return white.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.lighten = function (amount) {
          if (amount === void 0) { amount = 10; }
          var hsl = this.toHsl();
          hsl.l += amount / 100;
          hsl.l = clamp01(hsl.l);
          return new TinyColor(hsl);
      };
      /**
       * Brighten the color a given amount, from 0 to 100.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.brighten = function (amount) {
          if (amount === void 0) { amount = 10; }
          var rgb = this.toRgb();
          rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
          rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
          rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
          return new TinyColor(rgb);
      };
      /**
       * Darken the color a given amount, from 0 to 100.
       * Providing 100 will always return black.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.darken = function (amount) {
          if (amount === void 0) { amount = 10; }
          var hsl = this.toHsl();
          hsl.l -= amount / 100;
          hsl.l = clamp01(hsl.l);
          return new TinyColor(hsl);
      };
      /**
       * Mix the color with pure white, from 0 to 100.
       * Providing 0 will do nothing, providing 100 will always return white.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.tint = function (amount) {
          if (amount === void 0) { amount = 10; }
          return this.mix('white', amount);
      };
      /**
       * Mix the color with pure black, from 0 to 100.
       * Providing 0 will do nothing, providing 100 will always return black.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.shade = function (amount) {
          if (amount === void 0) { amount = 10; }
          return this.mix('black', amount);
      };
      /**
       * Desaturate the color a given amount, from 0 to 100.
       * Providing 100 will is the same as calling greyscale
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.desaturate = function (amount) {
          if (amount === void 0) { amount = 10; }
          var hsl = this.toHsl();
          hsl.s -= amount / 100;
          hsl.s = clamp01(hsl.s);
          return new TinyColor(hsl);
      };
      /**
       * Saturate the color a given amount, from 0 to 100.
       * @param amount - valid between 1-100
       */
      TinyColor.prototype.saturate = function (amount) {
          if (amount === void 0) { amount = 10; }
          var hsl = this.toHsl();
          hsl.s += amount / 100;
          hsl.s = clamp01(hsl.s);
          return new TinyColor(hsl);
      };
      /**
       * Completely desaturates a color into greyscale.
       * Same as calling `desaturate(100)`
       */
      TinyColor.prototype.greyscale = function () {
          return this.desaturate(100);
      };
      /**
       * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
       * Values outside of this range will be wrapped into this range.
       */
      TinyColor.prototype.spin = function (amount) {
          var hsl = this.toHsl();
          var hue = (hsl.h + amount) % 360;
          hsl.h = hue < 0 ? 360 + hue : hue;
          return new TinyColor(hsl);
      };
      /**
       * Mix the current color a given amount with another color, from 0 to 100.
       * 0 means no mixing (return current color).
       */
      TinyColor.prototype.mix = function (color, amount) {
          if (amount === void 0) { amount = 50; }
          var rgb1 = this.toRgb();
          var rgb2 = new TinyColor(color).toRgb();
          var p = amount / 100;
          var rgba = {
              r: (rgb2.r - rgb1.r) * p + rgb1.r,
              g: (rgb2.g - rgb1.g) * p + rgb1.g,
              b: (rgb2.b - rgb1.b) * p + rgb1.b,
              a: (rgb2.a - rgb1.a) * p + rgb1.a,
          };
          return new TinyColor(rgba);
      };
      TinyColor.prototype.analogous = function (results, slices) {
          if (results === void 0) { results = 6; }
          if (slices === void 0) { slices = 30; }
          var hsl = this.toHsl();
          var part = 360 / slices;
          var ret = [this];
          for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {
              hsl.h = (hsl.h + part) % 360;
              ret.push(new TinyColor(hsl));
          }
          return ret;
      };
      /**
       * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js
       */
      TinyColor.prototype.complement = function () {
          var hsl = this.toHsl();
          hsl.h = (hsl.h + 180) % 360;
          return new TinyColor(hsl);
      };
      TinyColor.prototype.monochromatic = function (results) {
          if (results === void 0) { results = 6; }
          var hsv = this.toHsv();
          var h = hsv.h;
          var s = hsv.s;
          var v = hsv.v;
          var res = [];
          var modification = 1 / results;
          while (results--) {
              res.push(new TinyColor({ h: h, s: s, v: v }));
              v = (v + modification) % 1;
          }
          return res;
      };
      TinyColor.prototype.splitcomplement = function () {
          var hsl = this.toHsl();
          var h = hsl.h;
          return [
              this,
              new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
              new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),
          ];
      };
      /**
       * Compute how the color would appear on a background
       */
      TinyColor.prototype.onBackground = function (background) {
          var fg = this.toRgb();
          var bg = new TinyColor(background).toRgb();
          return new TinyColor({
              r: bg.r + (fg.r - bg.r) * fg.a,
              g: bg.g + (fg.g - bg.g) * fg.a,
              b: bg.b + (fg.b - bg.b) * fg.a,
          });
      };
      /**
       * Alias for `polyad(3)`
       */
      TinyColor.prototype.triad = function () {
          return this.polyad(3);
      };
      /**
       * Alias for `polyad(4)`
       */
      TinyColor.prototype.tetrad = function () {
          return this.polyad(4);
      };
      /**
       * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)
       * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...
       */
      TinyColor.prototype.polyad = function (n) {
          var hsl = this.toHsl();
          var h = hsl.h;
          var result = [this];
          var increment = 360 / n;
          for (var i = 1; i < n; i++) {
              result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
          }
          return result;
      };
      /**
       * compare color vs current color
       */
      TinyColor.prototype.equals = function (color) {
          return this.toRgbString() === new TinyColor(color).toRgbString();
      };
      return TinyColor;
  }());

  var hueStep = 2; // 色相阶梯

  var saturationStep = 0.16; // 饱和度阶梯，浅色部分

  var saturationStep2 = 0.05; // 饱和度阶梯，深色部分

  var brightnessStep1 = 0.05; // 亮度阶梯，浅色部分

  var brightnessStep2 = 0.15; // 亮度阶梯，深色部分

  var lightColorCount = 5; // 浅色数量，主色上

  var darkColorCount = 4; // 深色数量，主色下
  // 暗色主题颜色映射关系表

  var darkColorMap = [{
    index: 7,
    opacity: 0.15
  }, {
    index: 6,
    opacity: 0.25
  }, {
    index: 5,
    opacity: 0.3
  }, {
    index: 5,
    opacity: 0.45
  }, {
    index: 5,
    opacity: 0.65
  }, {
    index: 5,
    opacity: 0.85
  }, {
    index: 4,
    opacity: 0.9
  }, {
    index: 3,
    opacity: 0.95
  }, {
    index: 2,
    opacity: 0.97
  }, {
    index: 1,
    opacity: 0.98
  }]; // Wrapper function ported from TinyColor.prototype.toHsv
  // Keep it here because of `hsv.h * 360`

  function toHsv(_ref) {
    var r = _ref.r,
        g = _ref.g,
        b = _ref.b;
    var hsv = rgbToHsv(r, g, b);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v
    };
  } // Wrapper function ported from TinyColor.prototype.toHexString
  // Keep it here because of the prefix `#`


  function toHex(_ref2) {
    var r = _ref2.r,
        g = _ref2.g,
        b = _ref2.b;
    return "#".concat(rgbToHex(r, g, b, false));
  } // Wrapper function ported from TinyColor.prototype.mix, not treeshakable.
  // Amount in range [0, 1]
  // Assume color1 & color2 has no alpha, since the following src code did so.


  function mix(rgb1, rgb2, amount) {
    var p = amount / 100;
    var rgb = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b
    };
    return rgb;
  }

  function getHue(hsv, i, light) {
    var hue; // 根据色相不同，色相转向不同

    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
      hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
    } else {
      hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
    }

    if (hue < 0) {
      hue += 360;
    } else if (hue >= 360) {
      hue -= 360;
    }

    return hue;
  }

  function getSaturation(hsv, i, light) {
    // grey color don't change saturation
    if (hsv.h === 0 && hsv.s === 0) {
      return hsv.s;
    }

    var saturation;

    if (light) {
      saturation = hsv.s - saturationStep * i;
    } else if (i === darkColorCount) {
      saturation = hsv.s + saturationStep;
    } else {
      saturation = hsv.s + saturationStep2 * i;
    } // 边界值修正


    if (saturation > 1) {
      saturation = 1;
    } // 第一格的 s 限制在 0.06-0.1 之间


    if (light && i === lightColorCount && saturation > 0.1) {
      saturation = 0.1;
    }

    if (saturation < 0.06) {
      saturation = 0.06;
    }

    return Number(saturation.toFixed(2));
  }

  function getValue$2(hsv, i, light) {
    var value;

    if (light) {
      value = hsv.v + brightnessStep1 * i;
    } else {
      value = hsv.v - brightnessStep2 * i;
    }

    if (value > 1) {
      value = 1;
    }

    return Number(value.toFixed(2));
  }

  function generate(color) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var patterns = [];
    var pColor = inputToRGB(color);

    for (var i = lightColorCount; i > 0; i -= 1) {
      var hsv = toHsv(pColor);
      var colorString = toHex(inputToRGB({
        h: getHue(hsv, i, true),
        s: getSaturation(hsv, i, true),
        v: getValue$2(hsv, i, true)
      }));
      patterns.push(colorString);
    }

    patterns.push(toHex(pColor));

    for (var _i = 1; _i <= darkColorCount; _i += 1) {
      var _hsv = toHsv(pColor);

      var _colorString = toHex(inputToRGB({
        h: getHue(_hsv, _i),
        s: getSaturation(_hsv, _i),
        v: getValue$2(_hsv, _i)
      }));

      patterns.push(_colorString);
    } // dark theme patterns


    if (opts.theme === 'dark') {
      return darkColorMap.map(function (_ref3) {
        var index = _ref3.index,
            opacity = _ref3.opacity;
        var darkColorString = toHex(mix(inputToRGB(opts.backgroundColor || '#141414'), inputToRGB(patterns[index]), opacity * 100));
        return darkColorString;
      });
    }

    return patterns;
  }

  var presetPrimaryColors = {
    red: '#F5222D',
    volcano: '#FA541C',
    orange: '#FA8C16',
    gold: '#FAAD14',
    yellow: '#FADB14',
    lime: '#A0D911',
    green: '#52C41A',
    cyan: '#13C2C2',
    blue: '#1890FF',
    geekblue: '#2F54EB',
    purple: '#722ED1',
    magenta: '#EB2F96',
    grey: '#666666'
  };
  var presetPalettes = {};
  var presetDarkPalettes = {};
  Object.keys(presetPrimaryColors).forEach(function (key) {
    presetPalettes[key] = generate(presetPrimaryColors[key]);
    presetPalettes[key].primary = presetPalettes[key][5]; // dark presetPalettes

    presetDarkPalettes[key] = generate(presetPrimaryColors[key], {
      theme: 'dark',
      backgroundColor: '#141414'
    });
    presetDarkPalettes[key].primary = presetDarkPalettes[key][5];
  });

  var MARK_KEY = "rc-util-key";

  function getContainer(option) {
    if (option.attachTo) {
      return option.attachTo;
    }

    var head = document.querySelector('head');
    return head || document.body;
  }

  function injectCSS(css) {
    var _option$csp;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!canUseDom()) {
      return null;
    }

    var styleNode = document.createElement('style');

    if ((_option$csp = option.csp) === null || _option$csp === void 0 ? void 0 : _option$csp.nonce) {
      var _option$csp2;

      styleNode.nonce = (_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce;
    }

    styleNode.innerHTML = css;
    var container = getContainer(option);
    var firstChild = container.firstChild;

    if (option.prepend && container.prepend) {
      // Use `prepend` first
      container.prepend(styleNode);
    } else if (option.prepend && firstChild) {
      // Fallback to `insertBefore` like IE not support `prepend`
      container.insertBefore(styleNode, firstChild);
    } else {
      container.appendChild(styleNode);
    }

    return styleNode;
  }
  var containerCache = new Map();
  function updateCSS(css, key) {
    var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var container = getContainer(option); // Get real parent

    if (!containerCache.has(container)) {
      var placeholderStyle = injectCSS('', option);
      var parentNode = placeholderStyle.parentNode;
      containerCache.set(container, parentNode);
      parentNode.removeChild(placeholderStyle);
    }

    var existNode = Array.from(containerCache.get(container).children).find(function (node) {
      return node.tagName === 'STYLE' && node[MARK_KEY] === key;
    });

    if (existNode) {
      var _option$csp3, _option$csp4;

      if (((_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce) && existNode.nonce !== ((_option$csp4 = option.csp) === null || _option$csp4 === void 0 ? void 0 : _option$csp4.nonce)) {
        var _option$csp5;

        existNode.nonce = (_option$csp5 = option.csp) === null || _option$csp5 === void 0 ? void 0 : _option$csp5.nonce;
      }

      if (existNode.innerHTML !== css) {
        existNode.innerHTML = css;
      }

      return existNode;
    }

    var newNode = injectCSS(css, option);
    newNode[MARK_KEY] = key;
    return newNode;
  }

  function warning$2(valid, message) {
    warningOnce(valid, "[@ant-design/icons] ".concat(message));
  }
  function isIconDefinition(target) {
    return _typeof$1(target) === 'object' && typeof target.name === 'string' && typeof target.theme === 'string' && (_typeof$1(target.icon) === 'object' || typeof target.icon === 'function');
  }
  function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return Object.keys(attrs).reduce(function (acc, key) {
      var val = attrs[key];

      switch (key) {
        case 'class':
          acc.className = val;
          delete acc.class;
          break;

        default:
          acc[key] = val;
      }

      return acc;
    }, {});
  }
  function generate$1(node, key, rootProps) {
    if (!rootProps) {
      return /*#__PURE__*/React__default['default'].createElement(node.tag, _objectSpread2$1({
        key: key
      }, normalizeAttrs(node.attrs)), (node.children || []).map(function (child, index) {
        return generate$1(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
      }));
    }

    return /*#__PURE__*/React__default['default'].createElement(node.tag, _objectSpread2$1(_objectSpread2$1({
      key: key
    }, normalizeAttrs(node.attrs)), rootProps), (node.children || []).map(function (child, index) {
      return generate$1(child, "".concat(key, "-").concat(node.tag, "-").concat(index));
    }));
  }
  function getSecondaryColor(primaryColor) {
    // choose the second color
    return generate(primaryColor)[0];
  }
  function normalizeTwoToneColors(twoToneColor) {
    if (!twoToneColor) {
      return [];
    }

    return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
  } // These props make sure that the SVG behaviours like general text.
  var iconStyles = "\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n";
  var useInsertStyles = function useInsertStyles() {
    var styleStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iconStyles;

    var _useContext = React.useContext(IconContext),
        csp = _useContext.csp;

    React.useEffect(function () {
      updateCSS(styleStr, '@ant-design-icons', {
        prepend: true,
        csp: csp
      });
    }, []);
  };

  var _excluded$3 = ["icon", "className", "onClick", "style", "primaryColor", "secondaryColor"];
  var twoToneColorPalette = {
    primaryColor: '#333',
    secondaryColor: '#E6E6E6',
    calculated: false
  };

  function setTwoToneColors(_ref) {
    var primaryColor = _ref.primaryColor,
        secondaryColor = _ref.secondaryColor;
    twoToneColorPalette.primaryColor = primaryColor;
    twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
    twoToneColorPalette.calculated = !!secondaryColor;
  }

  function getTwoToneColors() {
    return _objectSpread2$1({}, twoToneColorPalette);
  }

  var IconBase = function IconBase(props) {
    var icon = props.icon,
        className = props.className,
        onClick = props.onClick,
        style = props.style,
        primaryColor = props.primaryColor,
        secondaryColor = props.secondaryColor,
        restProps = _objectWithoutProperties$1(props, _excluded$3);

    var colors = twoToneColorPalette;

    if (primaryColor) {
      colors = {
        primaryColor: primaryColor,
        secondaryColor: secondaryColor || getSecondaryColor(primaryColor)
      };
    }

    useInsertStyles();
    warning$2(isIconDefinition(icon), "icon should be icon definiton, but got ".concat(icon));

    if (!isIconDefinition(icon)) {
      return null;
    }

    var target = icon;

    if (target && typeof target.icon === 'function') {
      target = _objectSpread2$1(_objectSpread2$1({}, target), {}, {
        icon: target.icon(colors.primaryColor, colors.secondaryColor)
      });
    }

    return generate$1(target.icon, "svg-".concat(target.name), _objectSpread2$1({
      className: className,
      onClick: onClick,
      style: style,
      'data-icon': target.name,
      width: '1em',
      height: '1em',
      fill: 'currentColor',
      'aria-hidden': 'true'
    }, restProps));
  };

  IconBase.displayName = 'IconReact';
  IconBase.getTwoToneColors = getTwoToneColors;
  IconBase.setTwoToneColors = setTwoToneColors;

  function setTwoToneColor(twoToneColor) {
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor),
        _normalizeTwoToneColo2 = _slicedToArray$1(_normalizeTwoToneColo, 2),
        primaryColor = _normalizeTwoToneColo2[0],
        secondaryColor = _normalizeTwoToneColo2[1];

    return IconBase.setTwoToneColors({
      primaryColor: primaryColor,
      secondaryColor: secondaryColor
    });
  }
  function getTwoToneColor() {
    var colors = IconBase.getTwoToneColors();

    if (!colors.calculated) {
      return colors.primaryColor;
    }

    return [colors.primaryColor, colors.secondaryColor];
  }

  var _excluded$4 = ["className", "icon", "spin", "rotate", "tabIndex", "onClick", "twoToneColor"];
  // should move it to antd main repo?

  setTwoToneColor('#1890ff');
  var Icon = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var className = props.className,
        icon = props.icon,
        spin = props.spin,
        rotate = props.rotate,
        tabIndex = props.tabIndex,
        onClick = props.onClick,
        twoToneColor = props.twoToneColor,
        restProps = _objectWithoutProperties$1(props, _excluded$4);

    var _React$useContext = React.useContext(IconContext),
        _React$useContext$pre = _React$useContext.prefixCls,
        prefixCls = _React$useContext$pre === void 0 ? 'anticon' : _React$useContext$pre;

    var classString = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(icon.name), !!icon.name), _defineProperty$1(_classNames, "".concat(prefixCls, "-spin"), !!spin || icon.name === 'loading'), _classNames), className);
    var iconTabIndex = tabIndex;

    if (iconTabIndex === undefined && onClick) {
      iconTabIndex = -1;
    }

    var svgStyle = rotate ? {
      msTransform: "rotate(".concat(rotate, "deg)"),
      transform: "rotate(".concat(rotate, "deg)")
    } : undefined;

    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor),
        _normalizeTwoToneColo2 = _slicedToArray$1(_normalizeTwoToneColo, 2),
        primaryColor = _normalizeTwoToneColo2[0],
        secondaryColor = _normalizeTwoToneColo2[1];

    return /*#__PURE__*/React.createElement("span", _objectSpread2$1(_objectSpread2$1({
      role: "img",
      "aria-label": icon.name
    }, restProps), {}, {
      ref: ref,
      tabIndex: iconTabIndex,
      onClick: onClick,
      className: classString
    }), /*#__PURE__*/React.createElement(IconBase, {
      icon: icon,
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
      style: svgStyle
    }));
  });
  Icon.displayName = 'AntdIcon';
  Icon.getTwoToneColor = getTwoToneColor;
  Icon.setTwoToneColor = setTwoToneColor;

  var LoadingOutlined$1 = function LoadingOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: LoadingOutlined
    }));
  };

  LoadingOutlined$1.displayName = 'LoadingOutlined';
  var LoadingOutlined$2 = /*#__PURE__*/React.forwardRef(LoadingOutlined$1);

  // This icon file is generated automatically.
  var ExclamationCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "exclamation-circle", "theme": "filled" };

  var ExclamationCircleFilled$1 = function ExclamationCircleFilled$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: ExclamationCircleFilled
    }));
  };

  ExclamationCircleFilled$1.displayName = 'ExclamationCircleFilled';
  var ExclamationCircleFilled$2 = /*#__PURE__*/React.forwardRef(ExclamationCircleFilled$1);

  // This icon file is generated automatically.
  var CloseCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z" } }] }, "name": "close-circle", "theme": "filled" };

  var CloseCircleFilled$1 = function CloseCircleFilled$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: CloseCircleFilled
    }));
  };

  CloseCircleFilled$1.displayName = 'CloseCircleFilled';
  var CloseCircleFilled$2 = /*#__PURE__*/React.forwardRef(CloseCircleFilled$1);

  // This icon file is generated automatically.
  var CheckCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z" } }] }, "name": "check-circle", "theme": "filled" };

  var CheckCircleFilled$1 = function CheckCircleFilled$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: CheckCircleFilled
    }));
  };

  CheckCircleFilled$1.displayName = 'CheckCircleFilled';
  var CheckCircleFilled$2 = /*#__PURE__*/React.forwardRef(CheckCircleFilled$1);

  // This icon file is generated automatically.
  var InfoCircleFilled = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z" } }] }, "name": "info-circle", "theme": "filled" };

  var InfoCircleFilled$1 = function InfoCircleFilled$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: InfoCircleFilled
    }));
  };

  InfoCircleFilled$1.displayName = 'InfoCircleFilled';
  var InfoCircleFilled$2 = /*#__PURE__*/React.forwardRef(InfoCircleFilled$1);

  function createUseMessage(getRcNotificationInstance, getRCNoticeProps) {
    var useMessage = function useMessage() {
      // We can only get content by render
      var getPrefixCls;
      var getPopupContainer; // We create a proxy to handle delay created instance

      var innerInstance = null;
      var proxy = {
        add: function add(noticeProps, holderCallback) {
          innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);
        }
      };

      var _useRCNotification = useNotification(proxy),
          _useRCNotification2 = _slicedToArray$1(_useRCNotification, 2),
          hookNotify = _useRCNotification2[0],
          holder = _useRCNotification2[1];

      function notify(args) {
        var customizePrefixCls = args.prefixCls;
        var mergedPrefixCls = getPrefixCls('message', customizePrefixCls);
        var rootPrefixCls = getPrefixCls();
        var target = args.key || getKeyThenIncreaseKey();
        var closePromise = new Promise(function (resolve) {
          var callback = function callback() {
            if (typeof args.onClose === 'function') {
              args.onClose();
            }

            return resolve(true);
          };

          getRcNotificationInstance(_extends$1(_extends$1({}, args), {
            prefixCls: mergedPrefixCls,
            rootPrefixCls: rootPrefixCls,
            getPopupContainer: getPopupContainer
          }), function (_ref) {
            var prefixCls = _ref.prefixCls,
                instance = _ref.instance;
            innerInstance = instance;
            hookNotify(getRCNoticeProps(_extends$1(_extends$1({}, args), {
              key: target,
              onClose: callback
            }), prefixCls));
          });
        });

        var result = function result() {
          if (innerInstance) {
            innerInstance.removeNotice(target);
          }
        };

        result.then = function (filled, rejected) {
          return closePromise.then(filled, rejected);
        };

        result.promise = closePromise;
        return result;
      } // Fill functions


      var hookApiRef = React.useRef({});
      hookApiRef.current.open = notify;
      ['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {
        return attachTypeApi(hookApiRef.current, type);
      });
      return [hookApiRef.current, /*#__PURE__*/React.createElement(ConfigConsumer, {
        key: "holder"
      }, function (context) {
        getPrefixCls = context.getPrefixCls;
        getPopupContainer = context.getPopupContainer;
        return holder;
      })];
    };

    return useMessage;
  }

  var messageInstance;
  var defaultDuration = 3;
  var defaultTop;
  var key = 1;
  var localPrefixCls = '';
  var transitionName = 'move-up';
  var hasTransitionName = false;
  var getContainer$1;
  var maxCount;
  var rtl = false;
  function getKeyThenIncreaseKey() {
    return key++;
  }

  function setMessageConfig(options) {
    if (options.top !== undefined) {
      defaultTop = options.top;
      messageInstance = null; // delete messageInstance for new defaultTop
    }

    if (options.duration !== undefined) {
      defaultDuration = options.duration;
    }

    if (options.prefixCls !== undefined) {
      localPrefixCls = options.prefixCls;
    }

    if (options.getContainer !== undefined) {
      getContainer$1 = options.getContainer;
    }

    if (options.transitionName !== undefined) {
      transitionName = options.transitionName;
      messageInstance = null; // delete messageInstance for new transitionName

      hasTransitionName = true;
    }

    if (options.maxCount !== undefined) {
      maxCount = options.maxCount;
      messageInstance = null;
    }

    if (options.rtl !== undefined) {
      rtl = options.rtl;
    }
  }

  function getRCNotificationInstance(args, callback) {
    var customizePrefixCls = args.prefixCls,
        getContextPopupContainer = args.getPopupContainer;

    var _globalConfig = globalConfig(),
        getPrefixCls = _globalConfig.getPrefixCls,
        getRootPrefixCls = _globalConfig.getRootPrefixCls,
        getIconPrefixCls = _globalConfig.getIconPrefixCls;

    var prefixCls = getPrefixCls('message', customizePrefixCls || localPrefixCls);
    var rootPrefixCls = getRootPrefixCls(args.rootPrefixCls, prefixCls);
    var iconPrefixCls = getIconPrefixCls();

    if (messageInstance) {
      callback({
        prefixCls: prefixCls,
        rootPrefixCls: rootPrefixCls,
        iconPrefixCls: iconPrefixCls,
        instance: messageInstance
      });
      return;
    }

    var instanceConfig = {
      prefixCls: prefixCls,
      transitionName: hasTransitionName ? transitionName : "".concat(rootPrefixCls, "-").concat(transitionName),
      style: {
        top: defaultTop
      },
      getContainer: getContainer$1 || getContextPopupContainer,
      maxCount: maxCount
    };
    Notification.newInstance(instanceConfig, function (instance) {
      if (messageInstance) {
        callback({
          prefixCls: prefixCls,
          rootPrefixCls: rootPrefixCls,
          iconPrefixCls: iconPrefixCls,
          instance: messageInstance
        });
        return;
      }

      messageInstance = instance;

      callback({
        prefixCls: prefixCls,
        rootPrefixCls: rootPrefixCls,
        iconPrefixCls: iconPrefixCls,
        instance: instance
      });
    });
  }

  var typeToIcon = {
    info: InfoCircleFilled$2,
    success: CheckCircleFilled$2,
    error: CloseCircleFilled$2,
    warning: ExclamationCircleFilled$2,
    loading: LoadingOutlined$2
  };

  function getRCNoticeProps(args, prefixCls, iconPrefixCls) {
    var _classNames;

    var duration = args.duration !== undefined ? args.duration : defaultDuration;
    var IconComponent = typeToIcon[args.type];
    var messageClass = classnames("".concat(prefixCls, "-custom-content"), (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(args.type), args.type), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), rtl === true), _classNames));
    return {
      key: args.key,
      duration: duration,
      style: args.style || {},
      className: args.className,
      content: /*#__PURE__*/React.createElement(ConfigProvider, {
        iconPrefixCls: iconPrefixCls
      }, /*#__PURE__*/React.createElement("div", {
        className: messageClass
      }, args.icon || IconComponent && /*#__PURE__*/React.createElement(IconComponent, null), /*#__PURE__*/React.createElement("span", null, args.content))),
      onClose: args.onClose,
      onClick: args.onClick
    };
  }

  function notice(args) {
    var target = args.key || getKeyThenIncreaseKey();
    var closePromise = new Promise(function (resolve) {
      var callback = function callback() {
        if (typeof args.onClose === 'function') {
          args.onClose();
        }

        return resolve(true);
      };

      getRCNotificationInstance(args, function (_ref) {
        var prefixCls = _ref.prefixCls,
            iconPrefixCls = _ref.iconPrefixCls,
            instance = _ref.instance;
        instance.notice(getRCNoticeProps(_extends$1(_extends$1({}, args), {
          key: target,
          onClose: callback
        }), prefixCls, iconPrefixCls));
      });
    });

    var result = function result() {
      if (messageInstance) {
        messageInstance.removeNotice(target);
      }
    };

    result.then = function (filled, rejected) {
      return closePromise.then(filled, rejected);
    };

    result.promise = closePromise;
    return result;
  }

  function isArgsProps(content) {
    return Object.prototype.toString.call(content) === '[object Object]' && !!content.content;
  }

  var api = {
    open: notice,
    config: setMessageConfig,
    destroy: function destroy(messageKey) {
      if (messageInstance) {
        if (messageKey) {
          var _messageInstance = messageInstance,
              removeNotice = _messageInstance.removeNotice;
          removeNotice(messageKey);
        } else {
          var _messageInstance2 = messageInstance,
              destroy = _messageInstance2.destroy;
          destroy();
          messageInstance = null;
        }
      }
    }
  };
  function attachTypeApi(originalApi, type) {
    originalApi[type] = function (content, duration, onClose) {
      if (isArgsProps(content)) {
        return originalApi.open(_extends$1(_extends$1({}, content), {
          type: type
        }));
      }

      if (typeof duration === 'function') {
        onClose = duration;
        duration = undefined;
      }

      return originalApi.open({
        content: content,
        duration: duration,
        type: type,
        onClose: onClose
      });
    };
  }
  ['success', 'info', 'warning', 'error', 'loading'].forEach(function (type) {
    return attachTypeApi(api, type);
  });
  api.warn = api.warning;
  api.useMessage = createUseMessage(getRCNotificationInstance, getRCNoticeProps);

  // This icon file is generated automatically.
  var CloseOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z" } }] }, "name": "close", "theme": "outlined" };

  var CloseOutlined$1 = function CloseOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: CloseOutlined
    }));
  };

  CloseOutlined$1.displayName = 'CloseOutlined';
  var CloseOutlined$2 = /*#__PURE__*/React.forwardRef(CloseOutlined$1);

  // This icon file is generated automatically.
  var CheckCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z" } }, { "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "check-circle", "theme": "outlined" };

  var CheckCircleOutlined$1 = function CheckCircleOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: CheckCircleOutlined
    }));
  };

  CheckCircleOutlined$1.displayName = 'CheckCircleOutlined';
  var CheckCircleOutlined$2 = /*#__PURE__*/React.forwardRef(CheckCircleOutlined$1);

  // This icon file is generated automatically.
  var CloseCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z" } }, { "tag": "path", "attrs": { "d": "M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }] }, "name": "close-circle", "theme": "outlined" };

  var CloseCircleOutlined$1 = function CloseCircleOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: CloseCircleOutlined
    }));
  };

  CloseCircleOutlined$1.displayName = 'CloseCircleOutlined';
  var CloseCircleOutlined$2 = /*#__PURE__*/React.forwardRef(CloseCircleOutlined$1);

  // This icon file is generated automatically.
  var ExclamationCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z" } }] }, "name": "exclamation-circle", "theme": "outlined" };

  var ExclamationCircleOutlined$1 = function ExclamationCircleOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: ExclamationCircleOutlined
    }));
  };

  ExclamationCircleOutlined$1.displayName = 'ExclamationCircleOutlined';
  var ExclamationCircleOutlined$2 = /*#__PURE__*/React.forwardRef(ExclamationCircleOutlined$1);

  // This icon file is generated automatically.
  var InfoCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z" } }] }, "name": "info-circle", "theme": "outlined" };

  var InfoCircleOutlined$1 = function InfoCircleOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: InfoCircleOutlined
    }));
  };

  InfoCircleOutlined$1.displayName = 'InfoCircleOutlined';
  var InfoCircleOutlined$2 = /*#__PURE__*/React.forwardRef(InfoCircleOutlined$1);

  function createUseNotification(getNotificationInstance, getRCNoticeProps) {
    var useNotification$1 = function useNotification$1() {
      // We can only get content by render
      var getPrefixCls; // We create a proxy to handle delay created instance

      var innerInstance = null;
      var proxy = {
        add: function add(noticeProps, holderCallback) {
          innerInstance === null || innerInstance === void 0 ? void 0 : innerInstance.component.add(noticeProps, holderCallback);
        }
      };

      var _useRCNotification = useNotification(proxy),
          _useRCNotification2 = _slicedToArray$1(_useRCNotification, 2),
          hookNotify = _useRCNotification2[0],
          holder = _useRCNotification2[1];

      function notify(args) {
        var customizePrefixCls = args.prefixCls;
        var mergedPrefixCls = getPrefixCls('notification', customizePrefixCls);
        getNotificationInstance(_extends$1(_extends$1({}, args), {
          prefixCls: mergedPrefixCls
        }), function (_ref) {
          var prefixCls = _ref.prefixCls,
              instance = _ref.instance;
          innerInstance = instance;
          hookNotify(getRCNoticeProps(args, prefixCls));
        });
      } // Fill functions


      var hookApiRef = React.useRef({});
      hookApiRef.current.open = notify;
      ['success', 'info', 'warning', 'error'].forEach(function (type) {
        hookApiRef.current[type] = function (args) {
          return hookApiRef.current.open(_extends$1(_extends$1({}, args), {
            type: type
          }));
        };
      });
      return [hookApiRef.current, /*#__PURE__*/React.createElement(ConfigConsumer, {
        key: "holder"
      }, function (context) {
        getPrefixCls = context.getPrefixCls;
        return holder;
      })];
    };

    return useNotification$1;
  }

  var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var notificationInstance = {};
  var defaultDuration$1 = 4.5;
  var defaultTop$1 = 24;
  var defaultBottom = 24;
  var defaultPrefixCls = '';
  var defaultPlacement = 'topRight';
  var defaultGetContainer;
  var defaultCloseIcon;
  var rtl$1 = false;
  var maxCount$1;

  function setNotificationConfig(options) {
    var duration = options.duration,
        placement = options.placement,
        bottom = options.bottom,
        top = options.top,
        getContainer = options.getContainer,
        closeIcon = options.closeIcon,
        prefixCls = options.prefixCls;

    if (prefixCls !== undefined) {
      defaultPrefixCls = prefixCls;
    }

    if (duration !== undefined) {
      defaultDuration$1 = duration;
    }

    if (placement !== undefined) {
      defaultPlacement = placement;
    } else if (options.rtl) {
      defaultPlacement = 'topLeft';
    }

    if (bottom !== undefined) {
      defaultBottom = bottom;
    }

    if (top !== undefined) {
      defaultTop$1 = top;
    }

    if (getContainer !== undefined) {
      defaultGetContainer = getContainer;
    }

    if (closeIcon !== undefined) {
      defaultCloseIcon = closeIcon;
    }

    if (options.rtl !== undefined) {
      rtl$1 = options.rtl;
    }

    if (options.maxCount !== undefined) {
      maxCount$1 = options.maxCount;
    }
  }

  function getPlacementStyle(placement) {
    var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTop$1;
    var bottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultBottom;
    var style;

    switch (placement) {
      case 'topLeft':
        style = {
          left: 0,
          top: top,
          bottom: 'auto'
        };
        break;

      case 'topRight':
        style = {
          right: 0,
          top: top,
          bottom: 'auto'
        };
        break;

      case 'bottomLeft':
        style = {
          left: 0,
          top: 'auto',
          bottom: bottom
        };
        break;

      default:
        style = {
          right: 0,
          top: 'auto',
          bottom: bottom
        };
        break;
    }

    return style;
  }

  function getNotificationInstance(args, callback) {
    var _args$placement = args.placement,
        placement = _args$placement === void 0 ? defaultPlacement : _args$placement,
        top = args.top,
        bottom = args.bottom,
        _args$getContainer = args.getContainer,
        getContainer = _args$getContainer === void 0 ? defaultGetContainer : _args$getContainer,
        customizePrefixCls = args.prefixCls;

    var _globalConfig = globalConfig(),
        getPrefixCls = _globalConfig.getPrefixCls,
        getIconPrefixCls = _globalConfig.getIconPrefixCls;

    var prefixCls = getPrefixCls('notification', customizePrefixCls || defaultPrefixCls);
    var iconPrefixCls = getIconPrefixCls();
    var cacheKey = "".concat(prefixCls, "-").concat(placement);
    var cacheInstance = notificationInstance[cacheKey];

    if (cacheInstance) {
      Promise.resolve(cacheInstance).then(function (instance) {
        callback({
          prefixCls: "".concat(prefixCls, "-notice"),
          iconPrefixCls: iconPrefixCls,
          instance: instance
        });
      });
      return;
    }

    var notificationClass = classnames("".concat(prefixCls, "-").concat(placement), _defineProperty$1({}, "".concat(prefixCls, "-rtl"), rtl$1 === true));
    notificationInstance[cacheKey] = new Promise(function (resolve) {
      Notification.newInstance({
        prefixCls: prefixCls,
        className: notificationClass,
        style: getPlacementStyle(placement, top, bottom),
        getContainer: getContainer,
        maxCount: maxCount$1
      }, function (notification) {
        resolve(notification);
        callback({
          prefixCls: "".concat(prefixCls, "-notice"),
          iconPrefixCls: iconPrefixCls,
          instance: notification
        });
      });
    });
  }

  var typeToIcon$1 = {
    success: CheckCircleOutlined$2,
    info: InfoCircleOutlined$2,
    error: CloseCircleOutlined$2,
    warning: ExclamationCircleOutlined$2
  };

  function getRCNoticeProps$1(args, prefixCls, iconPrefixCls) {
    var durationArg = args.duration,
        icon = args.icon,
        type = args.type,
        description = args.description,
        message = args.message,
        btn = args.btn,
        onClose = args.onClose,
        onClick = args.onClick,
        key = args.key,
        style = args.style,
        className = args.className,
        _args$closeIcon = args.closeIcon,
        closeIcon = _args$closeIcon === void 0 ? defaultCloseIcon : _args$closeIcon;
    var duration = durationArg === undefined ? defaultDuration$1 : durationArg;
    var iconNode = null;

    if (icon) {
      iconNode = /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-icon")
      }, args.icon);
    } else if (type) {
      iconNode = /*#__PURE__*/React.createElement(typeToIcon$1[type] || null, {
        className: "".concat(prefixCls, "-icon ").concat(prefixCls, "-icon-").concat(type)
      });
    }

    var closeIconToRender = /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-close-x")
    }, closeIcon || /*#__PURE__*/React.createElement(CloseOutlined$2, {
      className: "".concat(prefixCls, "-close-icon")
    }));
    var autoMarginTag = !description && iconNode ? /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-message-single-line-auto-margin")
    }) : null;
    return {
      content: /*#__PURE__*/React.createElement(ConfigProvider, {
        iconPrefixCls: iconPrefixCls
      }, /*#__PURE__*/React.createElement("div", {
        className: iconNode ? "".concat(prefixCls, "-with-icon") : '',
        role: "alert"
      }, iconNode, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-message")
      }, autoMarginTag, message), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-description")
      }, description), btn ? /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-btn")
      }, btn) : null)),
      duration: duration,
      closable: true,
      closeIcon: closeIconToRender,
      onClose: onClose,
      onClick: onClick,
      key: key,
      style: style || {},
      className: classnames(className, _defineProperty$1({}, "".concat(prefixCls, "-").concat(type), !!type))
    };
  }

  function notice$1(args) {
    getNotificationInstance(args, function (_ref) {
      var prefixCls = _ref.prefixCls,
          iconPrefixCls = _ref.iconPrefixCls,
          instance = _ref.instance;
      instance.notice(getRCNoticeProps$1(args, prefixCls, iconPrefixCls));
    });
  }

  var api$1 = {
    open: notice$1,
    close: function close(key) {
      Object.keys(notificationInstance).forEach(function (cacheKey) {
        return Promise.resolve(notificationInstance[cacheKey]).then(function (instance) {
          instance.removeNotice(key);
        });
      });
    },
    config: setNotificationConfig,
    destroy: function destroy() {
      Object.keys(notificationInstance).forEach(function (cacheKey) {
        Promise.resolve(notificationInstance[cacheKey]).then(function (instance) {
          instance.destroy();
        });
        delete notificationInstance[cacheKey]; // lgtm[js/missing-await]
      });
    }
  };
  ['success', 'info', 'warning', 'error'].forEach(function (type) {
    api$1[type] = function (args) {
      return api$1.open(_extends$1(_extends$1({}, args), {
        type: type
      }));
    };
  });
  api$1.warn = api$1.warning;
  api$1.useNotification = createUseNotification(getNotificationInstance, getRCNoticeProps$1);

  /* eslint-disable import/prefer-default-export, prefer-destructuring */
  var dynamicStyleMark = "-ant-".concat(Date.now(), "-").concat(Math.random());
  function registerTheme(globalPrefixCls, theme) {
    var variables = {};

    var formatColor = function formatColor(color, updater) {
      var clone = color.clone();
      clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;
      return clone.toRgbString();
    };

    var fillColor = function fillColor(colorVal, type) {
      var baseColor = new TinyColor(colorVal);
      var colorPalettes = generate(baseColor.toRgbString());
      variables["".concat(type, "-color")] = formatColor(baseColor);
      variables["".concat(type, "-color-disabled")] = colorPalettes[1];
      variables["".concat(type, "-color-hover")] = colorPalettes[4];
      variables["".concat(type, "-color-active")] = colorPalettes[7];
      variables["".concat(type, "-color-outline")] = baseColor.clone().setAlpha(0.2).toRgbString();
      variables["".concat(type, "-color-deprecated-bg")] = colorPalettes[1];
      variables["".concat(type, "-color-deprecated-border")] = colorPalettes[3];
    }; // ================ Primary Color ================


    if (theme.primaryColor) {
      fillColor(theme.primaryColor, 'primary');
      var primaryColor = new TinyColor(theme.primaryColor);
      var primaryColors = generate(primaryColor.toRgbString()); // Legacy - We should use semantic naming standard

      primaryColors.forEach(function (color, index) {
        variables["primary-".concat(index + 1)] = color;
      }); // Deprecated

      variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, function (c) {
        return c.lighten(35);
      });
      variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, function (c) {
        return c.lighten(20);
      });
      variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, function (c) {
        return c.tint(20);
      });
      variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, function (c) {
        return c.tint(50);
      });
      variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, function (c) {
        return c.setAlpha(c.getAlpha() * 0.12);
      });
      var primaryActiveColor = new TinyColor(primaryColors[0]);
      variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, function (c) {
        return c.setAlpha(c.getAlpha() * 0.3);
      });
      variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, function (c) {
        return c.darken(2);
      });
    } // ================ Success Color ================


    if (theme.successColor) {
      fillColor(theme.successColor, 'success');
    } // ================ Warning Color ================


    if (theme.warningColor) {
      fillColor(theme.warningColor, 'warning');
    } // ================= Error Color =================


    if (theme.errorColor) {
      fillColor(theme.errorColor, 'error');
    } // ================= Info Color ==================


    if (theme.infoColor) {
      fillColor(theme.infoColor, 'info');
    } // Convert to css variables


    var cssList = Object.keys(variables).map(function (key) {
      return "--".concat(globalPrefixCls, "-").concat(key, ": ").concat(variables[key], ";");
    });
    updateCSS("\n  :root {\n    ".concat(cssList.join('\n'), "\n  }\n  "), "".concat(dynamicStyleMark, "-dynamic-theme"));
  }

  var PASSED_PROPS = ['getTargetContainer', 'getPopupContainer', 'renderEmpty', 'pageHeader', 'input', 'form'];
  var defaultPrefixCls$1 = 'ant';
  var defaultIconPrefixCls = 'anticon';
  var globalPrefixCls;
  var globalIconPrefixCls;

  function getGlobalPrefixCls() {
    return globalPrefixCls || defaultPrefixCls$1;
  }

  function getGlobalIconPrefixCls() {
    return globalIconPrefixCls || defaultIconPrefixCls;
  }

  var setGlobalConfig = function setGlobalConfig(_ref) {
    var prefixCls = _ref.prefixCls,
        iconPrefixCls = _ref.iconPrefixCls,
        theme = _ref.theme;

    if (prefixCls !== undefined) {
      globalPrefixCls = prefixCls;
    }

    if (iconPrefixCls !== undefined) {
      globalIconPrefixCls = iconPrefixCls;
    }

    if (theme) {
      registerTheme(getGlobalPrefixCls(), theme);
    }
  };

  var globalConfig = function globalConfig() {
    return {
      getPrefixCls: function getPrefixCls(suffixCls, customizePrefixCls) {
        if (customizePrefixCls) return customizePrefixCls;
        return suffixCls ? "".concat(getGlobalPrefixCls(), "-").concat(suffixCls) : getGlobalPrefixCls();
      },
      getIconPrefixCls: getGlobalIconPrefixCls,
      getRootPrefixCls: function getRootPrefixCls(rootPrefixCls, customizePrefixCls) {
        // Customize rootPrefixCls is first priority
        if (rootPrefixCls) {
          return rootPrefixCls;
        } // If Global prefixCls provided, use this


        if (globalPrefixCls) {
          return globalPrefixCls;
        } // [Legacy] If customize prefixCls provided, we cut it to get the prefixCls


        if (customizePrefixCls && customizePrefixCls.includes('-')) {
          return customizePrefixCls.replace(/^(.*)-[^-]*$/, '$1');
        } // Fallback to default prefixCls


        return getGlobalPrefixCls();
      }
    };
  };

  var ProviderChildren = function ProviderChildren(props) {
    var _a, _b;

    var children = props.children,
        csp = props.csp,
        autoInsertSpaceInButton = props.autoInsertSpaceInButton,
        form = props.form,
        locale = props.locale,
        componentSize = props.componentSize,
        direction = props.direction,
        space = props.space,
        virtual = props.virtual,
        dropdownMatchSelectWidth = props.dropdownMatchSelectWidth,
        legacyLocale = props.legacyLocale,
        parentContext = props.parentContext,
        iconPrefixCls = props.iconPrefixCls;
    var getPrefixCls = React.useCallback(function (suffixCls, customizePrefixCls) {
      var prefixCls = props.prefixCls;
      if (customizePrefixCls) return customizePrefixCls;
      var mergedPrefixCls = prefixCls || parentContext.getPrefixCls('');
      return suffixCls ? "".concat(mergedPrefixCls, "-").concat(suffixCls) : mergedPrefixCls;
    }, [parentContext.getPrefixCls, props.prefixCls]);

    var config = _extends$1(_extends$1({}, parentContext), {
      csp: csp,
      autoInsertSpaceInButton: autoInsertSpaceInButton,
      locale: locale || legacyLocale,
      direction: direction,
      space: space,
      virtual: virtual,
      dropdownMatchSelectWidth: dropdownMatchSelectWidth,
      getPrefixCls: getPrefixCls
    }); // Pass the props used by `useContext` directly with child component.
    // These props should merged into `config`.


    PASSED_PROPS.forEach(function (propName) {
      var propValue = props[propName];

      if (propValue) {
        config[propName] = propValue;
      }
    }); // https://github.com/ant-design/ant-design/issues/27617

    var memoedConfig = useMemo(function () {
      return config;
    }, config, function (prevConfig, currentConfig) {
      var prevKeys = Object.keys(prevConfig);
      var currentKeys = Object.keys(currentConfig);
      return prevKeys.length !== currentKeys.length || prevKeys.some(function (key) {
        return prevConfig[key] !== currentConfig[key];
      });
    });
    var memoIconContextValue = React.useMemo(function () {
      return {
        prefixCls: iconPrefixCls,
        csp: csp
      };
    }, [iconPrefixCls]);
    var childNode = children; // Additional Form provider

    var validateMessages = {};

    if (locale) {
      validateMessages = ((_a = locale.Form) === null || _a === void 0 ? void 0 : _a.defaultValidateMessages) || ((_b = localeValues.Form) === null || _b === void 0 ? void 0 : _b.defaultValidateMessages) || {};
    }

    if (form && form.validateMessages) {
      validateMessages = _extends$1(_extends$1({}, validateMessages), form.validateMessages);
    }

    if (Object.keys(validateMessages).length > 0) {
      childNode = /*#__PURE__*/React.createElement(FormProvider, {
        validateMessages: validateMessages
      }, children);
    }

    if (locale) {
      childNode = /*#__PURE__*/React.createElement(LocaleProvider, {
        locale: locale,
        _ANT_MARK__: ANT_MARK
      }, childNode);
    }

    if (iconPrefixCls) {
      childNode = /*#__PURE__*/React.createElement(IconContext.Provider, {
        value: memoIconContextValue
      }, childNode);
    }

    if (componentSize) {
      childNode = /*#__PURE__*/React.createElement(SizeContextProvider, {
        size: componentSize
      }, childNode);
    }

    return /*#__PURE__*/React.createElement(ConfigContext.Provider, {
      value: memoedConfig
    }, childNode);
  };

  var ConfigProvider = function ConfigProvider(props) {
    React.useEffect(function () {
      if (props.direction) {
        api.config({
          rtl: props.direction === 'rtl'
        });
        api$1.config({
          rtl: props.direction === 'rtl'
        });
      }
    }, [props.direction]);
    return /*#__PURE__*/React.createElement(LocaleReceiver, null, function (_, __, legacyLocale) {
      return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (context) {
        return /*#__PURE__*/React.createElement(ProviderChildren, _extends$1({
          parentContext: context,
          legacyLocale: legacyLocale
        }, props));
      });
    });
  };
  /** @private internal Usage. do not use in your production */


  ConfigProvider.ConfigContext = ConfigContext;
  ConfigProvider.SizeContext = SizeContext;
  ConfigProvider.config = setGlobalConfig;

  function addEventListenerWrap(target, eventType, cb, option) {
    /* eslint camelcase: 2 */
    var callback = reactDom.unstable_batchedUpdates ? function run(e) {
      reactDom.unstable_batchedUpdates(cb, e);
    } : cb;

    if (target.addEventListener) {
      target.addEventListener(eventType, callback, option);
    }

    return {
      remove: function remove() {
        if (target.removeEventListener) {
          target.removeEventListener(eventType, callback);
        }
      }
    };
  }

  /**
   * @ignore
   * some key-codes definition and utils from closure-library
   * @author yiminghe@gmail.com
   */
  var KeyCode = {
    /**
     * MAC_ENTER
     */
    MAC_ENTER: 3,

    /**
     * BACKSPACE
     */
    BACKSPACE: 8,

    /**
     * TAB
     */
    TAB: 9,

    /**
     * NUMLOCK on FF/Safari Mac
     */
    NUM_CENTER: 12,

    /**
     * ENTER
     */
    ENTER: 13,

    /**
     * SHIFT
     */
    SHIFT: 16,

    /**
     * CTRL
     */
    CTRL: 17,

    /**
     * ALT
     */
    ALT: 18,

    /**
     * PAUSE
     */
    PAUSE: 19,

    /**
     * CAPS_LOCK
     */
    CAPS_LOCK: 20,

    /**
     * ESC
     */
    ESC: 27,

    /**
     * SPACE
     */
    SPACE: 32,

    /**
     * PAGE_UP
     */
    PAGE_UP: 33,

    /**
     * PAGE_DOWN
     */
    PAGE_DOWN: 34,

    /**
     * END
     */
    END: 35,

    /**
     * HOME
     */
    HOME: 36,

    /**
     * LEFT
     */
    LEFT: 37,

    /**
     * UP
     */
    UP: 38,

    /**
     * RIGHT
     */
    RIGHT: 39,

    /**
     * DOWN
     */
    DOWN: 40,

    /**
     * PRINT_SCREEN
     */
    PRINT_SCREEN: 44,

    /**
     * INSERT
     */
    INSERT: 45,

    /**
     * DELETE
     */
    DELETE: 46,

    /**
     * ZERO
     */
    ZERO: 48,

    /**
     * ONE
     */
    ONE: 49,

    /**
     * TWO
     */
    TWO: 50,

    /**
     * THREE
     */
    THREE: 51,

    /**
     * FOUR
     */
    FOUR: 52,

    /**
     * FIVE
     */
    FIVE: 53,

    /**
     * SIX
     */
    SIX: 54,

    /**
     * SEVEN
     */
    SEVEN: 55,

    /**
     * EIGHT
     */
    EIGHT: 56,

    /**
     * NINE
     */
    NINE: 57,

    /**
     * QUESTION_MARK
     */
    QUESTION_MARK: 63,

    /**
     * A
     */
    A: 65,

    /**
     * B
     */
    B: 66,

    /**
     * C
     */
    C: 67,

    /**
     * D
     */
    D: 68,

    /**
     * E
     */
    E: 69,

    /**
     * F
     */
    F: 70,

    /**
     * G
     */
    G: 71,

    /**
     * H
     */
    H: 72,

    /**
     * I
     */
    I: 73,

    /**
     * J
     */
    J: 74,

    /**
     * K
     */
    K: 75,

    /**
     * L
     */
    L: 76,

    /**
     * M
     */
    M: 77,

    /**
     * N
     */
    N: 78,

    /**
     * O
     */
    O: 79,

    /**
     * P
     */
    P: 80,

    /**
     * Q
     */
    Q: 81,

    /**
     * R
     */
    R: 82,

    /**
     * S
     */
    S: 83,

    /**
     * T
     */
    T: 84,

    /**
     * U
     */
    U: 85,

    /**
     * V
     */
    V: 86,

    /**
     * W
     */
    W: 87,

    /**
     * X
     */
    X: 88,

    /**
     * Y
     */
    Y: 89,

    /**
     * Z
     */
    Z: 90,

    /**
     * META
     */
    META: 91,

    /**
     * WIN_KEY_RIGHT
     */
    WIN_KEY_RIGHT: 92,

    /**
     * CONTEXT_MENU
     */
    CONTEXT_MENU: 93,

    /**
     * NUM_ZERO
     */
    NUM_ZERO: 96,

    /**
     * NUM_ONE
     */
    NUM_ONE: 97,

    /**
     * NUM_TWO
     */
    NUM_TWO: 98,

    /**
     * NUM_THREE
     */
    NUM_THREE: 99,

    /**
     * NUM_FOUR
     */
    NUM_FOUR: 100,

    /**
     * NUM_FIVE
     */
    NUM_FIVE: 101,

    /**
     * NUM_SIX
     */
    NUM_SIX: 102,

    /**
     * NUM_SEVEN
     */
    NUM_SEVEN: 103,

    /**
     * NUM_EIGHT
     */
    NUM_EIGHT: 104,

    /**
     * NUM_NINE
     */
    NUM_NINE: 105,

    /**
     * NUM_MULTIPLY
     */
    NUM_MULTIPLY: 106,

    /**
     * NUM_PLUS
     */
    NUM_PLUS: 107,

    /**
     * NUM_MINUS
     */
    NUM_MINUS: 109,

    /**
     * NUM_PERIOD
     */
    NUM_PERIOD: 110,

    /**
     * NUM_DIVISION
     */
    NUM_DIVISION: 111,

    /**
     * F1
     */
    F1: 112,

    /**
     * F2
     */
    F2: 113,

    /**
     * F3
     */
    F3: 114,

    /**
     * F4
     */
    F4: 115,

    /**
     * F5
     */
    F5: 116,

    /**
     * F6
     */
    F6: 117,

    /**
     * F7
     */
    F7: 118,

    /**
     * F8
     */
    F8: 119,

    /**
     * F9
     */
    F9: 120,

    /**
     * F10
     */
    F10: 121,

    /**
     * F11
     */
    F11: 122,

    /**
     * F12
     */
    F12: 123,

    /**
     * NUMLOCK
     */
    NUMLOCK: 144,

    /**
     * SEMICOLON
     */
    SEMICOLON: 186,

    /**
     * DASH
     */
    DASH: 189,

    /**
     * EQUALS
     */
    EQUALS: 187,

    /**
     * COMMA
     */
    COMMA: 188,

    /**
     * PERIOD
     */
    PERIOD: 190,

    /**
     * SLASH
     */
    SLASH: 191,

    /**
     * APOSTROPHE
     */
    APOSTROPHE: 192,

    /**
     * SINGLE_QUOTE
     */
    SINGLE_QUOTE: 222,

    /**
     * OPEN_SQUARE_BRACKET
     */
    OPEN_SQUARE_BRACKET: 219,

    /**
     * BACKSLASH
     */
    BACKSLASH: 220,

    /**
     * CLOSE_SQUARE_BRACKET
     */
    CLOSE_SQUARE_BRACKET: 221,

    /**
     * WIN_KEY
     */
    WIN_KEY: 224,

    /**
     * MAC_FF_META
     */
    MAC_FF_META: 224,

    /**
     * WIN_IME
     */
    WIN_IME: 229,
    // ======================== Function ========================

    /**
     * whether text and modified key is entered at the same time.
     */
    isTextModifyingKeyEvent: function isTextModifyingKeyEvent(e) {
      var keyCode = e.keyCode;

      if (e.altKey && !e.ctrlKey || e.metaKey || keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
        return false;
      } // The following keys are quite harmless, even in combination with
      // CTRL, ALT or SHIFT.


      switch (keyCode) {
        case KeyCode.ALT:
        case KeyCode.CAPS_LOCK:
        case KeyCode.CONTEXT_MENU:
        case KeyCode.CTRL:
        case KeyCode.DOWN:
        case KeyCode.END:
        case KeyCode.ESC:
        case KeyCode.HOME:
        case KeyCode.INSERT:
        case KeyCode.LEFT:
        case KeyCode.MAC_FF_META:
        case KeyCode.META:
        case KeyCode.NUMLOCK:
        case KeyCode.NUM_CENTER:
        case KeyCode.PAGE_DOWN:
        case KeyCode.PAGE_UP:
        case KeyCode.PAUSE:
        case KeyCode.PRINT_SCREEN:
        case KeyCode.RIGHT:
        case KeyCode.SHIFT:
        case KeyCode.UP:
        case KeyCode.WIN_KEY:
        case KeyCode.WIN_KEY_RIGHT:
          return false;

        default:
          return true;
      }
    },

    /**
     * whether character is entered.
     */
    isCharacterKey: function isCharacterKey(keyCode) {
      if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
        return true;
      }

      if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
        return true;
      }

      if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
        return true;
      } // Safari sends zero key code for non-latin characters.


      if (window.navigator.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
        return true;
      }

      switch (keyCode) {
        case KeyCode.SPACE:
        case KeyCode.QUESTION_MARK:
        case KeyCode.NUM_PLUS:
        case KeyCode.NUM_MINUS:
        case KeyCode.NUM_PERIOD:
        case KeyCode.NUM_DIVISION:
        case KeyCode.SEMICOLON:
        case KeyCode.DASH:
        case KeyCode.EQUALS:
        case KeyCode.COMMA:
        case KeyCode.PERIOD:
        case KeyCode.SLASH:
        case KeyCode.APOSTROPHE:
        case KeyCode.SINGLE_QUOTE:
        case KeyCode.OPEN_SQUARE_BRACKET:
        case KeyCode.BACKSLASH:
        case KeyCode.CLOSE_SQUARE_BRACKET:
          return true;

        default:
          return false;
      }
    }
  };

  var attributes = "accept acceptCharset accessKey action allowFullScreen allowTransparency\n    alt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\n    charSet checked classID className colSpan cols content contentEditable contextMenu\n    controls coords crossOrigin data dateTime default defer dir disabled download draggable\n    encType form formAction formEncType formMethod formNoValidate formTarget frameBorder\n    headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\n    is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\n    mediaGroup method min minLength multiple muted name noValidate nonce open\n    optimum pattern placeholder poster preload radioGroup readOnly rel required\n    reversed role rowSpan rows sandbox scope scoped scrolling seamless selected\n    shape size sizes span spellCheck src srcDoc srcLang srcSet start step style\n    summary tabIndex target title type useMap value width wmode wrap";
  var eventsName = "onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError";
  var propList = "".concat(attributes, " ").concat(eventsName).split(/[\s\n]+/);
  /* eslint-enable max-len */

  var ariaPrefix = 'aria-';
  var dataPrefix = 'data-';

  function match(key, prefix) {
    return key.indexOf(prefix) === 0;
  }
  /**
   * Picker props from exist props with filter
   * @param props Passed props
   * @param ariaOnly boolean | { aria?: boolean; data?: boolean; attr?: boolean; } filter config
   */


  function pickAttrs(props) {
    var ariaOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var mergedConfig;

    if (ariaOnly === false) {
      mergedConfig = {
        aria: true,
        data: true,
        attr: true
      };
    } else if (ariaOnly === true) {
      mergedConfig = {
        aria: true
      };
    } else {
      mergedConfig = _objectSpread2$1({}, ariaOnly);
    }

    var attrs = {};
    Object.keys(props).forEach(function (key) {
      if ( // Aria
      mergedConfig.aria && (key === 'role' || match(key, ariaPrefix)) || mergedConfig.data && match(key, dataPrefix) || mergedConfig.attr && propList.includes(key)) {
        attrs[key] = props[key];
      }
    });
    return attrs;
  }

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  /**
   * Fill component to provided the scroll content real height.
   */

  var Filler = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var height = _ref.height,
        offset = _ref.offset,
        children = _ref.children,
        prefixCls = _ref.prefixCls,
        onInnerResize = _ref.onInnerResize;
    var outerStyle = {};
    var innerStyle = {
      display: 'flex',
      flexDirection: 'column'
    };

    if (offset !== undefined) {
      outerStyle = {
        height: height,
        position: 'relative',
        overflow: 'hidden'
      };
      innerStyle = _objectSpread(_objectSpread({}, innerStyle), {}, {
        transform: "translateY(".concat(offset, "px)"),
        position: 'absolute',
        left: 0,
        right: 0,
        top: 0
      });
    }

    return /*#__PURE__*/React.createElement("div", {
      style: outerStyle
    }, /*#__PURE__*/React.createElement(ReactResizeObserver, {
      onResize: function onResize(_ref2) {
        var offsetHeight = _ref2.offsetHeight;

        if (offsetHeight && onInnerResize) {
          onInnerResize();
        }
      }
    }, /*#__PURE__*/React.createElement("div", {
      style: innerStyle,
      className: classnames(_defineProperty$2({}, "".concat(prefixCls, "-holder-inner"), prefixCls)),
      ref: ref
    }, children)));
  });
  Filler.displayName = 'Filler';

  function _typeof$2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2(obj); }

  function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

  function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf$2(subClass, superClass); }

  function _setPrototypeOf$2(o, p) { _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf$2(o, p); }

  function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf$2(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf$2(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn$1(this, result); }; }

  function _possibleConstructorReturn$1(self, call) { if (call && (_typeof$2(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized$1(self); }

  function _assertThisInitialized$1(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf$2(o) { _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf$2(o); }
  var MIN_SIZE = 20;

  function getPageY(e) {
    return 'touches' in e ? e.touches[0].pageY : e.pageY;
  }

  var ScrollBar = /*#__PURE__*/function (_React$Component) {
    _inherits$1(ScrollBar, _React$Component);

    var _super = _createSuper$1(ScrollBar);

    function ScrollBar() {
      var _this;

      _classCallCheck$1(this, ScrollBar);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.moveRaf = null;
      _this.scrollbarRef = /*#__PURE__*/React.createRef();
      _this.thumbRef = /*#__PURE__*/React.createRef();
      _this.visibleTimeout = null;
      _this.state = {
        dragging: false,
        pageY: null,
        startTop: null,
        visible: false
      };

      _this.delayHidden = function () {
        clearTimeout(_this.visibleTimeout);

        _this.setState({
          visible: true
        });

        _this.visibleTimeout = setTimeout(function () {
          _this.setState({
            visible: false
          });
        }, 2000);
      };

      _this.onScrollbarTouchStart = function (e) {
        e.preventDefault();
      };

      _this.onContainerMouseDown = function (e) {
        e.stopPropagation();
        e.preventDefault();
      };

      _this.patchEvents = function () {
        window.addEventListener('mousemove', _this.onMouseMove);
        window.addEventListener('mouseup', _this.onMouseUp);

        _this.thumbRef.current.addEventListener('touchmove', _this.onMouseMove);

        _this.thumbRef.current.addEventListener('touchend', _this.onMouseUp);
      };

      _this.removeEvents = function () {
        window.removeEventListener('mousemove', _this.onMouseMove);
        window.removeEventListener('mouseup', _this.onMouseUp);

        _this.scrollbarRef.current.removeEventListener('touchstart', _this.onScrollbarTouchStart);

        _this.thumbRef.current.removeEventListener('touchstart', _this.onMouseDown);

        _this.thumbRef.current.removeEventListener('touchmove', _this.onMouseMove);

        _this.thumbRef.current.removeEventListener('touchend', _this.onMouseUp);

        wrapperRaf.cancel(_this.moveRaf);
      };

      _this.onMouseDown = function (e) {
        var onStartMove = _this.props.onStartMove;

        _this.setState({
          dragging: true,
          pageY: getPageY(e),
          startTop: _this.getTop()
        });

        onStartMove();

        _this.patchEvents();

        e.stopPropagation();
        e.preventDefault();
      };

      _this.onMouseMove = function (e) {
        var _this$state = _this.state,
            dragging = _this$state.dragging,
            pageY = _this$state.pageY,
            startTop = _this$state.startTop;
        var onScroll = _this.props.onScroll;
        wrapperRaf.cancel(_this.moveRaf);

        if (dragging) {
          var offsetY = getPageY(e) - pageY;
          var newTop = startTop + offsetY;

          var enableScrollRange = _this.getEnableScrollRange();

          var enableHeightRange = _this.getEnableHeightRange();

          var ptg = enableHeightRange ? newTop / enableHeightRange : 0;
          var newScrollTop = Math.ceil(ptg * enableScrollRange);
          _this.moveRaf = wrapperRaf(function () {
            onScroll(newScrollTop);
          });
        }
      };

      _this.onMouseUp = function () {
        var onStopMove = _this.props.onStopMove;

        _this.setState({
          dragging: false
        });

        onStopMove();

        _this.removeEvents();
      };

      _this.getSpinHeight = function () {
        var _this$props = _this.props,
            height = _this$props.height,
            count = _this$props.count;
        var baseHeight = height / count * 10;
        baseHeight = Math.max(baseHeight, MIN_SIZE);
        baseHeight = Math.min(baseHeight, height / 2);
        return Math.floor(baseHeight);
      };

      _this.getEnableScrollRange = function () {
        var _this$props2 = _this.props,
            scrollHeight = _this$props2.scrollHeight,
            height = _this$props2.height;
        return scrollHeight - height || 0;
      };

      _this.getEnableHeightRange = function () {
        var height = _this.props.height;

        var spinHeight = _this.getSpinHeight();

        return height - spinHeight || 0;
      };

      _this.getTop = function () {
        var scrollTop = _this.props.scrollTop;

        var enableScrollRange = _this.getEnableScrollRange();

        var enableHeightRange = _this.getEnableHeightRange();

        if (scrollTop === 0 || enableScrollRange === 0) {
          return 0;
        }

        var ptg = scrollTop / enableScrollRange;
        return ptg * enableHeightRange;
      };

      _this.showScroll = function () {
        var _this$props3 = _this.props,
            height = _this$props3.height,
            scrollHeight = _this$props3.scrollHeight;
        return scrollHeight > height;
      };

      return _this;
    }

    _createClass$1(ScrollBar, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.scrollbarRef.current.addEventListener('touchstart', this.onScrollbarTouchStart);
        this.thumbRef.current.addEventListener('touchstart', this.onMouseDown);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.scrollTop !== this.props.scrollTop) {
          this.delayHidden();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.removeEvents();
        clearTimeout(this.visibleTimeout);
      }
    }, {
      key: "render",
      value: // ====================== Render =======================
      function render() {
        var _this$state2 = this.state,
            dragging = _this$state2.dragging,
            visible = _this$state2.visible;
        var prefixCls = this.props.prefixCls;
        var spinHeight = this.getSpinHeight();
        var top = this.getTop();
        var canScroll = this.showScroll();
        var mergedVisible = canScroll && visible;
        return /*#__PURE__*/React.createElement("div", {
          ref: this.scrollbarRef,
          className: classnames("".concat(prefixCls, "-scrollbar"), _defineProperty$3({}, "".concat(prefixCls, "-scrollbar-show"), canScroll)),
          style: {
            width: 8,
            top: 0,
            bottom: 0,
            right: 0,
            position: 'absolute',
            display: mergedVisible ? null : 'none'
          },
          onMouseDown: this.onContainerMouseDown,
          onMouseMove: this.delayHidden
        }, /*#__PURE__*/React.createElement("div", {
          ref: this.thumbRef,
          className: classnames("".concat(prefixCls, "-scrollbar-thumb"), _defineProperty$3({}, "".concat(prefixCls, "-scrollbar-thumb-moving"), dragging)),
          style: {
            width: '100%',
            height: spinHeight,
            top: top,
            left: 0,
            position: 'absolute',
            background: 'rgba(0, 0, 0, 0.5)',
            borderRadius: 99,
            cursor: 'pointer',
            userSelect: 'none'
          },
          onMouseDown: this.onMouseDown
        }));
      }
    }]);

    return ScrollBar;
  }(React.Component);

  function Item(_ref) {
    var children = _ref.children,
        setRef = _ref.setRef;
    var refFunc = React.useCallback(function (node) {
      setRef(node);
    }, []);
    return /*#__PURE__*/React.cloneElement(children, {
      ref: refFunc
    });
  }

  function useChildren(list, startIndex, endIndex, setNodeRef, renderFunc, _ref) {
    var getKey = _ref.getKey;
    return list.slice(startIndex, endIndex + 1).map(function (item, index) {
      var eleIndex = startIndex + index;
      var node = renderFunc(item, eleIndex, {// style: status === 'MEASURE_START' ? { visibility: 'hidden' } : {},
      });
      var key = getKey(item);
      return /*#__PURE__*/React.createElement(Item, {
        key: key,
        setRef: function setRef(ele) {
          return setNodeRef(item, ele);
        }
      }, node);
    });
  }

  function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2(Constructor, staticProps); return Constructor; }

  // Firefox has low performance of map.
  var CacheMap = /*#__PURE__*/function () {
    function CacheMap() {
      _classCallCheck$2(this, CacheMap);

      this.maps = void 0;
      this.maps = Object.create(null);
    }

    _createClass$2(CacheMap, [{
      key: "set",
      value: function set(key, value) {
        this.maps[key] = value;
      }
    }, {
      key: "get",
      value: function get(key) {
        return this.maps[key];
      }
    }]);

    return CacheMap;
  }();

  function _slicedToArray$2(arr, i) { return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$2(); }

  function _nonIterableRest$2() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

  function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit$2(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles$2(arr) { if (Array.isArray(arr)) return arr; }
  function useHeights(getKey, onItemAdd, onItemRemove) {
    var _React$useState = React.useState(0),
        _React$useState2 = _slicedToArray$2(_React$useState, 2),
        updatedMark = _React$useState2[0],
        setUpdatedMark = _React$useState2[1];

    var instanceRef = React.useRef(new Map());
    var heightsRef = React.useRef(new CacheMap());
    var heightUpdateIdRef = React.useRef(0);

    function collectHeight() {
      heightUpdateIdRef.current += 1;
      var currentId = heightUpdateIdRef.current;
      Promise.resolve().then(function () {
        // Only collect when it's latest call
        if (currentId !== heightUpdateIdRef.current) return;
        instanceRef.current.forEach(function (element, key) {
          if (element && element.offsetParent) {
            var htmlElement = findDOMNode(element);
            var offsetHeight = htmlElement.offsetHeight;

            if (heightsRef.current.get(key) !== offsetHeight) {
              heightsRef.current.set(key, htmlElement.offsetHeight);
            }
          }
        }); // Always trigger update mark to tell parent that should re-calculate heights when resized

        setUpdatedMark(function (c) {
          return c + 1;
        });
      });
    }

    function setInstanceRef(item, instance) {
      var key = getKey(item);
      var origin = instanceRef.current.get(key);

      if (instance) {
        instanceRef.current.set(key, instance);
        collectHeight();
      } else {
        instanceRef.current.delete(key);
      } // Instance changed


      if (!origin !== !instance) {
        if (instance) {
          onItemAdd === null || onItemAdd === void 0 ? void 0 : onItemAdd(item);
        } else {
          onItemRemove === null || onItemRemove === void 0 ? void 0 : onItemRemove(item);
        }
      }
    }

    return [setInstanceRef, collectHeight, heightsRef.current, updatedMark];
  }

  function _typeof$3(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }
  function useScrollTo(containerRef, data, heights, itemHeight, getKey, collectHeight, syncScrollTop, triggerFlash) {
    var scrollRef = React.useRef();
    return function (arg) {
      // When not argument provided, we think dev may want to show the scrollbar
      if (arg === null || arg === undefined) {
        triggerFlash();
        return;
      } // Normal scroll logic


      wrapperRaf.cancel(scrollRef.current);

      if (typeof arg === 'number') {
        syncScrollTop(arg);
      } else if (arg && _typeof$3(arg) === 'object') {
        var index;
        var align = arg.align;

        if ('index' in arg) {
          index = arg.index;
        } else {
          index = data.findIndex(function (item) {
            return getKey(item) === arg.key;
          });
        }

        var _arg$offset = arg.offset,
            offset = _arg$offset === void 0 ? 0 : _arg$offset; // We will retry 3 times in case dynamic height shaking

        var syncScroll = function syncScroll(times, targetAlign) {
          if (times < 0 || !containerRef.current) return;
          var height = containerRef.current.clientHeight;
          var needCollectHeight = false;
          var newTargetAlign = targetAlign; // Go to next frame if height not exist

          if (height) {
            var mergedAlign = targetAlign || align; // Get top & bottom

            var stackTop = 0;
            var itemTop = 0;
            var itemBottom = 0;
            var maxLen = Math.min(data.length, index);

            for (var i = 0; i <= maxLen; i += 1) {
              var key = getKey(data[i]);
              itemTop = stackTop;
              var cacheHeight = heights.get(key);
              itemBottom = itemTop + (cacheHeight === undefined ? itemHeight : cacheHeight);
              stackTop = itemBottom;

              if (i === index && cacheHeight === undefined) {
                needCollectHeight = true;
              }
            } // Scroll to


            var targetTop = null;

            switch (mergedAlign) {
              case 'top':
                targetTop = itemTop - offset;
                break;

              case 'bottom':
                targetTop = itemBottom - height + offset;
                break;

              default:
                {
                  var scrollTop = containerRef.current.scrollTop;
                  var scrollBottom = scrollTop + height;

                  if (itemTop < scrollTop) {
                    newTargetAlign = 'top';
                  } else if (itemBottom > scrollBottom) {
                    newTargetAlign = 'bottom';
                  }
                }
            }

            if (targetTop !== null && targetTop !== containerRef.current.scrollTop) {
              syncScrollTop(targetTop);
            }
          } // We will retry since element may not sync height as it described


          scrollRef.current = wrapperRaf(function () {
            if (needCollectHeight) {
              collectHeight();
            }

            syncScroll(times - 1, newTargetAlign);
          });
        };

        syncScroll(3);
      }
    };
  }

  /**
   * Get index with specific start index one by one. e.g.
   * min: 3, max: 9, start: 6
   *
   * Return index is:
   * [0]: 6
   * [1]: 7
   * [2]: 5
   * [3]: 8
   * [4]: 4
   * [5]: 9
   * [6]: 3
   */
  /**
   * We assume that 2 list has only 1 item diff and others keeping the order.
   * So we can use dichotomy algorithm to find changed one.
   */

  function findListDiffIndex(originList, targetList, getKey) {
    var originLen = originList.length;
    var targetLen = targetList.length;
    var shortList;
    var longList;

    if (originLen === 0 && targetLen === 0) {
      return null;
    }

    if (originLen < targetLen) {
      shortList = originList;
      longList = targetList;
    } else {
      shortList = targetList;
      longList = originList;
    }

    var notExistKey = {
      __EMPTY_ITEM__: true
    };

    function getItemKey(item) {
      if (item !== undefined) {
        return getKey(item);
      }

      return notExistKey;
    } // Loop to find diff one


    var diffIndex = null;
    var multiple = Math.abs(originLen - targetLen) !== 1;

    for (var i = 0; i < longList.length; i += 1) {
      var shortKey = getItemKey(shortList[i]);
      var longKey = getItemKey(longList[i]);

      if (shortKey !== longKey) {
        diffIndex = i;
        multiple = multiple || shortKey !== getItemKey(longList[i + 1]);
        break;
      }
    }

    return diffIndex === null ? null : {
      index: diffIndex,
      multiple: multiple
    };
  }

  function _slicedToArray$3(arr, i) { return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i) || _unsupportedIterableToArray$3(arr, i) || _nonIterableRest$3(); }

  function _nonIterableRest$3() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

  function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit$3(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles$3(arr) { if (Array.isArray(arr)) return arr; }
  function useDiffItem(data, getKey, onDiff) {
    var _React$useState = React.useState(data),
        _React$useState2 = _slicedToArray$3(_React$useState, 2),
        prevData = _React$useState2[0],
        setPrevData = _React$useState2[1];

    var _React$useState3 = React.useState(null),
        _React$useState4 = _slicedToArray$3(_React$useState3, 2),
        diffItem = _React$useState4[0],
        setDiffItem = _React$useState4[1];

    React.useEffect(function () {
      var diff = findListDiffIndex(prevData || [], data || [], getKey);

      if ((diff === null || diff === void 0 ? void 0 : diff.index) !== undefined) {
        onDiff === null || onDiff === void 0 ? void 0 : onDiff(diff.index);
        setDiffItem(data[diff.index]);
      }

      setPrevData(data);
    }, [data]);
    return [diffItem];
  }

  function _typeof$4(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$4 = function _typeof(obj) { return typeof obj; }; } else { _typeof$4 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$4(obj); }

  var isFF = (typeof navigator === "undefined" ? "undefined" : _typeof$4(navigator)) === 'object' && /Firefox/i.test(navigator.userAgent);

  var useOriginScroll = (function (isScrollAtTop, isScrollAtBottom) {
    // Do lock for a wheel when scrolling
    var lockRef = React.useRef(false);
    var lockTimeoutRef = React.useRef(null);

    function lockScroll() {
      clearTimeout(lockTimeoutRef.current);
      lockRef.current = true;
      lockTimeoutRef.current = setTimeout(function () {
        lockRef.current = false;
      }, 50);
    } // Pass to ref since global add is in closure


    var scrollPingRef = React.useRef({
      top: isScrollAtTop,
      bottom: isScrollAtBottom
    });
    scrollPingRef.current.top = isScrollAtTop;
    scrollPingRef.current.bottom = isScrollAtBottom;
    return function (deltaY) {
      var smoothOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var originScroll = // Pass origin wheel when on the top
      deltaY < 0 && scrollPingRef.current.top || // Pass origin wheel when on the bottom
      deltaY > 0 && scrollPingRef.current.bottom;

      if (smoothOffset && originScroll) {
        // No need lock anymore when it's smooth offset from touchMove interval
        clearTimeout(lockTimeoutRef.current);
        lockRef.current = false;
      } else if (!originScroll || lockRef.current) {
        lockScroll();
      }

      return !lockRef.current && originScroll;
    };
  });

  function useFrameWheel(inVirtual, isScrollAtTop, isScrollAtBottom, onWheelDelta) {
    var offsetRef = React.useRef(0);
    var nextFrameRef = React.useRef(null); // Firefox patch

    var wheelValueRef = React.useRef(null);
    var isMouseScrollRef = React.useRef(false); // Scroll status sync

    var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom);

    function onWheel(event) {
      if (!inVirtual) return;
      wrapperRaf.cancel(nextFrameRef.current);
      var deltaY = event.deltaY;
      offsetRef.current += deltaY;
      wheelValueRef.current = deltaY; // Do nothing when scroll at the edge, Skip check when is in scroll

      if (originScroll(deltaY)) return; // Proxy of scroll events

      if (!isFF) {
        event.preventDefault();
      }

      nextFrameRef.current = wrapperRaf(function () {
        // Patch a multiple for Firefox to fix wheel number too small
        // ref: https://github.com/ant-design/ant-design/issues/26372#issuecomment-679460266
        var patchMultiple = isMouseScrollRef.current ? 10 : 1;
        onWheelDelta(offsetRef.current * patchMultiple);
        offsetRef.current = 0;
      });
    } // A patch for firefox


    function onFireFoxScroll(event) {
      if (!inVirtual) return;
      isMouseScrollRef.current = event.detail === wheelValueRef.current;
    }

    return [onWheel, onFireFoxScroll];
  }

  var SMOOTH_PTG = 14 / 15;
  function useMobileTouchMove(inVirtual, listRef, callback) {
    var touchedRef = React.useRef(false);
    var touchYRef = React.useRef(0);
    var elementRef = React.useRef(null); // Smooth scroll

    var intervalRef = React.useRef(null);
    /* eslint-disable prefer-const */

    var cleanUpEvents;

    var onTouchMove = function onTouchMove(e) {
      if (touchedRef.current) {
        var currentY = Math.ceil(e.touches[0].pageY);
        var offsetY = touchYRef.current - currentY;
        touchYRef.current = currentY;

        if (callback(offsetY)) {
          e.preventDefault();
        } // Smooth interval


        clearInterval(intervalRef.current);
        intervalRef.current = setInterval(function () {
          offsetY *= SMOOTH_PTG;

          if (!callback(offsetY, true) || Math.abs(offsetY) <= 0.1) {
            clearInterval(intervalRef.current);
          }
        }, 16);
      }
    };

    var onTouchEnd = function onTouchEnd() {
      touchedRef.current = false;
      cleanUpEvents();
    };

    var onTouchStart = function onTouchStart(e) {
      cleanUpEvents();

      if (e.touches.length === 1 && !touchedRef.current) {
        touchedRef.current = true;
        touchYRef.current = Math.ceil(e.touches[0].pageY);
        elementRef.current = e.target;
        elementRef.current.addEventListener('touchmove', onTouchMove);
        elementRef.current.addEventListener('touchend', onTouchEnd);
      }
    };

    cleanUpEvents = function cleanUpEvents() {
      if (elementRef.current) {
        elementRef.current.removeEventListener('touchmove', onTouchMove);
        elementRef.current.removeEventListener('touchend', onTouchEnd);
      }
    };

    React.useLayoutEffect(function () {
      if (inVirtual) {
        listRef.current.addEventListener('touchstart', onTouchStart);
      }

      return function () {
        listRef.current.removeEventListener('touchstart', onTouchStart);
        cleanUpEvents();
        clearInterval(intervalRef.current);
      };
    }, [inVirtual]);
  }

  var _excluded$5 = ["prefixCls", "className", "height", "itemHeight", "fullHeight", "style", "data", "children", "itemKey", "virtual", "component", "onScroll", "onVisibleChange"];

  function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty$4(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _defineProperty$4(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _slicedToArray$4(arr, i) { return _arrayWithHoles$4(arr) || _iterableToArrayLimit$4(arr, i) || _unsupportedIterableToArray$4(arr, i) || _nonIterableRest$4(); }

  function _nonIterableRest$4() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

  function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit$4(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles$4(arr) { if (Array.isArray(arr)) return arr; }

  function _objectWithoutProperties$2(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$2(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

  function _objectWithoutPropertiesLoose$2(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
  var EMPTY_DATA = [];
  var ScrollStyle = {
    overflowY: 'auto',
    overflowAnchor: 'none'
  };
  function RawList(props, ref) {
    var _props$prefixCls = props.prefixCls,
        prefixCls = _props$prefixCls === void 0 ? 'rc-virtual-list' : _props$prefixCls,
        className = props.className,
        height = props.height,
        itemHeight = props.itemHeight,
        _props$fullHeight = props.fullHeight,
        fullHeight = _props$fullHeight === void 0 ? true : _props$fullHeight,
        style = props.style,
        data = props.data,
        children = props.children,
        itemKey = props.itemKey,
        virtual = props.virtual,
        _props$component = props.component,
        Component = _props$component === void 0 ? 'div' : _props$component,
        onScroll = props.onScroll,
        onVisibleChange = props.onVisibleChange,
        restProps = _objectWithoutProperties$2(props, _excluded$5); // ================================= MISC =================================


    var useVirtual = !!(virtual !== false && height && itemHeight);
    var inVirtual = useVirtual && data && itemHeight * data.length > height;

    var _useState = React.useState(0),
        _useState2 = _slicedToArray$4(_useState, 2),
        scrollTop = _useState2[0],
        setScrollTop = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray$4(_useState3, 2),
        scrollMoving = _useState4[0],
        setScrollMoving = _useState4[1];

    var mergedClassName = classnames(prefixCls, className);
    var mergedData = data || EMPTY_DATA;
    var componentRef = React.useRef();
    var fillerInnerRef = React.useRef();
    var scrollBarRef = React.useRef(); // Hack on scrollbar to enable flash call
    // =============================== Item Key ===============================

    var getKey = React.useCallback(function (item) {
      if (typeof itemKey === 'function') {
        return itemKey(item);
      }

      return item === null || item === void 0 ? void 0 : item[itemKey];
    }, [itemKey]);
    var sharedConfig = {
      getKey: getKey
    }; // ================================ Scroll ================================

    function syncScrollTop(newTop) {
      setScrollTop(function (origin) {
        var value;

        if (typeof newTop === 'function') {
          value = newTop(origin);
        } else {
          value = newTop;
        }

        var alignedTop = keepInRange(value);
        componentRef.current.scrollTop = alignedTop;
        return alignedTop;
      });
    } // ================================ Legacy ================================
    // Put ref here since the range is generate by follow


    var rangeRef = React.useRef({
      start: 0,
      end: mergedData.length
    });
    var diffItemRef = React.useRef();

    var _useDiffItem = useDiffItem(mergedData, getKey),
        _useDiffItem2 = _slicedToArray$4(_useDiffItem, 1),
        diffItem = _useDiffItem2[0];

    diffItemRef.current = diffItem; // ================================ Height ================================

    var _useHeights = useHeights(getKey, null, null),
        _useHeights2 = _slicedToArray$4(_useHeights, 4),
        setInstanceRef = _useHeights2[0],
        collectHeight = _useHeights2[1],
        heights = _useHeights2[2],
        heightUpdatedMark = _useHeights2[3]; // ========================== Visible Calculation =========================


    var _React$useMemo = React.useMemo(function () {
      if (!useVirtual) {
        return {
          scrollHeight: undefined,
          start: 0,
          end: mergedData.length - 1,
          offset: undefined
        };
      } // Always use virtual scroll bar in avoid shaking


      // Always use virtual scroll bar in avoid shaking
      if (!inVirtual) {
        var _fillerInnerRef$curre;

        return {
          scrollHeight: ((_fillerInnerRef$curre = fillerInnerRef.current) === null || _fillerInnerRef$curre === void 0 ? void 0 : _fillerInnerRef$curre.offsetHeight) || 0,
          start: 0,
          end: mergedData.length - 1,
          offset: undefined
        };
      }

      var itemTop = 0;
      var startIndex;
      var startOffset;
      var endIndex;
      var dataLen = mergedData.length;

      for (var i = 0; i < dataLen; i += 1) {
        var item = mergedData[i];
        var key = getKey(item);
        var cacheHeight = heights.get(key);
        var currentItemBottom = itemTop + (cacheHeight === undefined ? itemHeight : cacheHeight); // Check item top in the range

        // Check item top in the range
        if (currentItemBottom >= scrollTop && startIndex === undefined) {
          startIndex = i;
          startOffset = itemTop;
        } // Check item bottom in the range. We will render additional one item for motion usage


        // Check item bottom in the range. We will render additional one item for motion usage
        if (currentItemBottom > scrollTop + height && endIndex === undefined) {
          endIndex = i;
        }

        itemTop = currentItemBottom;
      } // Fallback to normal if not match. This code should never reach

      /* istanbul ignore next */


      // Fallback to normal if not match. This code should never reach

      /* istanbul ignore next */
      if (startIndex === undefined) {
        startIndex = 0;
        startOffset = 0;
      }

      if (endIndex === undefined) {
        endIndex = mergedData.length - 1;
      } // Give cache to improve scroll experience


      // Give cache to improve scroll experience
      endIndex = Math.min(endIndex + 1, mergedData.length);
      return {
        scrollHeight: itemTop,
        start: startIndex,
        end: endIndex,
        offset: startOffset
      };
    }, [inVirtual, useVirtual, scrollTop, mergedData, heightUpdatedMark, height]),
        scrollHeight = _React$useMemo.scrollHeight,
        start = _React$useMemo.start,
        end = _React$useMemo.end,
        offset = _React$useMemo.offset;

    rangeRef.current.start = start;
    rangeRef.current.end = end; // =============================== In Range ===============================

    var maxScrollHeight = scrollHeight - height;
    var maxScrollHeightRef = React.useRef(maxScrollHeight);
    maxScrollHeightRef.current = maxScrollHeight;

    function keepInRange(newScrollTop) {
      var newTop = newScrollTop;

      if (!Number.isNaN(maxScrollHeightRef.current)) {
        newTop = Math.min(newTop, maxScrollHeightRef.current);
      }

      newTop = Math.max(newTop, 0);
      return newTop;
    }

    var isScrollAtTop = scrollTop <= 0;
    var isScrollAtBottom = scrollTop >= maxScrollHeight;
    var originScroll = useOriginScroll(isScrollAtTop, isScrollAtBottom); // ================================ Scroll ================================

    function onScrollBar(newScrollTop) {
      var newTop = newScrollTop;
      syncScrollTop(newTop);
    } // When data size reduce. It may trigger native scroll event back to fit scroll position


    function onFallbackScroll(e) {
      var newScrollTop = e.currentTarget.scrollTop;

      if (newScrollTop !== scrollTop) {
        syncScrollTop(newScrollTop);
      } // Trigger origin onScroll


      onScroll === null || onScroll === void 0 ? void 0 : onScroll(e);
    } // Since this added in global,should use ref to keep update


    var _useFrameWheel = useFrameWheel(useVirtual, isScrollAtTop, isScrollAtBottom, function (offsetY) {
      syncScrollTop(function (top) {
        var newTop = top + offsetY;
        return newTop;
      });
    }),
        _useFrameWheel2 = _slicedToArray$4(_useFrameWheel, 2),
        onRawWheel = _useFrameWheel2[0],
        onFireFoxScroll = _useFrameWheel2[1]; // Mobile touch move


    useMobileTouchMove(useVirtual, componentRef, function (deltaY, smoothOffset) {
      if (originScroll(deltaY, smoothOffset)) {
        return false;
      }

      onRawWheel({
        preventDefault: function preventDefault() {},
        deltaY: deltaY
      });
      return true;
    });
    React.useLayoutEffect(function () {
      // Firefox only
      function onMozMousePixelScroll(e) {
        if (useVirtual) {
          e.preventDefault();
        }
      }

      componentRef.current.addEventListener('wheel', onRawWheel);
      componentRef.current.addEventListener('DOMMouseScroll', onFireFoxScroll);
      componentRef.current.addEventListener('MozMousePixelScroll', onMozMousePixelScroll);
      return function () {
        componentRef.current.removeEventListener('wheel', onRawWheel);
        componentRef.current.removeEventListener('DOMMouseScroll', onFireFoxScroll);
        componentRef.current.removeEventListener('MozMousePixelScroll', onMozMousePixelScroll);
      };
    }, [useVirtual]); // ================================= Ref ==================================

    var scrollTo = useScrollTo(componentRef, mergedData, heights, itemHeight, getKey, collectHeight, syncScrollTop, function () {
      var _scrollBarRef$current;

      (_scrollBarRef$current = scrollBarRef.current) === null || _scrollBarRef$current === void 0 ? void 0 : _scrollBarRef$current.delayHidden();
    });
    React.useImperativeHandle(ref, function () {
      return {
        scrollTo: scrollTo
      };
    }); // ================================ Effect ================================

    /** We need told outside that some list not rendered */

    React.useLayoutEffect(function () {
      if (onVisibleChange) {
        var renderList = mergedData.slice(start, end + 1);
        onVisibleChange(renderList, mergedData);
      }
    }, [start, end, mergedData]); // ================================ Render ================================

    var listChildren = useChildren(mergedData, start, end, setInstanceRef, children, sharedConfig);
    var componentStyle = null;

    if (height) {
      componentStyle = _objectSpread$1(_defineProperty$4({}, fullHeight ? 'height' : 'maxHeight', height), ScrollStyle);

      if (useVirtual) {
        componentStyle.overflowY = 'hidden';

        if (scrollMoving) {
          componentStyle.pointerEvents = 'none';
        }
      }
    }

    return /*#__PURE__*/React.createElement("div", _extends$3({
      style: _objectSpread$1(_objectSpread$1({}, style), {}, {
        position: 'relative'
      }),
      className: mergedClassName
    }, restProps), /*#__PURE__*/React.createElement(Component, {
      className: "".concat(prefixCls, "-holder"),
      style: componentStyle,
      ref: componentRef,
      onScroll: onFallbackScroll
    }, /*#__PURE__*/React.createElement(Filler, {
      prefixCls: prefixCls,
      height: scrollHeight,
      offset: offset,
      onInnerResize: collectHeight,
      ref: fillerInnerRef
    }, listChildren)), useVirtual && /*#__PURE__*/React.createElement(ScrollBar, {
      ref: scrollBarRef,
      prefixCls: prefixCls,
      scrollTop: scrollTop,
      height: height,
      scrollHeight: scrollHeight,
      count: mergedData.length,
      onScroll: onScrollBar,
      onStartMove: function onStartMove() {
        setScrollMoving(true);
      },
      onStopMove: function onStopMove() {
        setScrollMoving(false);
      }
    }));
  }
  var List$1 = /*#__PURE__*/React.forwardRef(RawList);
  List$1.displayName = 'List';

  var TransBtn = function TransBtn(_ref) {
    var className = _ref.className,
        customizeIcon = _ref.customizeIcon,
        customizeIconProps = _ref.customizeIconProps,
        _onMouseDown = _ref.onMouseDown,
        onClick = _ref.onClick,
        children = _ref.children;
    var icon;

    if (typeof customizeIcon === 'function') {
      icon = customizeIcon(customizeIconProps);
    } else {
      icon = customizeIcon;
    }

    return /*#__PURE__*/React.createElement("span", {
      className: className,
      onMouseDown: function onMouseDown(event) {
        event.preventDefault();

        if (_onMouseDown) {
          _onMouseDown(event);
        }
      },
      style: {
        userSelect: 'none',
        WebkitUserSelect: 'none'
      },
      unselectable: "on",
      onClick: onClick,
      "aria-hidden": true
    }, icon !== undefined ? icon : /*#__PURE__*/React.createElement("span", {
      className: classnames(className.split(/\s+/).map(function (cls) {
        return "".concat(cls, "-icon");
      }))
    }, children));
  };

  function toArray$2(value) {
    if (Array.isArray(value)) {
      return value;
    }

    return value !== undefined ? [value] : [];
  }
  /**
   * Convert outer props value into internal value
   */

  function toInnerValue(value, _ref) {
    var labelInValue = _ref.labelInValue,
        combobox = _ref.combobox;
    var valueMap = new Map();

    if (value === undefined || value === '' && combobox) {
      return [[], valueMap];
    }

    var values = Array.isArray(value) ? value : [value];
    var rawValues = values;

    if (labelInValue) {
      rawValues = values.filter(function (item) {
        return item !== null;
      }).map(function (itemValue) {
        var key = itemValue.key,
            val = itemValue.value;
        var finalVal = val !== undefined ? val : key;
        valueMap.set(finalVal, itemValue);
        return finalVal;
      });
    }

    return [rawValues, valueMap];
  }
  /**
   * Convert internal value into out event value
   */

  function toOuterValues(valueList, _ref2) {
    var optionLabelProp = _ref2.optionLabelProp,
        labelInValue = _ref2.labelInValue,
        prevValueMap = _ref2.prevValueMap,
        options = _ref2.options,
        getLabeledValue = _ref2.getLabeledValue;
    var values = valueList;

    if (labelInValue) {
      values = values.map(function (val) {
        return getLabeledValue(val, {
          options: options,
          prevValueMap: prevValueMap,
          labelInValue: labelInValue,
          optionLabelProp: optionLabelProp
        });
      });
    }

    return values;
  }
  function removeLastEnabledValue(measureValues, values) {
    var newValues = _toConsumableArray$1(values);

    var removeIndex;

    for (removeIndex = measureValues.length - 1; removeIndex >= 0; removeIndex -= 1) {
      if (!measureValues[removeIndex].disabled) {
        break;
      }
    }

    var removedValue = null;

    if (removeIndex !== -1) {
      removedValue = newValues[removeIndex];
      newValues.splice(removeIndex, 1);
    }

    return {
      values: newValues,
      removedValue: removedValue
    };
  }
  var isClient = typeof window !== 'undefined' && window.document && window.document.documentElement;
  /** Is client side and not jsdom */

  var isBrowserClient =  isClient;
  var uuid = 0;
  /** Get unique id for accessibility usage */

  function getUUID() {
    var retId; // Test never reach

    /* istanbul ignore if */

    if (isBrowserClient) {
      retId = uuid;
      uuid += 1;
    } else {
      retId = 'TEST_OR_SSR';
    }

    return retId;
  }

  function getKey(data, index) {
    var key = data.key;
    var value;

    if ('value' in data) {
      value = data.value;
    }

    if (key !== null && key !== undefined) {
      return key;
    }

    if (value !== undefined) {
      return value;
    }

    return "rc-index-key-".concat(index);
  }

  function fillFieldNames(fieldNames) {
    var _ref = fieldNames || {},
        label = _ref.label,
        value = _ref.value,
        options = _ref.options;

    return {
      label: label || 'label',
      value: value || 'value',
      options: options || 'options'
    };
  }
  /**
   * Flat options into flatten list.
   * We use `optionOnly` here is aim to avoid user use nested option group.
   * Here is simply set `key` to the index if not provided.
   */

  function flattenOptions(options) {
    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        fieldNames = _ref2.fieldNames;

    var flattenList = [];

    var _fillFieldNames = fillFieldNames(fieldNames),
        fieldLabel = _fillFieldNames.label,
        fieldValue = _fillFieldNames.value,
        fieldOptions = _fillFieldNames.options;

    function dig(list, isGroupOption) {
      list.forEach(function (data) {
        var label = data[fieldLabel];

        if (isGroupOption || !(fieldOptions in data)) {
          // Option
          flattenList.push({
            key: getKey(data, flattenList.length),
            groupOption: isGroupOption,
            data: data,
            label: label,
            value: data[fieldValue]
          });
        } else {
          // Option Group
          flattenList.push({
            key: getKey(data, flattenList.length),
            group: true,
            data: data,
            label: label
          });
          dig(data[fieldOptions], true);
        }
      });
    }

    dig(options, false);
    return flattenList;
  }
  /**
   * Inject `props` into `option` for legacy usage
   */

  function injectPropsWithOption(option) {
    var newOption = _objectSpread2$1({}, option);

    if (!('props' in newOption)) {
      Object.defineProperty(newOption, 'props', {
        get: function get() {
          warningOnce(false, 'Return type is option instead of Option instance. Please read value directly instead of reading from `props`.');
          return newOption;
        }
      });
    }

    return newOption;
  }

  function findValueOption(values, options) {
    var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref3$prevValueOption = _ref3.prevValueOptions,
        prevValueOptions = _ref3$prevValueOption === void 0 ? [] : _ref3$prevValueOption;

    var optionMap = new Map();
    options.forEach(function (_ref4) {
      var data = _ref4.data,
          group = _ref4.group,
          value = _ref4.value;

      if (!group) {
        // Check if match
        optionMap.set(value, data);
      }
    });
    return values.map(function (val) {
      var option = optionMap.get(val); // Fallback to try to find prev options

      if (!option) {
        option = _objectSpread2$1({}, prevValueOptions.find(function (opt) {
          return opt._INTERNAL_OPTION_VALUE_ === val;
        }));
      }

      return injectPropsWithOption(option);
    });
  }
  var getLabeledValue = function getLabeledValue(value, _ref5) {
    var options = _ref5.options,
        prevValueMap = _ref5.prevValueMap,
        labelInValue = _ref5.labelInValue,
        optionLabelProp = _ref5.optionLabelProp;
    var item = findValueOption([value], options)[0];
    var result = {
      value: value
    };
    var prevValItem = labelInValue ? prevValueMap.get(value) : undefined;

    if (prevValItem && _typeof$1(prevValItem) === 'object' && 'label' in prevValItem) {
      result.label = prevValItem.label;

      if (item && typeof prevValItem.label === 'string' && typeof item[optionLabelProp] === 'string' && prevValItem.label.trim() !== item[optionLabelProp].trim()) {
        warningOnce(false, '`label` of `value` is not same as `label` in Select options.');
      }
    } else if (item && optionLabelProp in item) {
      result.label = item[optionLabelProp];
    } else {
      result.label = value;
      result.isCacheable = true;
    } // Used for motion control


    result.key = result.value;
    return result;
  };

  function toRawString(content) {
    return toArray$2(content).join('');
  }
  /** Filter single option if match the search text */


  function getFilterFunction(optionFilterProp) {
    return function (searchValue, option) {
      var lowerSearchText = searchValue.toLowerCase(); // Group label search

      if ('options' in option) {
        return toRawString(option.label).toLowerCase().includes(lowerSearchText);
      } // Option value search


      var rawValue = option[optionFilterProp];
      var value = toRawString(rawValue).toLowerCase();
      return value.includes(lowerSearchText);
    };
  }
  /** Filter options and return a new options by the search text */


  function filterOptions(searchValue, options, _ref6) {
    var optionFilterProp = _ref6.optionFilterProp,
        filterOption = _ref6.filterOption;
    var filteredOptions = [];
    var filterFunc;

    if (filterOption === false) {
      return _toConsumableArray$1(options);
    }

    if (typeof filterOption === 'function') {
      filterFunc = filterOption;
    } else {
      filterFunc = getFilterFunction(optionFilterProp);
    }

    options.forEach(function (item) {
      // Group should check child options
      if ('options' in item) {
        // Check group first
        var matchGroup = filterFunc(searchValue, item);

        if (matchGroup) {
          filteredOptions.push(item);
        } else {
          // Check option
          var subOptions = item.options.filter(function (subItem) {
            return filterFunc(searchValue, subItem);
          });

          if (subOptions.length) {
            filteredOptions.push(_objectSpread2$1(_objectSpread2$1({}, item), {}, {
              options: subOptions
            }));
          }
        }

        return;
      }

      if (filterFunc(searchValue, injectPropsWithOption(item))) {
        filteredOptions.push(item);
      }
    });
    return filteredOptions;
  }
  function getSeparatedContent(text, tokens) {
    if (!tokens || !tokens.length) {
      return null;
    }

    var match = false;

    function separate(str, _ref7) {
      var _ref8 = _toArray(_ref7),
          token = _ref8[0],
          restTokens = _ref8.slice(1);

      if (!token) {
        return [str];
      }

      var list = str.split(token);
      match = match || list.length > 1;
      return list.reduce(function (prevList, unitStr) {
        return [].concat(_toConsumableArray$1(prevList), _toConsumableArray$1(separate(unitStr, restTokens)));
      }, []).filter(function (unit) {
        return unit;
      });
    }

    var list = separate(text, tokens);
    return match ? list : null;
  }
  function isValueDisabled(value, options) {
    var option = findValueOption([value], options)[0];
    return option.disabled;
  }
  /**
   * `tags` mode should fill un-list item into the option list
   */

  function fillOptionsWithMissingValue(options, value, optionLabelProp, labelInValue) {
    var values = toArray$2(value).slice().sort();

    var cloneOptions = _toConsumableArray$1(options); // Convert options value to set


    var optionValues = new Set();
    options.forEach(function (opt) {
      if (opt.options) {
        opt.options.forEach(function (subOpt) {
          optionValues.add(subOpt.value);
        });
      } else {
        optionValues.add(opt.value);
      }
    }); // Fill missing value

    values.forEach(function (item) {
      var val = labelInValue ? item.value : item;

      if (!optionValues.has(val)) {
        var _ref9;

        cloneOptions.push(labelInValue ? (_ref9 = {}, _defineProperty$1(_ref9, optionLabelProp, item.label), _defineProperty$1(_ref9, "value", val), _ref9) : {
          value: val
        });
      }
    });
    return cloneOptions;
  }

  /* istanbul ignore file */
  function isPlatformMac() {
    return /(mac\sos|macintosh)/i.test(navigator.appVersion);
  }

  var _excluded$6 = ["disabled", "title", "children", "style", "className"];
  /**
   * Using virtual list of option display.
   * Will fallback to dom if use customize render.
   */

  var OptionList = function OptionList(_ref, ref) {
    var prefixCls = _ref.prefixCls,
        id = _ref.id,
        fieldNames = _ref.fieldNames,
        flattenOptions = _ref.flattenOptions,
        childrenAsData = _ref.childrenAsData,
        values = _ref.values,
        searchValue = _ref.searchValue,
        multiple = _ref.multiple,
        defaultActiveFirstOption = _ref.defaultActiveFirstOption,
        height = _ref.height,
        itemHeight = _ref.itemHeight,
        notFoundContent = _ref.notFoundContent,
        open = _ref.open,
        menuItemSelectedIcon = _ref.menuItemSelectedIcon,
        virtual = _ref.virtual,
        onSelect = _ref.onSelect,
        onToggleOpen = _ref.onToggleOpen,
        onActiveValue = _ref.onActiveValue,
        onScroll = _ref.onScroll,
        onMouseEnter = _ref.onMouseEnter;
    var itemPrefixCls = "".concat(prefixCls, "-item");
    var memoFlattenOptions = useMemo(function () {
      return flattenOptions;
    }, [open, flattenOptions], function (prev, next) {
      return next[0] && prev[1] !== next[1];
    }); // =========================== List ===========================

    var listRef = React.useRef(null);

    var onListMouseDown = function onListMouseDown(event) {
      event.preventDefault();
    };

    var scrollIntoView = function scrollIntoView(index) {
      if (listRef.current) {
        listRef.current.scrollTo({
          index: index
        });
      }
    }; // ========================== Active ==========================


    var getEnabledActiveIndex = function getEnabledActiveIndex(index) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var len = memoFlattenOptions.length;

      for (var i = 0; i < len; i += 1) {
        var current = (index + i * offset + len) % len;
        var _memoFlattenOptions$c = memoFlattenOptions[current],
            group = _memoFlattenOptions$c.group,
            data = _memoFlattenOptions$c.data;

        if (!group && !data.disabled) {
          return current;
        }
      }

      return -1;
    };

    var _React$useState = React.useState(function () {
      return getEnabledActiveIndex(0);
    }),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        activeIndex = _React$useState2[0],
        setActiveIndex = _React$useState2[1];

    var setActive = function setActive(index) {
      var fromKeyboard = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      setActiveIndex(index);
      var info = {
        source: fromKeyboard ? 'keyboard' : 'mouse'
      }; // Trigger active event

      var flattenItem = memoFlattenOptions[index];

      if (!flattenItem) {
        onActiveValue(null, -1, info);
        return;
      }

      onActiveValue(flattenItem.data.value, index, info);
    }; // Auto active first item when list length or searchValue changed


    React.useEffect(function () {
      setActive(defaultActiveFirstOption !== false ? getEnabledActiveIndex(0) : -1);
    }, [memoFlattenOptions.length, searchValue]); // Auto scroll to item position in single mode

    React.useEffect(function () {
      /**
       * React will skip `onChange` when component update.
       * `setActive` function will call root accessibility state update which makes re-render.
       * So we need to delay to let Input component trigger onChange first.
       */
      var timeoutId = setTimeout(function () {
        if (!multiple && open && values.size === 1) {
          var value = Array.from(values)[0];
          var index = memoFlattenOptions.findIndex(function (_ref2) {
            var data = _ref2.data;
            return data.value === value;
          });

          if (index !== -1) {
            setActive(index);
            scrollIntoView(index);
          }
        }
      }); // Force trigger scrollbar visible when open

      if (open) {
        var _listRef$current;

        (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo(undefined);
      }

      return function () {
        return clearTimeout(timeoutId);
      };
    }, [open, searchValue]); // ========================== Values ==========================

    var onSelectValue = function onSelectValue(value) {
      if (value !== undefined) {
        onSelect(value, {
          selected: !values.has(value)
        });
      } // Single mode should always close by select


      if (!multiple) {
        onToggleOpen(false);
      }
    }; // ========================= Keyboard =========================


    React.useImperativeHandle(ref, function () {
      return {
        onKeyDown: function onKeyDown(event) {
          var which = event.which,
              ctrlKey = event.ctrlKey;

          switch (which) {
            // >>> Arrow keys & ctrl + n/p on Mac
            case KeyCode.N:
            case KeyCode.P:
            case KeyCode.UP:
            case KeyCode.DOWN:
              {
                var offset = 0;

                if (which === KeyCode.UP) {
                  offset = -1;
                } else if (which === KeyCode.DOWN) {
                  offset = 1;
                } else if (isPlatformMac() && ctrlKey) {
                  if (which === KeyCode.N) {
                    offset = 1;
                  } else if (which === KeyCode.P) {
                    offset = -1;
                  }
                }

                if (offset !== 0) {
                  var nextActiveIndex = getEnabledActiveIndex(activeIndex + offset, offset);
                  scrollIntoView(nextActiveIndex);
                  setActive(nextActiveIndex, true);
                }

                break;
              }
            // >>> Select

            case KeyCode.ENTER:
              {
                // value
                var item = memoFlattenOptions[activeIndex];

                if (item && !item.data.disabled) {
                  onSelectValue(item.data.value);
                } else {
                  onSelectValue(undefined);
                }

                if (open) {
                  event.preventDefault();
                }

                break;
              }
            // >>> Close

            case KeyCode.ESC:
              {
                onToggleOpen(false);

                if (open) {
                  event.stopPropagation();
                }
              }
          }
        },
        onKeyUp: function onKeyUp() {},
        scrollTo: function scrollTo(index) {
          scrollIntoView(index);
        }
      };
    }); // ========================== Render ==========================

    if (memoFlattenOptions.length === 0) {
      return /*#__PURE__*/React.createElement("div", {
        role: "listbox",
        id: "".concat(id, "_list"),
        className: "".concat(itemPrefixCls, "-empty"),
        onMouseDown: onListMouseDown
      }, notFoundContent);
    }

    var omitFieldNameList = Object.values(fillFieldNames(fieldNames));

    var renderItem = function renderItem(index) {
      var item = memoFlattenOptions[index];
      if (!item) return null;
      var itemData = item.data || {};
      var value = itemData.value,
          label = itemData.label,
          children = itemData.children;
      var attrs = pickAttrs(itemData, true);
      var mergedLabel = childrenAsData ? children : label;
      return item ? /*#__PURE__*/React.createElement("div", _extends$1({
        "aria-label": typeof mergedLabel === 'string' ? mergedLabel : null
      }, attrs, {
        key: index,
        role: "option",
        id: "".concat(id, "_list_").concat(index),
        "aria-selected": values.has(value)
      }), value) : null;
    };

    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      role: "listbox",
      id: "".concat(id, "_list"),
      style: {
        height: 0,
        width: 0,
        overflow: 'hidden'
      }
    }, renderItem(activeIndex - 1), renderItem(activeIndex), renderItem(activeIndex + 1)), /*#__PURE__*/React.createElement(List$1, {
      itemKey: "key",
      ref: listRef,
      data: memoFlattenOptions,
      height: height,
      itemHeight: itemHeight,
      fullHeight: false,
      onMouseDown: onListMouseDown,
      onScroll: onScroll,
      virtual: virtual,
      onMouseEnter: onMouseEnter
    }, function (_ref3, itemIndex) {
      var _classNames;

      var group = _ref3.group,
          groupOption = _ref3.groupOption,
          data = _ref3.data,
          label = _ref3.label,
          value = _ref3.value;
      var key = data.key; // Group

      if (group) {
        return /*#__PURE__*/React.createElement("div", {
          className: classnames(itemPrefixCls, "".concat(itemPrefixCls, "-group"))
        }, label !== undefined ? label : key);
      }

      var disabled = data.disabled,
          title = data.title,
          children = data.children,
          style = data.style,
          className = data.className,
          otherProps = _objectWithoutProperties$1(data, _excluded$6);

      var passedProps = omit(otherProps, omitFieldNameList); // Option

      var selected = values.has(value);
      var optionPrefixCls = "".concat(itemPrefixCls, "-option");
      var optionClassName = classnames(itemPrefixCls, optionPrefixCls, className, (_classNames = {}, _defineProperty$1(_classNames, "".concat(optionPrefixCls, "-grouped"), groupOption), _defineProperty$1(_classNames, "".concat(optionPrefixCls, "-active"), activeIndex === itemIndex && !disabled), _defineProperty$1(_classNames, "".concat(optionPrefixCls, "-disabled"), disabled), _defineProperty$1(_classNames, "".concat(optionPrefixCls, "-selected"), selected), _classNames));
      var mergedLabel = childrenAsData ? children : label;
      var iconVisible = !menuItemSelectedIcon || typeof menuItemSelectedIcon === 'function' || selected;
      var content = mergedLabel || value; // https://github.com/ant-design/ant-design/issues/26717

      var optionTitle = typeof content === 'string' || typeof content === 'number' ? content.toString() : undefined;

      if (title !== undefined) {
        optionTitle = title;
      }

      return /*#__PURE__*/React.createElement("div", _extends$1({}, passedProps, {
        "aria-selected": selected,
        className: optionClassName,
        title: optionTitle,
        onMouseMove: function onMouseMove() {
          if (activeIndex === itemIndex || disabled) {
            return;
          }

          setActive(itemIndex);
        },
        onClick: function onClick() {
          if (!disabled) {
            onSelectValue(value);
          }
        },
        style: style
      }), /*#__PURE__*/React.createElement("div", {
        className: "".concat(optionPrefixCls, "-content")
      }, content), /*#__PURE__*/React.isValidElement(menuItemSelectedIcon) || selected, iconVisible && /*#__PURE__*/React.createElement(TransBtn, {
        className: "".concat(itemPrefixCls, "-option-state"),
        customizeIcon: menuItemSelectedIcon,
        customizeIconProps: {
          isSelected: selected
        }
      }, selected ? '✓' : null));
    }));
  };

  var RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);
  RefOptionList.displayName = 'OptionList';

  /** This is a placeholder, not real render in dom */
  var Option = function Option() {
    return null;
  };

  Option.isSelectOption = true;

  /** This is a placeholder, not real render in dom */
  var OptGroup = function OptGroup() {
    return null;
  };

  OptGroup.isSelectOptGroup = true;

  var _excluded$7 = ["children", "value"],
      _excluded2 = ["children"];

  function convertNodeToOption(node) {
    var key = node.key,
        _node$props = node.props,
        children = _node$props.children,
        value = _node$props.value,
        restProps = _objectWithoutProperties$1(_node$props, _excluded$7);

    return _objectSpread2$1({
      key: key,
      value: value !== undefined ? value : key,
      children: children
    }, restProps);
  }

  function convertChildrenToData(nodes) {
    var optionOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return toArray(nodes).map(function (node, index) {
      if (! /*#__PURE__*/React.isValidElement(node) || !node.type) {
        return null;
      }

      var isSelectOptGroup = node.type.isSelectOptGroup,
          key = node.key,
          _node$props2 = node.props,
          children = _node$props2.children,
          restProps = _objectWithoutProperties$1(_node$props2, _excluded2);

      if (optionOnly || !isSelectOptGroup) {
        return convertNodeToOption(node);
      }

      return _objectSpread2$1(_objectSpread2$1({
        key: "__RC_SELECT_GRP__".concat(key === null ? index : key, "__"),
        label: key
      }, restProps), {}, {
        options: convertChildrenToData(children)
      });
    }).filter(function (data) {
      return data;
    });
  }

  var isMobile = (function () {
    if (typeof navigator === 'undefined' || typeof window === 'undefined') {
      return false;
    }

    var agent = navigator.userAgent || navigator.vendor || window.opera;

    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent === null || agent === void 0 ? void 0 : agent.substr(0, 4))) {
      return true;
    }

    return false;
  });

  function useControlledState(defaultStateValue, option) {
    var _ref = option || {},
        defaultValue = _ref.defaultValue,
        value = _ref.value,
        onChange = _ref.onChange,
        postState = _ref.postState;

    var _React$useState = React.useState(function () {
      if (value !== undefined) {
        return value;
      }

      if (defaultValue !== undefined) {
        return typeof defaultValue === 'function' ? defaultValue() : defaultValue;
      }

      return typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;
    }),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        innerValue = _React$useState2[0],
        setInnerValue = _React$useState2[1];

    var mergedValue = value !== undefined ? value : innerValue;

    if (postState) {
      mergedValue = postState(mergedValue);
    }

    function triggerChange(newValue) {
      setInnerValue(newValue);

      if (mergedValue !== newValue && onChange) {
        onChange(newValue, mergedValue);
      }
    } // Effect of reset value to `undefined`


    var firstRenderRef = React.useRef(true);
    React.useEffect(function () {
      if (firstRenderRef.current) {
        firstRenderRef.current = false;
        return;
      }

      if (value === undefined) {
        setInnerValue(value);
      }
    }, [value]);
    return [mergedValue, triggerChange];
  }

  var UNDEFINED = undefined;

  function InternalItem(props, ref) {
    var prefixCls = props.prefixCls,
        invalidate = props.invalidate,
        item = props.item,
        renderItem = props.renderItem,
        responsive = props.responsive,
        registerSize = props.registerSize,
        itemKey = props.itemKey,
        className = props.className,
        style = props.style,
        children = props.children,
        display = props.display,
        order = props.order,
        _props$component = props.component,
        Component = _props$component === void 0 ? 'div' : _props$component,
        restProps = _objectWithoutProperties$1(props, ["prefixCls", "invalidate", "item", "renderItem", "responsive", "registerSize", "itemKey", "className", "style", "children", "display", "order", "component"]);

    var mergedHidden = responsive && !display; // ================================ Effect ================================

    function internalRegisterSize(width) {
      registerSize(itemKey, width);
    }

    React.useEffect(function () {
      return function () {
        internalRegisterSize(null);
      };
    }, []); // ================================ Render ================================

    var childNode = renderItem && item !== UNDEFINED ? renderItem(item) : children;
    var overflowStyle;

    if (!invalidate) {
      overflowStyle = {
        opacity: mergedHidden ? 0 : 1,
        height: mergedHidden ? 0 : UNDEFINED,
        overflowY: mergedHidden ? 'hidden' : UNDEFINED,
        order: responsive ? order : UNDEFINED,
        pointerEvents: mergedHidden ? 'none' : UNDEFINED,
        position: mergedHidden ? 'absolute' : UNDEFINED
      };
    }

    var overflowProps = {};

    if (mergedHidden) {
      overflowProps['aria-hidden'] = true;
    }

    var itemNode = /*#__PURE__*/React.createElement(Component, _extends$1({
      className: classnames(!invalidate && prefixCls, className),
      style: _objectSpread2$1(_objectSpread2$1({}, overflowStyle), style)
    }, overflowProps, restProps, {
      ref: ref
    }), childNode);

    if (responsive) {
      itemNode = /*#__PURE__*/React.createElement(ReactResizeObserver, {
        onResize: function onResize(_ref) {
          var offsetWidth = _ref.offsetWidth;
          internalRegisterSize(offsetWidth);
        }
      }, itemNode);
    }

    return itemNode;
  }

  var Item$1 = /*#__PURE__*/React.forwardRef(InternalItem);
  Item$1.displayName = 'Item';

  /**
   * State generate. Return a `setState` but it will flush all state with one render to save perf.
   * This is not a realization of `unstable_batchedUpdates`.
   */

  function useBatchFrameState() {
    var _useState = React.useState({}),
        _useState2 = _slicedToArray$1(_useState, 2),
        forceUpdate = _useState2[1];

    var statesRef = React.useRef([]);
    var destroyRef = React.useRef(false);
    var walkingIndex = 0;
    var beforeFrameId = 0;
    React.useEffect(function () {
      return function () {
        destroyRef.current = true;
      };
    }, []);

    function createState(defaultValue) {
      var myIndex = walkingIndex;
      walkingIndex += 1; // Fill value if not exist yet

      if (statesRef.current.length < myIndex + 1) {
        statesRef.current[myIndex] = defaultValue;
      } // Return filled as `setState`


      var value = statesRef.current[myIndex];

      function setValue(val) {
        statesRef.current[myIndex] = typeof val === 'function' ? val(statesRef.current[myIndex]) : val;
        wrapperRaf.cancel(beforeFrameId); // Flush with batch

        beforeFrameId = wrapperRaf(function () {
          if (!destroyRef.current) {
            forceUpdate({});
          }
        });
      }

      return [value, setValue];
    }

    return createState;
  }

  var InternalRawItem = function InternalRawItem(props, ref) {
    var context = React.useContext(OverflowContext); // Render directly when context not provided

    if (!context) {
      var _props$component = props.component,
          Component = _props$component === void 0 ? 'div' : _props$component,
          _restProps = _objectWithoutProperties$1(props, ["component"]);

      return /*#__PURE__*/React.createElement(Component, _extends$1({}, _restProps, {
        ref: ref
      }));
    }

    var contextClassName = context.className,
        restContext = _objectWithoutProperties$1(context, ["className"]);

    var className = props.className,
        restProps = _objectWithoutProperties$1(props, ["className"]); // Do not pass context to sub item to avoid multiple measure


    return /*#__PURE__*/React.createElement(OverflowContext.Provider, {
      value: null
    }, /*#__PURE__*/React.createElement(Item$1, _extends$1({
      ref: ref,
      className: classnames(contextClassName, className)
    }, restContext, restProps)));
  };

  var RawItem = /*#__PURE__*/React.forwardRef(InternalRawItem);
  RawItem.displayName = 'RawItem';

  var OverflowContext = /*#__PURE__*/React.createContext(null);
  var RESPONSIVE = 'responsive';
  var INVALIDATE = 'invalidate';

  function defaultRenderRest(omittedItems) {
    return "+ ".concat(omittedItems.length, " ...");
  }

  function Overflow(props, ref) {
    var _props$prefixCls = props.prefixCls,
        prefixCls = _props$prefixCls === void 0 ? 'rc-overflow' : _props$prefixCls,
        _props$data = props.data,
        data = _props$data === void 0 ? [] : _props$data,
        renderItem = props.renderItem,
        renderRawItem = props.renderRawItem,
        itemKey = props.itemKey,
        _props$itemWidth = props.itemWidth,
        itemWidth = _props$itemWidth === void 0 ? 10 : _props$itemWidth,
        ssr = props.ssr,
        style = props.style,
        className = props.className,
        maxCount = props.maxCount,
        renderRest = props.renderRest,
        renderRawRest = props.renderRawRest,
        suffix = props.suffix,
        _props$component = props.component,
        Component = _props$component === void 0 ? 'div' : _props$component,
        itemComponent = props.itemComponent,
        onVisibleChange = props.onVisibleChange,
        restProps = _objectWithoutProperties$1(props, ["prefixCls", "data", "renderItem", "renderRawItem", "itemKey", "itemWidth", "ssr", "style", "className", "maxCount", "renderRest", "renderRawRest", "suffix", "component", "itemComponent", "onVisibleChange"]);

    var createUseState = useBatchFrameState();
    var fullySSR = ssr === 'full';

    var _createUseState = createUseState(null),
        _createUseState2 = _slicedToArray$1(_createUseState, 2),
        containerWidth = _createUseState2[0],
        setContainerWidth = _createUseState2[1];

    var mergedContainerWidth = containerWidth || 0;

    var _createUseState3 = createUseState(new Map()),
        _createUseState4 = _slicedToArray$1(_createUseState3, 2),
        itemWidths = _createUseState4[0],
        setItemWidths = _createUseState4[1];

    var _createUseState5 = createUseState(0),
        _createUseState6 = _slicedToArray$1(_createUseState5, 2),
        prevRestWidth = _createUseState6[0],
        setPrevRestWidth = _createUseState6[1];

    var _createUseState7 = createUseState(0),
        _createUseState8 = _slicedToArray$1(_createUseState7, 2),
        restWidth = _createUseState8[0],
        setRestWidth = _createUseState8[1];

    var _createUseState9 = createUseState(0),
        _createUseState10 = _slicedToArray$1(_createUseState9, 2),
        suffixWidth = _createUseState10[0],
        setSuffixWidth = _createUseState10[1];

    var _useState = React.useState(null),
        _useState2 = _slicedToArray$1(_useState, 2),
        suffixFixedStart = _useState2[0],
        setSuffixFixedStart = _useState2[1];

    var _useState3 = React.useState(null),
        _useState4 = _slicedToArray$1(_useState3, 2),
        displayCount = _useState4[0],
        setDisplayCount = _useState4[1];

    var mergedDisplayCount = React.useMemo(function () {
      if (displayCount === null && fullySSR) {
        return Number.MAX_SAFE_INTEGER;
      }

      return displayCount || 0;
    }, [displayCount, containerWidth]);

    var _useState5 = React.useState(false),
        _useState6 = _slicedToArray$1(_useState5, 2),
        restReady = _useState6[0],
        setRestReady = _useState6[1];

    var itemPrefixCls = "".concat(prefixCls, "-item"); // Always use the max width to avoid blink

    var mergedRestWidth = Math.max(prevRestWidth, restWidth); // ================================= Data =================================

    var isResponsive = data.length && maxCount === RESPONSIVE;
    var invalidate = maxCount === INVALIDATE;
    /**
     * When is `responsive`, we will always render rest node to get the real width of it for calculation
     */

    var showRest = isResponsive || typeof maxCount === 'number' && data.length > maxCount;
    var mergedData = React.useMemo(function () {
      var items = data;

      if (isResponsive) {
        if (containerWidth === null && fullySSR) {
          items = data;
        } else {
          items = data.slice(0, Math.min(data.length, mergedContainerWidth / itemWidth));
        }
      } else if (typeof maxCount === 'number') {
        items = data.slice(0, maxCount);
      }

      return items;
    }, [data, itemWidth, containerWidth, maxCount, isResponsive]);
    var omittedItems = React.useMemo(function () {
      if (isResponsive) {
        return data.slice(mergedDisplayCount + 1);
      }

      return data.slice(mergedData.length);
    }, [data, mergedData, isResponsive, mergedDisplayCount]); // ================================= Item =================================

    var getKey = React.useCallback(function (item, index) {
      var _ref;

      if (typeof itemKey === 'function') {
        return itemKey(item);
      }

      return (_ref = itemKey && (item === null || item === void 0 ? void 0 : item[itemKey])) !== null && _ref !== void 0 ? _ref : index;
    }, [itemKey]);
    var mergedRenderItem = React.useCallback(renderItem || function (item) {
      return item;
    }, [renderItem]);

    function updateDisplayCount(count, notReady) {
      setDisplayCount(count);

      if (!notReady) {
        setRestReady(count < data.length - 1);
        onVisibleChange === null || onVisibleChange === void 0 ? void 0 : onVisibleChange(count);
      }
    } // ================================= Size =================================


    function onOverflowResize(_, element) {
      setContainerWidth(element.clientWidth);
    }

    function registerSize(key, width) {
      setItemWidths(function (origin) {
        var clone = new Map(origin);

        if (width === null) {
          clone.delete(key);
        } else {
          clone.set(key, width);
        }

        return clone;
      });
    }

    function registerOverflowSize(_, width) {
      setRestWidth(width);
      setPrevRestWidth(restWidth);
    }

    function registerSuffixSize(_, width) {
      setSuffixWidth(width);
    } // ================================ Effect ================================


    function getItemWidth(index) {
      return itemWidths.get(getKey(mergedData[index], index));
    }

    React.useLayoutEffect(function () {
      if (mergedContainerWidth && mergedRestWidth && mergedData) {
        var totalWidth = suffixWidth;
        var len = mergedData.length;
        var lastIndex = len - 1; // When data count change to 0, reset this since not loop will reach

        if (!len) {
          updateDisplayCount(0);
          setSuffixFixedStart(null);
          return;
        }

        for (var i = 0; i < len; i += 1) {
          var currentItemWidth = getItemWidth(i); // Break since data not ready

          if (currentItemWidth === undefined) {
            updateDisplayCount(i - 1, true);
            break;
          } // Find best match


          totalWidth += currentItemWidth;

          if ( // Only one means `totalWidth` is the final width
          lastIndex === 0 && totalWidth <= mergedContainerWidth || // Last two width will be the final width
          i === lastIndex - 1 && totalWidth + getItemWidth(lastIndex) <= mergedContainerWidth) {
            // Additional check if match the end
            updateDisplayCount(lastIndex);
            setSuffixFixedStart(null);
            break;
          } else if (totalWidth + mergedRestWidth > mergedContainerWidth) {
            // Can not hold all the content to show rest
            updateDisplayCount(i - 1);
            setSuffixFixedStart(totalWidth - currentItemWidth - suffixWidth + restWidth);
            break;
          }
        }

        if (suffix && getItemWidth(0) + suffixWidth > mergedContainerWidth) {
          setSuffixFixedStart(null);
        }
      }
    }, [mergedContainerWidth, itemWidths, restWidth, suffixWidth, getKey, mergedData]); // ================================ Render ================================

    var displayRest = restReady && !!omittedItems.length;
    var suffixStyle = {};

    if (suffixFixedStart !== null && isResponsive) {
      suffixStyle = {
        position: 'absolute',
        left: suffixFixedStart,
        top: 0
      };
    }

    var itemSharedProps = {
      prefixCls: itemPrefixCls,
      responsive: isResponsive,
      component: itemComponent,
      invalidate: invalidate
    }; // >>>>> Choice render fun by `renderRawItem`

    var internalRenderItemNode = renderRawItem ? function (item, index) {
      var key = getKey(item, index);
      return /*#__PURE__*/React.createElement(OverflowContext.Provider, {
        key: key,
        value: _objectSpread2$1(_objectSpread2$1({}, itemSharedProps), {}, {
          order: index,
          item: item,
          itemKey: key,
          registerSize: registerSize,
          display: index <= mergedDisplayCount
        })
      }, renderRawItem(item, index));
    } : function (item, index) {
      var key = getKey(item, index);
      return /*#__PURE__*/React.createElement(Item$1, _extends$1({}, itemSharedProps, {
        order: index,
        key: key,
        item: item,
        renderItem: mergedRenderItem,
        itemKey: key,
        registerSize: registerSize,
        display: index <= mergedDisplayCount
      }));
    }; // >>>>> Rest node

    var restNode;
    var restContextProps = {
      order: displayRest ? mergedDisplayCount : Number.MAX_SAFE_INTEGER,
      className: "".concat(itemPrefixCls, "-rest"),
      registerSize: registerOverflowSize,
      display: displayRest
    };

    if (!renderRawRest) {
      var mergedRenderRest = renderRest || defaultRenderRest;
      restNode = /*#__PURE__*/React.createElement(Item$1, _extends$1({}, itemSharedProps, restContextProps), typeof mergedRenderRest === 'function' ? mergedRenderRest(omittedItems) : mergedRenderRest);
    } else if (renderRawRest) {
      restNode = /*#__PURE__*/React.createElement(OverflowContext.Provider, {
        value: _objectSpread2$1(_objectSpread2$1({}, itemSharedProps), restContextProps)
      }, renderRawRest(omittedItems));
    }

    var overflowNode = /*#__PURE__*/React.createElement(Component, _extends$1({
      className: classnames(!invalidate && prefixCls, className),
      style: style,
      ref: ref
    }, restProps), mergedData.map(internalRenderItemNode), showRest ? restNode : null, suffix && /*#__PURE__*/React.createElement(Item$1, _extends$1({}, itemSharedProps, {
      order: mergedDisplayCount,
      className: "".concat(itemPrefixCls, "-suffix"),
      registerSize: registerSuffixSize,
      display: true,
      style: suffixStyle
    }), suffix));

    if (isResponsive) {
      overflowNode = /*#__PURE__*/React.createElement(ReactResizeObserver, {
        onResize: onOverflowResize
      }, overflowNode);
    }

    return overflowNode;
  }

  var ForwardOverflow = /*#__PURE__*/React.forwardRef(Overflow);
  ForwardOverflow.displayName = 'Overflow';
  ForwardOverflow.Item = RawItem;
  ForwardOverflow.RESPONSIVE = RESPONSIVE;
  ForwardOverflow.INVALIDATE = INVALIDATE; // Convert to generic type

  var Input = function Input(_ref, ref) {
    var _inputNode2, _inputNode2$props;

    var prefixCls = _ref.prefixCls,
        id = _ref.id,
        inputElement = _ref.inputElement,
        disabled = _ref.disabled,
        tabIndex = _ref.tabIndex,
        autoFocus = _ref.autoFocus,
        autoComplete = _ref.autoComplete,
        editable = _ref.editable,
        accessibilityIndex = _ref.accessibilityIndex,
        value = _ref.value,
        maxLength = _ref.maxLength,
        _onKeyDown = _ref.onKeyDown,
        _onMouseDown = _ref.onMouseDown,
        _onChange = _ref.onChange,
        onPaste = _ref.onPaste,
        _onCompositionStart = _ref.onCompositionStart,
        _onCompositionEnd = _ref.onCompositionEnd,
        open = _ref.open,
        attrs = _ref.attrs;
    var inputNode = inputElement || /*#__PURE__*/React.createElement("input", null);
    var _inputNode = inputNode,
        originRef = _inputNode.ref,
        _inputNode$props = _inputNode.props,
        onOriginKeyDown = _inputNode$props.onKeyDown,
        onOriginChange = _inputNode$props.onChange,
        onOriginMouseDown = _inputNode$props.onMouseDown,
        onOriginCompositionStart = _inputNode$props.onCompositionStart,
        onOriginCompositionEnd = _inputNode$props.onCompositionEnd,
        style = _inputNode$props.style;
    inputNode = /*#__PURE__*/React.cloneElement(inputNode, _objectSpread2$1(_objectSpread2$1({
      id: id,
      ref: composeRef(ref, originRef),
      disabled: disabled,
      tabIndex: tabIndex,
      autoComplete: autoComplete || 'off',
      type: 'search',
      autoFocus: autoFocus,
      className: classnames("".concat(prefixCls, "-selection-search-input"), (_inputNode2 = inputNode) === null || _inputNode2 === void 0 ? void 0 : (_inputNode2$props = _inputNode2.props) === null || _inputNode2$props === void 0 ? void 0 : _inputNode2$props.className),
      style: _objectSpread2$1(_objectSpread2$1({}, style), {}, {
        opacity: editable ? null : 0
      }),
      role: 'combobox',
      'aria-expanded': open,
      'aria-haspopup': 'listbox',
      'aria-owns': "".concat(id, "_list"),
      'aria-autocomplete': 'list',
      'aria-controls': "".concat(id, "_list"),
      'aria-activedescendant': "".concat(id, "_list_").concat(accessibilityIndex)
    }, attrs), {}, {
      value: editable ? value : '',
      maxLength: maxLength,
      readOnly: !editable,
      unselectable: !editable ? 'on' : null,
      onKeyDown: function onKeyDown(event) {
        _onKeyDown(event);

        if (onOriginKeyDown) {
          onOriginKeyDown(event);
        }
      },
      onMouseDown: function onMouseDown(event) {
        _onMouseDown(event);

        if (onOriginMouseDown) {
          onOriginMouseDown(event);
        }
      },
      onChange: function onChange(event) {
        _onChange(event);

        if (onOriginChange) {
          onOriginChange(event);
        }
      },
      onCompositionStart: function onCompositionStart(event) {
        _onCompositionStart(event);

        if (onOriginCompositionStart) {
          onOriginCompositionStart(event);
        }
      },
      onCompositionEnd: function onCompositionEnd(event) {
        _onCompositionEnd(event);

        if (onOriginCompositionEnd) {
          onOriginCompositionEnd(event);
        }
      },
      onPaste: onPaste
    }));
    return inputNode;
  };

  var RefInput = /*#__PURE__*/React.forwardRef(Input);
  RefInput.displayName = 'Input';

  /* eslint-disable react-hooks/rules-of-hooks */
  /**
   * Wrap `React.useLayoutEffect` which will not throw warning message in test env
   */

  function useLayoutEffect(effect, deps) {
    // Never happen in test env
    if (isBrowserClient) {
      /* istanbul ignore next */
      React.useLayoutEffect(effect, deps);
    } else {
      React.useEffect(effect, deps);
    }
  }
  /* eslint-enable */

  var onPreventMouseDown = function onPreventMouseDown(event) {
    event.preventDefault();
    event.stopPropagation();
  };

  var SelectSelector = function SelectSelector(props) {
    var id = props.id,
        prefixCls = props.prefixCls,
        values = props.values,
        open = props.open,
        searchValue = props.searchValue,
        inputRef = props.inputRef,
        placeholder = props.placeholder,
        disabled = props.disabled,
        mode = props.mode,
        showSearch = props.showSearch,
        autoFocus = props.autoFocus,
        autoComplete = props.autoComplete,
        accessibilityIndex = props.accessibilityIndex,
        tabIndex = props.tabIndex,
        removeIcon = props.removeIcon,
        maxTagCount = props.maxTagCount,
        maxTagTextLength = props.maxTagTextLength,
        _props$maxTagPlacehol = props.maxTagPlaceholder,
        maxTagPlaceholder = _props$maxTagPlacehol === void 0 ? function (omittedValues) {
      return "+ ".concat(omittedValues.length, " ...");
    } : _props$maxTagPlacehol,
        tagRender = props.tagRender,
        onToggleOpen = props.onToggleOpen,
        onSelect = props.onSelect,
        onInputChange = props.onInputChange,
        onInputPaste = props.onInputPaste,
        onInputKeyDown = props.onInputKeyDown,
        onInputMouseDown = props.onInputMouseDown,
        onInputCompositionStart = props.onInputCompositionStart,
        onInputCompositionEnd = props.onInputCompositionEnd;
    var measureRef = React.useRef(null);

    var _useState = React.useState(0),
        _useState2 = _slicedToArray$1(_useState, 2),
        inputWidth = _useState2[0],
        setInputWidth = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray$1(_useState3, 2),
        focused = _useState4[0],
        setFocused = _useState4[1];

    var selectionPrefixCls = "".concat(prefixCls, "-selection"); // ===================== Search ======================

    var inputValue = open || mode === 'tags' ? searchValue : '';
    var inputEditable = mode === 'tags' || showSearch && (open || focused); // We measure width and set to the input immediately

    useLayoutEffect(function () {
      setInputWidth(measureRef.current.scrollWidth);
    }, [inputValue]); // ===================== Render ======================
    // >>> Render Selector Node. Includes Item & Rest

    function defaultRenderSelector(title, content, itemDisabled, closable, onClose) {
      return /*#__PURE__*/React.createElement("span", {
        className: classnames("".concat(selectionPrefixCls, "-item"), _defineProperty$1({}, "".concat(selectionPrefixCls, "-item-disabled"), itemDisabled)),
        title: typeof title === 'string' || typeof title === 'number' ? title.toString() : undefined
      }, /*#__PURE__*/React.createElement("span", {
        className: "".concat(selectionPrefixCls, "-item-content")
      }, content), closable && /*#__PURE__*/React.createElement(TransBtn, {
        className: "".concat(selectionPrefixCls, "-item-remove"),
        onMouseDown: onPreventMouseDown,
        onClick: onClose,
        customizeIcon: removeIcon
      }, "\xD7"));
    }

    function customizeRenderSelector(value, content, itemDisabled, closable, onClose) {
      var onMouseDown = function onMouseDown(e) {
        onPreventMouseDown(e);
        onToggleOpen(!open);
      };

      return /*#__PURE__*/React.createElement("span", {
        onMouseDown: onMouseDown
      }, tagRender({
        label: content,
        value: value,
        disabled: itemDisabled,
        closable: closable,
        onClose: onClose
      }));
    }

    function renderItem(_ref) {
      var itemDisabled = _ref.disabled,
          label = _ref.label,
          value = _ref.value;
      var closable = !disabled && !itemDisabled;
      var displayLabel = label;

      if (typeof maxTagTextLength === 'number') {
        if (typeof label === 'string' || typeof label === 'number') {
          var strLabel = String(displayLabel);

          if (strLabel.length > maxTagTextLength) {
            displayLabel = "".concat(strLabel.slice(0, maxTagTextLength), "...");
          }
        }
      }

      var onClose = function onClose(event) {
        if (event) event.stopPropagation();
        onSelect(value, {
          selected: false
        });
      };

      return typeof tagRender === 'function' ? customizeRenderSelector(value, displayLabel, itemDisabled, closable, onClose) : defaultRenderSelector(label, displayLabel, itemDisabled, closable, onClose);
    }

    function renderRest(omittedValues) {
      var content = typeof maxTagPlaceholder === 'function' ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
      return defaultRenderSelector(content, content, false);
    } // >>> Input Node


    var inputNode = /*#__PURE__*/React.createElement("div", {
      className: "".concat(selectionPrefixCls, "-search"),
      style: {
        width: inputWidth
      },
      onFocus: function onFocus() {
        setFocused(true);
      },
      onBlur: function onBlur() {
        setFocused(false);
      }
    }, /*#__PURE__*/React.createElement(RefInput, {
      ref: inputRef,
      open: open,
      prefixCls: prefixCls,
      id: id,
      inputElement: null,
      disabled: disabled,
      autoFocus: autoFocus,
      autoComplete: autoComplete,
      editable: inputEditable,
      accessibilityIndex: accessibilityIndex,
      value: inputValue,
      onKeyDown: onInputKeyDown,
      onMouseDown: onInputMouseDown,
      onChange: onInputChange,
      onPaste: onInputPaste,
      onCompositionStart: onInputCompositionStart,
      onCompositionEnd: onInputCompositionEnd,
      tabIndex: tabIndex,
      attrs: pickAttrs(props, true)
    }), /*#__PURE__*/React.createElement("span", {
      ref: measureRef,
      className: "".concat(selectionPrefixCls, "-search-mirror"),
      "aria-hidden": true
    }, inputValue, "\xA0")); // >>> Selections

    var selectionNode = /*#__PURE__*/React.createElement(ForwardOverflow, {
      prefixCls: "".concat(selectionPrefixCls, "-overflow"),
      data: values,
      renderItem: renderItem,
      renderRest: renderRest,
      suffix: inputNode,
      itemKey: "key",
      maxCount: maxTagCount
    });
    return /*#__PURE__*/React.createElement(React.Fragment, null, selectionNode, !values.length && !inputValue && /*#__PURE__*/React.createElement("span", {
      className: "".concat(selectionPrefixCls, "-placeholder")
    }, placeholder));
  };

  var SingleSelector = function SingleSelector(props) {
    var inputElement = props.inputElement,
        prefixCls = props.prefixCls,
        id = props.id,
        inputRef = props.inputRef,
        disabled = props.disabled,
        autoFocus = props.autoFocus,
        autoComplete = props.autoComplete,
        accessibilityIndex = props.accessibilityIndex,
        mode = props.mode,
        open = props.open,
        values = props.values,
        placeholder = props.placeholder,
        tabIndex = props.tabIndex,
        showSearch = props.showSearch,
        searchValue = props.searchValue,
        activeValue = props.activeValue,
        maxLength = props.maxLength,
        onInputKeyDown = props.onInputKeyDown,
        onInputMouseDown = props.onInputMouseDown,
        onInputChange = props.onInputChange,
        onInputPaste = props.onInputPaste,
        onInputCompositionStart = props.onInputCompositionStart,
        onInputCompositionEnd = props.onInputCompositionEnd;

    var _React$useState = React.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        inputChanged = _React$useState2[0],
        setInputChanged = _React$useState2[1];

    var combobox = mode === 'combobox';
    var inputEditable = combobox || showSearch;
    var item = values[0];
    var inputValue = searchValue || '';

    if (combobox && activeValue && !inputChanged) {
      inputValue = activeValue;
    }

    React.useEffect(function () {
      if (combobox) {
        setInputChanged(false);
      }
    }, [combobox, activeValue]); // Not show text when closed expect combobox mode

    var hasTextInput = mode !== 'combobox' && !open ? false : !!inputValue;
    var title = item && (typeof item.label === 'string' || typeof item.label === 'number') ? item.label.toString() : undefined;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-selection-search")
    }, /*#__PURE__*/React.createElement(RefInput, {
      ref: inputRef,
      prefixCls: prefixCls,
      id: id,
      open: open,
      inputElement: inputElement,
      disabled: disabled,
      autoFocus: autoFocus,
      autoComplete: autoComplete,
      editable: inputEditable,
      accessibilityIndex: accessibilityIndex,
      value: inputValue,
      onKeyDown: onInputKeyDown,
      onMouseDown: onInputMouseDown,
      onChange: function onChange(e) {
        setInputChanged(true);
        onInputChange(e);
      },
      onPaste: onInputPaste,
      onCompositionStart: onInputCompositionStart,
      onCompositionEnd: onInputCompositionEnd,
      tabIndex: tabIndex,
      attrs: pickAttrs(props, true),
      maxLength: combobox ? maxLength : undefined
    })), !combobox && item && !hasTextInput && /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-selection-item"),
      title: title
    }, item.label), !item && !hasTextInput && /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-selection-placeholder")
    }, placeholder));
  };

  /**
   * Locker return cached mark.
   * If set to `true`, will return `true` in a short time even if set `false`.
   * If set to `false` and then set to `true`, will change to `true`.
   * And after time duration, it will back to `null` automatically.
   */

  function useLock() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 250;
    var lockRef = React.useRef(null);
    var timeoutRef = React.useRef(null); // Clean up

    React.useEffect(function () {
      return function () {
        window.clearTimeout(timeoutRef.current);
      };
    }, []);

    function doLock(locked) {
      if (locked || lockRef.current === null) {
        lockRef.current = locked;
      }

      window.clearTimeout(timeoutRef.current);
      timeoutRef.current = window.setTimeout(function () {
        lockRef.current = null;
      }, duration);
    }

    return [function () {
      return lockRef.current;
    }, doLock];
  }

  var Selector = function Selector(props, ref) {
    var inputRef = React.useRef(null);
    var compositionStatusRef = React.useRef(false);
    var prefixCls = props.prefixCls,
        multiple = props.multiple,
        open = props.open,
        mode = props.mode,
        showSearch = props.showSearch,
        tokenWithEnter = props.tokenWithEnter,
        onSearch = props.onSearch,
        onSearchSubmit = props.onSearchSubmit,
        onToggleOpen = props.onToggleOpen,
        onInputKeyDown = props.onInputKeyDown,
        domRef = props.domRef; // ======================= Ref =======================

    React.useImperativeHandle(ref, function () {
      return {
        focus: function focus() {
          inputRef.current.focus();
        },
        blur: function blur() {
          inputRef.current.blur();
        }
      };
    }); // ====================== Input ======================

    var _useLock = useLock(0),
        _useLock2 = _slicedToArray$1(_useLock, 2),
        getInputMouseDown = _useLock2[0],
        setInputMouseDown = _useLock2[1];

    var onInternalInputKeyDown = function onInternalInputKeyDown(event) {
      var which = event.which;

      if (which === KeyCode.UP || which === KeyCode.DOWN) {
        event.preventDefault();
      }

      if (onInputKeyDown) {
        onInputKeyDown(event);
      }

      if (which === KeyCode.ENTER && mode === 'tags' && !compositionStatusRef.current && !open) {
        // When menu isn't open, OptionList won't trigger a value change
        // So when enter is pressed, the tag's input value should be emitted here to let selector know
        onSearchSubmit(event.target.value);
      }

      if (![KeyCode.SHIFT, KeyCode.TAB, KeyCode.BACKSPACE, KeyCode.ESC].includes(which)) {
        onToggleOpen(true);
      }
    };
    /**
     * We can not use `findDOMNode` sine it will get warning,
     * have to use timer to check if is input element.
     */


    var onInternalInputMouseDown = function onInternalInputMouseDown() {
      setInputMouseDown(true);
    }; // When paste come, ignore next onChange


    var pastedTextRef = React.useRef(null);

    var triggerOnSearch = function triggerOnSearch(value) {
      if (onSearch(value, true, compositionStatusRef.current) !== false) {
        onToggleOpen(true);
      }
    };

    var onInputCompositionStart = function onInputCompositionStart() {
      compositionStatusRef.current = true;
    };

    var onInputCompositionEnd = function onInputCompositionEnd(e) {
      compositionStatusRef.current = false; // Trigger search again to support `tokenSeparators` with typewriting

      if (mode !== 'combobox') {
        triggerOnSearch(e.target.value);
      }
    };

    var onInputChange = function onInputChange(event) {
      var value = event.target.value; // Pasted text should replace back to origin content

      if (tokenWithEnter && pastedTextRef.current && /[\r\n]/.test(pastedTextRef.current)) {
        // CRLF will be treated as a single space for input element
        var replacedText = pastedTextRef.current.replace(/[\r\n]+$/, '').replace(/\r\n/g, ' ').replace(/[\r\n]/g, ' ');
        value = value.replace(replacedText, pastedTextRef.current);
      }

      pastedTextRef.current = null;
      triggerOnSearch(value);
    };

    var onInputPaste = function onInputPaste(e) {
      var clipboardData = e.clipboardData;
      var value = clipboardData.getData('text');
      pastedTextRef.current = value;
    };

    var onClick = function onClick(_ref) {
      var target = _ref.target;

      if (target !== inputRef.current) {
        // Should focus input if click the selector
        var isIE = document.body.style.msTouchAction !== undefined;

        if (isIE) {
          setTimeout(function () {
            inputRef.current.focus();
          });
        } else {
          inputRef.current.focus();
        }
      }
    };

    var onMouseDown = function onMouseDown(event) {
      var inputMouseDown = getInputMouseDown();

      if (event.target !== inputRef.current && !inputMouseDown) {
        event.preventDefault();
      }

      if (mode !== 'combobox' && (!showSearch || !inputMouseDown) || !open) {
        if (open) {
          onSearch('', true, false);
        }

        onToggleOpen();
      }
    }; // ================= Inner Selector ==================


    var sharedProps = {
      inputRef: inputRef,
      onInputKeyDown: onInternalInputKeyDown,
      onInputMouseDown: onInternalInputMouseDown,
      onInputChange: onInputChange,
      onInputPaste: onInputPaste,
      onInputCompositionStart: onInputCompositionStart,
      onInputCompositionEnd: onInputCompositionEnd
    };
    var selectNode = multiple ? /*#__PURE__*/React.createElement(SelectSelector, _extends$1({}, props, sharedProps)) : /*#__PURE__*/React.createElement(SingleSelector, _extends$1({}, props, sharedProps));
    return /*#__PURE__*/React.createElement("div", {
      ref: domRef,
      className: "".concat(prefixCls, "-selector"),
      onClick: onClick,
      onMouseDown: onMouseDown
    }, selectNode);
  };

  var ForwardSelector = /*#__PURE__*/React.forwardRef(Selector);
  ForwardSelector.displayName = 'Selector';

  function contains(root, n) {
    if (!root) {
      return false;
    }

    return root.contains(n);
  }

  var Portal = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var didUpdate = props.didUpdate,
        getContainer = props.getContainer,
        children = props.children;
    var containerRef = React.useRef(); // Ref return nothing, only for wrapper check exist

    React.useImperativeHandle(ref, function () {
      return {};
    }); // Create container in client side with sync to avoid useEffect not get ref

    var initRef = React.useRef(false);

    if (!initRef.current && canUseDom()) {
      containerRef.current = getContainer();
      initRef.current = true;
    } // [Legacy] Used by `rc-trigger`


    React.useEffect(function () {
      didUpdate === null || didUpdate === void 0 ? void 0 : didUpdate(props);
    });
    React.useEffect(function () {
      return function () {
        var _containerRef$current, _containerRef$current2;

        // [Legacy] This should not be handle by Portal but parent PortalWrapper instead.
        // Since some component use `Portal` directly, we have to keep the logic here.
        (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : (_containerRef$current2 = _containerRef$current.parentNode) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.removeChild(containerRef.current);
      };
    }, []);
    return containerRef.current ? /*#__PURE__*/reactDom.createPortal(children, containerRef.current) : null;
  });

  function isPointsEq(a1, a2, isAlignPoint) {
    if (isAlignPoint) {
      return a1[0] === a2[0];
    }

    return a1[0] === a2[0] && a1[1] === a2[1];
  }

  function getAlignFromPlacement(builtinPlacements, placementStr, align) {
    var baseAlign = builtinPlacements[placementStr] || {};
    return _objectSpread2$1(_objectSpread2$1({}, baseAlign), align);
  }
  function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
    var points = align.points;
    var placements = Object.keys(builtinPlacements);

    for (var i = 0; i < placements.length; i += 1) {
      var placement = placements[i];

      if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) {
        return "".concat(prefixCls, "-placement-").concat(placement);
      }
    }

    return '';
  }

  function getMotion(_ref) {
    var prefixCls = _ref.prefixCls,
        motion = _ref.motion,
        animation = _ref.animation,
        transitionName = _ref.transitionName;

    if (motion) {
      return motion;
    }

    if (animation) {
      return {
        motionName: "".concat(prefixCls, "-").concat(animation)
      };
    }

    if (transitionName) {
      return {
        motionName: transitionName
      };
    }

    return null;
  }

  function Mask(props) {
    var prefixCls = props.prefixCls,
        visible = props.visible,
        zIndex = props.zIndex,
        mask = props.mask,
        maskMotion = props.maskMotion,
        maskAnimation = props.maskAnimation,
        maskTransitionName = props.maskTransitionName;

    if (!mask) {
      return null;
    }

    var motion = {};

    if (maskMotion || maskTransitionName || maskAnimation) {
      motion = _objectSpread2$1({
        motionAppear: true
      }, getMotion({
        motion: maskMotion,
        prefixCls: prefixCls,
        transitionName: maskTransitionName,
        animation: maskAnimation
      }));
    }

    return /*#__PURE__*/React.createElement(CSSMotion, _extends$1({}, motion, {
      visible: visible,
      removeOnLeave: true
    }), function (_ref) {
      var className = _ref.className;
      return /*#__PURE__*/React.createElement("div", {
        style: {
          zIndex: zIndex
        },
        className: classnames("".concat(prefixCls, "-mask"), className)
      });
    });
  }

  var isVisible = (function (element) {
    if (!element) {
      return false;
    }

    if (element.offsetParent) {
      return true;
    }

    if (element.getBBox) {
      var box = element.getBBox();

      if (box.width || box.height) {
        return true;
      }
    }

    if (element.getBoundingClientRect) {
      var _box = element.getBoundingClientRect();

      if (_box.width || _box.height) {
        return true;
      }
    }

    return false;
  });

  function ownKeys$4(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2$2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$4(Object(source), true).forEach(function (key) {
          _defineProperty$5(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$4(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _typeof$5(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof$5 = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof$5 = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof$5(obj);
  }

  function _defineProperty$5(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var vendorPrefix;
  var jsCssMap = {
    Webkit: '-webkit-',
    Moz: '-moz-',
    // IE did it wrong again ...
    ms: '-ms-',
    O: '-o-'
  };

  function getVendorPrefix() {
    if (vendorPrefix !== undefined) {
      return vendorPrefix;
    }

    vendorPrefix = '';
    var style = document.createElement('p').style;
    var testProp = 'Transform';

    for (var key in jsCssMap) {
      if (key + testProp in style) {
        vendorPrefix = key;
      }
    }

    return vendorPrefix;
  }

  function getTransitionName$1() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "TransitionProperty") : 'transitionProperty';
  }

  function getTransformName() {
    return getVendorPrefix() ? "".concat(getVendorPrefix(), "Transform") : 'transform';
  }
  function setTransitionProperty(node, value) {
    var name = getTransitionName$1();

    if (name) {
      node.style[name] = value;

      if (name !== 'transitionProperty') {
        node.style.transitionProperty = value;
      }
    }
  }

  function setTransform(node, value) {
    var name = getTransformName();

    if (name) {
      node.style[name] = value;

      if (name !== 'transform') {
        node.style.transform = value;
      }
    }
  }

  function getTransitionProperty(node) {
    return node.style.transitionProperty || node.style[getTransitionName$1()];
  }
  function getTransformXY(node) {
    var style = window.getComputedStyle(node, null);
    var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

    if (transform && transform !== 'none') {
      var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
      return {
        x: parseFloat(matrix[12] || matrix[4], 0),
        y: parseFloat(matrix[13] || matrix[5], 0)
      };
    }

    return {
      x: 0,
      y: 0
    };
  }
  var matrix2d = /matrix\((.*)\)/;
  var matrix3d = /matrix3d\((.*)\)/;
  function setTransformXY(node, xy) {
    var style = window.getComputedStyle(node, null);
    var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());

    if (transform && transform !== 'none') {
      var arr;
      var match2d = transform.match(matrix2d);

      if (match2d) {
        match2d = match2d[1];
        arr = match2d.split(',').map(function (item) {
          return parseFloat(item, 10);
        });
        arr[4] = xy.x;
        arr[5] = xy.y;
        setTransform(node, "matrix(".concat(arr.join(','), ")"));
      } else {
        var match3d = transform.match(matrix3d)[1];
        arr = match3d.split(',').map(function (item) {
          return parseFloat(item, 10);
        });
        arr[12] = xy.x;
        arr[13] = xy.y;
        setTransform(node, "matrix3d(".concat(arr.join(','), ")"));
      }
    } else {
      setTransform(node, "translateX(".concat(xy.x, "px) translateY(").concat(xy.y, "px) translateZ(0)"));
    }
  }

  var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;
  var getComputedStyleX; // https://stackoverflow.com/a/3485654/3040605

  function forceRelayout(elem) {
    var originalStyle = elem.style.display;
    elem.style.display = 'none';
    elem.offsetHeight; // eslint-disable-line

    elem.style.display = originalStyle;
  }

  function css(el, name, v) {
    var value = v;

    if (_typeof$5(name) === 'object') {
      for (var i in name) {
        if (name.hasOwnProperty(i)) {
          css(el, i, name[i]);
        }
      }

      return undefined;
    }

    if (typeof value !== 'undefined') {
      if (typeof value === 'number') {
        value = "".concat(value, "px");
      }

      el.style[name] = value;
      return undefined;
    }

    return getComputedStyleX(el, name);
  }

  function getClientPosition(elem) {
    var box;
    var x;
    var y;
    var doc = elem.ownerDocument;
    var body = doc.body;
    var docElem = doc && doc.documentElement; // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式

    box = elem.getBoundingClientRect(); // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
    // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
    // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

    x = box.left;
    y = box.top; // In IE, most of the time, 2 extra pixels are added to the top and left
    // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
    // IE6 standards mode, this border can be overridden by setting the
    // document element's border to zero -- thus, we cannot rely on the
    // offset always being 2 pixels.
    // In quirks mode, the offset can be determined by querying the body's
    // clientLeft/clientTop, but in standards mode, it is found by querying
    // the document element's clientLeft/clientTop.  Since we already called
    // getClientBoundingRect we have already forced a reflow, so it is not
    // too expensive just to query them all.
    // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
    // 窗口边框标准是设 documentElement ,quirks 时设置 body
    // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
    // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
    // 标准 ie 下 docElem.clientTop 就是 border-top
    // ie7 html 即窗口边框改变不了。永远为 2
    // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

    x -= docElem.clientLeft || body.clientLeft || 0;
    y -= docElem.clientTop || body.clientTop || 0;
    return {
      left: x,
      top: y
    };
  }

  function getScroll(w, top) {
    var ret = w["page".concat(top ? 'Y' : 'X', "Offset")];
    var method = "scroll".concat(top ? 'Top' : 'Left');

    if (typeof ret !== 'number') {
      var d = w.document; // ie6,7,8 standard mode

      ret = d.documentElement[method];

      if (typeof ret !== 'number') {
        // quirks mode
        ret = d.body[method];
      }
    }

    return ret;
  }

  function getScrollLeft(w) {
    return getScroll(w);
  }

  function getScrollTop(w) {
    return getScroll(w, true);
  }

  function getOffset(el) {
    var pos = getClientPosition(el);
    var doc = el.ownerDocument;
    var w = doc.defaultView || doc.parentWindow;
    pos.left += getScrollLeft(w);
    pos.top += getScrollTop(w);
    return pos;
  }
  /**
   * A crude way of determining if an object is a window
   * @member util
   */


  function isWindow(obj) {
    // must use == for ie8

    /* eslint eqeqeq:0 */
    return obj !== null && obj !== undefined && obj == obj.window;
  }

  function getDocument(node) {
    if (isWindow(node)) {
      return node.document;
    }

    if (node.nodeType === 9) {
      return node;
    }

    return node.ownerDocument;
  }

  function _getComputedStyle(elem, name, cs) {
    var computedStyle = cs;
    var val = '';
    var d = getDocument(elem);
    computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null); // https://github.com/kissyteam/kissy/issues/61

    if (computedStyle) {
      val = computedStyle.getPropertyValue(name) || computedStyle[name];
    }

    return val;
  }

  var _RE_NUM_NO_PX = new RegExp("^(".concat(RE_NUM, ")(?!px)[a-z%]+$"), 'i');

  var RE_POS = /^(top|right|bottom|left)$/;
  var CURRENT_STYLE = 'currentStyle';
  var RUNTIME_STYLE = 'runtimeStyle';
  var LEFT = 'left';
  var PX = 'px';

  function _getComputedStyleIE(elem, name) {
    // currentStyle maybe null
    // http://msdn.microsoft.com/en-us/library/ms535231.aspx
    var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name]; // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
    // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
    // 在 ie 下不对，需要直接用 offset 方式
    // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了
    // From the awesome hack by Dean Edwards
    // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
    // If we're not dealing with a regular pixel number
    // but a number that has a weird ending, we need to convert it to pixels
    // exclude left right for relativity

    if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
      // Remember the original values
      var style = elem.style;
      var left = style[LEFT];
      var rsLeft = elem[RUNTIME_STYLE][LEFT]; // prevent flashing of content

      elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT]; // Put in the new values to get a computed value out

      style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
      ret = style.pixelLeft + PX; // Revert the changed values

      style[LEFT] = left;
      elem[RUNTIME_STYLE][LEFT] = rsLeft;
    }

    return ret === '' ? 'auto' : ret;
  }

  if (typeof window !== 'undefined') {
    getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
  }

  function getOffsetDirection(dir, option) {
    if (dir === 'left') {
      return option.useCssRight ? 'right' : dir;
    }

    return option.useCssBottom ? 'bottom' : dir;
  }

  function oppositeOffsetDirection(dir) {
    if (dir === 'left') {
      return 'right';
    } else if (dir === 'right') {
      return 'left';
    } else if (dir === 'top') {
      return 'bottom';
    } else if (dir === 'bottom') {
      return 'top';
    }
  } // 设置 elem 相对 elem.ownerDocument 的坐标


  function setLeftTop(elem, offset, option) {
    // set position first, in-case top/left are set even on static elem
    if (css(elem, 'position') === 'static') {
      elem.style.position = 'relative';
    }

    var presetH = -999;
    var presetV = -999;
    var horizontalProperty = getOffsetDirection('left', option);
    var verticalProperty = getOffsetDirection('top', option);
    var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
    var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

    if (horizontalProperty !== 'left') {
      presetH = 999;
    }

    if (verticalProperty !== 'top') {
      presetV = 999;
    }

    var originalTransition = '';
    var originalOffset = getOffset(elem);

    if ('left' in offset || 'top' in offset) {
      originalTransition = getTransitionProperty(elem) || '';
      setTransitionProperty(elem, 'none');
    }

    if ('left' in offset) {
      elem.style[oppositeHorizontalProperty] = '';
      elem.style[horizontalProperty] = "".concat(presetH, "px");
    }

    if ('top' in offset) {
      elem.style[oppositeVerticalProperty] = '';
      elem.style[verticalProperty] = "".concat(presetV, "px");
    } // force relayout


    forceRelayout(elem);
    var old = getOffset(elem);
    var originalStyle = {};

    for (var key in offset) {
      if (offset.hasOwnProperty(key)) {
        var dir = getOffsetDirection(key, option);
        var preset = key === 'left' ? presetH : presetV;
        var off = originalOffset[key] - old[key];

        if (dir === key) {
          originalStyle[dir] = preset + off;
        } else {
          originalStyle[dir] = preset - off;
        }
      }
    }

    css(elem, originalStyle); // force relayout

    forceRelayout(elem);

    if ('left' in offset || 'top' in offset) {
      setTransitionProperty(elem, originalTransition);
    }

    var ret = {};

    for (var _key in offset) {
      if (offset.hasOwnProperty(_key)) {
        var _dir = getOffsetDirection(_key, option);

        var _off = offset[_key] - originalOffset[_key];

        if (_key === _dir) {
          ret[_dir] = originalStyle[_dir] + _off;
        } else {
          ret[_dir] = originalStyle[_dir] - _off;
        }
      }
    }

    css(elem, ret);
  }

  function setTransform$1(elem, offset) {
    var originalOffset = getOffset(elem);
    var originalXY = getTransformXY(elem);
    var resultXY = {
      x: originalXY.x,
      y: originalXY.y
    };

    if ('left' in offset) {
      resultXY.x = originalXY.x + offset.left - originalOffset.left;
    }

    if ('top' in offset) {
      resultXY.y = originalXY.y + offset.top - originalOffset.top;
    }

    setTransformXY(elem, resultXY);
  }

  function setOffset(elem, offset, option) {
    if (option.ignoreShake) {
      var oriOffset = getOffset(elem);
      var oLeft = oriOffset.left.toFixed(0);
      var oTop = oriOffset.top.toFixed(0);
      var tLeft = offset.left.toFixed(0);
      var tTop = offset.top.toFixed(0);

      if (oLeft === tLeft && oTop === tTop) {
        return;
      }
    }

    if (option.useCssRight || option.useCssBottom) {
      setLeftTop(elem, offset, option);
    } else if (option.useCssTransform && getTransformName() in document.body.style) {
      setTransform$1(elem, offset);
    } else {
      setLeftTop(elem, offset, option);
    }
  }

  function each(arr, fn) {
    for (var i = 0; i < arr.length; i++) {
      fn(arr[i]);
    }
  }

  function isBorderBoxFn(elem) {
    return getComputedStyleX(elem, 'boxSizing') === 'border-box';
  }

  var BOX_MODELS = ['margin', 'border', 'padding'];
  var CONTENT_INDEX = -1;
  var PADDING_INDEX = 2;
  var BORDER_INDEX = 1;
  var MARGIN_INDEX = 0;

  function swap(elem, options, callback) {
    var old = {};
    var style = elem.style;
    var name; // Remember the old values, and insert the new ones

    for (name in options) {
      if (options.hasOwnProperty(name)) {
        old[name] = style[name];
        style[name] = options[name];
      }
    }

    callback.call(elem); // Revert the old values

    for (name in options) {
      if (options.hasOwnProperty(name)) {
        style[name] = old[name];
      }
    }
  }

  function getPBMWidth(elem, props, which) {
    var value = 0;
    var prop;
    var j;
    var i;

    for (j = 0; j < props.length; j++) {
      prop = props[j];

      if (prop) {
        for (i = 0; i < which.length; i++) {
          var cssProp = void 0;

          if (prop === 'border') {
            cssProp = "".concat(prop).concat(which[i], "Width");
          } else {
            cssProp = prop + which[i];
          }

          value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
        }
      }
    }

    return value;
  }

  var domUtils = {
    getParent: function getParent(element) {
      var parent = element;

      do {
        if (parent.nodeType === 11 && parent.host) {
          parent = parent.host;
        } else {
          parent = parent.parentNode;
        }
      } while (parent && parent.nodeType !== 1 && parent.nodeType !== 9);

      return parent;
    }
  };
  each(['Width', 'Height'], function (name) {
    domUtils["doc".concat(name)] = function (refWin) {
      var d = refWin.document;
      return Math.max( // firefox chrome documentElement.scrollHeight< body.scrollHeight
      // ie standard mode : documentElement.scrollHeight> body.scrollHeight
      d.documentElement["scroll".concat(name)], // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
      d.body["scroll".concat(name)], domUtils["viewport".concat(name)](d));
    };

    domUtils["viewport".concat(name)] = function (win) {
      // pc browser includes scrollbar in window.innerWidth
      var prop = "client".concat(name);
      var doc = win.document;
      var body = doc.body;
      var documentElement = doc.documentElement;
      var documentElementProp = documentElement[prop]; // 标准模式取 documentElement
      // backcompat 取 body

      return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
    };
  });
  /*
   得到元素的大小信息
   @param elem
   @param name
   @param {String} [extra]  'padding' : (css width) + padding
   'border' : (css width) + padding + border
   'margin' : (css width) + padding + border + margin
   */

  function getWH(elem, name, ex) {
    var extra = ex;

    if (isWindow(elem)) {
      return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
    } else if (elem.nodeType === 9) {
      return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
    }

    var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
    var borderBoxValue = name === 'width' ? elem.getBoundingClientRect().width : elem.getBoundingClientRect().height;
    var isBorderBox = isBorderBoxFn(elem);
    var cssBoxValue = 0;

    if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
      borderBoxValue = undefined; // Fall back to computed then un computed css if necessary

      cssBoxValue = getComputedStyleX(elem, name);

      if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
        cssBoxValue = elem.style[name] || 0;
      } // Normalize '', auto, and prepare for extra


      cssBoxValue = parseFloat(cssBoxValue) || 0;
    }

    if (extra === undefined) {
      extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
    }

    var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
    var val = borderBoxValue || cssBoxValue;

    if (extra === CONTENT_INDEX) {
      if (borderBoxValueOrIsBorderBox) {
        return val - getPBMWidth(elem, ['border', 'padding'], which);
      }

      return cssBoxValue;
    } else if (borderBoxValueOrIsBorderBox) {
      if (extra === BORDER_INDEX) {
        return val;
      }

      return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which) : getPBMWidth(elem, ['margin'], which));
    }

    return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which);
  }

  var cssShow = {
    position: 'absolute',
    visibility: 'hidden',
    display: 'block'
  }; // fix #119 : https://github.com/kissyteam/kissy/issues/119

  function getWHIgnoreDisplay() {
    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var val;
    var elem = args[0]; // in case elem is window
    // elem.offsetWidth === undefined

    if (elem.offsetWidth !== 0) {
      val = getWH.apply(undefined, args);
    } else {
      swap(elem, cssShow, function () {
        val = getWH.apply(undefined, args);
      });
    }

    return val;
  }

  each(['width', 'height'], function (name) {
    var first = name.charAt(0).toUpperCase() + name.slice(1);

    domUtils["outer".concat(first)] = function (el, includeMargin) {
      return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
    };

    var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

    domUtils[name] = function (elem, v) {
      var val = v;

      if (val !== undefined) {
        if (elem) {
          var isBorderBox = isBorderBoxFn(elem);

          if (isBorderBox) {
            val += getPBMWidth(elem, ['padding', 'border'], which);
          }

          return css(elem, name, val);
        }

        return undefined;
      }

      return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
    };
  });

  function mix$1(to, from) {
    for (var i in from) {
      if (from.hasOwnProperty(i)) {
        to[i] = from[i];
      }
    }

    return to;
  }

  var utils = {
    getWindow: function getWindow(node) {
      if (node && node.document && node.setTimeout) {
        return node;
      }

      var doc = node.ownerDocument || node;
      return doc.defaultView || doc.parentWindow;
    },
    getDocument: getDocument,
    offset: function offset(el, value, option) {
      if (typeof value !== 'undefined') {
        setOffset(el, value, option || {});
      } else {
        return getOffset(el);
      }
    },
    isWindow: isWindow,
    each: each,
    css: css,
    clone: function clone(obj) {
      var i;
      var ret = {};

      for (i in obj) {
        if (obj.hasOwnProperty(i)) {
          ret[i] = obj[i];
        }
      }

      var overflow = obj.overflow;

      if (overflow) {
        for (i in obj) {
          if (obj.hasOwnProperty(i)) {
            ret.overflow[i] = obj.overflow[i];
          }
        }
      }

      return ret;
    },
    mix: mix$1,
    getWindowScrollLeft: function getWindowScrollLeft(w) {
      return getScrollLeft(w);
    },
    getWindowScrollTop: function getWindowScrollTop(w) {
      return getScrollTop(w);
    },
    merge: function merge() {
      var ret = {};

      for (var i = 0; i < arguments.length; i++) {
        utils.mix(ret, i < 0 || arguments.length <= i ? undefined : arguments[i]);
      }

      return ret;
    },
    viewportWidth: 0,
    viewportHeight: 0
  };
  mix$1(utils, domUtils);

  /**
   * 得到会导致元素显示不全的祖先元素
   */

  var getParent = utils.getParent;

  function getOffsetParent(element) {
    if (utils.isWindow(element) || element.nodeType === 9) {
      return null;
    } // ie 这个也不是完全可行

    /*
     <div style="width: 50px;height: 100px;overflow: hidden">
     <div style="width: 50px;height: 100px;position: relative;" id="d6">
     元素 6 高 100px 宽 50px<br/>
     </div>
     </div>
     */
    // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
    //  In other browsers it only includes elements with position absolute, relative or
    // fixed, not elements with overflow set to auto or scroll.
    //        if (UA.ie && ieMode < 8) {
    //            return element.offsetParent;
    //        }
    // 统一的 offsetParent 方法


    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent;
    var positionStyle = utils.css(element, 'position');
    var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

    if (!skipStatic) {
      return element.nodeName.toLowerCase() === 'html' ? null : getParent(element);
    }

    for (parent = getParent(element); parent && parent !== body && parent.nodeType !== 9; parent = getParent(parent)) {
      positionStyle = utils.css(parent, 'position');

      if (positionStyle !== 'static') {
        return parent;
      }
    }

    return null;
  }

  var getParent$1 = utils.getParent;
  function isAncestorFixed(element) {
    if (utils.isWindow(element) || element.nodeType === 9) {
      return false;
    }

    var doc = utils.getDocument(element);
    var body = doc.body;
    var parent = null;

    for (parent = getParent$1(element); // 修复元素位于 document.documentElement 下导致崩溃问题
    parent && parent !== body && parent !== doc; parent = getParent$1(parent)) {
      var positionStyle = utils.css(parent, 'position');

      if (positionStyle === 'fixed') {
        return true;
      }
    }

    return false;
  }

  /**
   * 获得元素的显示部分的区域
   */

  function getVisibleRectForElement(element, alwaysByViewport) {
    var visibleRect = {
      left: 0,
      right: Infinity,
      top: 0,
      bottom: Infinity
    };
    var el = getOffsetParent(element);
    var doc = utils.getDocument(element);
    var win = doc.defaultView || doc.parentWindow;
    var body = doc.body;
    var documentElement = doc.documentElement; // Determine the size of the visible rect by climbing the dom accounting for
    // all scrollable containers.

    while (el) {
      // clientWidth is zero for inline block elements in ie.
      if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) && // body may have overflow set on it, yet we still get the entire
      // viewport. In some browsers, el.offsetParent may be
      // document.documentElement, so check for that too.
      el !== body && el !== documentElement && utils.css(el, 'overflow') !== 'visible') {
        var pos = utils.offset(el); // add border

        pos.left += el.clientLeft;
        pos.top += el.clientTop;
        visibleRect.top = Math.max(visibleRect.top, pos.top);
        visibleRect.right = Math.min(visibleRect.right, // consider area without scrollBar
        pos.left + el.clientWidth);
        visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
        visibleRect.left = Math.max(visibleRect.left, pos.left);
      } else if (el === body || el === documentElement) {
        break;
      }

      el = getOffsetParent(el);
    } // Set element position to fixed
    // make sure absolute element itself don't affect it's visible area
    // https://github.com/ant-design/ant-design/issues/7601


    var originalPosition = null;

    if (!utils.isWindow(element) && element.nodeType !== 9) {
      originalPosition = element.style.position;
      var position = utils.css(element, 'position');

      if (position === 'absolute') {
        element.style.position = 'fixed';
      }
    }

    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);
    var documentWidth = documentElement.scrollWidth;
    var documentHeight = documentElement.scrollHeight; // scrollXXX on html is sync with body which means overflow: hidden on body gets wrong scrollXXX.
    // We should cut this ourself.

    var bodyStyle = window.getComputedStyle(body);

    if (bodyStyle.overflowX === 'hidden') {
      documentWidth = win.innerWidth;
    }

    if (bodyStyle.overflowY === 'hidden') {
      documentHeight = win.innerHeight;
    } // Reset element position after calculate the visible area


    if (element.style) {
      element.style.position = originalPosition;
    }

    if (alwaysByViewport || isAncestorFixed(element)) {
      // Clip by viewport's size.
      visibleRect.left = Math.max(visibleRect.left, scrollX);
      visibleRect.top = Math.max(visibleRect.top, scrollY);
      visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
    } else {
      // Clip by document's size.
      var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
      visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);
      var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
      visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
    }

    return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
  }

  function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
    var pos = utils.clone(elFuturePos);
    var size = {
      width: elRegion.width,
      height: elRegion.height
    };

    if (overflow.adjustX && pos.left < visibleRect.left) {
      pos.left = visibleRect.left;
    } // Left edge inside and right edge outside viewport, try to resize it.


    if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
      size.width -= pos.left + size.width - visibleRect.right;
    } // Right edge outside viewport, try to move it.


    if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
      // 保证左边界和可视区域左边界对齐
      pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
    } // Top edge outside viewport, try to move it.


    if (overflow.adjustY && pos.top < visibleRect.top) {
      pos.top = visibleRect.top;
    } // Top edge inside and bottom edge outside viewport, try to resize it.


    if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
      size.height -= pos.top + size.height - visibleRect.bottom;
    } // Bottom edge outside viewport, try to move it.


    if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
      // 保证上边界和可视区域上边界对齐
      pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
    }

    return utils.mix(pos, size);
  }

  function getRegion(node) {
    var offset;
    var w;
    var h;

    if (!utils.isWindow(node) && node.nodeType !== 9) {
      offset = utils.offset(node);
      w = utils.outerWidth(node);
      h = utils.outerHeight(node);
    } else {
      var win = utils.getWindow(node);
      offset = {
        left: utils.getWindowScrollLeft(win),
        top: utils.getWindowScrollTop(win)
      };
      w = utils.viewportWidth(win);
      h = utils.viewportHeight(win);
    }

    offset.width = w;
    offset.height = h;
    return offset;
  }

  /**
   * 获取 node 上的 align 对齐点 相对于页面的坐标
   */
  function getAlignOffset(region, align) {
    var V = align.charAt(0);
    var H = align.charAt(1);
    var w = region.width;
    var h = region.height;
    var x = region.left;
    var y = region.top;

    if (V === 'c') {
      y += h / 2;
    } else if (V === 'b') {
      y += h;
    }

    if (H === 'c') {
      x += w / 2;
    } else if (H === 'r') {
      x += w;
    }

    return {
      left: x,
      top: y
    };
  }

  function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
    var p1 = getAlignOffset(refNodeRegion, points[1]);
    var p2 = getAlignOffset(elRegion, points[0]);
    var diff = [p2.left - p1.left, p2.top - p1.top];
    return {
      left: Math.round(elRegion.left - diff[0] + offset[0] - targetOffset[0]),
      top: Math.round(elRegion.top - diff[1] + offset[1] - targetOffset[1])
    };
  }

  /**
   * align dom node flexibly
   * @author yiminghe@gmail.com
   */

  function isFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
  }

  function isFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
  }

  function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
  }

  function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
    return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
  }

  function flip(points, reg, map) {
    var ret = [];
    utils.each(points, function (p) {
      ret.push(p.replace(reg, function (m) {
        return map[m];
      }));
    });
    return ret;
  }

  function flipOffset(offset, index) {
    offset[index] = -offset[index];
    return offset;
  }

  function convertOffset(str, offsetLen) {
    var n;

    if (/%$/.test(str)) {
      n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
    } else {
      n = parseInt(str, 10);
    }

    return n || 0;
  }

  function normalizeOffset(offset, el) {
    offset[0] = convertOffset(offset[0], el.width);
    offset[1] = convertOffset(offset[1], el.height);
  }
  /**
   * @param el
   * @param tgtRegion 参照节点所占的区域: { left, top, width, height }
   * @param align
   */


  function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
    var points = align.points;
    var offset = align.offset || [0, 0];
    var targetOffset = align.targetOffset || [0, 0];
    var overflow = align.overflow;
    var source = align.source || el;
    offset = [].concat(offset);
    targetOffset = [].concat(targetOffset);
    overflow = overflow || {};
    var newOverflowCfg = {};
    var fail = 0;
    var alwaysByViewport = !!(overflow && overflow.alwaysByViewport); // 当前节点可以被放置的显示区域

    var visibleRect = getVisibleRectForElement(source, alwaysByViewport); // 当前节点所占的区域, left/top/width/height

    var elRegion = getRegion(source); // 将 offset 转换成数值，支持百分比

    normalizeOffset(offset, elRegion);
    normalizeOffset(targetOffset, tgtRegion); // 当前节点将要被放置的位置

    var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset); // 当前节点将要所处的区域

    var newElRegion = utils.merge(elRegion, elFuturePos); // 如果可视区域不能完全放置当前节点时允许调整

    if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
      if (overflow.adjustX) {
        // 如果横向不能放下
        if (isFailX(elFuturePos, elRegion, visibleRect)) {
          // 对齐位置反下
          var newPoints = flip(points, /[lr]/gi, {
            l: 'r',
            r: 'l'
          }); // 偏移量也反下

          var newOffset = flipOffset(offset, 0);
          var newTargetOffset = flipOffset(targetOffset, 0);
          var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);

          if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
            fail = 1;
            points = newPoints;
            offset = newOffset;
            targetOffset = newTargetOffset;
          }
        }
      }

      if (overflow.adjustY) {
        // 如果纵向不能放下
        if (isFailY(elFuturePos, elRegion, visibleRect)) {
          // 对齐位置反下
          var _newPoints = flip(points, /[tb]/gi, {
            t: 'b',
            b: 't'
          }); // 偏移量也反下


          var _newOffset = flipOffset(offset, 1);

          var _newTargetOffset = flipOffset(targetOffset, 1);

          var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);

          if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
            fail = 1;
            points = _newPoints;
            offset = _newOffset;
            targetOffset = _newTargetOffset;
          }
        }
      } // 如果失败，重新计算当前节点将要被放置的位置


      if (fail) {
        elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset);
        utils.mix(newElRegion, elFuturePos);
      }

      var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
      var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect); // 检查反下后的位置是否可以放下了，如果仍然放不下：
      // 1. 复原修改过的定位参数

      if (isStillFailX || isStillFailY) {
        var _newPoints2 = points; // 重置对应部分的翻转逻辑

        if (isStillFailX) {
          _newPoints2 = flip(points, /[lr]/gi, {
            l: 'r',
            r: 'l'
          });
        }

        if (isStillFailY) {
          _newPoints2 = flip(points, /[tb]/gi, {
            t: 'b',
            b: 't'
          });
        }

        points = _newPoints2;
        offset = align.offset || [0, 0];
        targetOffset = align.targetOffset || [0, 0];
      } // 2. 只有指定了可以调整当前方向才调整


      newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
      newOverflowCfg.adjustY = overflow.adjustY && isStillFailY; // 确实要调整，甚至可能会调整高度宽度

      if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
        newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
      }
    } // need judge to in case set fixed with in css on height auto element


    if (newElRegion.width !== elRegion.width) {
      utils.css(source, 'width', utils.width(source) + newElRegion.width - elRegion.width);
    }

    if (newElRegion.height !== elRegion.height) {
      utils.css(source, 'height', utils.height(source) + newElRegion.height - elRegion.height);
    } // https://github.com/kissyteam/kissy/issues/190
    // 相对于屏幕位置没变，而 left/top 变了
    // 例如 <div 'relative'><el absolute></div>


    utils.offset(source, {
      left: newElRegion.left,
      top: newElRegion.top
    }, {
      useCssRight: align.useCssRight,
      useCssBottom: align.useCssBottom,
      useCssTransform: align.useCssTransform,
      ignoreShake: align.ignoreShake
    });
    return {
      points: points,
      offset: offset,
      targetOffset: targetOffset,
      overflow: newOverflowCfg
    };
  }
  /**
   *  2012-04-26 yiminghe@gmail.com
   *   - 优化智能对齐算法
   *   - 慎用 resizeXX
   *
   *  2011-07-13 yiminghe@gmail.com note:
   *   - 增加智能对齐，以及大小调整选项
   **/

  function isOutOfVisibleRect(target, alwaysByViewport) {
    var visibleRect = getVisibleRectForElement(target, alwaysByViewport);
    var targetRegion = getRegion(target);
    return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
  }

  function alignElement(el, refNode, align) {
    var target = align.target || refNode;
    var refNodeRegion = getRegion(target);
    var isTargetNotOutOfVisible = !isOutOfVisibleRect(target, align.overflow && align.overflow.alwaysByViewport);
    return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
  }

  alignElement.__getOffsetParent = getOffsetParent;
  alignElement.__getVisibleRectForElement = getVisibleRectForElement;

  /**
   * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.
   * If client position provided, will internal convert to page position.
   */

  function alignPoint(el, tgtPoint, align) {
    var pageX;
    var pageY;
    var doc = utils.getDocument(el);
    var win = doc.defaultView || doc.parentWindow;
    var scrollX = utils.getWindowScrollLeft(win);
    var scrollY = utils.getWindowScrollTop(win);
    var viewportWidth = utils.viewportWidth(win);
    var viewportHeight = utils.viewportHeight(win);

    if ('pageX' in tgtPoint) {
      pageX = tgtPoint.pageX;
    } else {
      pageX = scrollX + tgtPoint.clientX;
    }

    if ('pageY' in tgtPoint) {
      pageY = tgtPoint.pageY;
    } else {
      pageY = scrollY + tgtPoint.clientY;
    }

    var tgtRegion = {
      left: pageX,
      top: pageY,
      width: 0,
      height: 0
    };
    var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight; // Provide default target point

    var points = [align.points[0], 'cc'];
    return doAlign(el, tgtRegion, _objectSpread2$2(_objectSpread2$2({}, align), {}, {
      points: points
    }), pointInView);
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  var eq_1 = eq;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  var _assocIndexOf = assocIndexOf;

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  var _listCacheSet = listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;

  var _ListCache = ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new _ListCache;
    this.size = 0;
  }

  var _stackClear = stackClear;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = _freeGlobal || freeSelf || Function('return this')();

  var _root = root;

  /** Built-in value references. */
  var Symbol$1 = _root.Symbol;

  var _Symbol = Symbol$1;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty$1.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }

  var _objectToString = objectToString;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag$1 && symToStringTag$1 in Object(value))
      ? _getRawTag(value)
      : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$1(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$1;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject_1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = _root['__core-js_shared__'];

  var _coreJsData = coreJsData;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  var _isMasked = isMasked;

  /** Used for built-in method references. */
  var funcProto = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  var _toSource = toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
      objectProto$2 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$2).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject_1(value) || _isMasked(value)) {
      return false;
    }
    var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }

  var _baseIsNative = baseIsNative;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue$3(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue$3;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = _getValue(object, key);
    return _baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative;

  /* Built-in method references that are verified to be native. */
  var Map$1 = _getNative(_root, 'Map');

  var _Map = Map$1;

  /* Built-in method references that are verified to be native. */
  var nativeCreate = _getNative(Object, 'create');

  var _nativeCreate = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$3.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet;

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$4.call(data, key);
  }

  var _hashHas = hashHas;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = _hashClear;
  Hash.prototype['delete'] = _hashDelete;
  Hash.prototype.get = _hashGet;
  Hash.prototype.has = _hashHas;
  Hash.prototype.set = _hashSet;

  var _Hash = Hash;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash,
      'map': new (_Map || _ListCache),
      'string': new _Hash
    };
  }

  var _mapCacheClear = mapCacheClear;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  var _isKeyable = isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  var _getMapData = getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;

  var _MapCache = MapCache;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof _ListCache) {
      var pairs = data.__data__;
      if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new _MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = _stackClear;
  Stack.prototype['delete'] = _stackDelete;
  Stack.prototype.get = _stackGet;
  Stack.prototype.has = _stackHas;
  Stack.prototype.set = _stackSet;

  var _Stack = Stack;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED$2);
    return this;
  }

  var _setCacheAdd = setCacheAdd;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new _MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
  SetCache.prototype.has = _setCacheHas;

  var _SetCache = SetCache;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  var _arraySome = arraySome;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!_arraySome(other, function(othValue, othIndex) {
              if (!_cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays;

  /** Built-in value references. */
  var Uint8Array = _root.Uint8Array;

  var _Uint8Array = Uint8Array;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq_1(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag:
        var convert = _mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
        convert || (convert = _setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$1;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  var _equalByTag = equalByTag;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  var _arrayPush = arrayPush;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  var isArray_1 = isArray;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  var _arrayFilter = arrayFilter;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  var stubArray_1 = stubArray;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return _arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };

  var _getSymbols = getSymbols;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  var _baseTimes = baseTimes;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
  }

  var _baseIsArguments = baseIsArguments;

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$6.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
    return isObjectLike_1(value) && hasOwnProperty$5.call(value, 'callee') &&
      !propertyIsEnumerable$1.call(value, 'callee');
  };

  var isArguments_1 = isArguments;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  var isBuffer_1 = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse_1;

  module.exports = isBuffer;
  });

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  var _isIndex = isIndex;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  var isLength_1 = isLength;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      errorTag$1 = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag$1 = '[object Map]',
      numberTag$1 = '[object Number]',
      objectTag = '[object Object]',
      regexpTag$1 = '[object RegExp]',
      setTag$1 = '[object Set]',
      stringTag$1 = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag$1] = typedArrayTags[boolTag$1] =
  typedArrayTags[dataViewTag$1] = typedArrayTags[dateTag$1] =
  typedArrayTags[errorTag$1] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag$1] = typedArrayTags[numberTag$1] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag$1] =
  typedArrayTags[setTag$1] = typedArrayTags[stringTag$1] =
  typedArrayTags[weakMapTag] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike_1(value) &&
      isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary;

  var _nodeUtil = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && _freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  module.exports = nodeUtil;
  });

  /* Node.js helper references. */
  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

  var isTypedArray_1 = isTypedArray;

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$6.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             _isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

    return value === proto;
  }

  var _isPrototype = isPrototype;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = _overArg(Object.keys, Object);

  var _nativeKeys = nativeKeys;

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeys = baseKeys;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength_1(value.length) && !isFunction_1(value);
  }

  var isArrayLike_1 = isArrayLike;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }

  var keys_1 = keys;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }

  var _getAllKeys = getAllKeys;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
        objProps = _getAllKeys(object),
        objLength = objProps.length,
        othProps = _getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$8.call(other, key))) {
        return false;
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects;

  /* Built-in method references that are verified to be native. */
  var DataView = _getNative(_root, 'DataView');

  var _DataView = DataView;

  /* Built-in method references that are verified to be native. */
  var Promise$1 = _getNative(_root, 'Promise');

  var _Promise = Promise$1;

  /* Built-in method references that are verified to be native. */
  var Set$1 = _getNative(_root, 'Set');

  var _Set = Set$1;

  /* Built-in method references that are verified to be native. */
  var WeakMap$1 = _getNative(_root, 'WeakMap');

  var _WeakMap = WeakMap$1;

  /** `Object#toString` result references. */
  var mapTag$2 = '[object Map]',
      objectTag$1 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$2 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';

  var dataViewTag$2 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = _toSource(_DataView),
      mapCtorString = _toSource(_Map),
      promiseCtorString = _toSource(_Promise),
      setCtorString = _toSource(_Set),
      weakMapCtorString = _toSource(_WeakMap);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = _baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
      (_Map && getTag(new _Map) != mapTag$2) ||
      (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
      (_Set && getTag(new _Set) != setTag$2) ||
      (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
    getTag = function(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$1 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$2;
          case mapCtorString: return mapTag$2;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$2;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }

  var _getTag = getTag;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      objectTag$2 = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_1(object),
        othIsArr = isArray_1(other),
        objTag = objIsArr ? arrayTag$1 : _getTag(object),
        othTag = othIsArr ? arrayTag$1 : _getTag(other);

    objTag = objTag == argsTag$2 ? objectTag$2 : objTag;
    othTag = othTag == argsTag$2 ? objectTag$2 : othTag;

    var objIsObj = objTag == objectTag$2,
        othIsObj = othTag == objectTag$2,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer_1(object)) {
      if (!isBuffer_1(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new _Stack);
      return (objIsArr || isTypedArray_1(object))
        ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
      var objIsWrapped = objIsObj && hasOwnProperty$9.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$9.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new _Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new _Stack);
    return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
      return value !== value && other !== other;
    }
    return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  var _baseIsEqual = baseIsEqual;

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return _baseIsEqual(value, other);
  }

  var isEqual_1 = isEqual;

  function isSamePoint(prev, next) {
    if (prev === next) return true;
    if (!prev || !next) return false;

    if ('pageX' in next && 'pageY' in next) {
      return prev.pageX === next.pageX && prev.pageY === next.pageY;
    }

    if ('clientX' in next && 'clientY' in next) {
      return prev.clientX === next.clientX && prev.clientY === next.clientY;
    }

    return false;
  }
  function restoreFocus(activeElement, container) {
    // Focus back if is in the container
    if (activeElement !== document.activeElement && contains(container, activeElement) && typeof activeElement.focus === 'function') {
      activeElement.focus();
    }
  }
  function monitorResize(element, callback) {
    var prevWidth = null;
    var prevHeight = null;

    function onResize(_ref) {
      var _ref2 = _slicedToArray$1(_ref, 1),
          target = _ref2[0].target;

      if (!document.documentElement.contains(target)) return;

      var _target$getBoundingCl = target.getBoundingClientRect(),
          width = _target$getBoundingCl.width,
          height = _target$getBoundingCl.height;

      var fixedWidth = Math.floor(width);
      var fixedHeight = Math.floor(height);

      if (prevWidth !== fixedWidth || prevHeight !== fixedHeight) {
        // https://webkit.org/blog/9997/resizeobserver-in-webkit/
        Promise.resolve().then(function () {
          callback({
            width: fixedWidth,
            height: fixedHeight
          });
        });
      }

      prevWidth = fixedWidth;
      prevHeight = fixedHeight;
    }

    var resizeObserver = new index(onResize);

    if (element) {
      resizeObserver.observe(element);
    }

    return function () {
      resizeObserver.disconnect();
    };
  }

  var useBuffer = (function (callback, buffer) {
    var calledRef = React__default['default'].useRef(false);
    var timeoutRef = React__default['default'].useRef(null);

    function cancelTrigger() {
      window.clearTimeout(timeoutRef.current);
    }

    function trigger(force) {
      if (!calledRef.current || force === true) {
        if (callback() === false) {
          // Not delay since callback cancelled self
          return;
        }

        calledRef.current = true;
        cancelTrigger();
        timeoutRef.current = window.setTimeout(function () {
          calledRef.current = false;
        }, buffer);
      } else {
        cancelTrigger();
        timeoutRef.current = window.setTimeout(function () {
          calledRef.current = false;
          trigger();
        }, buffer);
      }
    }

    return [trigger, function () {
      calledRef.current = false;
      cancelTrigger();
    }];
  });

  function getElement(func) {
    if (typeof func !== 'function') return null;
    return func();
  }

  function getPoint(point) {
    if (_typeof$1(point) !== 'object' || !point) return null;
    return point;
  }

  var Align = function Align(_ref, ref) {
    var children = _ref.children,
        disabled = _ref.disabled,
        target = _ref.target,
        align = _ref.align,
        onAlign = _ref.onAlign,
        monitorWindowResize = _ref.monitorWindowResize,
        _ref$monitorBufferTim = _ref.monitorBufferTime,
        monitorBufferTime = _ref$monitorBufferTim === void 0 ? 0 : _ref$monitorBufferTim;
    var cacheRef = React__default['default'].useRef({});
    var nodeRef = React__default['default'].useRef();
    var childNode = React__default['default'].Children.only(children); // ===================== Align ======================
    // We save the props here to avoid closure makes props ood

    var forceAlignPropsRef = React__default['default'].useRef({});
    forceAlignPropsRef.current.disabled = disabled;
    forceAlignPropsRef.current.target = target;
    forceAlignPropsRef.current.align = align;
    forceAlignPropsRef.current.onAlign = onAlign;

    var _useBuffer = useBuffer(function () {
      var _forceAlignPropsRef$c = forceAlignPropsRef.current,
          latestDisabled = _forceAlignPropsRef$c.disabled,
          latestTarget = _forceAlignPropsRef$c.target,
          latestAlign = _forceAlignPropsRef$c.align,
          latestOnAlign = _forceAlignPropsRef$c.onAlign;

      if (!latestDisabled && latestTarget) {
        var source = nodeRef.current;
        var result;
        var element = getElement(latestTarget);
        var point = getPoint(latestTarget);
        cacheRef.current.element = element;
        cacheRef.current.point = point;
        cacheRef.current.align = latestAlign; // IE lose focus after element realign
        // We should record activeElement and restore later

        // IE lose focus after element realign
        // We should record activeElement and restore later
        var _document = document,
            activeElement = _document.activeElement; // We only align when element is visible

        // We only align when element is visible
        if (element && isVisible(element)) {
          result = alignElement(source, element, latestAlign);
        } else if (point) {
          result = alignPoint(source, point, latestAlign);
        }

        restoreFocus(activeElement, source);

        if (latestOnAlign && result) {
          latestOnAlign(source, result);
        }

        return true;
      }

      return false;
    }, monitorBufferTime),
        _useBuffer2 = _slicedToArray$1(_useBuffer, 2),
        _forceAlign = _useBuffer2[0],
        cancelForceAlign = _useBuffer2[1]; // ===================== Effect =====================
    // Listen for target updated


    var resizeMonitor = React__default['default'].useRef({
      cancel: function cancel() {}
    }); // Listen for source updated

    var sourceResizeMonitor = React__default['default'].useRef({
      cancel: function cancel() {}
    });
    React__default['default'].useEffect(function () {
      var element = getElement(target);
      var point = getPoint(target);

      if (nodeRef.current !== sourceResizeMonitor.current.element) {
        sourceResizeMonitor.current.cancel();
        sourceResizeMonitor.current.element = nodeRef.current;
        sourceResizeMonitor.current.cancel = monitorResize(nodeRef.current, _forceAlign);
      }

      if (cacheRef.current.element !== element || !isSamePoint(cacheRef.current.point, point) || !isEqual_1(cacheRef.current.align, align)) {
        _forceAlign(); // Add resize observer


        if (resizeMonitor.current.element !== element) {
          resizeMonitor.current.cancel();
          resizeMonitor.current.element = element;
          resizeMonitor.current.cancel = monitorResize(element, _forceAlign);
        }
      }
    }); // Listen for disabled change

    React__default['default'].useEffect(function () {
      if (!disabled) {
        _forceAlign();
      } else {
        cancelForceAlign();
      }
    }, [disabled]); // Listen for window resize

    var winResizeRef = React__default['default'].useRef(null);
    React__default['default'].useEffect(function () {
      if (monitorWindowResize) {
        if (!winResizeRef.current) {
          winResizeRef.current = addEventListenerWrap(window, 'resize', _forceAlign);
        }
      } else if (winResizeRef.current) {
        winResizeRef.current.remove();
        winResizeRef.current = null;
      }
    }, [monitorWindowResize]); // Clear all if unmount

    React__default['default'].useEffect(function () {
      return function () {
        resizeMonitor.current.cancel();
        sourceResizeMonitor.current.cancel();
        if (winResizeRef.current) winResizeRef.current.remove();
        cancelForceAlign();
      };
    }, []); // ====================== Ref =======================

    React__default['default'].useImperativeHandle(ref, function () {
      return {
        forceAlign: function forceAlign() {
          return _forceAlign(true);
        }
      };
    }); // ===================== Render =====================

    if ( /*#__PURE__*/React__default['default'].isValidElement(childNode)) {
      childNode = /*#__PURE__*/React__default['default'].cloneElement(childNode, {
        ref: composeRef(childNode.ref, nodeRef)
      });
    }

    return childNode;
  };

  var RcAlign = /*#__PURE__*/React__default['default'].forwardRef(Align);
  RcAlign.displayName = 'Align';

  var StatusQueue = ['measure', 'align', null, 'motion'];
  var useVisibleStatus = (function (visible, doMeasure) {
    var _useState = React.useState(null),
        _useState2 = _slicedToArray$1(_useState, 2),
        status = _useState2[0],
        setInternalStatus = _useState2[1];

    var rafRef = React.useRef();
    var destroyRef = React.useRef(false);

    function setStatus(nextStatus) {
      if (!destroyRef.current) {
        setInternalStatus(nextStatus);
      }
    }

    function cancelRaf() {
      wrapperRaf.cancel(rafRef.current);
    }

    function goNextStatus(callback) {
      cancelRaf();
      rafRef.current = wrapperRaf(function () {
        // Only align should be manually trigger
        setStatus(function (prev) {
          switch (status) {
            case 'align':
              return 'motion';

            case 'motion':
              return 'stable';
          }

          return prev;
        });
        callback === null || callback === void 0 ? void 0 : callback();
      });
    } // Init status


    React.useEffect(function () {
      setStatus('measure');
    }, [visible]); // Go next status

    React.useEffect(function () {
      switch (status) {
        case 'measure':
          doMeasure();
          break;
      }

      if (status) {
        rafRef.current = wrapperRaf( /*#__PURE__*/_asyncToGenerator$1( /*#__PURE__*/regenerator.mark(function _callee() {
          var index, nextStatus;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  index = StatusQueue.indexOf(status);
                  nextStatus = StatusQueue[index + 1];

                  if (nextStatus && index !== -1) {
                    setStatus(nextStatus);
                  }

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })));
      }
    }, [status]);
    React.useEffect(function () {
      return function () {
        destroyRef.current = true;
        cancelRaf();
      };
    }, []);
    return [status, goNextStatus];
  });

  var useStretchStyle = (function (stretch) {
    var _React$useState = React.useState({
      width: 0,
      height: 0
    }),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        targetSize = _React$useState2[0],
        setTargetSize = _React$useState2[1];

    function measureStretch(element) {
      setTargetSize({
        width: element.offsetWidth,
        height: element.offsetHeight
      });
    } // Merge stretch style


    var style = React.useMemo(function () {
      var sizeStyle = {};

      if (stretch) {
        var width = targetSize.width,
            height = targetSize.height; // Stretch with target

        if (stretch.indexOf('height') !== -1 && height) {
          sizeStyle.height = height;
        } else if (stretch.indexOf('minHeight') !== -1 && height) {
          sizeStyle.minHeight = height;
        }

        if (stretch.indexOf('width') !== -1 && width) {
          sizeStyle.width = width;
        } else if (stretch.indexOf('minWidth') !== -1 && width) {
          sizeStyle.minWidth = width;
        }
      }

      return sizeStyle;
    }, [stretch, targetSize]);
    return [style, measureStretch];
  });

  var PopupInner = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var visible = props.visible,
        prefixCls = props.prefixCls,
        className = props.className,
        style = props.style,
        children = props.children,
        zIndex = props.zIndex,
        stretch = props.stretch,
        destroyPopupOnHide = props.destroyPopupOnHide,
        forceRender = props.forceRender,
        align = props.align,
        point = props.point,
        getRootDomNode = props.getRootDomNode,
        getClassNameFromAlign = props.getClassNameFromAlign,
        onAlign = props.onAlign,
        onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave,
        onMouseDown = props.onMouseDown,
        onTouchStart = props.onTouchStart;
    var alignRef = React.useRef();
    var elementRef = React.useRef();

    var _useState = React.useState(),
        _useState2 = _slicedToArray$1(_useState, 2),
        alignedClassName = _useState2[0],
        setAlignedClassName = _useState2[1]; // ======================= Measure ========================


    var _useStretchStyle = useStretchStyle(stretch),
        _useStretchStyle2 = _slicedToArray$1(_useStretchStyle, 2),
        stretchStyle = _useStretchStyle2[0],
        measureStretchStyle = _useStretchStyle2[1];

    function doMeasure() {
      if (stretch) {
        measureStretchStyle(getRootDomNode());
      }
    } // ======================== Status ========================


    var _useVisibleStatus = useVisibleStatus(visible, doMeasure),
        _useVisibleStatus2 = _slicedToArray$1(_useVisibleStatus, 2),
        status = _useVisibleStatus2[0],
        goNextStatus = _useVisibleStatus2[1]; // ======================== Aligns ========================


    var prepareResolveRef = React.useRef(); // `target` on `rc-align` can accept as a function to get the bind element or a point.
    // ref: https://www.npmjs.com/package/rc-align

    function getAlignTarget() {
      if (point) {
        return point;
      }

      return getRootDomNode;
    }

    function forceAlign() {
      var _alignRef$current;

      (_alignRef$current = alignRef.current) === null || _alignRef$current === void 0 ? void 0 : _alignRef$current.forceAlign();
    }

    function onInternalAlign(popupDomNode, matchAlign) {
      var nextAlignedClassName = getClassNameFromAlign(matchAlign);

      if (alignedClassName !== nextAlignedClassName) {
        setAlignedClassName(nextAlignedClassName);
      }

      if (status === 'align') {
        // Repeat until not more align needed
        if (alignedClassName !== nextAlignedClassName) {
          Promise.resolve().then(function () {
            forceAlign();
          });
        } else {
          goNextStatus(function () {
            var _prepareResolveRef$cu;

            (_prepareResolveRef$cu = prepareResolveRef.current) === null || _prepareResolveRef$cu === void 0 ? void 0 : _prepareResolveRef$cu.call(prepareResolveRef);
          });
        }

        onAlign === null || onAlign === void 0 ? void 0 : onAlign(popupDomNode, matchAlign);
      }
    } // ======================== Motion ========================


    var motion = _objectSpread2$1({}, getMotion(props));

    ['onAppearEnd', 'onEnterEnd', 'onLeaveEnd'].forEach(function (eventName) {
      var originHandler = motion[eventName];

      motion[eventName] = function (element, event) {
        goNextStatus();
        return originHandler === null || originHandler === void 0 ? void 0 : originHandler(element, event);
      };
    });

    function onShowPrepare() {
      return new Promise(function (resolve) {
        prepareResolveRef.current = resolve;
      });
    } // Go to stable directly when motion not provided


    React.useEffect(function () {
      if (!motion.motionName && status === 'motion') {
        goNextStatus();
      }
    }, [motion.motionName, status]); // ========================= Refs =========================

    React.useImperativeHandle(ref, function () {
      return {
        forceAlign: forceAlign,
        getElement: function getElement() {
          return elementRef.current;
        }
      };
    }); // ======================== Render ========================

    var mergedStyle = _objectSpread2$1(_objectSpread2$1({}, stretchStyle), {}, {
      zIndex: zIndex,
      opacity: status === 'motion' || status === 'stable' || !visible ? undefined : 0,
      pointerEvents: status === 'stable' ? undefined : 'none'
    }, style); // Align status


    var alignDisabled = true;

    if ((align === null || align === void 0 ? void 0 : align.points) && (status === 'align' || status === 'stable')) {
      alignDisabled = false;
    }

    var childNode = children; // Wrapper when multiple children

    if (React.Children.count(children) > 1) {
      childNode = /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, children);
    }

    return /*#__PURE__*/React.createElement(CSSMotion, _extends$1({
      visible: visible,
      ref: elementRef,
      leavedClassName: "".concat(prefixCls, "-hidden")
    }, motion, {
      onAppearPrepare: onShowPrepare,
      onEnterPrepare: onShowPrepare,
      removeOnLeave: destroyPopupOnHide,
      forceRender: forceRender
    }), function (_ref, motionRef) {
      var motionClassName = _ref.className,
          motionStyle = _ref.style;
      var mergedClassName = classnames(prefixCls, className, alignedClassName, motionClassName);
      return /*#__PURE__*/React.createElement(RcAlign, {
        target: getAlignTarget(),
        key: "popup",
        ref: alignRef,
        monitorWindowResize: true,
        disabled: alignDisabled,
        align: align,
        onAlign: onInternalAlign
      }, /*#__PURE__*/React.createElement("div", {
        ref: motionRef,
        className: mergedClassName,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onMouseDownCapture: onMouseDown,
        onTouchStartCapture: onTouchStart,
        style: _objectSpread2$1(_objectSpread2$1({}, motionStyle), mergedStyle)
      }, childNode));
    });
  });
  PopupInner.displayName = 'PopupInner';

  var MobilePopupInner = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var prefixCls = props.prefixCls,
        visible = props.visible,
        zIndex = props.zIndex,
        children = props.children,
        _props$mobile = props.mobile;
    _props$mobile = _props$mobile === void 0 ? {} : _props$mobile;
    var popupClassName = _props$mobile.popupClassName,
        popupStyle = _props$mobile.popupStyle,
        _props$mobile$popupMo = _props$mobile.popupMotion,
        popupMotion = _props$mobile$popupMo === void 0 ? {} : _props$mobile$popupMo,
        popupRender = _props$mobile.popupRender;
    var elementRef = React.useRef(); // ========================= Refs =========================

    React.useImperativeHandle(ref, function () {
      return {
        forceAlign: function forceAlign() {},
        getElement: function getElement() {
          return elementRef.current;
        }
      };
    }); // ======================== Render ========================

    var mergedStyle = _objectSpread2$1({
      zIndex: zIndex
    }, popupStyle);

    var childNode = children; // Wrapper when multiple children

    if (React.Children.count(children) > 1) {
      childNode = /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-content")
      }, children);
    } // Mobile support additional render


    if (popupRender) {
      childNode = popupRender(childNode);
    }

    return /*#__PURE__*/React.createElement(CSSMotion, _extends$1({
      visible: visible,
      ref: elementRef,
      removeOnLeave: true
    }, popupMotion), function (_ref, motionRef) {
      var motionClassName = _ref.className,
          motionStyle = _ref.style;
      var mergedClassName = classnames(prefixCls, popupClassName, motionClassName);
      return /*#__PURE__*/React.createElement("div", {
        ref: motionRef,
        className: mergedClassName,
        style: _objectSpread2$1(_objectSpread2$1({}, motionStyle), mergedStyle)
      }, childNode);
    });
  });
  MobilePopupInner.displayName = 'MobilePopupInner';

  var _excluded$8 = ["visible", "mobile"];
  var Popup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var visible = _ref.visible,
        mobile = _ref.mobile,
        props = _objectWithoutProperties$1(_ref, _excluded$8);

    var _useState = React.useState(visible),
        _useState2 = _slicedToArray$1(_useState, 2),
        innerVisible = _useState2[0],
        serInnerVisible = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray$1(_useState3, 2),
        inMobile = _useState4[0],
        setInMobile = _useState4[1];

    var cloneProps = _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      visible: innerVisible
    }); // We check mobile in visible changed here.
    // And this also delay set `innerVisible` to avoid popup component render flash


    React.useEffect(function () {
      serInnerVisible(visible);

      if (visible && mobile) {
        setInMobile(isMobile());
      }
    }, [visible, mobile]);
    var popupNode = inMobile ? /*#__PURE__*/React.createElement(MobilePopupInner, _extends$1({}, cloneProps, {
      mobile: mobile,
      ref: ref
    })) : /*#__PURE__*/React.createElement(PopupInner, _extends$1({}, cloneProps, {
      ref: ref
    })); // We can use fragment directly but this may failed some selector usage. Keep as origin logic

    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Mask, cloneProps), popupNode);
  });
  Popup.displayName = 'Popup';

  var TriggerContext = /*#__PURE__*/React.createContext(null);

  function noop() {}

  function returnEmptyString() {
    return '';
  }

  function returnDocument(element) {
    if (element) {
      return element.ownerDocument;
    }

    return window.document;
  }

  var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur', 'onContextMenu'];
  /**
   * Internal usage. Do not use in your code since this will be removed.
   */

  function generateTrigger(PortalComponent) {
    var Trigger = /*#__PURE__*/function (_React$Component) {
      _inherits(Trigger, _React$Component);

      var _super = _createSuper(Trigger);

      function Trigger(props) {
        var _this;

        _classCallCheck(this, Trigger);

        _this = _super.call(this, props);
        _this.popupRef = /*#__PURE__*/React.createRef();
        _this.triggerRef = /*#__PURE__*/React.createRef();
        _this.attachId = void 0;
        _this.clickOutsideHandler = void 0;
        _this.touchOutsideHandler = void 0;
        _this.contextMenuOutsideHandler1 = void 0;
        _this.contextMenuOutsideHandler2 = void 0;
        _this.mouseDownTimeout = void 0;
        _this.focusTime = void 0;
        _this.preClickTime = void 0;
        _this.preTouchTime = void 0;
        _this.delayTimer = void 0;
        _this.hasPopupMouseDown = void 0;

        _this.onMouseEnter = function (e) {
          var mouseEnterDelay = _this.props.mouseEnterDelay;

          _this.fireEvents('onMouseEnter', e);

          _this.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
        };

        _this.onMouseMove = function (e) {
          _this.fireEvents('onMouseMove', e);

          _this.setPoint(e);
        };

        _this.onMouseLeave = function (e) {
          _this.fireEvents('onMouseLeave', e);

          _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
        };

        _this.onPopupMouseEnter = function () {
          _this.clearDelayTimer();
        };

        _this.onPopupMouseLeave = function (e) {
          var _this$popupRef$curren;

          // https://github.com/react-component/trigger/pull/13
          // react bug?
          if (e.relatedTarget && !e.relatedTarget.setTimeout && contains((_this$popupRef$curren = _this.popupRef.current) === null || _this$popupRef$curren === void 0 ? void 0 : _this$popupRef$curren.getElement(), e.relatedTarget)) {
            return;
          }

          _this.delaySetPopupVisible(false, _this.props.mouseLeaveDelay);
        };

        _this.onFocus = function (e) {
          _this.fireEvents('onFocus', e); // incase focusin and focusout


          _this.clearDelayTimer();

          if (_this.isFocusToShow()) {
            _this.focusTime = Date.now();

            _this.delaySetPopupVisible(true, _this.props.focusDelay);
          }
        };

        _this.onMouseDown = function (e) {
          _this.fireEvents('onMouseDown', e);

          _this.preClickTime = Date.now();
        };

        _this.onTouchStart = function (e) {
          _this.fireEvents('onTouchStart', e);

          _this.preTouchTime = Date.now();
        };

        _this.onBlur = function (e) {
          _this.fireEvents('onBlur', e);

          _this.clearDelayTimer();

          if (_this.isBlurToHide()) {
            _this.delaySetPopupVisible(false, _this.props.blurDelay);
          }
        };

        _this.onContextMenu = function (e) {
          e.preventDefault();

          _this.fireEvents('onContextMenu', e);

          _this.setPopupVisible(true, e);
        };

        _this.onContextMenuClose = function () {
          if (_this.isContextMenuToShow()) {
            _this.close();
          }
        };

        _this.onClick = function (event) {
          _this.fireEvents('onClick', event); // focus will trigger click


          if (_this.focusTime) {
            var preTime;

            if (_this.preClickTime && _this.preTouchTime) {
              preTime = Math.min(_this.preClickTime, _this.preTouchTime);
            } else if (_this.preClickTime) {
              preTime = _this.preClickTime;
            } else if (_this.preTouchTime) {
              preTime = _this.preTouchTime;
            }

            if (Math.abs(preTime - _this.focusTime) < 20) {
              return;
            }

            _this.focusTime = 0;
          }

          _this.preClickTime = 0;
          _this.preTouchTime = 0; // Only prevent default when all the action is click.
          // https://github.com/ant-design/ant-design/issues/17043
          // https://github.com/ant-design/ant-design/issues/17291

          if (_this.isClickToShow() && (_this.isClickToHide() || _this.isBlurToHide()) && event && event.preventDefault) {
            event.preventDefault();
          }

          var nextVisible = !_this.state.popupVisible;

          if (_this.isClickToHide() && !nextVisible || nextVisible && _this.isClickToShow()) {
            _this.setPopupVisible(!_this.state.popupVisible, event);
          }
        };

        _this.onPopupMouseDown = function () {
          _this.hasPopupMouseDown = true;
          clearTimeout(_this.mouseDownTimeout);
          _this.mouseDownTimeout = window.setTimeout(function () {
            _this.hasPopupMouseDown = false;
          }, 0);

          if (_this.context) {
            var _this$context;

            (_this$context = _this.context).onPopupMouseDown.apply(_this$context, arguments);
          }
        };

        _this.onDocumentClick = function (event) {
          if (_this.props.mask && !_this.props.maskClosable) {
            return;
          }

          var target = event.target;

          var root = _this.getRootDomNode();

          var popupNode = _this.getPopupDomNode();

          if ( // mousedown on the target should also close popup when action is contextMenu.
          // https://github.com/ant-design/ant-design/issues/29853
          (!contains(root, target) || _this.isContextMenuOnly()) && !contains(popupNode, target) && !_this.hasPopupMouseDown) {
            _this.close();
          }
        };

        _this.getRootDomNode = function () {
          var getTriggerDOMNode = _this.props.getTriggerDOMNode;

          if (getTriggerDOMNode) {
            return getTriggerDOMNode(_this.triggerRef.current);
          }

          try {
            var domNode = findDOMNode(_this.triggerRef.current);

            if (domNode) {
              return domNode;
            }
          } catch (err) {// Do nothing
          }

          return reactDom.findDOMNode(_assertThisInitialized(_this));
        };

        _this.getPopupClassNameFromAlign = function (align) {
          var className = [];
          var _this$props = _this.props,
              popupPlacement = _this$props.popupPlacement,
              builtinPlacements = _this$props.builtinPlacements,
              prefixCls = _this$props.prefixCls,
              alignPoint = _this$props.alignPoint,
              getPopupClassNameFromAlign = _this$props.getPopupClassNameFromAlign;

          if (popupPlacement && builtinPlacements) {
            className.push(getAlignPopupClassName(builtinPlacements, prefixCls, align, alignPoint));
          }

          if (getPopupClassNameFromAlign) {
            className.push(getPopupClassNameFromAlign(align));
          }

          return className.join(' ');
        };

        _this.getComponent = function () {
          var _this$props2 = _this.props,
              prefixCls = _this$props2.prefixCls,
              destroyPopupOnHide = _this$props2.destroyPopupOnHide,
              popupClassName = _this$props2.popupClassName,
              onPopupAlign = _this$props2.onPopupAlign,
              popupMotion = _this$props2.popupMotion,
              popupAnimation = _this$props2.popupAnimation,
              popupTransitionName = _this$props2.popupTransitionName,
              popupStyle = _this$props2.popupStyle,
              mask = _this$props2.mask,
              maskAnimation = _this$props2.maskAnimation,
              maskTransitionName = _this$props2.maskTransitionName,
              maskMotion = _this$props2.maskMotion,
              zIndex = _this$props2.zIndex,
              popup = _this$props2.popup,
              stretch = _this$props2.stretch,
              alignPoint = _this$props2.alignPoint,
              mobile = _this$props2.mobile,
              forceRender = _this$props2.forceRender;
          var _this$state = _this.state,
              popupVisible = _this$state.popupVisible,
              point = _this$state.point;

          var align = _this.getPopupAlign();

          var mouseProps = {};

          if (_this.isMouseEnterToShow()) {
            mouseProps.onMouseEnter = _this.onPopupMouseEnter;
          }

          if (_this.isMouseLeaveToHide()) {
            mouseProps.onMouseLeave = _this.onPopupMouseLeave;
          }

          mouseProps.onMouseDown = _this.onPopupMouseDown;
          mouseProps.onTouchStart = _this.onPopupMouseDown;
          return /*#__PURE__*/React.createElement(Popup, _extends$1({
            prefixCls: prefixCls,
            destroyPopupOnHide: destroyPopupOnHide,
            visible: popupVisible,
            point: alignPoint && point,
            className: popupClassName,
            align: align,
            onAlign: onPopupAlign,
            animation: popupAnimation,
            getClassNameFromAlign: _this.getPopupClassNameFromAlign
          }, mouseProps, {
            stretch: stretch,
            getRootDomNode: _this.getRootDomNode,
            style: popupStyle,
            mask: mask,
            zIndex: zIndex,
            transitionName: popupTransitionName,
            maskAnimation: maskAnimation,
            maskTransitionName: maskTransitionName,
            maskMotion: maskMotion,
            ref: _this.popupRef,
            motion: popupMotion,
            mobile: mobile,
            forceRender: forceRender
          }), typeof popup === 'function' ? popup() : popup);
        };

        _this.attachParent = function (popupContainer) {
          wrapperRaf.cancel(_this.attachId);
          var _this$props3 = _this.props,
              getPopupContainer = _this$props3.getPopupContainer,
              getDocument = _this$props3.getDocument;

          var domNode = _this.getRootDomNode();

          var mountNode;

          if (!getPopupContainer) {
            mountNode = getDocument(_this.getRootDomNode()).body;
          } else if (domNode || getPopupContainer.length === 0) {
            // Compatible for legacy getPopupContainer with domNode argument.
            // If no need `domNode` argument, will call directly.
            // https://codesandbox.io/s/eloquent-mclean-ss93m?file=/src/App.js
            mountNode = getPopupContainer(domNode);
          }

          if (mountNode) {
            mountNode.appendChild(popupContainer);
          } else {
            // Retry after frame render in case parent not ready
            _this.attachId = wrapperRaf(function () {
              _this.attachParent(popupContainer);
            });
          }
        };

        _this.getContainer = function () {
          var getDocument = _this.props.getDocument;
          var popupContainer = getDocument(_this.getRootDomNode()).createElement('div'); // Make sure default popup container will never cause scrollbar appearing
          // https://github.com/react-component/trigger/issues/41

          popupContainer.style.position = 'absolute';
          popupContainer.style.top = '0';
          popupContainer.style.left = '0';
          popupContainer.style.width = '100%';

          _this.attachParent(popupContainer);

          return popupContainer;
        };

        _this.setPoint = function (point) {
          var alignPoint = _this.props.alignPoint;
          if (!alignPoint || !point) return;

          _this.setState({
            point: {
              pageX: point.pageX,
              pageY: point.pageY
            }
          });
        };

        _this.handlePortalUpdate = function () {
          if (_this.state.prevPopupVisible !== _this.state.popupVisible) {
            _this.props.afterPopupVisibleChange(_this.state.popupVisible);
          }
        };

        _this.triggerContextValue = {
          onPopupMouseDown: _this.onPopupMouseDown
        };

        var _popupVisible;

        if ('popupVisible' in props) {
          _popupVisible = !!props.popupVisible;
        } else {
          _popupVisible = !!props.defaultPopupVisible;
        }

        _this.state = {
          prevPopupVisible: _popupVisible,
          popupVisible: _popupVisible
        };
        ALL_HANDLERS.forEach(function (h) {
          _this["fire".concat(h)] = function (e) {
            _this.fireEvents(h, e);
          };
        });
        return _this;
      }

      _createClass(Trigger, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.componentDidUpdate();
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          var props = this.props;
          var state = this.state; // We must listen to `mousedown` or `touchstart`, edge case:
          // https://github.com/ant-design/ant-design/issues/5804
          // https://github.com/react-component/calendar/issues/250
          // https://github.com/react-component/trigger/issues/50

          if (state.popupVisible) {
            var currentDocument;

            if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
              currentDocument = props.getDocument(this.getRootDomNode());
              this.clickOutsideHandler = addEventListenerWrap(currentDocument, 'mousedown', this.onDocumentClick);
            } // always hide on mobile


            if (!this.touchOutsideHandler) {
              currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
              this.touchOutsideHandler = addEventListenerWrap(currentDocument, 'touchstart', this.onDocumentClick);
            } // close popup when trigger type contains 'onContextMenu' and document is scrolling.


            if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
              currentDocument = currentDocument || props.getDocument(this.getRootDomNode());
              this.contextMenuOutsideHandler1 = addEventListenerWrap(currentDocument, 'scroll', this.onContextMenuClose);
            } // close popup when trigger type contains 'onContextMenu' and window is blur.


            if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
              this.contextMenuOutsideHandler2 = addEventListenerWrap(window, 'blur', this.onContextMenuClose);
            }

            return;
          }

          this.clearOutsideHandler();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.clearDelayTimer();
          this.clearOutsideHandler();
          clearTimeout(this.mouseDownTimeout);
          wrapperRaf.cancel(this.attachId);
        }
      }, {
        key: "getPopupDomNode",
        value: function getPopupDomNode() {
          var _this$popupRef$curren2;

          // for test
          return ((_this$popupRef$curren2 = this.popupRef.current) === null || _this$popupRef$curren2 === void 0 ? void 0 : _this$popupRef$curren2.getElement()) || null;
        }
      }, {
        key: "getPopupAlign",
        value: function getPopupAlign() {
          var props = this.props;
          var popupPlacement = props.popupPlacement,
              popupAlign = props.popupAlign,
              builtinPlacements = props.builtinPlacements;

          if (popupPlacement && builtinPlacements) {
            return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
          }

          return popupAlign;
        }
      }, {
        key: "setPopupVisible",
        value:
        /**
         * @param popupVisible    Show or not the popup element
         * @param event           SyntheticEvent, used for `pointAlign`
         */
        function setPopupVisible(popupVisible, event) {
          var alignPoint = this.props.alignPoint;
          var prevPopupVisible = this.state.popupVisible;
          this.clearDelayTimer();

          if (prevPopupVisible !== popupVisible) {
            if (!('popupVisible' in this.props)) {
              this.setState({
                popupVisible: popupVisible,
                prevPopupVisible: prevPopupVisible
              });
            }

            this.props.onPopupVisibleChange(popupVisible);
          } // Always record the point position since mouseEnterDelay will delay the show


          if (alignPoint && event && popupVisible) {
            this.setPoint(event);
          }
        }
      }, {
        key: "delaySetPopupVisible",
        value: function delaySetPopupVisible(visible, delayS, event) {
          var _this2 = this;

          var delay = delayS * 1000;
          this.clearDelayTimer();

          if (delay) {
            var point = event ? {
              pageX: event.pageX,
              pageY: event.pageY
            } : null;
            this.delayTimer = window.setTimeout(function () {
              _this2.setPopupVisible(visible, point);

              _this2.clearDelayTimer();
            }, delay);
          } else {
            this.setPopupVisible(visible, event);
          }
        }
      }, {
        key: "clearDelayTimer",
        value: function clearDelayTimer() {
          if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = null;
          }
        }
      }, {
        key: "clearOutsideHandler",
        value: function clearOutsideHandler() {
          if (this.clickOutsideHandler) {
            this.clickOutsideHandler.remove();
            this.clickOutsideHandler = null;
          }

          if (this.contextMenuOutsideHandler1) {
            this.contextMenuOutsideHandler1.remove();
            this.contextMenuOutsideHandler1 = null;
          }

          if (this.contextMenuOutsideHandler2) {
            this.contextMenuOutsideHandler2.remove();
            this.contextMenuOutsideHandler2 = null;
          }

          if (this.touchOutsideHandler) {
            this.touchOutsideHandler.remove();
            this.touchOutsideHandler = null;
          }
        }
      }, {
        key: "createTwoChains",
        value: function createTwoChains(event) {
          var childPros = this.props.children.props;
          var props = this.props;

          if (childPros[event] && props[event]) {
            return this["fire".concat(event)];
          }

          return childPros[event] || props[event];
        }
      }, {
        key: "isClickToShow",
        value: function isClickToShow() {
          var _this$props4 = this.props,
              action = _this$props4.action,
              showAction = _this$props4.showAction;
          return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
        }
      }, {
        key: "isContextMenuOnly",
        value: function isContextMenuOnly() {
          var action = this.props.action;
          return action === 'contextMenu' || action.length === 1 && action[0] === 'contextMenu';
        }
      }, {
        key: "isContextMenuToShow",
        value: function isContextMenuToShow() {
          var _this$props5 = this.props,
              action = _this$props5.action,
              showAction = _this$props5.showAction;
          return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;
        }
      }, {
        key: "isClickToHide",
        value: function isClickToHide() {
          var _this$props6 = this.props,
              action = _this$props6.action,
              hideAction = _this$props6.hideAction;
          return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
        }
      }, {
        key: "isMouseEnterToShow",
        value: function isMouseEnterToShow() {
          var _this$props7 = this.props,
              action = _this$props7.action,
              showAction = _this$props7.showAction;
          return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
        }
      }, {
        key: "isMouseLeaveToHide",
        value: function isMouseLeaveToHide() {
          var _this$props8 = this.props,
              action = _this$props8.action,
              hideAction = _this$props8.hideAction;
          return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
        }
      }, {
        key: "isFocusToShow",
        value: function isFocusToShow() {
          var _this$props9 = this.props,
              action = _this$props9.action,
              showAction = _this$props9.showAction;
          return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
        }
      }, {
        key: "isBlurToHide",
        value: function isBlurToHide() {
          var _this$props10 = this.props,
              action = _this$props10.action,
              hideAction = _this$props10.hideAction;
          return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
        }
      }, {
        key: "forcePopupAlign",
        value: function forcePopupAlign() {
          if (this.state.popupVisible) {
            var _this$popupRef$curren3;

            (_this$popupRef$curren3 = this.popupRef.current) === null || _this$popupRef$curren3 === void 0 ? void 0 : _this$popupRef$curren3.forceAlign();
          }
        }
      }, {
        key: "fireEvents",
        value: function fireEvents(type, e) {
          var childCallback = this.props.children.props[type];

          if (childCallback) {
            childCallback(e);
          }

          var callback = this.props[type];

          if (callback) {
            callback(e);
          }
        }
      }, {
        key: "close",
        value: function close() {
          this.setPopupVisible(false);
        }
      }, {
        key: "render",
        value: function render() {
          var popupVisible = this.state.popupVisible;
          var _this$props11 = this.props,
              children = _this$props11.children,
              forceRender = _this$props11.forceRender,
              alignPoint = _this$props11.alignPoint,
              className = _this$props11.className,
              autoDestroy = _this$props11.autoDestroy;
          var child = React.Children.only(children);
          var newChildProps = {
            key: 'trigger'
          }; // ============================== Visible Handlers ==============================
          // >>> ContextMenu

          if (this.isContextMenuToShow()) {
            newChildProps.onContextMenu = this.onContextMenu;
          } else {
            newChildProps.onContextMenu = this.createTwoChains('onContextMenu');
          } // >>> Click


          if (this.isClickToHide() || this.isClickToShow()) {
            newChildProps.onClick = this.onClick;
            newChildProps.onMouseDown = this.onMouseDown;
            newChildProps.onTouchStart = this.onTouchStart;
          } else {
            newChildProps.onClick = this.createTwoChains('onClick');
            newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
            newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
          } // >>> Hover(enter)


          if (this.isMouseEnterToShow()) {
            newChildProps.onMouseEnter = this.onMouseEnter; // Point align

            if (alignPoint) {
              newChildProps.onMouseMove = this.onMouseMove;
            }
          } else {
            newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
          } // >>> Hover(leave)


          if (this.isMouseLeaveToHide()) {
            newChildProps.onMouseLeave = this.onMouseLeave;
          } else {
            newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
          } // >>> Focus


          if (this.isFocusToShow() || this.isBlurToHide()) {
            newChildProps.onFocus = this.onFocus;
            newChildProps.onBlur = this.onBlur;
          } else {
            newChildProps.onFocus = this.createTwoChains('onFocus');
            newChildProps.onBlur = this.createTwoChains('onBlur');
          } // =================================== Render ===================================


          var childrenClassName = classnames(child && child.props && child.props.className, className);

          if (childrenClassName) {
            newChildProps.className = childrenClassName;
          }

          var cloneProps = _objectSpread2$1({}, newChildProps);

          if (supportRef(child)) {
            cloneProps.ref = composeRef(this.triggerRef, child.ref);
          }

          var trigger = /*#__PURE__*/React.cloneElement(child, cloneProps);
          var portal; // prevent unmounting after it's rendered

          if (popupVisible || this.popupRef.current || forceRender) {
            portal = /*#__PURE__*/React.createElement(PortalComponent, {
              key: "portal",
              getContainer: this.getContainer,
              didUpdate: this.handlePortalUpdate
            }, this.getComponent());
          }

          if (!popupVisible && autoDestroy) {
            portal = null;
          }

          return /*#__PURE__*/React.createElement(TriggerContext.Provider, {
            value: this.triggerContextValue
          }, trigger, portal);
        }
      }], [{
        key: "getDerivedStateFromProps",
        value: function getDerivedStateFromProps(_ref, prevState) {
          var popupVisible = _ref.popupVisible;
          var newState = {};

          if (popupVisible !== undefined && prevState.popupVisible !== popupVisible) {
            newState.popupVisible = popupVisible;
            newState.prevPopupVisible = prevState.popupVisible;
          }

          return newState;
        }
      }]);

      return Trigger;
    }(React.Component);

    Trigger.contextType = TriggerContext;
    Trigger.defaultProps = {
      prefixCls: 'rc-trigger-popup',
      getPopupClassNameFromAlign: returnEmptyString,
      getDocument: returnDocument,
      onPopupVisibleChange: noop,
      afterPopupVisibleChange: noop,
      onPopupAlign: noop,
      popupClassName: '',
      mouseEnterDelay: 0,
      mouseLeaveDelay: 0.1,
      focusDelay: 0,
      blurDelay: 0.15,
      popupStyle: {},
      destroyPopupOnHide: false,
      popupAlign: {},
      defaultPopupVisible: false,
      mask: false,
      maskClosable: true,
      action: [],
      showAction: [],
      hideAction: [],
      autoDestroy: false
    };
    return Trigger;
  }
  var Trigger = generateTrigger(Portal);

  var _excluded$9 = ["prefixCls", "disabled", "visible", "children", "popupElement", "containerWidth", "animation", "transitionName", "dropdownStyle", "dropdownClassName", "direction", "placement", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "getPopupContainer", "empty", "getTriggerDOMNode", "onPopupVisibleChange"];

  var getBuiltInPlacements = function getBuiltInPlacements(dropdownMatchSelectWidth) {
    // Enable horizontal overflow auto-adjustment when a custom dropdown width is provided
    var adjustX = typeof dropdownMatchSelectWidth !== 'number' ? 0 : 1;
    return {
      bottomLeft: {
        points: ['tl', 'bl'],
        offset: [0, 4],
        overflow: {
          adjustX: adjustX,
          adjustY: 1
        }
      },
      bottomRight: {
        points: ['tr', 'br'],
        offset: [0, 4],
        overflow: {
          adjustX: adjustX,
          adjustY: 1
        }
      },
      topLeft: {
        points: ['bl', 'tl'],
        offset: [0, -4],
        overflow: {
          adjustX: adjustX,
          adjustY: 1
        }
      },
      topRight: {
        points: ['br', 'tr'],
        offset: [0, -4],
        overflow: {
          adjustX: adjustX,
          adjustY: 1
        }
      }
    };
  };

  var SelectTrigger = function SelectTrigger(props, ref) {
    var prefixCls = props.prefixCls,
        disabled = props.disabled,
        visible = props.visible,
        children = props.children,
        popupElement = props.popupElement,
        containerWidth = props.containerWidth,
        animation = props.animation,
        transitionName = props.transitionName,
        dropdownStyle = props.dropdownStyle,
        dropdownClassName = props.dropdownClassName,
        _props$direction = props.direction,
        direction = _props$direction === void 0 ? 'ltr' : _props$direction,
        placement = props.placement,
        _props$dropdownMatchS = props.dropdownMatchSelectWidth,
        dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,
        dropdownRender = props.dropdownRender,
        dropdownAlign = props.dropdownAlign,
        getPopupContainer = props.getPopupContainer,
        empty = props.empty,
        getTriggerDOMNode = props.getTriggerDOMNode,
        onPopupVisibleChange = props.onPopupVisibleChange,
        restProps = _objectWithoutProperties$1(props, _excluded$9);

    var dropdownPrefixCls = "".concat(prefixCls, "-dropdown");
    var popupNode = popupElement;

    if (dropdownRender) {
      popupNode = dropdownRender(popupElement);
    }

    var builtInPlacements = React.useMemo(function () {
      return getBuiltInPlacements(dropdownMatchSelectWidth);
    }, [dropdownMatchSelectWidth]); // ===================== Motion ======================

    var mergedTransitionName = animation ? "".concat(dropdownPrefixCls, "-").concat(animation) : transitionName; // ======================= Ref =======================

    var popupRef = React.useRef(null);
    React.useImperativeHandle(ref, function () {
      return {
        getPopupElement: function getPopupElement() {
          return popupRef.current;
        }
      };
    });

    var popupStyle = _objectSpread2$1({
      minWidth: containerWidth
    }, dropdownStyle);

    if (typeof dropdownMatchSelectWidth === 'number') {
      popupStyle.width = dropdownMatchSelectWidth;
    } else if (dropdownMatchSelectWidth) {
      popupStyle.width = containerWidth;
    }

    return /*#__PURE__*/React.createElement(Trigger, _extends$1({}, restProps, {
      showAction: onPopupVisibleChange ? ['click'] : [],
      hideAction: onPopupVisibleChange ? ['click'] : [],
      popupPlacement: placement || (direction === 'rtl' ? 'bottomRight' : 'bottomLeft'),
      builtinPlacements: builtInPlacements,
      prefixCls: dropdownPrefixCls,
      popupTransitionName: mergedTransitionName,
      popup: /*#__PURE__*/React.createElement("div", {
        ref: popupRef
      }, popupNode),
      popupAlign: dropdownAlign,
      popupVisible: visible,
      getPopupContainer: getPopupContainer,
      popupClassName: classnames(dropdownClassName, _defineProperty$1({}, "".concat(dropdownPrefixCls, "-empty"), empty)),
      popupStyle: popupStyle,
      getTriggerDOMNode: getTriggerDOMNode,
      onPopupVisibleChange: onPopupVisibleChange
    }), children);
  };

  var RefSelectTrigger = /*#__PURE__*/React.forwardRef(SelectTrigger);
  RefSelectTrigger.displayName = 'SelectTrigger';

  var INTERNAL_PROPS_MARK = 'RC_SELECT_INTERNAL_PROPS_MARK';

  /**
   * Similar with `useLock`, but this hook will always execute last value.
   * When set to `true`, it will keep `true` for a short time even if `false` is set.
   */

  function useDelayReset() {
    var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

    var _React$useState = React.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        bool = _React$useState2[0],
        setBool = _React$useState2[1];

    var delayRef = React.useRef(null);

    var cancelLatest = function cancelLatest() {
      window.clearTimeout(delayRef.current);
    };

    React.useEffect(function () {
      return cancelLatest;
    }, []);

    var delaySetBool = function delaySetBool(value, callback) {
      cancelLatest();
      delayRef.current = window.setTimeout(function () {
        setBool(value);

        if (callback) {
          callback();
        }
      }, timeout);
    };

    return [bool, delaySetBool, cancelLatest];
  }

  function useSelectTriggerControl(elements, open, triggerOpen) {
    var propsRef = React.useRef(null);
    propsRef.current = {
      open: open,
      triggerOpen: triggerOpen
    };
    React.useEffect(function () {
      function onGlobalMouseDown(event) {
        var target = event.target;

        if (target.shadowRoot && event.composed) {
          target = event.composedPath()[0] || target;
        }

        if (propsRef.current.open && elements().filter(function (element) {
          return element;
        }).every(function (element) {
          return !element.contains(target) && element !== target;
        })) {
          // Should trigger close
          propsRef.current.triggerOpen(false);
        }
      }

      window.addEventListener('mousedown', onGlobalMouseDown);
      return function () {
        return window.removeEventListener('mousedown', onGlobalMouseDown);
      };
    }, []);
  }

  function useCacheDisplayValue(values) {
    var prevValuesRef = React.useRef(values);
    var mergedValues = React.useMemo(function () {
      // Create value - label map
      var valueLabels = new Map();
      prevValuesRef.current.forEach(function (_ref) {
        var value = _ref.value,
            label = _ref.label;

        if (value !== label) {
          valueLabels.set(value, label);
        }
      });
      var resultValues = values.map(function (item) {
        var cacheLabel = valueLabels.get(item.value);

        if (item.isCacheable && cacheLabel) {
          return _objectSpread2$1(_objectSpread2$1({}, item), {}, {
            label: cacheLabel
          });
        }

        return item;
      });
      prevValuesRef.current = resultValues;
      return resultValues;
    }, [values]);
    return mergedValues;
  }

  function useCacheOptions(options) {
    var prevOptionMapRef = React.useRef(null);
    var optionMap = React.useMemo(function () {
      var map = new Map();
      options.forEach(function (item) {
        var value = item.value;
        map.set(value, item);
      });
      return map;
    }, [options]);
    prevOptionMapRef.current = optionMap;

    var getValueOption = function getValueOption(valueList) {
      return valueList.map(function (value) {
        return prevOptionMapRef.current.get(value);
      }).filter(Boolean);
    };

    return getValueOption;
  }

  var _excluded$a = ["prefixCls", "className", "id", "open", "defaultOpen", "options", "children", "mode", "value", "defaultValue", "labelInValue", "showSearch", "inputValue", "searchValue", "filterOption", "filterSort", "optionFilterProp", "autoClearSearchValue", "onSearch", "fieldNames", "allowClear", "clearIcon", "showArrow", "inputIcon", "menuItemSelectedIcon", "disabled", "loading", "defaultActiveFirstOption", "notFoundContent", "optionLabelProp", "backfill", "tabIndex", "getInputElement", "getRawInputElement", "getPopupContainer", "placement", "listHeight", "listItemHeight", "animation", "transitionName", "virtual", "dropdownStyle", "dropdownClassName", "dropdownMatchSelectWidth", "dropdownRender", "dropdownAlign", "showAction", "direction", "tokenSeparators", "tagRender", "onPopupScroll", "onDropdownVisibleChange", "onFocus", "onBlur", "onKeyUp", "onKeyDown", "onMouseDown", "onChange", "onSelect", "onDeselect", "onClear", "internalProps"];
  var DEFAULT_OMIT_PROPS = ['removeIcon', 'placeholder', 'autoFocus', 'maxTagCount', 'maxTagTextLength', 'maxTagPlaceholder', 'choiceTransitionName', 'onInputKeyDown', 'tabIndex'];
  /**
   * This function is in internal usage.
   * Do not use it in your prod env since we may refactor this.
   */

  function generateSelector(config) {
    var defaultPrefixCls = config.prefixCls,
        OptionList = config.components.optionList,
        convertChildrenToData = config.convertChildrenToData,
        flattenOptions = config.flattenOptions,
        getLabeledValue = config.getLabeledValue,
        filterOptions = config.filterOptions,
        isValueDisabled = config.isValueDisabled,
        findValueOption = config.findValueOption,
        warningProps = config.warningProps,
        fillOptionsWithMissingValue = config.fillOptionsWithMissingValue,
        omitDOMProps = config.omitDOMProps; // Use raw define since `React.FC` not support generic

    function Select(props, ref) {
      var _classNames2;

      var _props$prefixCls = props.prefixCls,
          prefixCls = _props$prefixCls === void 0 ? defaultPrefixCls : _props$prefixCls,
          className = props.className,
          id = props.id,
          open = props.open,
          defaultOpen = props.defaultOpen,
          options = props.options,
          children = props.children,
          mode = props.mode,
          value = props.value,
          defaultValue = props.defaultValue,
          labelInValue = props.labelInValue,
          showSearch = props.showSearch,
          inputValue = props.inputValue,
          searchValue = props.searchValue,
          filterOption = props.filterOption,
          filterSort = props.filterSort,
          _props$optionFilterPr = props.optionFilterProp,
          optionFilterProp = _props$optionFilterPr === void 0 ? 'value' : _props$optionFilterPr,
          _props$autoClearSearc = props.autoClearSearchValue,
          autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,
          onSearch = props.onSearch,
          fieldNames = props.fieldNames,
          allowClear = props.allowClear,
          clearIcon = props.clearIcon,
          showArrow = props.showArrow,
          inputIcon = props.inputIcon,
          menuItemSelectedIcon = props.menuItemSelectedIcon,
          disabled = props.disabled,
          loading = props.loading,
          defaultActiveFirstOption = props.defaultActiveFirstOption,
          _props$notFoundConten = props.notFoundContent,
          notFoundContent = _props$notFoundConten === void 0 ? 'Not Found' : _props$notFoundConten,
          optionLabelProp = props.optionLabelProp,
          backfill = props.backfill,
          tabIndex = props.tabIndex,
          getInputElement = props.getInputElement,
          getRawInputElement = props.getRawInputElement,
          getPopupContainer = props.getPopupContainer,
          placement = props.placement,
          _props$listHeight = props.listHeight,
          listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,
          _props$listItemHeight = props.listItemHeight,
          listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,
          animation = props.animation,
          transitionName = props.transitionName,
          virtual = props.virtual,
          dropdownStyle = props.dropdownStyle,
          dropdownClassName = props.dropdownClassName,
          dropdownMatchSelectWidth = props.dropdownMatchSelectWidth,
          dropdownRender = props.dropdownRender,
          dropdownAlign = props.dropdownAlign,
          _props$showAction = props.showAction,
          showAction = _props$showAction === void 0 ? [] : _props$showAction,
          direction = props.direction,
          tokenSeparators = props.tokenSeparators,
          tagRender = props.tagRender,
          onPopupScroll = props.onPopupScroll,
          onDropdownVisibleChange = props.onDropdownVisibleChange,
          onFocus = props.onFocus,
          onBlur = props.onBlur,
          onKeyUp = props.onKeyUp,
          onKeyDown = props.onKeyDown,
          onMouseDown = props.onMouseDown,
          onChange = props.onChange,
          onSelect = props.onSelect,
          onDeselect = props.onDeselect,
          onClear = props.onClear,
          _props$internalProps = props.internalProps,
          internalProps = _props$internalProps === void 0 ? {} : _props$internalProps,
          restProps = _objectWithoutProperties$1(props, _excluded$a);

      var useInternalProps = internalProps.mark === INTERNAL_PROPS_MARK;
      var domProps = omitDOMProps ? omitDOMProps(restProps) : restProps;
      DEFAULT_OMIT_PROPS.forEach(function (prop) {
        delete domProps[prop];
      });
      var containerRef = React.useRef(null);
      var triggerRef = React.useRef(null);
      var selectorRef = React.useRef(null);
      var listRef = React.useRef(null);
      var tokenWithEnter = React.useMemo(function () {
        return (tokenSeparators || []).some(function (tokenSeparator) {
          return ['\n', '\r\n'].includes(tokenSeparator);
        });
      }, [tokenSeparators]);
      /** Used for component focused management */

      var _useDelayReset = useDelayReset(),
          _useDelayReset2 = _slicedToArray$1(_useDelayReset, 3),
          mockFocused = _useDelayReset2[0],
          setMockFocused = _useDelayReset2[1],
          cancelSetMockFocused = _useDelayReset2[2]; // Inner id for accessibility usage. Only work in client side


      var _useState = React.useState(),
          _useState2 = _slicedToArray$1(_useState, 2),
          innerId = _useState2[0],
          setInnerId = _useState2[1];

      React.useEffect(function () {
        setInnerId("rc_select_".concat(getUUID()));
      }, []);
      var mergedId = id || innerId; // optionLabelProp

      var mergedOptionLabelProp = optionLabelProp;

      if (mergedOptionLabelProp === undefined) {
        mergedOptionLabelProp = options ? 'label' : 'children';
      } // labelInValue


      var mergedLabelInValue = mode === 'combobox' ? false : labelInValue;
      var isMultiple = mode === 'tags' || mode === 'multiple';
      var mergedShowSearch = showSearch !== undefined ? showSearch : isMultiple || mode === 'combobox'; // ======================== Mobile ========================

      var _useState3 = React.useState(false),
          _useState4 = _slicedToArray$1(_useState3, 2),
          mobile = _useState4[0],
          setMobile = _useState4[1];

      React.useEffect(function () {
        // Only update on the client side
        setMobile(isMobile());
      }, []); // ============================== Ref ===============================

      var selectorDomRef = React.useRef(null);
      React.useImperativeHandle(ref, function () {
        var _selectorRef$current, _selectorRef$current2, _listRef$current;

        return {
          focus: (_selectorRef$current = selectorRef.current) === null || _selectorRef$current === void 0 ? void 0 : _selectorRef$current.focus,
          blur: (_selectorRef$current2 = selectorRef.current) === null || _selectorRef$current2 === void 0 ? void 0 : _selectorRef$current2.blur,
          scrollTo: (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollTo
        };
      }); // ============================= Value ==============================

      var _useMergedState = useControlledState(defaultValue, {
        value: value
      }),
          _useMergedState2 = _slicedToArray$1(_useMergedState, 2),
          mergedValue = _useMergedState2[0],
          setMergedValue = _useMergedState2[1];
      /** Unique raw values */


      var _useMemo = React.useMemo(function () {
        return toInnerValue(mergedValue, {
          labelInValue: mergedLabelInValue,
          combobox: mode === 'combobox'
        });
      }, [mergedValue, mergedLabelInValue]),
          _useMemo2 = _slicedToArray$1(_useMemo, 2),
          mergedRawValue = _useMemo2[0],
          mergedValueMap = _useMemo2[1];
      /** We cache a set of raw values to speed up check */


      var rawValues = React.useMemo(function () {
        return new Set(mergedRawValue);
      }, [mergedRawValue]); // ============================= Option =============================
      // Set by option list active, it will merge into search input when mode is `combobox`

      var _useState5 = React.useState(null),
          _useState6 = _slicedToArray$1(_useState5, 2),
          activeValue = _useState6[0],
          setActiveValue = _useState6[1];

      var _useState7 = React.useState(''),
          _useState8 = _slicedToArray$1(_useState7, 2),
          innerSearchValue = _useState8[0],
          setInnerSearchValue = _useState8[1];

      var mergedSearchValue = innerSearchValue;

      if (mode === 'combobox' && mergedValue !== undefined) {
        mergedSearchValue = mergedValue;
      } else if (searchValue !== undefined) {
        mergedSearchValue = searchValue;
      } else if (inputValue) {
        mergedSearchValue = inputValue;
      }

      var mergedOptions = React.useMemo(function () {
        var newOptions = options;

        if (newOptions === undefined) {
          newOptions = convertChildrenToData(children);
        }
        /**
         * `tags` should fill un-list item.
         * This is not cool here since TreeSelect do not need this
         */


        if (mode === 'tags' && fillOptionsWithMissingValue) {
          newOptions = fillOptionsWithMissingValue(newOptions, mergedValue, mergedOptionLabelProp, labelInValue);
        }

        return newOptions || [];
      }, [options, children, mode, mergedValue]);
      var mergedFlattenOptions = React.useMemo(function () {
        return flattenOptions(mergedOptions, props);
      }, [mergedOptions]);
      var getValueOption = useCacheOptions(mergedFlattenOptions); // Display options for OptionList

      var displayOptions = React.useMemo(function () {
        if (!mergedSearchValue || !mergedShowSearch) {
          return _toConsumableArray$1(mergedOptions);
        }

        var filteredOptions = filterOptions(mergedSearchValue, mergedOptions, {
          optionFilterProp: optionFilterProp,
          filterOption: mode === 'combobox' && filterOption === undefined ? function () {
            return true;
          } : filterOption
        });

        if (mode === 'tags' && filteredOptions.every(function (opt) {
          return opt[optionFilterProp] !== mergedSearchValue;
        })) {
          filteredOptions.unshift({
            value: mergedSearchValue,
            label: mergedSearchValue,
            key: '__RC_SELECT_TAG_PLACEHOLDER__'
          });
        }

        if (filterSort && Array.isArray(filteredOptions)) {
          return _toConsumableArray$1(filteredOptions).sort(filterSort);
        }

        return filteredOptions;
      }, [mergedOptions, mergedSearchValue, mode, mergedShowSearch, filterSort]);
      var displayFlattenOptions = React.useMemo(function () {
        return flattenOptions(displayOptions, props);
      }, [displayOptions]);
      React.useEffect(function () {
        if (listRef.current && listRef.current.scrollTo) {
          listRef.current.scrollTo(0);
        }
      }, [mergedSearchValue]); // ============================ Selector ============================

      var displayValues = React.useMemo(function () {
        var tmpValues = mergedRawValue.map(function (val) {
          var valueOptions = getValueOption([val]);
          var displayValue = getLabeledValue(val, {
            options: valueOptions,
            prevValueMap: mergedValueMap,
            labelInValue: mergedLabelInValue,
            optionLabelProp: mergedOptionLabelProp
          });
          return _objectSpread2$1(_objectSpread2$1({}, displayValue), {}, {
            disabled: isValueDisabled(val, valueOptions)
          });
        });

        if (!mode && tmpValues.length === 1 && tmpValues[0].value === null && tmpValues[0].label === null) {
          return [];
        }

        return tmpValues;
      }, [mergedValue, mergedOptions, mode]); // Polyfill with cache label

      displayValues = useCacheDisplayValue(displayValues);

      var triggerSelect = function triggerSelect(newValue, isSelect, source) {
        var newValueOption = getValueOption([newValue]);
        var outOption = findValueOption([newValue], newValueOption, {
          props: props
        })[0];

        if (!internalProps.skipTriggerSelect) {
          // Skip trigger `onSelect` or `onDeselect` if configured
          var selectValue = mergedLabelInValue ? getLabeledValue(newValue, {
            options: newValueOption,
            prevValueMap: mergedValueMap,
            labelInValue: mergedLabelInValue,
            optionLabelProp: mergedOptionLabelProp
          }) : newValue;

          if (isSelect && onSelect) {
            onSelect(selectValue, outOption);
          } else if (!isSelect && onDeselect) {
            onDeselect(selectValue, outOption);
          }
        } // Trigger internal event


        if (useInternalProps) {
          if (isSelect && internalProps.onRawSelect) {
            internalProps.onRawSelect(newValue, outOption, source);
          } else if (!isSelect && internalProps.onRawDeselect) {
            internalProps.onRawDeselect(newValue, outOption, source);
          }
        }
      }; // We need cache options here in case user update the option list


      var _useState9 = React.useState([]),
          _useState10 = _slicedToArray$1(_useState9, 2),
          prevValueOptions = _useState10[0],
          setPrevValueOptions = _useState10[1];

      var triggerChange = function triggerChange(newRawValues) {
        if (useInternalProps && internalProps.skipTriggerChange) {
          return;
        }

        var newRawValuesOptions = getValueOption(newRawValues);
        var outValues = toOuterValues(Array.from(newRawValues), {
          labelInValue: mergedLabelInValue,
          options: newRawValuesOptions,
          getLabeledValue: getLabeledValue,
          prevValueMap: mergedValueMap,
          optionLabelProp: mergedOptionLabelProp
        });
        var outValue = isMultiple ? outValues : outValues[0]; // Skip trigger if prev & current value is both empty

        if (onChange && (mergedRawValue.length !== 0 || outValues.length !== 0)) {
          var outOptions = findValueOption(newRawValues, newRawValuesOptions, {
            prevValueOptions: prevValueOptions,
            props: props
          }); // We will cache option in case it removed by ajax

          setPrevValueOptions(outOptions.map(function (option, index) {
            var clone = _objectSpread2$1({}, option);

            Object.defineProperty(clone, '_INTERNAL_OPTION_VALUE_', {
              get: function get() {
                return newRawValues[index];
              }
            });
            return clone;
          }));
          onChange(outValue, isMultiple ? outOptions : outOptions[0]);
        }

        setMergedValue(outValue);
      };

      var onInternalSelect = function onInternalSelect(newValue, _ref) {
        var selected = _ref.selected,
            source = _ref.source;

        if (disabled) {
          return;
        }

        var newRawValue;

        if (isMultiple) {
          newRawValue = new Set(mergedRawValue);

          if (selected) {
            newRawValue.add(newValue);
          } else {
            newRawValue.delete(newValue);
          }
        } else {
          newRawValue = new Set();
          newRawValue.add(newValue);
        } // Multiple always trigger change and single should change if value changed


        if (isMultiple || !isMultiple && Array.from(mergedRawValue)[0] !== newValue) {
          triggerChange(Array.from(newRawValue));
        } // Trigger `onSelect`. Single mode always trigger select


        triggerSelect(newValue, !isMultiple || selected, source); // Clean search value if single or configured

        if (mode === 'combobox') {
          setInnerSearchValue(String(newValue));
          setActiveValue('');
        } else if (!isMultiple || autoClearSearchValue) {
          setInnerSearchValue('');
          setActiveValue('');
        }
      };

      var onInternalOptionSelect = function onInternalOptionSelect(newValue, info) {
        onInternalSelect(newValue, _objectSpread2$1(_objectSpread2$1({}, info), {}, {
          source: 'option'
        }));
      };

      var onInternalSelectionSelect = function onInternalSelectionSelect(newValue, info) {
        onInternalSelect(newValue, _objectSpread2$1(_objectSpread2$1({}, info), {}, {
          source: 'selection'
        }));
      }; // ============================= Input ==============================
      // Only works in `combobox`


      var customizeInputElement = mode === 'combobox' && typeof getInputElement === 'function' && getInputElement() || null; // Used for customize replacement for `rc-cascader`

      var customizeRawInputElement = typeof getRawInputElement === 'function' && getRawInputElement(); // ============================== Open ==============================

      var _useMergedState3 = useControlledState(undefined, {
        defaultValue: defaultOpen,
        value: open
      }),
          _useMergedState4 = _slicedToArray$1(_useMergedState3, 2),
          innerOpen = _useMergedState4[0],
          setInnerOpen = _useMergedState4[1];

      var mergedOpen = innerOpen; // Not trigger `open` in `combobox` when `notFoundContent` is empty

      var emptyListContent = !notFoundContent && !displayOptions.length;

      if (disabled || emptyListContent && mergedOpen && mode === 'combobox') {
        mergedOpen = false;
      }

      var triggerOpen = emptyListContent ? false : mergedOpen;

      var onToggleOpen = function onToggleOpen(newOpen) {
        var nextOpen = newOpen !== undefined ? newOpen : !mergedOpen;

        if (innerOpen !== nextOpen && !disabled) {
          setInnerOpen(nextOpen);

          if (onDropdownVisibleChange) {
            onDropdownVisibleChange(nextOpen);
          }
        }
      }; // Used for raw custom input trigger


      var onTriggerVisibleChange;

      if (customizeRawInputElement) {
        onTriggerVisibleChange = function onTriggerVisibleChange(newOpen) {
          onToggleOpen(newOpen);
        };
      }

      useSelectTriggerControl(function () {
        var _triggerRef$current;

        return [containerRef.current, (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.getPopupElement()];
      }, triggerOpen, onToggleOpen); // ============================= Search =============================

      var triggerSearch = function triggerSearch(searchText, fromTyping, isCompositing) {
        var ret = true;
        var newSearchText = searchText;
        setActiveValue(null); // Check if match the `tokenSeparators`

        var patchLabels = isCompositing ? null : getSeparatedContent(searchText, tokenSeparators);
        var patchRawValues = patchLabels;

        if (mode === 'combobox') {
          // Only typing will trigger onChange
          if (fromTyping) {
            triggerChange([newSearchText]);
          }
        } else if (patchLabels) {
          newSearchText = '';

          if (mode !== 'tags') {
            patchRawValues = patchLabels.map(function (label) {
              var item = mergedFlattenOptions.find(function (_ref2) {
                var data = _ref2.data;
                return data[mergedOptionLabelProp] === label;
              });
              return item ? item.data.value : null;
            }).filter(function (val) {
              return val !== null;
            });
          }

          var newRawValues = Array.from(new Set([].concat(_toConsumableArray$1(mergedRawValue), _toConsumableArray$1(patchRawValues))));
          triggerChange(newRawValues);
          newRawValues.forEach(function (newRawValue) {
            triggerSelect(newRawValue, true, 'input');
          }); // Should close when paste finish

          onToggleOpen(false); // Tell Selector that break next actions

          ret = false;
        }

        setInnerSearchValue(newSearchText);

        if (onSearch && mergedSearchValue !== newSearchText) {
          onSearch(newSearchText);
        }

        return ret;
      }; // Only triggered when menu is closed & mode is tags
      // If menu is open, OptionList will take charge
      // If mode isn't tags, press enter is not meaningful when you can't see any option


      var onSearchSubmit = function onSearchSubmit(searchText) {
        // prevent empty tags from appearing when you click the Enter button
        if (!searchText || !searchText.trim()) {
          return;
        }

        var newRawValues = Array.from(new Set([].concat(_toConsumableArray$1(mergedRawValue), [searchText])));
        triggerChange(newRawValues);
        newRawValues.forEach(function (newRawValue) {
          triggerSelect(newRawValue, true, 'input');
        });
        setInnerSearchValue('');
      }; // Close dropdown & remove focus state when disabled change


      React.useEffect(function () {
        if (innerOpen && disabled) {
          setInnerOpen(false);
        }

        if (disabled) {
          setMockFocused(false);
        }
      }, [disabled]); // Close will clean up single mode search text

      React.useEffect(function () {
        if (!mergedOpen && !isMultiple && mode !== 'combobox') {
          triggerSearch('', false, false);
        }
      }, [mergedOpen]); // ============================ Keyboard ============================

      /**
       * We record input value here to check if can press to clean up by backspace
       * - null: Key is not down, this is reset by key up
       * - true: Search text is empty when first time backspace down
       * - false: Search text is not empty when first time backspace down
       */

      var _useLock = useLock(),
          _useLock2 = _slicedToArray$1(_useLock, 2),
          getClearLock = _useLock2[0],
          setClearLock = _useLock2[1]; // KeyDown


      var onInternalKeyDown = function onInternalKeyDown(event) {
        var clearLock = getClearLock();
        var which = event.which;

        if (which === KeyCode.ENTER) {
          // Do not submit form when type in the input
          if (mode !== 'combobox') {
            event.preventDefault();
          } // We only manage open state here, close logic should handle by list component


          if (!mergedOpen) {
            onToggleOpen(true);
          }
        }

        setClearLock(!!mergedSearchValue); // Remove value by `backspace`

        if (which === KeyCode.BACKSPACE && !clearLock && isMultiple && !mergedSearchValue && mergedRawValue.length) {
          var removeInfo = removeLastEnabledValue(displayValues, mergedRawValue);

          if (removeInfo.removedValue !== null) {
            triggerChange(removeInfo.values);
            triggerSelect(removeInfo.removedValue, false, 'input');
          }
        }

        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }

        if (mergedOpen && listRef.current) {
          var _listRef$current2;

          (_listRef$current2 = listRef.current).onKeyDown.apply(_listRef$current2, [event].concat(rest));
        }

        if (onKeyDown) {
          onKeyDown.apply(void 0, [event].concat(rest));
        }
      }; // KeyUp


      var onInternalKeyUp = function onInternalKeyUp(event) {
        for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          rest[_key2 - 1] = arguments[_key2];
        }

        if (mergedOpen && listRef.current) {
          var _listRef$current3;

          (_listRef$current3 = listRef.current).onKeyUp.apply(_listRef$current3, [event].concat(rest));
        }

        if (onKeyUp) {
          onKeyUp.apply(void 0, [event].concat(rest));
        }
      }; // ========================== Focus / Blur ==========================

      /** Record real focus status */


      var focusRef = React.useRef(false);

      var onContainerFocus = function onContainerFocus() {
        setMockFocused(true);

        if (!disabled) {
          if (onFocus && !focusRef.current) {
            onFocus.apply(void 0, arguments);
          } // `showAction` should handle `focus` if set


          if (showAction.includes('focus')) {
            onToggleOpen(true);
          }
        }

        focusRef.current = true;
      };

      var onContainerBlur = function onContainerBlur() {
        setMockFocused(false, function () {
          focusRef.current = false;
          onToggleOpen(false);
        });

        if (disabled) {
          return;
        }

        if (mergedSearchValue) {
          // `tags` mode should move `searchValue` into values
          if (mode === 'tags') {
            triggerSearch('', false, false);
            triggerChange(Array.from(new Set([].concat(_toConsumableArray$1(mergedRawValue), [mergedSearchValue]))));
          } else if (mode === 'multiple') {
            // `multiple` mode only clean the search value but not trigger event
            setInnerSearchValue('');
          }
        }

        if (onBlur) {
          onBlur.apply(void 0, arguments);
        }
      };

      var activeTimeoutIds = [];
      React.useEffect(function () {
        return function () {
          activeTimeoutIds.forEach(function (timeoutId) {
            return clearTimeout(timeoutId);
          });
          activeTimeoutIds.splice(0, activeTimeoutIds.length);
        };
      }, []);

      var onInternalMouseDown = function onInternalMouseDown(event) {
        var _triggerRef$current2;

        var target = event.target;
        var popupElement = (_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : _triggerRef$current2.getPopupElement(); // We should give focus back to selector if clicked item is not focusable

        if (popupElement && popupElement.contains(target)) {
          var timeoutId = setTimeout(function () {
            var index = activeTimeoutIds.indexOf(timeoutId);

            if (index !== -1) {
              activeTimeoutIds.splice(index, 1);
            }

            cancelSetMockFocused();

            if (!mobile && !popupElement.contains(document.activeElement)) {
              var _selectorRef$current3;

              (_selectorRef$current3 = selectorRef.current) === null || _selectorRef$current3 === void 0 ? void 0 : _selectorRef$current3.focus();
            }
          });
          activeTimeoutIds.push(timeoutId);
        }

        if (onMouseDown) {
          for (var _len3 = arguments.length, restArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            restArgs[_key3 - 1] = arguments[_key3];
          }

          onMouseDown.apply(void 0, [event].concat(restArgs));
        }
      }; // ========================= Accessibility ==========================


      var _useState11 = React.useState(0),
          _useState12 = _slicedToArray$1(_useState11, 2),
          accessibilityIndex = _useState12[0],
          setAccessibilityIndex = _useState12[1];

      var mergedDefaultActiveFirstOption = defaultActiveFirstOption !== undefined ? defaultActiveFirstOption : mode !== 'combobox';

      var onActiveValue = function onActiveValue(active, index) {
        var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
            _ref3$source = _ref3.source,
            source = _ref3$source === void 0 ? 'keyboard' : _ref3$source;

        setAccessibilityIndex(index);

        if (backfill && mode === 'combobox' && active !== null && source === 'keyboard') {
          setActiveValue(String(active));
        }
      }; // ============================= Popup ==============================


      var _useState13 = React.useState(null),
          _useState14 = _slicedToArray$1(_useState13, 2),
          containerWidth = _useState14[0],
          setContainerWidth = _useState14[1];

      var _useState15 = React.useState({}),
          _useState16 = _slicedToArray$1(_useState15, 2),
          forceUpdate = _useState16[1]; // We need force update here since popup dom is render async


      function onPopupMouseEnter() {
        forceUpdate({});
      }

      useLayoutEffect(function () {
        if (triggerOpen) {
          var _containerRef$current;

          var newWidth = Math.ceil((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.offsetWidth);

          if (containerWidth !== newWidth && !Number.isNaN(newWidth)) {
            setContainerWidth(newWidth);
          }
        }
      }, [triggerOpen]);
      var popupNode = /*#__PURE__*/React.createElement(OptionList, {
        ref: listRef,
        prefixCls: prefixCls,
        id: mergedId,
        open: mergedOpen,
        childrenAsData: !options,
        options: displayOptions,
        fieldNames: fieldNames,
        flattenOptions: displayFlattenOptions,
        multiple: isMultiple,
        values: rawValues,
        height: listHeight,
        itemHeight: listItemHeight,
        onSelect: onInternalOptionSelect,
        onToggleOpen: onToggleOpen,
        onActiveValue: onActiveValue,
        defaultActiveFirstOption: mergedDefaultActiveFirstOption,
        notFoundContent: notFoundContent,
        onScroll: onPopupScroll,
        searchValue: mergedSearchValue,
        menuItemSelectedIcon: menuItemSelectedIcon,
        virtual: virtual !== false && dropdownMatchSelectWidth !== false,
        onMouseEnter: onPopupMouseEnter,
        direction: direction
      }); // ============================= Clear ==============================

      var clearNode;

      var onClearMouseDown = function onClearMouseDown() {
        // Trigger internal `onClear` event
        if (useInternalProps && internalProps.onClear) {
          internalProps.onClear();
        }

        if (onClear) {
          onClear();
        }

        triggerChange([]);
        triggerSearch('', false, false);
      };

      if (!disabled && allowClear && (mergedRawValue.length || mergedSearchValue)) {
        clearNode = /*#__PURE__*/React.createElement(TransBtn, {
          className: "".concat(prefixCls, "-clear"),
          onMouseDown: onClearMouseDown,
          customizeIcon: clearIcon
        }, "\xD7");
      } // ============================= Arrow ==============================


      var mergedShowArrow = showArrow !== undefined ? showArrow : loading || !isMultiple && mode !== 'combobox';
      var arrowNode;

      if (mergedShowArrow) {
        arrowNode = /*#__PURE__*/React.createElement(TransBtn, {
          className: classnames("".concat(prefixCls, "-arrow"), _defineProperty$1({}, "".concat(prefixCls, "-arrow-loading"), loading)),
          customizeIcon: inputIcon,
          customizeIconProps: {
            loading: loading,
            searchValue: mergedSearchValue,
            open: mergedOpen,
            focused: mockFocused,
            showSearch: mergedShowSearch
          }
        });
      } // ============================ Warning =============================


      if ( warningProps) {
        warningProps(props);
      } // ============================= Render =============================


      var mergedClassName = classnames(prefixCls, className, (_classNames2 = {}, _defineProperty$1(_classNames2, "".concat(prefixCls, "-focused"), mockFocused), _defineProperty$1(_classNames2, "".concat(prefixCls, "-multiple"), isMultiple), _defineProperty$1(_classNames2, "".concat(prefixCls, "-single"), !isMultiple), _defineProperty$1(_classNames2, "".concat(prefixCls, "-allow-clear"), allowClear), _defineProperty$1(_classNames2, "".concat(prefixCls, "-show-arrow"), mergedShowArrow), _defineProperty$1(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty$1(_classNames2, "".concat(prefixCls, "-loading"), loading), _defineProperty$1(_classNames2, "".concat(prefixCls, "-open"), mergedOpen), _defineProperty$1(_classNames2, "".concat(prefixCls, "-customize-input"), customizeInputElement), _defineProperty$1(_classNames2, "".concat(prefixCls, "-show-search"), mergedShowSearch), _classNames2));
      var selectorNode = /*#__PURE__*/React.createElement(RefSelectTrigger, {
        ref: triggerRef,
        disabled: disabled,
        prefixCls: prefixCls,
        visible: triggerOpen,
        popupElement: popupNode,
        containerWidth: containerWidth,
        animation: animation,
        transitionName: transitionName,
        dropdownStyle: dropdownStyle,
        dropdownClassName: dropdownClassName,
        direction: direction,
        dropdownMatchSelectWidth: dropdownMatchSelectWidth,
        dropdownRender: dropdownRender,
        dropdownAlign: dropdownAlign,
        placement: placement,
        getPopupContainer: getPopupContainer,
        empty: !mergedOptions.length,
        getTriggerDOMNode: function getTriggerDOMNode() {
          return selectorDomRef.current;
        },
        onPopupVisibleChange: onTriggerVisibleChange
      }, customizeRawInputElement ? /*#__PURE__*/React.cloneElement(customizeRawInputElement, {
        ref: composeRef(selectorDomRef, customizeRawInputElement.props.ref)
      }) : /*#__PURE__*/React.createElement(ForwardSelector, _extends$1({}, props, {
        domRef: selectorDomRef,
        prefixCls: prefixCls,
        inputElement: customizeInputElement,
        ref: selectorRef,
        id: mergedId,
        showSearch: mergedShowSearch,
        mode: mode,
        accessibilityIndex: accessibilityIndex,
        multiple: isMultiple,
        tagRender: tagRender,
        values: displayValues,
        open: mergedOpen,
        onToggleOpen: onToggleOpen,
        searchValue: mergedSearchValue,
        activeValue: activeValue,
        onSearch: triggerSearch,
        onSearchSubmit: onSearchSubmit,
        onSelect: onInternalSelectionSelect,
        tokenWithEnter: tokenWithEnter
      }))); // Render raw

      if (customizeRawInputElement) {
        return selectorNode;
      }

      return /*#__PURE__*/React.createElement("div", _extends$1({
        className: mergedClassName
      }, domProps, {
        ref: containerRef,
        onMouseDown: onInternalMouseDown,
        onKeyDown: onInternalKeyDown,
        onKeyUp: onInternalKeyUp,
        onFocus: onContainerFocus,
        onBlur: onContainerBlur
      }), mockFocused && !mergedOpen && /*#__PURE__*/React.createElement("span", {
        style: {
          width: 0,
          height: 0,
          display: 'flex',
          overflow: 'hidden',
          opacity: 0
        },
        "aria-live": "polite"
      }, "".concat(mergedRawValue.join(', '))), selectorNode, arrowNode, clearNode);
    }

    var RefSelect = /*#__PURE__*/React.forwardRef(Select);
    return RefSelect;
  }

  function warningProps(props) {
    var mode = props.mode,
        options = props.options,
        children = props.children,
        backfill = props.backfill,
        allowClear = props.allowClear,
        placeholder = props.placeholder,
        getInputElement = props.getInputElement,
        showSearch = props.showSearch,
        onSearch = props.onSearch,
        defaultOpen = props.defaultOpen,
        autoFocus = props.autoFocus,
        labelInValue = props.labelInValue,
        value = props.value,
        inputValue = props.inputValue,
        optionLabelProp = props.optionLabelProp;
    var multiple = mode === 'multiple' || mode === 'tags';
    var mergedShowSearch = showSearch !== undefined ? showSearch : multiple || mode === 'combobox';
    var mergedOptions = options || convertChildrenToData(children); // `tags` should not set option as disabled

    warningOnce(mode !== 'tags' || mergedOptions.every(function (opt) {
      return !opt.disabled;
    }), 'Please avoid setting option to disabled in tags mode since user can always type text as tag.'); // `combobox` & `tags` should option be `string` type

    if (mode === 'tags' || mode === 'combobox') {
      var hasNumberValue = mergedOptions.some(function (item) {
        if (item.options) {
          return item.options.some(function (opt) {
            return typeof ('value' in opt ? opt.value : opt.key) === 'number';
          });
        }

        return typeof ('value' in item ? item.value : item.key) === 'number';
      });
      warningOnce(!hasNumberValue, '`value` of Option should not use number type when `mode` is `tags` or `combobox`.');
    } // `combobox` should not use `optionLabelProp`


    warningOnce(mode !== 'combobox' || !optionLabelProp, '`combobox` mode not support `optionLabelProp`. Please set `value` on Option directly.'); // Only `combobox` support `backfill`

    warningOnce(mode === 'combobox' || !backfill, '`backfill` only works with `combobox` mode.'); // Only `combobox` support `getInputElement`

    warningOnce(mode === 'combobox' || !getInputElement, '`getInputElement` only work with `combobox` mode.'); // Customize `getInputElement` should not use `allowClear` & `placeholder`

    noteOnce(mode !== 'combobox' || !getInputElement || !allowClear || !placeholder, 'Customize `getInputElement` should customize clear and placeholder logic instead of configuring `allowClear` and `placeholder`.'); // `onSearch` should use in `combobox` or `showSearch`

    if (onSearch && !mergedShowSearch && mode !== 'combobox' && mode !== 'tags') {
      warningOnce(false, '`onSearch` should work with `showSearch` instead of use alone.');
    }

    noteOnce(!defaultOpen || autoFocus, '`defaultOpen` makes Select open without focus which means it will not close by click outside. You can set `autoFocus` if needed.');

    if (value !== undefined && value !== null) {
      var values = toArray$2(value);
      warningOnce(!labelInValue || values.every(function (val) {
        return _typeof$1(val) === 'object' && ('key' in val || 'value' in val);
      }), '`value` should in shape of `{ value: string | number, label?: ReactNode }` when you set `labelInValue` to `true`');
      warningOnce(!multiple || Array.isArray(value), '`value` should be array when `mode` is `multiple` or `tags`');
    } // Syntactic sugar should use correct children type


    if (children) {
      var invalidateChildType = null;
      toArray(children).some(function (node) {
        if (! /*#__PURE__*/React.isValidElement(node) || !node.type) {
          return false;
        }

        var type = node.type;

        if (type.isSelectOption) {
          return false;
        }

        if (type.isSelectOptGroup) {
          var allChildrenValid = toArray(node.props.children).every(function (subNode) {
            if (! /*#__PURE__*/React.isValidElement(subNode) || !node.type || subNode.type.isSelectOption) {
              return true;
            }

            invalidateChildType = subNode.type;
            return false;
          });

          if (allChildrenValid) {
            return false;
          }

          return true;
        }

        invalidateChildType = type;
        return true;
      });

      if (invalidateChildType) {
        warningOnce(false, "`children` should be `Select.Option` or `Select.OptGroup` instead of `".concat(invalidateChildType.displayName || invalidateChildType.name || invalidateChildType, "`."));
      }

      warningOnce(inputValue === undefined, '`inputValue` is deprecated, please use `searchValue` instead.');
    }
  }

  var RefSelect = generateSelector({
    prefixCls: 'rc-select',
    components: {
      optionList: RefOptionList
    },
    convertChildrenToData: convertChildrenToData,
    flattenOptions: flattenOptions,
    getLabeledValue: getLabeledValue,
    filterOptions: filterOptions,
    isValueDisabled: isValueDisabled,
    findValueOption: findValueOption,
    warningProps: warningProps,
    fillOptionsWithMissingValue: fillOptionsWithMissingValue
  });
  /**
   * Typescript not support generic with function component,
   * we have to wrap an class component to handle this.
   */

  var Select = /*#__PURE__*/function (_React$Component) {
    _inherits(Select, _React$Component);

    var _super = _createSuper(Select);

    function Select() {
      var _this;

      _classCallCheck(this, Select);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.selectRef = /*#__PURE__*/React.createRef();

      _this.focus = function () {
        _this.selectRef.current.focus();
      };

      _this.blur = function () {
        _this.selectRef.current.blur();
      };

      return _this;
    }

    _createClass(Select, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(RefSelect, _extends$1({
          ref: this.selectRef
        }, this.props));
      }
    }]);

    return Select;
  }(React.Component);

  Select.Option = Option;
  Select.OptGroup = OptGroup;

  // This icon file is generated automatically.
  var DownOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z" } }] }, "name": "down", "theme": "outlined" };

  var DownOutlined$1 = function DownOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: DownOutlined
    }));
  };

  DownOutlined$1.displayName = 'DownOutlined';
  var DownOutlined$2 = /*#__PURE__*/React.forwardRef(DownOutlined$1);

  // This icon file is generated automatically.
  var CheckOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z" } }] }, "name": "check", "theme": "outlined" };

  var CheckOutlined$1 = function CheckOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: CheckOutlined
    }));
  };

  CheckOutlined$1.displayName = 'CheckOutlined';
  var CheckOutlined$2 = /*#__PURE__*/React.forwardRef(CheckOutlined$1);

  // This icon file is generated automatically.
  var SearchOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z" } }] }, "name": "search", "theme": "outlined" };

  var SearchOutlined$1 = function SearchOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: SearchOutlined
    }));
  };

  SearchOutlined$1.displayName = 'SearchOutlined';
  var SearchOutlined$2 = /*#__PURE__*/React.forwardRef(SearchOutlined$1);

  function getIcons(_ref) {
    var suffixIcon = _ref.suffixIcon,
        clearIcon = _ref.clearIcon,
        menuItemSelectedIcon = _ref.menuItemSelectedIcon,
        removeIcon = _ref.removeIcon,
        loading = _ref.loading,
        multiple = _ref.multiple,
        prefixCls = _ref.prefixCls;
    // Clear Icon
    var mergedClearIcon = clearIcon;

    if (!clearIcon) {
      mergedClearIcon = /*#__PURE__*/React.createElement(CloseCircleFilled$2, null);
    } // Arrow item icon


    var mergedSuffixIcon = null;

    if (suffixIcon !== undefined) {
      mergedSuffixIcon = suffixIcon;
    } else if (loading) {
      mergedSuffixIcon = /*#__PURE__*/React.createElement(LoadingOutlined$2, {
        spin: true
      });
    } else {
      var iconCls = "".concat(prefixCls, "-suffix");

      mergedSuffixIcon = function mergedSuffixIcon(_ref2) {
        var open = _ref2.open,
            showSearch = _ref2.showSearch;

        if (open && showSearch) {
          return /*#__PURE__*/React.createElement(SearchOutlined$2, {
            className: iconCls
          });
        }

        return /*#__PURE__*/React.createElement(DownOutlined$2, {
          className: iconCls
        });
      };
    } // Checked item icon


    var mergedItemIcon = null;

    if (menuItemSelectedIcon !== undefined) {
      mergedItemIcon = menuItemSelectedIcon;
    } else if (multiple) {
      mergedItemIcon = /*#__PURE__*/React.createElement(CheckOutlined$2, null);
    } else {
      mergedItemIcon = null;
    }

    var mergedRemoveIcon = null;

    if (removeIcon !== undefined) {
      mergedRemoveIcon = removeIcon;
    } else {
      mergedRemoveIcon = /*#__PURE__*/React.createElement(CloseOutlined$2, null);
    }

    return {
      clearIcon: mergedClearIcon,
      suffixIcon: mergedSuffixIcon,
      itemIcon: mergedItemIcon,
      removeIcon: mergedRemoveIcon
    };
  }

  // ================== Collapse Motion ==================
  var getCollapsedHeight = function getCollapsedHeight() {
    return {
      height: 0,
      opacity: 0
    };
  };

  var getRealHeight = function getRealHeight(node) {
    var scrollHeight = node.scrollHeight;
    return {
      height: scrollHeight,
      opacity: 1
    };
  };

  var getCurrentHeight = function getCurrentHeight(node) {
    return {
      height: node ? node.offsetHeight : 0
    };
  };

  var skipOpacityTransition = function skipOpacityTransition(_, event) {
    return (event === null || event === void 0 ? void 0 : event.deadline) === true || event.propertyName === 'height';
  };

  var collapseMotion = {
    motionName: 'ant-motion-collapse',
    onAppearStart: getCollapsedHeight,
    onEnterStart: getCollapsedHeight,
    onAppearActive: getRealHeight,
    onEnterActive: getRealHeight,
    onLeaveStart: getCurrentHeight,
    onLeaveActive: getCollapsedHeight,
    onAppearEnd: skipOpacityTransition,
    onEnterEnd: skipOpacityTransition,
    onLeaveEnd: skipOpacityTransition,
    motionDeadline: 500
  };

  var getTransitionName$2 = function getTransitionName(rootPrefixCls, motion, transitionName) {
    if (transitionName !== undefined) {
      return transitionName;
    }

    return "".concat(rootPrefixCls, "-").concat(motion);
  };

  // TODO: 4.0 - codemod should help to change `filterOption` to support node props.
  var __rest$1 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var SECRET_COMBOBOX_MODE_DO_NOT_USE = 'SECRET_COMBOBOX_MODE_DO_NOT_USE';

  var InternalSelect = function InternalSelect(_a, ref) {
    var _classNames2;

    var customizePrefixCls = _a.prefixCls,
        _a$bordered = _a.bordered,
        bordered = _a$bordered === void 0 ? true : _a$bordered,
        className = _a.className,
        getPopupContainer = _a.getPopupContainer,
        dropdownClassName = _a.dropdownClassName,
        _a$listHeight = _a.listHeight,
        listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight,
        _a$listItemHeight = _a.listItemHeight,
        listItemHeight = _a$listItemHeight === void 0 ? 24 : _a$listItemHeight,
        customizeSize = _a.size,
        notFoundContent = _a.notFoundContent,
        props = __rest$1(_a, ["prefixCls", "bordered", "className", "getPopupContainer", "dropdownClassName", "listHeight", "listItemHeight", "size", "notFoundContent"]);

    var _React$useContext = React.useContext(ConfigContext),
        getContextPopupContainer = _React$useContext.getPopupContainer,
        getPrefixCls = _React$useContext.getPrefixCls,
        renderEmpty = _React$useContext.renderEmpty,
        direction = _React$useContext.direction,
        virtual = _React$useContext.virtual,
        dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;

    var size = React.useContext(SizeContext);
    var prefixCls = getPrefixCls('select', customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var mode = React.useMemo(function () {
      var m = props.mode;

      if (m === 'combobox') {
        return undefined;
      }

      if (m === SECRET_COMBOBOX_MODE_DO_NOT_USE) {
        return 'combobox';
      }

      return m;
    }, [props.mode]);
    var isMultiple = mode === 'multiple' || mode === 'tags'; // ===================== Empty =====================

    var mergedNotFound;

    if (notFoundContent !== undefined) {
      mergedNotFound = notFoundContent;
    } else if (mode === 'combobox') {
      mergedNotFound = null;
    } else {
      mergedNotFound = renderEmpty('Select');
    } // ===================== Icons =====================


    var _getIcons = getIcons(_extends$1(_extends$1({}, props), {
      multiple: isMultiple,
      prefixCls: prefixCls
    })),
        suffixIcon = _getIcons.suffixIcon,
        itemIcon = _getIcons.itemIcon,
        removeIcon = _getIcons.removeIcon,
        clearIcon = _getIcons.clearIcon;

    var selectProps = omit(props, ['suffixIcon', 'itemIcon']);
    var rcSelectRtlDropDownClassName = classnames(dropdownClassName, _defineProperty$1({}, "".concat(prefixCls, "-dropdown-").concat(direction), direction === 'rtl'));
    var mergedSize = customizeSize || size;
    var mergedClassName = classnames((_classNames2 = {}, _defineProperty$1(_classNames2, "".concat(prefixCls, "-lg"), mergedSize === 'large'), _defineProperty$1(_classNames2, "".concat(prefixCls, "-sm"), mergedSize === 'small'), _defineProperty$1(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty$1(_classNames2, "".concat(prefixCls, "-borderless"), !bordered), _classNames2), className);
    return /*#__PURE__*/React.createElement(Select, _extends$1({
      ref: ref,
      virtual: virtual,
      dropdownMatchSelectWidth: dropdownMatchSelectWidth
    }, selectProps, {
      transitionName: getTransitionName$2(rootPrefixCls, 'slide-up', props.transitionName),
      listHeight: listHeight,
      listItemHeight: listItemHeight,
      mode: mode,
      prefixCls: prefixCls,
      direction: direction,
      inputIcon: suffixIcon,
      menuItemSelectedIcon: itemIcon,
      removeIcon: removeIcon,
      clearIcon: clearIcon,
      notFoundContent: mergedNotFound,
      className: mergedClassName,
      getPopupContainer: getPopupContainer || getContextPopupContainer,
      dropdownClassName: rcSelectRtlDropDownClassName
    }));
  };

  var SelectRef = /*#__PURE__*/React.forwardRef(InternalSelect);
  var Select$1 = SelectRef;
  Select$1.SECRET_COMBOBOX_MODE_DO_NOT_USE = SECRET_COMBOBOX_MODE_DO_NOT_USE;
  Select$1.Option = Option;
  Select$1.OptGroup = OptGroup;

  var isValidElement = React.isValidElement;
  function replaceElement(element, replacement, props) {
    if (!isValidElement(element)) return replacement;
    return /*#__PURE__*/React.cloneElement(element, typeof props === 'function' ? props(element.props || {}) : props);
  }
  function cloneElement(element, props) {
    return replaceElement(element, element, props);
  }

  function getDataOrAriaProps(props) {
    return Object.keys(props).reduce(function (prev, key) {
      if ((key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role') && key.substr(0, 7) !== 'data-__') {
        prev[key] = props[key];
      }

      return prev;
    }, {});
  }

  var responsiveArray = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];
  var responsiveMap = {
    xs: '(max-width: 575px)',
    sm: '(min-width: 576px)',
    md: '(min-width: 768px)',
    lg: '(min-width: 992px)',
    xl: '(min-width: 1200px)',
    xxl: '(min-width: 1600px)'
  };
  var subscribers = new Map();
  var subUid = -1;
  var screens = {};
  var responsiveObserve = {
    matchHandlers: {},
    dispatch: function dispatch(pointMap) {
      screens = pointMap;
      subscribers.forEach(function (func) {
        return func(screens);
      });
      return subscribers.size >= 1;
    },
    subscribe: function subscribe(func) {
      if (!subscribers.size) this.register();
      subUid += 1;
      subscribers.set(subUid, func);
      func(screens);
      return subUid;
    },
    unsubscribe: function unsubscribe(token) {
      subscribers["delete"](token);
      if (!subscribers.size) this.unregister();
    },
    unregister: function unregister() {
      var _this = this;

      Object.keys(responsiveMap).forEach(function (screen) {
        var matchMediaQuery = responsiveMap[screen];
        var handler = _this.matchHandlers[matchMediaQuery];
        handler === null || handler === void 0 ? void 0 : handler.mql.removeListener(handler === null || handler === void 0 ? void 0 : handler.listener);
      });
      subscribers.clear();
    },
    register: function register() {
      var _this2 = this;

      Object.keys(responsiveMap).forEach(function (screen) {
        var matchMediaQuery = responsiveMap[screen];

        var listener = function listener(_ref) {
          var matches = _ref.matches;

          _this2.dispatch(_extends$1(_extends$1({}, screens), _defineProperty$1({}, screen, matches)));
        };

        var mql = window.matchMedia(matchMediaQuery);
        mql.addListener(listener);
        _this2.matchHandlers[matchMediaQuery] = {
          mql: mql,
          listener: listener
        };
        listener(mql);
      });
    }
  };

  var autoAdjustOverflow = {
    adjustX: 1,
    adjustY: 1
  };
  var targetOffset = [0, 0];
  var placements = {
    left: {
      points: ['cr', 'cl'],
      overflow: autoAdjustOverflow,
      offset: [-4, 0],
      targetOffset: targetOffset
    },
    right: {
      points: ['cl', 'cr'],
      overflow: autoAdjustOverflow,
      offset: [4, 0],
      targetOffset: targetOffset
    },
    top: {
      points: ['bc', 'tc'],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset: targetOffset
    },
    bottom: {
      points: ['tc', 'bc'],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset: targetOffset
    },
    topLeft: {
      points: ['bl', 'tl'],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset: targetOffset
    },
    leftTop: {
      points: ['tr', 'tl'],
      overflow: autoAdjustOverflow,
      offset: [-4, 0],
      targetOffset: targetOffset
    },
    topRight: {
      points: ['br', 'tr'],
      overflow: autoAdjustOverflow,
      offset: [0, -4],
      targetOffset: targetOffset
    },
    rightTop: {
      points: ['tl', 'tr'],
      overflow: autoAdjustOverflow,
      offset: [4, 0],
      targetOffset: targetOffset
    },
    bottomRight: {
      points: ['tr', 'br'],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset: targetOffset
    },
    rightBottom: {
      points: ['bl', 'br'],
      overflow: autoAdjustOverflow,
      offset: [4, 0],
      targetOffset: targetOffset
    },
    bottomLeft: {
      points: ['tl', 'bl'],
      overflow: autoAdjustOverflow,
      offset: [0, 4],
      targetOffset: targetOffset
    },
    leftBottom: {
      points: ['br', 'bl'],
      overflow: autoAdjustOverflow,
      offset: [-4, 0],
      targetOffset: targetOffset
    }
  };

  var Content = function Content(props) {
    var overlay = props.overlay,
        prefixCls = props.prefixCls,
        id = props.id,
        overlayInnerStyle = props.overlayInnerStyle;
    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-inner"),
      id: id,
      role: "tooltip",
      style: overlayInnerStyle
    }, typeof overlay === 'function' ? overlay() : overlay);
  };

  var Tooltip = function Tooltip(props, ref) {
    var overlayClassName = props.overlayClassName,
        _props$trigger = props.trigger,
        trigger = _props$trigger === void 0 ? ['hover'] : _props$trigger,
        _props$mouseEnterDela = props.mouseEnterDelay,
        mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela,
        _props$mouseLeaveDela = props.mouseLeaveDelay,
        mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela,
        overlayStyle = props.overlayStyle,
        _props$prefixCls = props.prefixCls,
        prefixCls = _props$prefixCls === void 0 ? 'rc-tooltip' : _props$prefixCls,
        children = props.children,
        onVisibleChange = props.onVisibleChange,
        afterVisibleChange = props.afterVisibleChange,
        transitionName = props.transitionName,
        animation = props.animation,
        motion = props.motion,
        _props$placement = props.placement,
        placement = _props$placement === void 0 ? 'right' : _props$placement,
        _props$align = props.align,
        align = _props$align === void 0 ? {} : _props$align,
        _props$destroyTooltip = props.destroyTooltipOnHide,
        destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip,
        defaultVisible = props.defaultVisible,
        getTooltipContainer = props.getTooltipContainer,
        overlayInnerStyle = props.overlayInnerStyle,
        restProps = _objectWithoutProperties$1(props, ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "motion", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "overlayInnerStyle"]);

    var domRef = React.useRef(null);
    React.useImperativeHandle(ref, function () {
      return domRef.current;
    });

    var extraProps = _objectSpread2$1({}, restProps);

    if ('visible' in props) {
      extraProps.popupVisible = props.visible;
    }

    var getPopupElement = function getPopupElement() {
      var _props$arrowContent = props.arrowContent,
          arrowContent = _props$arrowContent === void 0 ? null : _props$arrowContent,
          overlay = props.overlay,
          id = props.id;
      return [/*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-arrow"),
        key: "arrow"
      }, arrowContent), /*#__PURE__*/React.createElement(Content, {
        key: "content",
        prefixCls: prefixCls,
        id: id,
        overlay: overlay,
        overlayInnerStyle: overlayInnerStyle
      })];
    };

    var destroyTooltip = false;
    var autoDestroy = false;

    if (typeof destroyTooltipOnHide === 'boolean') {
      destroyTooltip = destroyTooltipOnHide;
    } else if (destroyTooltipOnHide && _typeof$1(destroyTooltipOnHide) === 'object') {
      var keepParent = destroyTooltipOnHide.keepParent;
      destroyTooltip = keepParent === true;
      autoDestroy = keepParent === false;
    }

    return /*#__PURE__*/React.createElement(Trigger, _extends$1({
      popupClassName: overlayClassName,
      prefixCls: prefixCls,
      popup: getPopupElement,
      action: trigger,
      builtinPlacements: placements,
      popupPlacement: placement,
      ref: domRef,
      popupAlign: align,
      getPopupContainer: getTooltipContainer,
      onPopupVisibleChange: onVisibleChange,
      afterPopupVisibleChange: afterVisibleChange,
      popupTransitionName: transitionName,
      popupAnimation: animation,
      popupMotion: motion,
      defaultPopupVisible: defaultVisible,
      destroyPopupOnHide: destroyTooltip,
      autoDestroy: autoDestroy,
      mouseLeaveDelay: mouseLeaveDelay,
      popupStyle: overlayStyle,
      mouseEnterDelay: mouseEnterDelay
    }, extraProps), children);
  };

  var Tooltip$1 = /*#__PURE__*/React.forwardRef(Tooltip);

  var autoAdjustOverflowEnabled = {
    adjustX: 1,
    adjustY: 1
  };
  var autoAdjustOverflowDisabled = {
    adjustX: 0,
    adjustY: 0
  };
  var targetOffset$1 = [0, 0];
  function getOverflowOptions(autoAdjustOverflow) {
    if (typeof autoAdjustOverflow === 'boolean') {
      return autoAdjustOverflow ? autoAdjustOverflowEnabled : autoAdjustOverflowDisabled;
    }

    return _extends$1(_extends$1({}, autoAdjustOverflowDisabled), autoAdjustOverflow);
  }
  function getPlacements(config) {
    var _config$arrowWidth = config.arrowWidth,
        arrowWidth = _config$arrowWidth === void 0 ? 4 : _config$arrowWidth,
        _config$horizontalArr = config.horizontalArrowShift,
        horizontalArrowShift = _config$horizontalArr === void 0 ? 16 : _config$horizontalArr,
        _config$verticalArrow = config.verticalArrowShift,
        verticalArrowShift = _config$verticalArrow === void 0 ? 8 : _config$verticalArrow,
        autoAdjustOverflow = config.autoAdjustOverflow;
    var placementMap = {
      left: {
        points: ['cr', 'cl'],
        offset: [-4, 0]
      },
      right: {
        points: ['cl', 'cr'],
        offset: [4, 0]
      },
      top: {
        points: ['bc', 'tc'],
        offset: [0, -4]
      },
      bottom: {
        points: ['tc', 'bc'],
        offset: [0, 4]
      },
      topLeft: {
        points: ['bl', 'tc'],
        offset: [-(horizontalArrowShift + arrowWidth), -4]
      },
      leftTop: {
        points: ['tr', 'cl'],
        offset: [-4, -(verticalArrowShift + arrowWidth)]
      },
      topRight: {
        points: ['br', 'tc'],
        offset: [horizontalArrowShift + arrowWidth, -4]
      },
      rightTop: {
        points: ['tl', 'cr'],
        offset: [4, -(verticalArrowShift + arrowWidth)]
      },
      bottomRight: {
        points: ['tr', 'bc'],
        offset: [horizontalArrowShift + arrowWidth, 4]
      },
      rightBottom: {
        points: ['bl', 'cr'],
        offset: [4, verticalArrowShift + arrowWidth]
      },
      bottomLeft: {
        points: ['tl', 'bc'],
        offset: [-(horizontalArrowShift + arrowWidth), 4]
      },
      leftBottom: {
        points: ['br', 'cl'],
        offset: [-4, verticalArrowShift + arrowWidth]
      }
    };
    Object.keys(placementMap).forEach(function (key) {
      placementMap[key] = config.arrowPointAtCenter ? _extends$1(_extends$1({}, placementMap[key]), {
        overflow: getOverflowOptions(autoAdjustOverflow),
        targetOffset: targetOffset$1
      }) : _extends$1(_extends$1({}, placements[key]), {
        overflow: getOverflowOptions(autoAdjustOverflow)
      });
      placementMap[key].ignoreShake = true;
    });
    return placementMap;
  }

  // https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead
  var tuple = function tuple() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args;
  };

  var PresetStatusColorTypes = tuple('success', 'processing', 'error', 'default', 'warning'); // eslint-disable-next-line import/prefer-default-export

  var PresetColorTypes = tuple('pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime');

  var __rest$2 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var splitObject = function splitObject(obj, keys) {
    var picked = {};

    var omitted = _extends$1({}, obj);

    keys.forEach(function (key) {
      if (obj && key in obj) {
        picked[key] = obj[key];
        delete omitted[key];
      }
    });
    return {
      picked: picked,
      omitted: omitted
    };
  };

  var PresetColorRegex = new RegExp("^(".concat(PresetColorTypes.join('|'), ")(-inverse)?$")); // Fix Tooltip won't hide at disabled button
  // mouse events don't trigger at disabled button in Chrome
  // https://github.com/react-component/tooltip/issues/18

  function getDisabledCompatibleChildren(element, prefixCls) {
    var elementType = element.type;

    if ((elementType.__ANT_BUTTON === true || elementType.__ANT_SWITCH === true || elementType.__ANT_CHECKBOX === true || element.type === 'button') && element.props.disabled) {
      // Pick some layout related style properties up to span
      // Prevent layout bugs like https://github.com/ant-design/ant-design/issues/5254
      var _splitObject = splitObject(element.props.style, ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex']),
          picked = _splitObject.picked,
          omitted = _splitObject.omitted;

      var spanStyle = _extends$1(_extends$1({
        display: 'inline-block'
      }, picked), {
        cursor: 'not-allowed',
        width: element.props.block ? '100%' : null
      });

      var buttonStyle = _extends$1(_extends$1({}, omitted), {
        pointerEvents: 'none'
      });

      var child = cloneElement(element, {
        style: buttonStyle,
        className: null
      });
      return /*#__PURE__*/React.createElement("span", {
        style: spanStyle,
        className: classnames(element.props.className, "".concat(prefixCls, "-disabled-compatible-wrapper"))
      }, child);
    }

    return element;
  }

  var Tooltip$2 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames2;

    var _React$useContext = React.useContext(ConfigContext),
        getContextPopupContainer = _React$useContext.getPopupContainer,
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var _useMergedState = useControlledState(false, {
      value: props.visible,
      defaultValue: props.defaultVisible
    }),
        _useMergedState2 = _slicedToArray$1(_useMergedState, 2),
        visible = _useMergedState2[0],
        setVisible = _useMergedState2[1];

    var isNoTitle = function isNoTitle() {
      var title = props.title,
          overlay = props.overlay;
      return !title && !overlay && title !== 0; // overlay for old version compatibility
    };

    var onVisibleChange = function onVisibleChange(vis) {
      var _a;

      setVisible(isNoTitle() ? false : vis);

      if (!isNoTitle()) {
        (_a = props.onVisibleChange) === null || _a === void 0 ? void 0 : _a.call(props, vis);
      }
    };

    var getTooltipPlacements = function getTooltipPlacements() {
      var builtinPlacements = props.builtinPlacements,
          arrowPointAtCenter = props.arrowPointAtCenter,
          autoAdjustOverflow = props.autoAdjustOverflow;
      return builtinPlacements || getPlacements({
        arrowPointAtCenter: arrowPointAtCenter,
        autoAdjustOverflow: autoAdjustOverflow
      });
    }; // 动态设置动画点


    var onPopupAlign = function onPopupAlign(domNode, align) {
      var placements = getTooltipPlacements(); // 当前返回的位置

      var placement = Object.keys(placements).filter(function (key) {
        return placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1];
      })[0];

      if (!placement) {
        return;
      } // 根据当前坐标设置动画点


      var rect = domNode.getBoundingClientRect();
      var transformOrigin = {
        top: '50%',
        left: '50%'
      };

      if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) {
        transformOrigin.top = "".concat(rect.height - align.offset[1], "px");
      } else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) {
        transformOrigin.top = "".concat(-align.offset[1], "px");
      }

      if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) {
        transformOrigin.left = "".concat(rect.width - align.offset[0], "px");
      } else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) {
        transformOrigin.left = "".concat(-align.offset[0], "px");
      }

      domNode.style.transformOrigin = "".concat(transformOrigin.left, " ").concat(transformOrigin.top);
    };

    var getOverlay = function getOverlay() {
      var title = props.title,
          overlay = props.overlay;

      if (title === 0) {
        return title;
      }

      return overlay || title || '';
    };

    var getPopupContainer = props.getPopupContainer,
        otherProps = __rest$2(props, ["getPopupContainer"]);

    var customizePrefixCls = props.prefixCls,
        openClassName = props.openClassName,
        getTooltipContainer = props.getTooltipContainer,
        overlayClassName = props.overlayClassName,
        color = props.color,
        overlayInnerStyle = props.overlayInnerStyle,
        children = props.children;
    var prefixCls = getPrefixCls('tooltip', customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var tempVisible = visible; // Hide tooltip when there is no title

    if (!('visible' in props) && isNoTitle()) {
      tempVisible = false;
    }

    var child = getDisabledCompatibleChildren(isValidElement(children) ? children : /*#__PURE__*/React.createElement("span", null, children), prefixCls);
    var childProps = child.props;
    var childCls = classnames(childProps.className, _defineProperty$1({}, openClassName || "".concat(prefixCls, "-open"), true));
    var customOverlayClassName = classnames(overlayClassName, (_classNames2 = {}, _defineProperty$1(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty$1(_classNames2, "".concat(prefixCls, "-").concat(color), color && PresetColorRegex.test(color)), _classNames2));
    var formattedOverlayInnerStyle = overlayInnerStyle;
    var arrowContentStyle;

    if (color && !PresetColorRegex.test(color)) {
      formattedOverlayInnerStyle = _extends$1(_extends$1({}, overlayInnerStyle), {
        background: color
      });
      arrowContentStyle = {
        background: color
      };
    }

    return /*#__PURE__*/React.createElement(Tooltip$1, _extends$1({}, otherProps, {
      prefixCls: prefixCls,
      overlayClassName: customOverlayClassName,
      getTooltipContainer: getPopupContainer || getTooltipContainer || getContextPopupContainer,
      ref: ref,
      builtinPlacements: getTooltipPlacements(),
      overlay: getOverlay(),
      visible: tempVisible,
      onVisibleChange: onVisibleChange,
      onPopupAlign: onPopupAlign,
      overlayInnerStyle: formattedOverlayInnerStyle,
      arrowContent: /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-arrow-content"),
        style: arrowContentStyle
      }),
      motion: {
        motionName: getTransitionName$2(rootPrefixCls, 'zoom-big-fast', props.transitionName),
        motionDeadline: 1000
      }
    }), tempVisible ? cloneElement(child, {
      className: childCls
    }) : child);
  });
  Tooltip$2.displayName = 'Tooltip';
  Tooltip$2.defaultProps = {
    placement: 'top',
    mouseEnterDelay: 0.1,
    mouseLeaveDelay: 0.1,
    arrowPointAtCenter: false,
    autoAdjustOverflow: true
  };

  var UnreachableException = function UnreachableException(value) {
    _classCallCheck(this, UnreachableException);

    return new Error("unreachable case: ".concat(JSON.stringify(value)));
  };

  var __rest$3 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var ButtonGroup = function ButtonGroup(props) {
    return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
      var _classNames;

      var getPrefixCls = _ref.getPrefixCls,
          direction = _ref.direction;

      var customizePrefixCls = props.prefixCls,
          size = props.size,
          className = props.className,
          others = __rest$3(props, ["prefixCls", "size", "className"]);

      var prefixCls = getPrefixCls('btn-group', customizePrefixCls); // large => lg
      // small => sm

      var sizeCls = '';

      switch (size) {
        case 'large':
          sizeCls = 'lg';
          break;

        case 'small':
          sizeCls = 'sm';
          break;

        case 'middle':
        case undefined:
          break;

        default:
          // eslint-disable-next-line no-console
          console.warn(new UnreachableException(size));
      }

      var classes = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
      return /*#__PURE__*/React.createElement("div", _extends$1({}, others, {
        className: classes
      }));
    });
  };

  var id = 0;
  var ids = {}; // Support call raf with delay specified frame

  function wrapperRaf$1(callback) {
    var delayFrames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var myId = id++;
    var restFrames = delayFrames;

    function internalCallback() {
      restFrames -= 1;

      if (restFrames <= 0) {
        callback();
        delete ids[myId];
      } else {
        ids[myId] = wrapperRaf(internalCallback);
      }
    }

    ids[myId] = wrapperRaf(internalCallback);
    return myId;
  }

  wrapperRaf$1.cancel = function cancel(pid) {
    if (pid === undefined) return;
    wrapperRaf.cancel(ids[pid]);
    delete ids[pid];
  };

  wrapperRaf$1.ids = ids; // export this for test usage

  var styleForPseudo; // Where el is the DOM element you'd like to test for visibility

  function isHidden(element) {

    return !element || element.offsetParent === null || element.hidden;
  }

  function isNotGrey(color) {
    // eslint-disable-next-line no-useless-escape
    var match = (color || '').match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);

    if (match && match[1] && match[2] && match[3]) {
      return !(match[1] === match[2] && match[2] === match[3]);
    }

    return true;
  }

  var Wave = /*#__PURE__*/function (_React$Component) {
    _inherits(Wave, _React$Component);

    var _super = _createSuper(Wave);

    function Wave() {
      var _this;

      _classCallCheck(this, Wave);

      _this = _super.apply(this, arguments);
      _this.containerRef = /*#__PURE__*/React.createRef();
      _this.animationStart = false;
      _this.destroyed = false;

      _this.onClick = function (node, waveColor) {
        var _a, _b;

        var _this$props = _this.props,
            insertExtraNode = _this$props.insertExtraNode,
            disabled = _this$props.disabled;

        if (disabled || !node || isHidden(node) || node.className.indexOf('-leave') >= 0) {
          return;
        }

        _this.extraNode = document.createElement('div');

        var _assertThisInitialize = _assertThisInitialized(_this),
            extraNode = _assertThisInitialize.extraNode;

        var getPrefixCls = _this.context.getPrefixCls;
        extraNode.className = "".concat(getPrefixCls(''), "-click-animating-node");

        var attributeName = _this.getAttributeName();

        node.setAttribute(attributeName, 'true'); // Not white or transparent or grey

        if (waveColor && waveColor !== '#ffffff' && waveColor !== 'rgb(255, 255, 255)' && isNotGrey(waveColor) && !/rgba\((?:\d*, ){3}0\)/.test(waveColor) && // any transparent rgba color
        waveColor !== 'transparent') {
          extraNode.style.borderColor = waveColor;
          var nodeRoot = ((_a = node.getRootNode) === null || _a === void 0 ? void 0 : _a.call(node)) || node.ownerDocument;
          var nodeBody = nodeRoot instanceof Document ? nodeRoot.body : (_b = nodeRoot.firstChild) !== null && _b !== void 0 ? _b : nodeRoot;
          styleForPseudo = updateCSS("\n      [".concat(getPrefixCls(''), "-click-animating-without-extra-node='true']::after, .").concat(getPrefixCls(''), "-click-animating-node {\n        --antd-wave-shadow-color: ").concat(waveColor, ";\n      }"), 'antd-wave', {
            csp: _this.csp,
            attachTo: nodeBody
          });
        }

        if (insertExtraNode) {
          node.appendChild(extraNode);
        }

        ['transition', 'animation'].forEach(function (name) {
          node.addEventListener("".concat(name, "start"), _this.onTransitionStart);
          node.addEventListener("".concat(name, "end"), _this.onTransitionEnd);
        });
      };

      _this.onTransitionStart = function (e) {
        if (_this.destroyed) {
          return;
        }

        var node = _this.containerRef.current;

        if (!e || e.target !== node || _this.animationStart) {
          return;
        }

        _this.resetEffect(node);
      };

      _this.onTransitionEnd = function (e) {
        if (!e || e.animationName !== 'fadeEffect') {
          return;
        }

        _this.resetEffect(e.target);
      };

      _this.bindAnimationEvent = function (node) {
        if (!node || !node.getAttribute || node.getAttribute('disabled') || node.className.indexOf('disabled') >= 0) {
          return;
        }

        var onClick = function onClick(e) {
          // Fix radio button click twice
          if (e.target.tagName === 'INPUT' || isHidden(e.target)) {
            return;
          }

          _this.resetEffect(node); // Get wave color from target


          var waveColor = getComputedStyle(node).getPropertyValue('border-top-color') || // Firefox Compatible
          getComputedStyle(node).getPropertyValue('border-color') || getComputedStyle(node).getPropertyValue('background-color');
          _this.clickWaveTimeoutId = window.setTimeout(function () {
            return _this.onClick(node, waveColor);
          }, 0);
          wrapperRaf$1.cancel(_this.animationStartId);
          _this.animationStart = true; // Render to trigger transition event cost 3 frames. Let's delay 10 frames to reset this.

          _this.animationStartId = wrapperRaf$1(function () {
            _this.animationStart = false;
          }, 10);
        };

        node.addEventListener('click', onClick, true);
        return {
          cancel: function cancel() {
            node.removeEventListener('click', onClick, true);
          }
        };
      };

      _this.renderWave = function (_ref) {
        var csp = _ref.csp;
        var children = _this.props.children;
        _this.csp = csp;
        if (! /*#__PURE__*/React.isValidElement(children)) return children;
        var ref = _this.containerRef;

        if (supportRef(children)) {
          ref = composeRef(children.ref, _this.containerRef);
        }

        return cloneElement(children, {
          ref: ref
        });
      };

      return _this;
    }

    _createClass(Wave, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var node = this.containerRef.current;

        if (!node || node.nodeType !== 1) {
          return;
        }

        this.instance = this.bindAnimationEvent(node);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.instance) {
          this.instance.cancel();
        }

        if (this.clickWaveTimeoutId) {
          clearTimeout(this.clickWaveTimeoutId);
        }

        this.destroyed = true;
      }
    }, {
      key: "getAttributeName",
      value: function getAttributeName() {
        var getPrefixCls = this.context.getPrefixCls;
        var insertExtraNode = this.props.insertExtraNode;
        return insertExtraNode ? "".concat(getPrefixCls(''), "-click-animating") : "".concat(getPrefixCls(''), "-click-animating-without-extra-node");
      }
    }, {
      key: "resetEffect",
      value: function resetEffect(node) {
        var _this2 = this;

        if (!node || node === this.extraNode || !(node instanceof Element)) {
          return;
        }

        var insertExtraNode = this.props.insertExtraNode;
        var attributeName = this.getAttributeName();
        node.setAttribute(attributeName, 'false'); // edge has bug on `removeAttribute` #14466

        if (styleForPseudo) {
          styleForPseudo.innerHTML = '';
        }

        if (insertExtraNode && this.extraNode && node.contains(this.extraNode)) {
          node.removeChild(this.extraNode);
        }

        ['transition', 'animation'].forEach(function (name) {
          node.removeEventListener("".concat(name, "start"), _this2.onTransitionStart);
          node.removeEventListener("".concat(name, "end"), _this2.onTransitionEnd);
        });
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderWave);
      }
    }]);

    return Wave;
  }(React.Component);
  Wave.contextType = ConfigContext;

  var getCollapsedWidth = function getCollapsedWidth() {
    return {
      width: 0,
      opacity: 0,
      transform: 'scale(0)'
    };
  };

  var getRealWidth = function getRealWidth(node) {
    return {
      width: node.scrollWidth,
      opacity: 1,
      transform: 'scale(1)'
    };
  };

  var LoadingIcon = function LoadingIcon(_ref) {
    var prefixCls = _ref.prefixCls,
        loading = _ref.loading,
        existIcon = _ref.existIcon;
    var visible = !!loading;

    if (existIcon) {
      return /*#__PURE__*/React__default['default'].createElement("span", {
        className: "".concat(prefixCls, "-loading-icon")
      }, /*#__PURE__*/React__default['default'].createElement(LoadingOutlined$2, null));
    }

    return /*#__PURE__*/React__default['default'].createElement(CSSMotion, {
      visible: visible // We do not really use this motionName
      ,
      motionName: "".concat(prefixCls, "-loading-icon-motion"),
      removeOnLeave: true,
      onAppearStart: getCollapsedWidth,
      onAppearActive: getRealWidth,
      onEnterStart: getCollapsedWidth,
      onEnterActive: getRealWidth,
      onLeaveStart: getRealWidth,
      onLeaveActive: getCollapsedWidth
    }, function (_ref2, ref) {
      var className = _ref2.className,
          style = _ref2.style;
      return /*#__PURE__*/React__default['default'].createElement("span", {
        className: "".concat(prefixCls, "-loading-icon"),
        style: style,
        ref: ref
      }, /*#__PURE__*/React__default['default'].createElement(LoadingOutlined$2, {
        className: className
      }));
    });
  };

  var __rest$4 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var rxTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
  var isTwoCNChar = rxTwoCNChar.test.bind(rxTwoCNChar);

  function isString(str) {
    return typeof str === 'string';
  }

  function isUnborderedButtonType(type) {
    return type === 'text' || type === 'link';
  }

  function isReactFragment(node) {
    return /*#__PURE__*/React.isValidElement(node) && node.type === React.Fragment;
  } // Insert one space between two chinese characters automatically.


  function insertSpace(child, needInserted) {
    // Check the child if is undefined or null.
    if (child == null) {
      return;
    }

    var SPACE = needInserted ? ' ' : ''; // strictNullChecks oops.

    if (typeof child !== 'string' && typeof child !== 'number' && isString(child.type) && isTwoCNChar(child.props.children)) {
      return cloneElement(child, {
        children: child.props.children.split('').join(SPACE)
      });
    }

    if (typeof child === 'string') {
      return isTwoCNChar(child) ? /*#__PURE__*/React.createElement("span", null, child.split('').join(SPACE)) : /*#__PURE__*/React.createElement("span", null, child);
    }

    if (isReactFragment(child)) {
      return /*#__PURE__*/React.createElement("span", null, child);
    }

    return child;
  }

  function spaceChildren(children, needInserted) {
    var isPrevChildPure = false;
    var childList = [];
    React.Children.forEach(children, function (child) {
      var type = _typeof$1(child);

      var isCurrentChildPure = type === 'string' || type === 'number';

      if (isPrevChildPure && isCurrentChildPure) {
        var lastIndex = childList.length - 1;
        var lastChild = childList[lastIndex];
        childList[lastIndex] = "".concat(lastChild).concat(child);
      } else {
        childList.push(child);
      }

      isPrevChildPure = isCurrentChildPure;
    }); // Pass to React.Children.map to auto fill key

    return React.Children.map(childList, function (child) {
      return insertSpace(child, needInserted);
    });
  }

  var ButtonTypes = tuple('default', 'primary', 'ghost', 'dashed', 'link', 'text');
  var ButtonShapes = tuple('default', 'circle', 'round');
  var ButtonHTMLTypes = tuple('submit', 'button', 'reset');
  function convertLegacyProps(type) {
    if (type === 'danger') {
      return {
        danger: true
      };
    }

    return {
      type: type
    };
  }

  var InternalButton = function InternalButton(props, ref) {
    var _classNames;

    var _props$loading = props.loading,
        loading = _props$loading === void 0 ? false : _props$loading,
        customizePrefixCls = props.prefixCls,
        type = props.type,
        danger = props.danger,
        _props$shape = props.shape,
        shape = _props$shape === void 0 ? 'default' : _props$shape,
        customizeSize = props.size,
        className = props.className,
        children = props.children,
        icon = props.icon,
        _props$ghost = props.ghost,
        ghost = _props$ghost === void 0 ? false : _props$ghost,
        _props$block = props.block,
        block = _props$block === void 0 ? false : _props$block,
        _props$htmlType = props.htmlType,
        htmlType = _props$htmlType === void 0 ? 'button' : _props$htmlType,
        rest = __rest$4(props, ["loading", "prefixCls", "type", "danger", "shape", "size", "className", "children", "icon", "ghost", "block", "htmlType"]);

    var size = React.useContext(SizeContext);

    var _React$useState = React.useState(!!loading),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        innerLoading = _React$useState2[0],
        setLoading = _React$useState2[1];

    var _React$useState3 = React.useState(false),
        _React$useState4 = _slicedToArray$1(_React$useState3, 2),
        hasTwoCNChar = _React$useState4[0],
        setHasTwoCNChar = _React$useState4[1];

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        autoInsertSpaceInButton = _React$useContext.autoInsertSpaceInButton,
        direction = _React$useContext.direction;

    var buttonRef = ref || /*#__PURE__*/React.createRef();
    var delayTimeoutRef = React.useRef();

    var isNeedInserted = function isNeedInserted() {
      return React.Children.count(children) === 1 && !icon && !isUnborderedButtonType(type);
    };

    var fixTwoCNChar = function fixTwoCNChar() {
      // Fix for HOC usage like <FormatMessage />
      if (!buttonRef || !buttonRef.current || autoInsertSpaceInButton === false) {
        return;
      }

      var buttonText = buttonRef.current.textContent;

      if (isNeedInserted() && isTwoCNChar(buttonText)) {
        if (!hasTwoCNChar) {
          setHasTwoCNChar(true);
        }
      } else if (hasTwoCNChar) {
        setHasTwoCNChar(false);
      }
    }; // =============== Update Loading ===============


    var loadingOrDelay;

    if (_typeof$1(loading) === 'object' && loading.delay) {
      loadingOrDelay = loading.delay || true;
    } else {
      loadingOrDelay = !!loading;
    }

    React.useEffect(function () {
      clearTimeout(delayTimeoutRef.current);

      if (typeof loadingOrDelay === 'number') {
        delayTimeoutRef.current = window.setTimeout(function () {
          setLoading(loadingOrDelay);
        }, loadingOrDelay);
      } else {
        setLoading(loadingOrDelay);
      }
    }, [loadingOrDelay]);
    React.useEffect(fixTwoCNChar, [buttonRef]);

    var handleClick = function handleClick(e) {
      var _a;

      var onClick = props.onClick,
          disabled = props.disabled; // https://github.com/ant-design/ant-design/issues/30207

      if (innerLoading || disabled) {
        e.preventDefault();
        return;
      }

      (_a = onClick) === null || _a === void 0 ? void 0 : _a(e);
    };

    devWarning(!(typeof icon === 'string' && icon.length > 2), 'Button', "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon"));
    devWarning(!(ghost && isUnborderedButtonType(type)), 'Button', "`link` or `text` button can't be a `ghost` button.");
    var prefixCls = getPrefixCls('btn', customizePrefixCls);
    var autoInsertSpace = autoInsertSpaceInButton !== false; // large => lg
    // small => sm

    var sizeCls = '';

    switch (customizeSize || size) {
      case 'large':
        sizeCls = 'lg';
        break;

      case 'small':
        sizeCls = 'sm';
        break;
    }

    var iconType = innerLoading ? 'loading' : icon;
    var classes = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(type), type), _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(shape), shape !== 'default' && shape), _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(sizeCls), sizeCls), _defineProperty$1(_classNames, "".concat(prefixCls, "-icon-only"), !children && children !== 0 && !!iconType), _defineProperty$1(_classNames, "".concat(prefixCls, "-background-ghost"), ghost && !isUnborderedButtonType(type)), _defineProperty$1(_classNames, "".concat(prefixCls, "-loading"), innerLoading), _defineProperty$1(_classNames, "".concat(prefixCls, "-two-chinese-chars"), hasTwoCNChar && autoInsertSpace), _defineProperty$1(_classNames, "".concat(prefixCls, "-block"), block), _defineProperty$1(_classNames, "".concat(prefixCls, "-dangerous"), !!danger), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
    var iconNode = icon && !innerLoading ? icon : /*#__PURE__*/React.createElement(LoadingIcon, {
      existIcon: !!icon,
      prefixCls: prefixCls,
      loading: !!innerLoading
    });
    var kids = children || children === 0 ? spaceChildren(children, isNeedInserted() && autoInsertSpace) : null;
    var linkButtonRestProps = omit(rest, ['navigate']);

    if (linkButtonRestProps.href !== undefined) {
      return /*#__PURE__*/React.createElement("a", _extends$1({}, linkButtonRestProps, {
        className: classes,
        onClick: handleClick,
        ref: buttonRef
      }), iconNode, kids);
    }

    var buttonNode = /*#__PURE__*/React.createElement("button", _extends$1({}, rest, {
      type: htmlType,
      className: classes,
      onClick: handleClick,
      ref: buttonRef
    }), iconNode, kids);

    if (isUnborderedButtonType(type)) {
      return buttonNode;
    }

    return /*#__PURE__*/React.createElement(Wave, {
      disabled: !!innerLoading
    }, buttonNode);
  };

  var Button = /*#__PURE__*/React.forwardRef(InternalButton);
  Button.displayName = 'Button';
  Button.Group = ButtonGroup;
  Button.__ANT_BUTTON = true;

  //

  var shallowequal = function shallowEqual(objA, objB, compare, compareContext) {
    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

    if (ret !== void 0) {
      return !!ret;
    }

    if (objA === objB) {
      return true;
    }

    if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
      return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    if (keysA.length !== keysB.length) {
      return false;
    }

    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

    // Test for A's keys different from B.
    for (var idx = 0; idx < keysA.length; idx++) {
      var key = keysA[idx];

      if (!bHasOwnProperty(key)) {
        return false;
      }

      var valueA = objA[key];
      var valueB = objB[key];

      ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

      if (ret === false || (ret === void 0 && valueA !== valueB)) {
        return false;
      }
    }

    return true;
  };

  //! moment.js
  //! version : 2.29.1
  //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
  //! license : MIT
  //! momentjs.com

  var hookCallback;

  function hooks() {
      return hookCallback.apply(null, arguments);
  }

  // This is done to register the method called with moment()
  // without creating circular dependencies.
  function setHookCallback(callback) {
      hookCallback = callback;
  }

  function isArray$1(input) {
      return (
          input instanceof Array ||
          Object.prototype.toString.call(input) === '[object Array]'
      );
  }

  function isObject$2(input) {
      // IE8 will treat undefined and null as object if it wasn't for
      // input != null
      return (
          input != null &&
          Object.prototype.toString.call(input) === '[object Object]'
      );
  }

  function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
  }

  function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
      } else {
          var k;
          for (k in obj) {
              if (hasOwnProp(obj, k)) {
                  return false;
              }
          }
          return true;
      }
  }

  function isUndefined(input) {
      return input === void 0;
  }

  function isNumber(input) {
      return (
          typeof input === 'number' ||
          Object.prototype.toString.call(input) === '[object Number]'
      );
  }

  function isDate(input) {
      return (
          input instanceof Date ||
          Object.prototype.toString.call(input) === '[object Date]'
      );
  }

  function map(arr, fn) {
      var res = [],
          i;
      for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
      }
      return res;
  }

  function extend(a, b) {
      for (var i in b) {
          if (hasOwnProp(b, i)) {
              a[i] = b[i];
          }
      }

      if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
      }

      if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
      }

      return a;
  }

  function createUTC(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, true).utc();
  }

  function defaultParsingFlags() {
      // We need to deep clone this object.
      return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false,
      };
  }

  function getParsingFlags(m) {
      if (m._pf == null) {
          m._pf = defaultParsingFlags();
      }
      return m._pf;
  }

  var some;
  if (Array.prototype.some) {
      some = Array.prototype.some;
  } else {
      some = function (fun) {
          var t = Object(this),
              len = t.length >>> 0,
              i;

          for (i = 0; i < len; i++) {
              if (i in t && fun.call(this, t[i], i, t)) {
                  return true;
              }
          }

          return false;
      };
  }

  function isValid(m) {
      if (m._isValid == null) {
          var flags = getParsingFlags(m),
              parsedParts = some.call(flags.parsedDateParts, function (i) {
                  return i != null;
              }),
              isNowValid =
                  !isNaN(m._d.getTime()) &&
                  flags.overflow < 0 &&
                  !flags.empty &&
                  !flags.invalidEra &&
                  !flags.invalidMonth &&
                  !flags.invalidWeekday &&
                  !flags.weekdayMismatch &&
                  !flags.nullInput &&
                  !flags.invalidFormat &&
                  !flags.userInvalidated &&
                  (!flags.meridiem || (flags.meridiem && parsedParts));

          if (m._strict) {
              isNowValid =
                  isNowValid &&
                  flags.charsLeftOver === 0 &&
                  flags.unusedTokens.length === 0 &&
                  flags.bigHour === undefined;
          }

          if (Object.isFrozen == null || !Object.isFrozen(m)) {
              m._isValid = isNowValid;
          } else {
              return isNowValid;
          }
      }
      return m._isValid;
  }

  function createInvalid(flags) {
      var m = createUTC(NaN);
      if (flags != null) {
          extend(getParsingFlags(m), flags);
      } else {
          getParsingFlags(m).userInvalidated = true;
      }

      return m;
  }

  // Plugins that add properties should also add the key here (null value),
  // so we can properly clone ourselves.
  var momentProperties = (hooks.momentProperties = []),
      updateInProgress = false;

  function copyConfig(to, from) {
      var i, prop, val;

      if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject;
      }
      if (!isUndefined(from._i)) {
          to._i = from._i;
      }
      if (!isUndefined(from._f)) {
          to._f = from._f;
      }
      if (!isUndefined(from._l)) {
          to._l = from._l;
      }
      if (!isUndefined(from._strict)) {
          to._strict = from._strict;
      }
      if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm;
      }
      if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC;
      }
      if (!isUndefined(from._offset)) {
          to._offset = from._offset;
      }
      if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from);
      }
      if (!isUndefined(from._locale)) {
          to._locale = from._locale;
      }

      if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
              prop = momentProperties[i];
              val = from[prop];
              if (!isUndefined(val)) {
                  to[prop] = val;
              }
          }
      }

      return to;
  }

  // Moment prototype object
  function Moment(config) {
      copyConfig(this, config);
      this._d = new Date(config._d != null ? config._d.getTime() : NaN);
      if (!this.isValid()) {
          this._d = new Date(NaN);
      }
      // Prevent infinite loop in case updateOffset creates new moment
      // objects.
      if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
      }
  }

  function isMoment(obj) {
      return (
          obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
      );
  }

  function warn(msg) {
      if (
          hooks.suppressDeprecationWarnings === false &&
          typeof console !== 'undefined' &&
          console.warn
      ) {
          console.warn('Deprecation warning: ' + msg);
      }
  }

  function deprecate(msg, fn) {
      var firstTime = true;

      return extend(function () {
          if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
              var args = [],
                  arg,
                  i,
                  key;
              for (i = 0; i < arguments.length; i++) {
                  arg = '';
                  if (typeof arguments[i] === 'object') {
                      arg += '\n[' + i + '] ';
                      for (key in arguments[0]) {
                          if (hasOwnProp(arguments[0], key)) {
                              arg += key + ': ' + arguments[0][key] + ', ';
                          }
                      }
                      arg = arg.slice(0, -2); // Remove trailing comma and space
                  } else {
                      arg = arguments[i];
                  }
                  args.push(arg);
              }
              warn(
                  msg +
                      '\nArguments: ' +
                      Array.prototype.slice.call(args).join('') +
                      '\n' +
                      new Error().stack
              );
              firstTime = false;
          }
          return fn.apply(this, arguments);
      }, fn);
  }

  var deprecations = {};

  function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
      }
  }

  hooks.suppressDeprecationWarnings = false;
  hooks.deprecationHandler = null;

  function isFunction$1(input) {
      return (
          (typeof Function !== 'undefined' && input instanceof Function) ||
          Object.prototype.toString.call(input) === '[object Function]'
      );
  }

  function set$1(config) {
      var prop, i;
      for (i in config) {
          if (hasOwnProp(config, i)) {
              prop = config[i];
              if (isFunction$1(prop)) {
                  this[i] = prop;
              } else {
                  this['_' + i] = prop;
              }
          }
      }
      this._config = config;
      // Lenient ordinal parsing accepts just a number in addition to
      // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
      // TODO: Remove "ordinalParse" fallback in next major release.
      this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
              '|' +
              /\d{1,2}/.source
      );
  }

  function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig),
          prop;
      for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
              if (isObject$2(parentConfig[prop]) && isObject$2(childConfig[prop])) {
                  res[prop] = {};
                  extend(res[prop], parentConfig[prop]);
                  extend(res[prop], childConfig[prop]);
              } else if (childConfig[prop] != null) {
                  res[prop] = childConfig[prop];
              } else {
                  delete res[prop];
              }
          }
      }
      for (prop in parentConfig) {
          if (
              hasOwnProp(parentConfig, prop) &&
              !hasOwnProp(childConfig, prop) &&
              isObject$2(parentConfig[prop])
          ) {
              // make sure changes to properties don't modify parent config
              res[prop] = extend({}, res[prop]);
          }
      }
      return res;
  }

  function Locale(config) {
      if (config != null) {
          this.set(config);
      }
  }

  var keys$1;

  if (Object.keys) {
      keys$1 = Object.keys;
  } else {
      keys$1 = function (obj) {
          var i,
              res = [];
          for (i in obj) {
              if (hasOwnProp(obj, i)) {
                  res.push(i);
              }
          }
          return res;
      };
  }

  var defaultCalendar = {
      sameDay: '[Today at] LT',
      nextDay: '[Tomorrow at] LT',
      nextWeek: 'dddd [at] LT',
      lastDay: '[Yesterday at] LT',
      lastWeek: '[Last] dddd [at] LT',
      sameElse: 'L',
  };

  function calendar(key, mom, now) {
      var output = this._calendar[key] || this._calendar['sameElse'];
      return isFunction$1(output) ? output.call(mom, now) : output;
  }

  function zeroFill(number, targetLength, forceSign) {
      var absNumber = '' + Math.abs(number),
          zerosToFill = targetLength - absNumber.length,
          sign = number >= 0;
      return (
          (sign ? (forceSign ? '+' : '') : '-') +
          Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
          absNumber
      );
  }

  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
      localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
      formatFunctions = {},
      formatTokenFunctions = {};

  // token:    'M'
  // padded:   ['MM', 2]
  // ordinal:  'Mo'
  // callback: function () { this.month() + 1 }
  function addFormatToken(token, padded, ordinal, callback) {
      var func = callback;
      if (typeof callback === 'string') {
          func = function () {
              return this[callback]();
          };
      }
      if (token) {
          formatTokenFunctions[token] = func;
      }
      if (padded) {
          formatTokenFunctions[padded[0]] = function () {
              return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
      }
      if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
              return this.localeData().ordinal(
                  func.apply(this, arguments),
                  token
              );
          };
      }
  }

  function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
      }
      return input.replace(/\\/g, '');
  }

  function makeFormatFunction(format) {
      var array = format.match(formattingTokens),
          i,
          length;

      for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
              array[i] = formatTokenFunctions[array[i]];
          } else {
              array[i] = removeFormattingTokens(array[i]);
          }
      }

      return function (mom) {
          var output = '',
              i;
          for (i = 0; i < length; i++) {
              output += isFunction$1(array[i])
                  ? array[i].call(mom, format)
                  : array[i];
          }
          return output;
      };
  }

  // format date using native date object
  function formatMoment(m, format) {
      if (!m.isValid()) {
          return m.localeData().invalidDate();
      }

      format = expandFormat(format, m.localeData());
      formatFunctions[format] =
          formatFunctions[format] || makeFormatFunction(format);

      return formatFunctions[format](m);
  }

  function expandFormat(format, locale) {
      var i = 5;

      function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
      }

      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(
              localFormattingTokens,
              replaceLongDateFormatTokens
          );
          localFormattingTokens.lastIndex = 0;
          i -= 1;
      }

      return format;
  }

  var defaultLongDateFormat = {
      LTS: 'h:mm:ss A',
      LT: 'h:mm A',
      L: 'MM/DD/YYYY',
      LL: 'MMMM D, YYYY',
      LLL: 'MMMM D, YYYY h:mm A',
      LLLL: 'dddd, MMMM D, YYYY h:mm A',
  };

  function longDateFormat(key) {
      var format = this._longDateFormat[key],
          formatUpper = this._longDateFormat[key.toUpperCase()];

      if (format || !formatUpper) {
          return format;
      }

      this._longDateFormat[key] = formatUpper
          .match(formattingTokens)
          .map(function (tok) {
              if (
                  tok === 'MMMM' ||
                  tok === 'MM' ||
                  tok === 'DD' ||
                  tok === 'dddd'
              ) {
                  return tok.slice(1);
              }
              return tok;
          })
          .join('');

      return this._longDateFormat[key];
  }

  var defaultInvalidDate = 'Invalid date';

  function invalidDate() {
      return this._invalidDate;
  }

  var defaultOrdinal = '%d',
      defaultDayOfMonthOrdinalParse = /\d{1,2}/;

  function ordinal(number) {
      return this._ordinal.replace('%d', number);
  }

  var defaultRelativeTime = {
      future: 'in %s',
      past: '%s ago',
      s: 'a few seconds',
      ss: '%d seconds',
      m: 'a minute',
      mm: '%d minutes',
      h: 'an hour',
      hh: '%d hours',
      d: 'a day',
      dd: '%d days',
      w: 'a week',
      ww: '%d weeks',
      M: 'a month',
      MM: '%d months',
      y: 'a year',
      yy: '%d years',
  };

  function relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction$1(output)
          ? output(number, withoutSuffix, string, isFuture)
          : output.replace(/%d/i, number);
  }

  function pastFuture(diff, output) {
      var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
      return isFunction$1(format) ? format(output) : format.replace(/%s/i, output);
  }

  var aliases = {};

  function addUnitAlias(unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
  }

  function normalizeUnits(units) {
      return typeof units === 'string'
          ? aliases[units] || aliases[units.toLowerCase()]
          : undefined;
  }

  function normalizeObjectUnits(inputObject) {
      var normalizedInput = {},
          normalizedProp,
          prop;

      for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
              normalizedProp = normalizeUnits(prop);
              if (normalizedProp) {
                  normalizedInput[normalizedProp] = inputObject[prop];
              }
          }
      }

      return normalizedInput;
  }

  var priorities = {};

  function addUnitPriority(unit, priority) {
      priorities[unit] = priority;
  }

  function getPrioritizedUnits(unitsObj) {
      var units = [],
          u;
      for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
              units.push({ unit: u, priority: priorities[u] });
          }
      }
      units.sort(function (a, b) {
          return a.priority - b.priority;
      });
      return units;
  }

  function isLeapYear(year) {
      return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
  }

  function absFloor(number) {
      if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0;
      } else {
          return Math.floor(number);
      }
  }

  function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion,
          value = 0;

      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
      }

      return value;
  }

  function makeGetSet(unit, keepTime) {
      return function (value) {
          if (value != null) {
              set$1$1(this, unit, value);
              hooks.updateOffset(this, keepTime);
              return this;
          } else {
              return get$1(this, unit);
          }
      };
  }

  function get$1(mom, unit) {
      return mom.isValid()
          ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
          : NaN;
  }

  function set$1$1(mom, unit, value) {
      if (mom.isValid() && !isNaN(value)) {
          if (
              unit === 'FullYear' &&
              isLeapYear(mom.year()) &&
              mom.month() === 1 &&
              mom.date() === 29
          ) {
              value = toInt(value);
              mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                  value,
                  mom.month(),
                  daysInMonth(value, mom.month())
              );
          } else {
              mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
          }
      }
  }

  // MOMENTS

  function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction$1(this[units])) {
          return this[units]();
      }
      return this;
  }

  function stringSet(units, value) {
      if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units),
              i;
          for (i = 0; i < prioritized.length; i++) {
              this[prioritized[i].unit](units[prioritized[i].unit]);
          }
      } else {
          units = normalizeUnits(units);
          if (isFunction$1(this[units])) {
              return this[units](value);
          }
      }
      return this;
  }

  var match1 = /\d/, //       0 - 9
      match2 = /\d\d/, //      00 - 99
      match3 = /\d{3}/, //     000 - 999
      match4 = /\d{4}/, //    0000 - 9999
      match6 = /[+-]?\d{6}/, // -999999 - 999999
      match1to2 = /\d\d?/, //       0 - 99
      match3to4 = /\d\d\d\d?/, //     999 - 9999
      match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
      match1to3 = /\d{1,3}/, //       0 - 999
      match1to4 = /\d{1,4}/, //       0 - 9999
      match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
      matchUnsigned = /\d+/, //       0 - inf
      matchSigned = /[+-]?\d+/, //    -inf - inf
      matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
      matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
      matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months
      matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
      regexes;

  regexes = {};

  function addRegexToken(token, regex, strictRegex) {
      regexes[token] = isFunction$1(regex)
          ? regex
          : function (isStrict, localeData) {
                return isStrict && strictRegex ? strictRegex : regex;
            };
  }

  function getParseRegexForToken(token, config) {
      if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token));
      }

      return regexes[token](config._strict, config._locale);
  }

  // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
  function unescapeFormat(s) {
      return regexEscape(
          s
              .replace('\\', '')
              .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
                  matched,
                  p1,
                  p2,
                  p3,
                  p4
              ) {
                  return p1 || p2 || p3 || p4;
              })
      );
  }

  function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  var tokens = {};

  function addParseToken(token, callback) {
      var i,
          func = callback;
      if (typeof token === 'string') {
          token = [token];
      }
      if (isNumber(callback)) {
          func = function (input, array) {
              array[callback] = toInt(input);
          };
      }
      for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func;
      }
  }

  function addWeekParseToken(token, callback) {
      addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token);
      });
  }

  function addTimeToArrayFromToken(token, input, config) {
      if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token);
      }
  }

  var YEAR = 0,
      MONTH = 1,
      DATE = 2,
      HOUR = 3,
      MINUTE = 4,
      SECOND = 5,
      MILLISECOND = 6,
      WEEK = 7,
      WEEKDAY = 8;

  function mod(n, x) {
      return ((n % x) + x) % x;
  }

  var indexOf;

  if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
  } else {
      indexOf = function (o) {
          // I know
          var i;
          for (i = 0; i < this.length; ++i) {
              if (this[i] === o) {
                  return i;
              }
          }
          return -1;
      };
  }

  function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
          return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1
          ? isLeapYear(year)
              ? 29
              : 28
          : 31 - ((modMonth % 7) % 2);
  }

  // FORMATTING

  addFormatToken('M', ['MM', 2], 'Mo', function () {
      return this.month() + 1;
  });

  addFormatToken('MMM', 0, 0, function (format) {
      return this.localeData().monthsShort(this, format);
  });

  addFormatToken('MMMM', 0, 0, function (format) {
      return this.localeData().months(this, format);
  });

  // ALIASES

  addUnitAlias('month', 'M');

  // PRIORITY

  addUnitPriority('month', 8);

  // PARSING

  addRegexToken('M', match1to2);
  addRegexToken('MM', match1to2, match2);
  addRegexToken('MMM', function (isStrict, locale) {
      return locale.monthsShortRegex(isStrict);
  });
  addRegexToken('MMMM', function (isStrict, locale) {
      return locale.monthsRegex(isStrict);
  });

  addParseToken(['M', 'MM'], function (input, array) {
      array[MONTH] = toInt(input) - 1;
  });

  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
      var month = config._locale.monthsParse(input, token, config._strict);
      // if we didn't find a month name, mark the date as invalid.
      if (month != null) {
          array[MONTH] = month;
      } else {
          getParsingFlags(config).invalidMonth = input;
      }
  });

  // LOCALES

  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
          '_'
      ),
      defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
          '_'
      ),
      MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
      defaultMonthsShortRegex = matchWord,
      defaultMonthsRegex = matchWord;

  function localeMonths(m, format) {
      if (!m) {
          return isArray$1(this._months)
              ? this._months
              : this._months['standalone'];
      }
      return isArray$1(this._months)
          ? this._months[m.month()]
          : this._months[
                (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                    ? 'format'
                    : 'standalone'
            ][m.month()];
  }

  function localeMonthsShort(m, format) {
      if (!m) {
          return isArray$1(this._monthsShort)
              ? this._monthsShort
              : this._monthsShort['standalone'];
      }
      return isArray$1(this._monthsShort)
          ? this._monthsShort[m.month()]
          : this._monthsShort[
                MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
            ][m.month()];
  }

  function handleStrictParse(monthName, format, strict) {
      var i,
          ii,
          mom,
          llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
              mom = createUTC([2000, i]);
              this._shortMonthsParse[i] = this.monthsShort(
                  mom,
                  ''
              ).toLocaleLowerCase();
              this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
      }

      if (strict) {
          if (format === 'MMM') {
              ii = indexOf.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
          }
      } else {
          if (format === 'MMM') {
              ii = indexOf.call(this._shortMonthsParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf.call(this._longMonthsParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf.call(this._longMonthsParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf.call(this._shortMonthsParse, llc);
              return ii !== -1 ? ii : null;
          }
      }
  }

  function localeMonthsParse(monthName, format, strict) {
      var i, mom, regex;

      if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict);
      }

      if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
      }

      // TODO: add sorting
      // Sorting makes sure if one month (or abbr) is a prefix of another
      // see sorting in computeMonthsParse
      for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          if (strict && !this._longMonthsParse[i]) {
              this._longMonthsParse[i] = new RegExp(
                  '^' + this.months(mom, '').replace('.', '') + '$',
                  'i'
              );
              this._shortMonthsParse[i] = new RegExp(
                  '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                  'i'
              );
          }
          if (!strict && !this._monthsParse[i]) {
              regex =
                  '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
              this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (
              strict &&
              format === 'MMMM' &&
              this._longMonthsParse[i].test(monthName)
          ) {
              return i;
          } else if (
              strict &&
              format === 'MMM' &&
              this._shortMonthsParse[i].test(monthName)
          ) {
              return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
              return i;
          }
      }
  }

  // MOMENTS

  function setMonth(mom, value) {
      var dayOfMonth;

      if (!mom.isValid()) {
          // No op
          return mom;
      }

      if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
              value = toInt(value);
          } else {
              value = mom.localeData().monthsParse(value);
              // TODO: Another silent failure?
              if (!isNumber(value)) {
                  return mom;
              }
          }
      }

      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
      mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
      return mom;
  }

  function getSetMonth(value) {
      if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
      } else {
          return get$1(this, 'Month');
      }
  }

  function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
  }

  function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
              computeMonthsParse.call(this);
          }
          if (isStrict) {
              return this._monthsShortStrictRegex;
          } else {
              return this._monthsShortRegex;
          }
      } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
              this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict
              ? this._monthsShortStrictRegex
              : this._monthsShortRegex;
      }
  }

  function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
              computeMonthsParse.call(this);
          }
          if (isStrict) {
              return this._monthsStrictRegex;
          } else {
              return this._monthsRegex;
          }
      } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
              this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict
              ? this._monthsStrictRegex
              : this._monthsRegex;
      }
  }

  function computeMonthsParse() {
      function cmpLenRev(a, b) {
          return b.length - a.length;
      }

      var shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom;
      for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''));
      }
      // Sorting makes sure if one month (or abbr) is a prefix of another it
      // will match the longer piece.
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
      }
      for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
      }

      this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp(
          '^(' + longPieces.join('|') + ')',
          'i'
      );
      this._monthsShortStrictRegex = new RegExp(
          '^(' + shortPieces.join('|') + ')',
          'i'
      );
  }

  // FORMATTING

  addFormatToken('Y', 0, 0, function () {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : '+' + y;
  });

  addFormatToken(0, ['YY', 2], 0, function () {
      return this.year() % 100;
  });

  addFormatToken(0, ['YYYY', 4], 0, 'year');
  addFormatToken(0, ['YYYYY', 5], 0, 'year');
  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

  // ALIASES

  addUnitAlias('year', 'y');

  // PRIORITIES

  addUnitPriority('year', 1);

  // PARSING

  addRegexToken('Y', matchSigned);
  addRegexToken('YY', match1to2, match2);
  addRegexToken('YYYY', match1to4, match4);
  addRegexToken('YYYYY', match1to6, match6);
  addRegexToken('YYYYYY', match1to6, match6);

  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
  addParseToken('YYYY', function (input, array) {
      array[YEAR] =
          input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
  });
  addParseToken('YY', function (input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
  });
  addParseToken('Y', function (input, array) {
      array[YEAR] = parseInt(input, 10);
  });

  // HELPERS

  function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
  }

  // HOOKS

  hooks.parseTwoDigitYear = function (input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
  };

  // MOMENTS

  var getSetYear = makeGetSet('FullYear', true);

  function getIsLeapYear() {
      return isLeapYear(this.year());
  }

  function createDate(y, m, d, h, M, s, ms) {
      // can't just apply() to create a date:
      // https://stackoverflow.com/q/181348
      var date;
      // the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
              date.setFullYear(y);
          }
      } else {
          date = new Date(y, m, d, h, M, s, ms);
      }

      return date;
  }

  function createUTCDate(y) {
      var date, args;
      // the Date.UTC function remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          // preserve leap years using a full 400 year cycle, then reset
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
              date.setUTCFullYear(y);
          }
      } else {
          date = new Date(Date.UTC.apply(null, arguments));
      }

      return date;
  }

  // start-of-first-week - start-of-year
  function firstWeekOffset(year, dow, doy) {
      var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
          fwd = 7 + dow - doy,
          // first-week day local weekday -- which local weekday is fwd
          fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

      return -fwdlw + fwd - 1;
  }

  // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7,
          weekOffset = firstWeekOffset(year, dow, doy),
          dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
          resYear,
          resDayOfYear;

      if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
      } else {
          resYear = year;
          resDayOfYear = dayOfYear;
      }

      return {
          year: resYear,
          dayOfYear: resDayOfYear,
      };
  }

  function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy),
          week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
          resWeek,
          resYear;

      if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
      } else {
          resYear = mom.year();
          resWeek = week;
      }

      return {
          week: resWeek,
          year: resYear,
      };
  }

  function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy),
          weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
  }

  // FORMATTING

  addFormatToken('w', ['ww', 2], 'wo', 'week');
  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

  // ALIASES

  addUnitAlias('week', 'w');
  addUnitAlias('isoWeek', 'W');

  // PRIORITIES

  addUnitPriority('week', 5);
  addUnitPriority('isoWeek', 5);

  // PARSING

  addRegexToken('w', match1to2);
  addRegexToken('ww', match1to2, match2);
  addRegexToken('W', match1to2);
  addRegexToken('WW', match1to2, match2);

  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
      input,
      week,
      config,
      token
  ) {
      week[token.substr(0, 1)] = toInt(input);
  });

  // HELPERS

  // LOCALES

  function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
  }

  var defaultLocaleWeek = {
      dow: 0, // Sunday is the first day of the week.
      doy: 6, // The week that contains Jan 6th is the first week of the year.
  };

  function localeFirstDayOfWeek() {
      return this._week.dow;
  }

  function localeFirstDayOfYear() {
      return this._week.doy;
  }

  // MOMENTS

  function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, 'd');
  }

  function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, 'd');
  }

  // FORMATTING

  addFormatToken('d', 0, 'do', 'day');

  addFormatToken('dd', 0, 0, function (format) {
      return this.localeData().weekdaysMin(this, format);
  });

  addFormatToken('ddd', 0, 0, function (format) {
      return this.localeData().weekdaysShort(this, format);
  });

  addFormatToken('dddd', 0, 0, function (format) {
      return this.localeData().weekdays(this, format);
  });

  addFormatToken('e', 0, 0, 'weekday');
  addFormatToken('E', 0, 0, 'isoWeekday');

  // ALIASES

  addUnitAlias('day', 'd');
  addUnitAlias('weekday', 'e');
  addUnitAlias('isoWeekday', 'E');

  // PRIORITY
  addUnitPriority('day', 11);
  addUnitPriority('weekday', 11);
  addUnitPriority('isoWeekday', 11);

  // PARSING

  addRegexToken('d', match1to2);
  addRegexToken('e', match1to2);
  addRegexToken('E', match1to2);
  addRegexToken('dd', function (isStrict, locale) {
      return locale.weekdaysMinRegex(isStrict);
  });
  addRegexToken('ddd', function (isStrict, locale) {
      return locale.weekdaysShortRegex(isStrict);
  });
  addRegexToken('dddd', function (isStrict, locale) {
      return locale.weekdaysRegex(isStrict);
  });

  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
      var weekday = config._locale.weekdaysParse(input, token, config._strict);
      // if we didn't get a weekday name, mark the date as invalid
      if (weekday != null) {
          week.d = weekday;
      } else {
          getParsingFlags(config).invalidWeekday = input;
      }
  });

  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
      week[token] = toInt(input);
  });

  // HELPERS

  function parseWeekday(input, locale) {
      if (typeof input !== 'string') {
          return input;
      }

      if (!isNaN(input)) {
          return parseInt(input, 10);
      }

      input = locale.weekdaysParse(input);
      if (typeof input === 'number') {
          return input;
      }

      return null;
  }

  function parseIsoWeekday(input, locale) {
      if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
  }

  // LOCALES
  function shiftWeekdays(ws, n) {
      return ws.slice(n, 7).concat(ws.slice(0, n));
  }

  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
          '_'
      ),
      defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
      defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
      defaultWeekdaysRegex = matchWord,
      defaultWeekdaysShortRegex = matchWord,
      defaultWeekdaysMinRegex = matchWord;

  function localeWeekdays(m, format) {
      var weekdays = isArray$1(this._weekdays)
          ? this._weekdays
          : this._weekdays[
                m && m !== true && this._weekdays.isFormat.test(format)
                    ? 'format'
                    : 'standalone'
            ];
      return m === true
          ? shiftWeekdays(weekdays, this._week.dow)
          : m
          ? weekdays[m.day()]
          : weekdays;
  }

  function localeWeekdaysShort(m) {
      return m === true
          ? shiftWeekdays(this._weekdaysShort, this._week.dow)
          : m
          ? this._weekdaysShort[m.day()]
          : this._weekdaysShort;
  }

  function localeWeekdaysMin(m) {
      return m === true
          ? shiftWeekdays(this._weekdaysMin, this._week.dow)
          : m
          ? this._weekdaysMin[m.day()]
          : this._weekdaysMin;
  }

  function handleStrictParse$1(weekdayName, format, strict) {
      var i,
          ii,
          mom,
          llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];

          for (i = 0; i < 7; ++i) {
              mom = createUTC([2000, 1]).day(i);
              this._minWeekdaysParse[i] = this.weekdaysMin(
                  mom,
                  ''
              ).toLocaleLowerCase();
              this._shortWeekdaysParse[i] = this.weekdaysShort(
                  mom,
                  ''
              ).toLocaleLowerCase();
              this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
      }

      if (strict) {
          if (format === 'dddd') {
              ii = indexOf.call(this._weekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          }
      } else {
          if (format === 'dddd') {
              ii = indexOf.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf.call(this._minWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          } else {
              ii = indexOf.call(this._minWeekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf.call(this._weekdaysParse, llc);
              if (ii !== -1) {
                  return ii;
              }
              ii = indexOf.call(this._shortWeekdaysParse, llc);
              return ii !== -1 ? ii : null;
          }
      }
  }

  function localeWeekdaysParse(weekdayName, format, strict) {
      var i, mom, regex;

      if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict);
      }

      if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
      }

      for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already

          mom = createUTC([2000, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
              this._fullWeekdaysParse[i] = new RegExp(
                  '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                  'i'
              );
              this._shortWeekdaysParse[i] = new RegExp(
                  '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                  'i'
              );
              this._minWeekdaysParse[i] = new RegExp(
                  '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                  'i'
              );
          }
          if (!this._weekdaysParse[i]) {
              regex =
                  '^' +
                  this.weekdays(mom, '') +
                  '|^' +
                  this.weekdaysShort(mom, '') +
                  '|^' +
                  this.weekdaysMin(mom, '');
              this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (
              strict &&
              format === 'dddd' &&
              this._fullWeekdaysParse[i].test(weekdayName)
          ) {
              return i;
          } else if (
              strict &&
              format === 'ddd' &&
              this._shortWeekdaysParse[i].test(weekdayName)
          ) {
              return i;
          } else if (
              strict &&
              format === 'dd' &&
              this._minWeekdaysParse[i].test(weekdayName)
          ) {
              return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
              return i;
          }
      }
  }

  // MOMENTS

  function getSetDayOfWeek(input) {
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
      } else {
          return day;
      }
  }

  function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, 'd');
  }

  function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }

      // behaves the same as moment#day except
      // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
      // as a setter, sunday should belong to the previous week.

      if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
          return this.day() || 7;
      }
  }

  function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              computeWeekdaysParse.call(this);
          }
          if (isStrict) {
              return this._weekdaysStrictRegex;
          } else {
              return this._weekdaysRegex;
          }
      } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict
              ? this._weekdaysStrictRegex
              : this._weekdaysRegex;
      }
  }

  function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              computeWeekdaysParse.call(this);
          }
          if (isStrict) {
              return this._weekdaysShortStrictRegex;
          } else {
              return this._weekdaysShortRegex;
          }
      } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
              this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict
              ? this._weekdaysShortStrictRegex
              : this._weekdaysShortRegex;
      }
  }

  function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
              computeWeekdaysParse.call(this);
          }
          if (isStrict) {
              return this._weekdaysMinStrictRegex;
          } else {
              return this._weekdaysMinRegex;
          }
      } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
              this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict
              ? this._weekdaysMinStrictRegex
              : this._weekdaysMinRegex;
      }
  }

  function computeWeekdaysParse() {
      function cmpLenRev(a, b) {
          return b.length - a.length;
      }

      var minPieces = [],
          shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom,
          minp,
          shortp,
          longp;
      for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ''));
          shortp = regexEscape(this.weekdaysShort(mom, ''));
          longp = regexEscape(this.weekdays(mom, ''));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
      }
      // Sorting makes sure if one weekday (or abbr) is a prefix of another it
      // will match the longer piece.
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);

      this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;

      this._weekdaysStrictRegex = new RegExp(
          '^(' + longPieces.join('|') + ')',
          'i'
      );
      this._weekdaysShortStrictRegex = new RegExp(
          '^(' + shortPieces.join('|') + ')',
          'i'
      );
      this._weekdaysMinStrictRegex = new RegExp(
          '^(' + minPieces.join('|') + ')',
          'i'
      );
  }

  // FORMATTING

  function hFormat() {
      return this.hours() % 12 || 12;
  }

  function kFormat() {
      return this.hours() || 24;
  }

  addFormatToken('H', ['HH', 2], 0, 'hour');
  addFormatToken('h', ['hh', 2], 0, hFormat);
  addFormatToken('k', ['kk', 2], 0, kFormat);

  addFormatToken('hmm', 0, 0, function () {
      return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
  });

  addFormatToken('hmmss', 0, 0, function () {
      return (
          '' +
          hFormat.apply(this) +
          zeroFill(this.minutes(), 2) +
          zeroFill(this.seconds(), 2)
      );
  });

  addFormatToken('Hmm', 0, 0, function () {
      return '' + this.hours() + zeroFill(this.minutes(), 2);
  });

  addFormatToken('Hmmss', 0, 0, function () {
      return (
          '' +
          this.hours() +
          zeroFill(this.minutes(), 2) +
          zeroFill(this.seconds(), 2)
      );
  });

  function meridiem(token, lowercase) {
      addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(
              this.hours(),
              this.minutes(),
              lowercase
          );
      });
  }

  meridiem('a', true);
  meridiem('A', false);

  // ALIASES

  addUnitAlias('hour', 'h');

  // PRIORITY
  addUnitPriority('hour', 13);

  // PARSING

  function matchMeridiem(isStrict, locale) {
      return locale._meridiemParse;
  }

  addRegexToken('a', matchMeridiem);
  addRegexToken('A', matchMeridiem);
  addRegexToken('H', match1to2);
  addRegexToken('h', match1to2);
  addRegexToken('k', match1to2);
  addRegexToken('HH', match1to2, match2);
  addRegexToken('hh', match1to2, match2);
  addRegexToken('kk', match1to2, match2);

  addRegexToken('hmm', match3to4);
  addRegexToken('hmmss', match5to6);
  addRegexToken('Hmm', match3to4);
  addRegexToken('Hmmss', match5to6);

  addParseToken(['H', 'HH'], HOUR);
  addParseToken(['k', 'kk'], function (input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
  });
  addParseToken(['a', 'A'], function (input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
  });
  addParseToken(['h', 'hh'], function (input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmmss', function (input, array, config) {
      var pos1 = input.length - 4,
          pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
  });
  addParseToken('Hmm', function (input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
  });
  addParseToken('Hmmss', function (input, array, config) {
      var pos1 = input.length - 4,
          pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
  });

  // LOCALES

  function localeIsPM(input) {
      // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
      // Using charAt should be more compatible.
      return (input + '').toLowerCase().charAt(0) === 'p';
  }

  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
      // Setting the hour should keep the time, because the user explicitly
      // specified which hour they want. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.
      getSetHour = makeGetSet('Hours', true);

  function localeMeridiem(hours, minutes, isLower) {
      if (hours > 11) {
          return isLower ? 'pm' : 'PM';
      } else {
          return isLower ? 'am' : 'AM';
      }
  }

  var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,

      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,

      week: defaultLocaleWeek,

      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,

      meridiemParse: defaultLocaleMeridiemParse,
  };

  // internal storage for locale config files
  var locales = {},
      localeFamilies = {},
      globalLocale;

  function commonPrefix(arr1, arr2) {
      var i,
          minl = Math.min(arr1.length, arr2.length);
      for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
              return i;
          }
      }
      return minl;
  }

  function normalizeLocale(key) {
      return key ? key.toLowerCase().replace('_', '-') : key;
  }

  // pick the locale from the array
  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
  function chooseLocale(names) {
      var i = 0,
          j,
          next,
          locale,
          split;

      while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
              locale = loadLocale(split.slice(0, j).join('-'));
              if (locale) {
                  return locale;
              }
              if (
                  next &&
                  next.length >= j &&
                  commonPrefix(split, next) >= j - 1
              ) {
                  //the next array item is better than a shallower substring of this one
                  break;
              }
              j--;
          }
          i++;
      }
      return globalLocale;
  }

  function loadLocale(name) {
      var oldLocale = null,
          aliasedRequire;
      // TODO: Find a better way to register and load all the locales in Node
      if (
          locales[name] === undefined &&
          typeof module !== 'undefined' &&
          module &&
          module.exports
      ) {
          try {
              oldLocale = globalLocale._abbr;
              aliasedRequire = require;
              aliasedRequire('./locale/' + name);
              getSetGlobalLocale(oldLocale);
          } catch (e) {
              // mark as not found to avoid repeating expensive file require call causing high CPU
              // when trying to find en-US, en_US, en-us for every format call
              locales[name] = null; // null means not found
          }
      }
      return locales[name];
  }

  // This function will load locale and then set the global locale.  If
  // no arguments are passed in, it will simply return the current global
  // locale key.
  function getSetGlobalLocale(key, values) {
      var data;
      if (key) {
          if (isUndefined(values)) {
              data = getLocale(key);
          } else {
              data = defineLocale(key, values);
          }

          if (data) {
              // moment.duration._locale = moment._locale = data;
              globalLocale = data;
          } else {
              if (typeof console !== 'undefined' && console.warn) {
                  //warn user if arguments are passed but the locale could not be set
                  console.warn(
                      'Locale ' + key + ' not found. Did you forget to load it?'
                  );
              }
          }
      }

      return globalLocale._abbr;
  }

  function defineLocale(name, config) {
      if (config !== null) {
          var locale,
              parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
              deprecateSimple(
                  'defineLocaleOverride',
                  'use moment.updateLocale(localeName, config) to change ' +
                      'an existing locale. moment.defineLocale(localeName, ' +
                      'config) should only be used for creating a new locale ' +
                      'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
              );
              parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
              if (locales[config.parentLocale] != null) {
                  parentConfig = locales[config.parentLocale]._config;
              } else {
                  locale = loadLocale(config.parentLocale);
                  if (locale != null) {
                      parentConfig = locale._config;
                  } else {
                      if (!localeFamilies[config.parentLocale]) {
                          localeFamilies[config.parentLocale] = [];
                      }
                      localeFamilies[config.parentLocale].push({
                          name: name,
                          config: config,
                      });
                      return null;
                  }
              }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));

          if (localeFamilies[name]) {
              localeFamilies[name].forEach(function (x) {
                  defineLocale(x.name, x.config);
              });
          }

          // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.
          getSetGlobalLocale(name);

          return locales[name];
      } else {
          // useful for testing
          delete locales[name];
          return null;
      }
  }

  function updateLocale(name, config) {
      if (config != null) {
          var locale,
              tmpLocale,
              parentConfig = baseConfig;

          if (locales[name] != null && locales[name].parentLocale != null) {
              // Update existing child locale in-place to avoid memory-leaks
              locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
              // MERGE
              tmpLocale = loadLocale(name);
              if (tmpLocale != null) {
                  parentConfig = tmpLocale._config;
              }
              config = mergeConfigs(parentConfig, config);
              if (tmpLocale == null) {
                  // updateLocale is called for creating a new locale
                  // Set abbr so it will have a name (getters return
                  // undefined otherwise).
                  config.abbr = name;
              }
              locale = new Locale(config);
              locale.parentLocale = locales[name];
              locales[name] = locale;
          }

          // backwards compat for now: also set the locale
          getSetGlobalLocale(name);
      } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
              if (locales[name].parentLocale != null) {
                  locales[name] = locales[name].parentLocale;
                  if (name === getSetGlobalLocale()) {
                      getSetGlobalLocale(name);
                  }
              } else if (locales[name] != null) {
                  delete locales[name];
              }
          }
      }
      return locales[name];
  }

  // returns locale data
  function getLocale(key) {
      var locale;

      if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
      }

      if (!key) {
          return globalLocale;
      }

      if (!isArray$1(key)) {
          //short-circuit everything else
          locale = loadLocale(key);
          if (locale) {
              return locale;
          }
          key = [key];
      }

      return chooseLocale(key);
  }

  function listLocales() {
      return keys$1(locales);
  }

  function checkOverflow(m) {
      var overflow,
          a = m._a;

      if (a && getParsingFlags(m).overflow === -2) {
          overflow =
              a[MONTH] < 0 || a[MONTH] > 11
                  ? MONTH
                  : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                  ? DATE
                  : a[HOUR] < 0 ||
                    a[HOUR] > 24 ||
                    (a[HOUR] === 24 &&
                        (a[MINUTE] !== 0 ||
                            a[SECOND] !== 0 ||
                            a[MILLISECOND] !== 0))
                  ? HOUR
                  : a[MINUTE] < 0 || a[MINUTE] > 59
                  ? MINUTE
                  : a[SECOND] < 0 || a[SECOND] > 59
                  ? SECOND
                  : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                  ? MILLISECOND
                  : -1;

          if (
              getParsingFlags(m)._overflowDayOfYear &&
              (overflow < YEAR || overflow > DATE)
          ) {
              overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
              overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
              overflow = WEEKDAY;
          }

          getParsingFlags(m).overflow = overflow;
      }

      return m;
  }

  // iso 8601 regex
  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
      basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
      tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
      isoDates = [
          ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
          ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
          ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
          ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
          ['YYYY-DDD', /\d{4}-\d{3}/],
          ['YYYY-MM', /\d{4}-\d\d/, false],
          ['YYYYYYMMDD', /[+-]\d{10}/],
          ['YYYYMMDD', /\d{8}/],
          ['GGGG[W]WWE', /\d{4}W\d{3}/],
          ['GGGG[W]WW', /\d{4}W\d{2}/, false],
          ['YYYYDDD', /\d{7}/],
          ['YYYYMM', /\d{6}/, false],
          ['YYYY', /\d{4}/, false],
      ],
      // iso time formats and regexes
      isoTimes = [
          ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
          ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
          ['HH:mm:ss', /\d\d:\d\d:\d\d/],
          ['HH:mm', /\d\d:\d\d/],
          ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
          ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
          ['HHmmss', /\d\d\d\d\d\d/],
          ['HHmm', /\d\d\d\d/],
          ['HH', /\d\d/],
      ],
      aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
      // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
      rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
      obsOffsets = {
          UT: 0,
          GMT: 0,
          EDT: -4 * 60,
          EST: -5 * 60,
          CDT: -5 * 60,
          CST: -6 * 60,
          MDT: -6 * 60,
          MST: -7 * 60,
          PDT: -7 * 60,
          PST: -8 * 60,
      };

  // date from iso format
  function configFromISO(config) {
      var i,
          l,
          string = config._i,
          match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
          allowTime,
          dateFormat,
          timeFormat,
          tzFormat;

      if (match) {
          getParsingFlags(config).iso = true;

          for (i = 0, l = isoDates.length; i < l; i++) {
              if (isoDates[i][1].exec(match[1])) {
                  dateFormat = isoDates[i][0];
                  allowTime = isoDates[i][2] !== false;
                  break;
              }
          }
          if (dateFormat == null) {
              config._isValid = false;
              return;
          }
          if (match[3]) {
              for (i = 0, l = isoTimes.length; i < l; i++) {
                  if (isoTimes[i][1].exec(match[3])) {
                      // match[2] should be 'T' or space
                      timeFormat = (match[2] || ' ') + isoTimes[i][0];
                      break;
                  }
              }
              if (timeFormat == null) {
                  config._isValid = false;
                  return;
              }
          }
          if (!allowTime && timeFormat != null) {
              config._isValid = false;
              return;
          }
          if (match[4]) {
              if (tzRegex.exec(match[4])) {
                  tzFormat = 'Z';
              } else {
                  config._isValid = false;
                  return;
              }
          }
          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
      } else {
          config._isValid = false;
      }
  }

  function extractFromRFC2822Strings(
      yearStr,
      monthStr,
      dayStr,
      hourStr,
      minuteStr,
      secondStr
  ) {
      var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10),
      ];

      if (secondStr) {
          result.push(parseInt(secondStr, 10));
      }

      return result;
  }

  function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
          return 2000 + year;
      } else if (year <= 999) {
          return 1900 + year;
      }
      return year;
  }

  function preprocessRFC2822(s) {
      // Remove comments and folding whitespace and replace multiple-spaces with a single space
      return s
          .replace(/\([^)]*\)|[\n\t]/g, ' ')
          .replace(/(\s\s+)/g, ' ')
          .replace(/^\s\s*/, '')
          .replace(/\s\s*$/, '');
  }

  function checkWeekday(weekdayStr, parsedInput, config) {
      if (weekdayStr) {
          // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
              weekdayActual = new Date(
                  parsedInput[0],
                  parsedInput[1],
                  parsedInput[2]
              ).getDay();
          if (weekdayProvided !== weekdayActual) {
              getParsingFlags(config).weekdayMismatch = true;
              config._isValid = false;
              return false;
          }
      }
      return true;
  }

  function calculateOffset(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
          return obsOffsets[obsOffset];
      } else if (militaryOffset) {
          // the only allowed military tz is Z
          return 0;
      } else {
          var hm = parseInt(numOffset, 10),
              m = hm % 100,
              h = (hm - m) / 100;
          return h * 60 + m;
      }
  }

  // date and time from ref 2822 format
  function configFromRFC2822(config) {
      var match = rfc2822.exec(preprocessRFC2822(config._i)),
          parsedArray;
      if (match) {
          parsedArray = extractFromRFC2822Strings(
              match[4],
              match[3],
              match[2],
              match[5],
              match[6],
              match[7]
          );
          if (!checkWeekday(match[1], parsedArray, config)) {
              return;
          }

          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);

          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

          getParsingFlags(config).rfc2822 = true;
      } else {
          config._isValid = false;
      }
  }

  // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
  function configFromString(config) {
      var matched = aspNetJsonRegex.exec(config._i);
      if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
      }

      configFromISO(config);
      if (config._isValid === false) {
          delete config._isValid;
      } else {
          return;
      }

      configFromRFC2822(config);
      if (config._isValid === false) {
          delete config._isValid;
      } else {
          return;
      }

      if (config._strict) {
          config._isValid = false;
      } else {
          // Final attempt, use Input Fallback
          hooks.createFromInputFallback(config);
      }
  }

  hooks.createFromInputFallback = deprecate(
      'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
          'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
          'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
      function (config) {
          config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
      }
  );

  // Pick the first defined of two or three arguments.
  function defaults(a, b, c) {
      if (a != null) {
          return a;
      }
      if (b != null) {
          return b;
      }
      return c;
  }

  function currentDateArray(config) {
      // hooks is actually the exported moment object
      var nowValue = new Date(hooks.now());
      if (config._useUTC) {
          return [
              nowValue.getUTCFullYear(),
              nowValue.getUTCMonth(),
              nowValue.getUTCDate(),
          ];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
  }

  // convert an array to a date.
  // the array should mirror the parameters below
  // note: all values past the year are optional and will default to the lowest possible value.
  // [year, month, day , hour, minute, second, millisecond]
  function configFromArray(config) {
      var i,
          date,
          input = [],
          currentDate,
          expectedWeekday,
          yearToUse;

      if (config._d) {
          return;
      }

      currentDate = currentDateArray(config);

      //compute day of the year from weeks and weekdays
      if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
      }

      //if the day of the year is set, figure out what it is
      if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

          if (
              config._dayOfYear > daysInYear(yearToUse) ||
              config._dayOfYear === 0
          ) {
              getParsingFlags(config)._overflowDayOfYear = true;
          }

          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
      }

      // Default to current date.
      // * if no year, month, day of month are given, default to today
      // * if day of month is given, default month and year
      // * if month is given, default only year
      // * if year is given, don't default anything
      for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
      }

      // Zero out whatever was not defaulted, including time
      for (; i < 7; i++) {
          config._a[i] = input[i] =
              config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
      }

      // Check for 24:00:00.000
      if (
          config._a[HOUR] === 24 &&
          config._a[MINUTE] === 0 &&
          config._a[SECOND] === 0 &&
          config._a[MILLISECOND] === 0
      ) {
          config._nextDay = true;
          config._a[HOUR] = 0;
      }

      config._d = (config._useUTC ? createUTCDate : createDate).apply(
          null,
          input
      );
      expectedWeekday = config._useUTC
          ? config._d.getUTCDay()
          : config._d.getDay();

      // Apply timezone offset from input. The actual utcOffset can be changed
      // with parseZone.
      if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
      }

      if (config._nextDay) {
          config._a[HOUR] = 24;
      }

      // check for mismatching day of week
      if (
          config._w &&
          typeof config._w.d !== 'undefined' &&
          config._w.d !== expectedWeekday
      ) {
          getParsingFlags(config).weekdayMismatch = true;
      }
  }

  function dayOfYearFromWeekInfo(config) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

      w = config._w;
      if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;

          // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).
          weekYear = defaults(
              w.GG,
              config._a[YEAR],
              weekOfYear(createLocal(), 1, 4).year
          );
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
              weekdayOverflow = true;
          }
      } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;

          curWeek = weekOfYear(createLocal(), dow, doy);

          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

          // Default to current week.
          week = defaults(w.w, curWeek.week);

          if (w.d != null) {
              // weekday -- low day numbers are considered next week
              weekday = w.d;
              if (weekday < 0 || weekday > 6) {
                  weekdayOverflow = true;
              }
          } else if (w.e != null) {
              // local weekday -- counting starts from beginning of week
              weekday = w.e + dow;
              if (w.e < 0 || w.e > 6) {
                  weekdayOverflow = true;
              }
          } else {
              // default to beginning of week
              weekday = dow;
          }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
      } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
      }
  }

  // constant that refers to the ISO standard
  hooks.ISO_8601 = function () {};

  // constant that refers to the RFC 2822 form
  hooks.RFC_2822 = function () {};

  // date from string and format string
  function configFromStringAndFormat(config) {
      // TODO: Move this to another part of the creation flow to prevent circular deps
      if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
      }
      if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
      }
      config._a = [];
      getParsingFlags(config).empty = true;

      // This array is used to make a Date, either with `new Date` or `Date.UTC`
      var string = '' + config._i,
          i,
          parsedInput,
          tokens,
          token,
          skipped,
          stringLength = string.length,
          totalParsedInputLength = 0,
          era;

      tokens =
          expandFormat(config._f, config._locale).match(formattingTokens) || [];

      for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) ||
              [])[0];
          if (parsedInput) {
              skipped = string.substr(0, string.indexOf(parsedInput));
              if (skipped.length > 0) {
                  getParsingFlags(config).unusedInput.push(skipped);
              }
              string = string.slice(
                  string.indexOf(parsedInput) + parsedInput.length
              );
              totalParsedInputLength += parsedInput.length;
          }
          // don't parse if it's not a known token
          if (formatTokenFunctions[token]) {
              if (parsedInput) {
                  getParsingFlags(config).empty = false;
              } else {
                  getParsingFlags(config).unusedTokens.push(token);
              }
              addTimeToArrayFromToken(token, parsedInput, config);
          } else if (config._strict && !parsedInput) {
              getParsingFlags(config).unusedTokens.push(token);
          }
      }

      // add remaining unparsed input length to the string
      getParsingFlags(config).charsLeftOver =
          stringLength - totalParsedInputLength;
      if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
      }

      // clear _12h flag if hour is <= 12
      if (
          config._a[HOUR] <= 12 &&
          getParsingFlags(config).bigHour === true &&
          config._a[HOUR] > 0
      ) {
          getParsingFlags(config).bigHour = undefined;
      }

      getParsingFlags(config).parsedDateParts = config._a.slice(0);
      getParsingFlags(config).meridiem = config._meridiem;
      // handle meridiem
      config._a[HOUR] = meridiemFixWrap(
          config._locale,
          config._a[HOUR],
          config._meridiem
      );

      // handle era
      era = getParsingFlags(config).era;
      if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
      }

      configFromArray(config);
      checkOverflow(config);
  }

  function meridiemFixWrap(locale, hour, meridiem) {
      var isPm;

      if (meridiem == null) {
          // nothing to do
          return hour;
      }
      if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem);
      } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);
          if (isPm && hour < 12) {
              hour += 12;
          }
          if (!isPm && hour === 12) {
              hour = 0;
          }
          return hour;
      } else {
          // this is not supposed to happen
          return hour;
      }
  }

  // date from string and array of format strings
  function configFromStringAndArray(config) {
      var tempConfig,
          bestMoment,
          scoreToBeat,
          i,
          currentScore,
          validFormatFound,
          bestFormatIsValid = false;

      if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
      }

      for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
              tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);

          if (isValid(tempConfig)) {
              validFormatFound = true;
          }

          // if there is any input that was not parsed add a penalty for that format
          currentScore += getParsingFlags(tempConfig).charsLeftOver;

          //or tokens
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

          getParsingFlags(tempConfig).score = currentScore;

          if (!bestFormatIsValid) {
              if (
                  scoreToBeat == null ||
                  currentScore < scoreToBeat ||
                  validFormatFound
              ) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
                  if (validFormatFound) {
                      bestFormatIsValid = true;
                  }
              }
          } else {
              if (currentScore < scoreToBeat) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
              }
          }
      }

      extend(config, bestMoment || tempConfig);
  }

  function configFromObject(config) {
      if (config._d) {
          return;
      }

      var i = normalizeObjectUnits(config._i),
          dayOrDate = i.day === undefined ? i.date : i.day;
      config._a = map(
          [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
          function (obj) {
              return obj && parseInt(obj, 10);
          }
      );

      configFromArray(config);
  }

  function createFromConfig(config) {
      var res = new Moment(checkOverflow(prepareConfig(config)));
      if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined;
      }

      return res;
  }

  function prepareConfig(config) {
      var input = config._i,
          format = config._f;

      config._locale = config._locale || getLocale(config._l);

      if (input === null || (format === undefined && input === '')) {
          return createInvalid({ nullInput: true });
      }

      if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
      }

      if (isMoment(input)) {
          return new Moment(checkOverflow(input));
      } else if (isDate(input)) {
          config._d = input;
      } else if (isArray$1(format)) {
          configFromStringAndArray(config);
      } else if (format) {
          configFromStringAndFormat(config);
      } else {
          configFromInput(config);
      }

      if (!isValid(config)) {
          config._d = null;
      }

      return config;
  }

  function configFromInput(config) {
      var input = config._i;
      if (isUndefined(input)) {
          config._d = new Date(hooks.now());
      } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
      } else if (typeof input === 'string') {
          configFromString(config);
      } else if (isArray$1(input)) {
          config._a = map(input.slice(0), function (obj) {
              return parseInt(obj, 10);
          });
          configFromArray(config);
      } else if (isObject$2(input)) {
          configFromObject(config);
      } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input);
      } else {
          hooks.createFromInputFallback(config);
      }
  }

  function createLocalOrUTC(input, format, locale, strict, isUTC) {
      var c = {};

      if (format === true || format === false) {
          strict = format;
          format = undefined;
      }

      if (locale === true || locale === false) {
          strict = locale;
          locale = undefined;
      }

      if (
          (isObject$2(input) && isObjectEmpty(input)) ||
          (isArray$1(input) && input.length === 0)
      ) {
          input = undefined;
      }
      // object construction must be done this way.
      // https://github.com/moment/moment/issues/1423
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale;
      c._i = input;
      c._f = format;
      c._strict = strict;

      return createFromConfig(c);
  }

  function createLocal(input, format, locale, strict) {
      return createLocalOrUTC(input, format, locale, strict, false);
  }

  var prototypeMin = deprecate(
          'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
          function () {
              var other = createLocal.apply(null, arguments);
              if (this.isValid() && other.isValid()) {
                  return other < this ? this : other;
              } else {
                  return createInvalid();
              }
          }
      ),
      prototypeMax = deprecate(
          'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
          function () {
              var other = createLocal.apply(null, arguments);
              if (this.isValid() && other.isValid()) {
                  return other > this ? this : other;
              } else {
                  return createInvalid();
              }
          }
      );

  // Pick a moment m from moments so that m[fn](other) is true for all
  // other. This relies on the function fn to be transitive.
  //
  // moments should either be an array of moment objects or an array, whose
  // first element is an array of moment objects.
  function pickBy(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray$1(moments[0])) {
          moments = moments[0];
      }
      if (!moments.length) {
          return createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
              res = moments[i];
          }
      }
      return res;
  }

  // TODO: Use [].sort instead?
  function min() {
      var args = [].slice.call(arguments, 0);

      return pickBy('isBefore', args);
  }

  function max() {
      var args = [].slice.call(arguments, 0);

      return pickBy('isAfter', args);
  }

  var now$1 = function () {
      return Date.now ? Date.now() : +new Date();
  };

  var ordering = [
      'year',
      'quarter',
      'month',
      'week',
      'day',
      'hour',
      'minute',
      'second',
      'millisecond',
  ];

  function isDurationValid(m) {
      var key,
          unitHasDecimal = false,
          i;
      for (key in m) {
          if (
              hasOwnProp(m, key) &&
              !(
                  indexOf.call(ordering, key) !== -1 &&
                  (m[key] == null || !isNaN(m[key]))
              )
          ) {
              return false;
          }
      }

      for (i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
              if (unitHasDecimal) {
                  return false; // only allow non-integers for smallest unit
              }
              if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                  unitHasDecimal = true;
              }
          }
      }

      return true;
  }

  function isValid$1() {
      return this._isValid;
  }

  function createInvalid$1() {
      return createDuration(NaN);
  }

  function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration),
          years = normalizedInput.year || 0,
          quarters = normalizedInput.quarter || 0,
          months = normalizedInput.month || 0,
          weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
          days = normalizedInput.day || 0,
          hours = normalizedInput.hour || 0,
          minutes = normalizedInput.minute || 0,
          seconds = normalizedInput.second || 0,
          milliseconds = normalizedInput.millisecond || 0;

      this._isValid = isDurationValid(normalizedInput);

      // representation for dateAddRemove
      this._milliseconds =
          +milliseconds +
          seconds * 1e3 + // 1000
          minutes * 6e4 + // 1000 * 60
          hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
      // Because of dateAddRemove treats 24 hours as different from a
      // day when working around DST, we need to store them separately
      this._days = +days + weeks * 7;
      // It is impossible to translate months into days without knowing
      // which months you are are talking about, so we have to store
      // it separately.
      this._months = +months + quarters * 3 + years * 12;

      this._data = {};

      this._locale = getLocale();

      this._bubble();
  }

  function isDuration(obj) {
      return obj instanceof Duration;
  }

  function absRound(number) {
      if (number < 0) {
          return Math.round(-1 * number) * -1;
      } else {
          return Math.round(number);
      }
  }

  // compare two arrays, return the number of differences
  function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length),
          lengthDiff = Math.abs(array1.length - array2.length),
          diffs = 0,
          i;
      for (i = 0; i < len; i++) {
          if (
              (dontConvert && array1[i] !== array2[i]) ||
              (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
          ) {
              diffs++;
          }
      }
      return diffs + lengthDiff;
  }

  // FORMATTING

  function offset(token, separator) {
      addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset(),
              sign = '+';
          if (offset < 0) {
              offset = -offset;
              sign = '-';
          }
          return (
              sign +
              zeroFill(~~(offset / 60), 2) +
              separator +
              zeroFill(~~offset % 60, 2)
          );
      });
  }

  offset('Z', ':');
  offset('ZZ', '');

  // PARSING

  addRegexToken('Z', matchShortOffset);
  addRegexToken('ZZ', matchShortOffset);
  addParseToken(['Z', 'ZZ'], function (input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
  });

  // HELPERS

  // timezone chunker
  // '+10:00' > ['10',  '00']
  // '-1530'  > ['-15', '30']
  var chunkOffset = /([\+\-]|\d\d)/gi;

  function offsetFromString(matcher, string) {
      var matches = (string || '').match(matcher),
          chunk,
          parts,
          minutes;

      if (matches === null) {
          return null;
      }

      chunk = matches[matches.length - 1] || [];
      parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
      minutes = +(parts[1] * 60) + toInt(parts[2]);

      return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
  }

  // Return a moment from input, that is local/utc/zone equivalent to model.
  function cloneWithOffset(input, model) {
      var res, diff;
      if (model._isUTC) {
          res = model.clone();
          diff =
              (isMoment(input) || isDate(input)
                  ? input.valueOf()
                  : createLocal(input).valueOf()) - res.valueOf();
          // Use low-level api, because this fn is low-level api.
          res._d.setTime(res._d.valueOf() + diff);
          hooks.updateOffset(res, false);
          return res;
      } else {
          return createLocal(input).local();
      }
  }

  function getDateOffset(m) {
      // On Firefox.24 Date#getTimezoneOffset returns a floating point.
      // https://github.com/moment/moment/pull/1871
      return -Math.round(m._d.getTimezoneOffset());
  }

  // HOOKS

  // This function will be called whenever a moment is mutated.
  // It is intended to keep the offset in sync with the timezone.
  hooks.updateOffset = function () {};

  // MOMENTS

  // keepLocalTime = true means only change the timezone, without
  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
  // +0200, so we adjust the time as needed, to be valid.
  //
  // Keeping the time actually adds/subtracts (one hour)
  // from the actual represented time. That is why we call updateOffset
  // a second time. In case it wants us to change the offset again
  // _changeInProgress == true case, then we have to adjust, because
  // there is no such time in the given timezone.
  function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset = this._offset || 0,
          localAdjust;
      if (!this.isValid()) {
          return input != null ? this : NaN;
      }
      if (input != null) {
          if (typeof input === 'string') {
              input = offsetFromString(matchShortOffset, input);
              if (input === null) {
                  return this;
              }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
              input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
              localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
              this.add(localAdjust, 'm');
          }
          if (offset !== input) {
              if (!keepLocalTime || this._changeInProgress) {
                  addSubtract(
                      this,
                      createDuration(input - offset, 'm'),
                      1,
                      false
                  );
              } else if (!this._changeInProgress) {
                  this._changeInProgress = true;
                  hooks.updateOffset(this, true);
                  this._changeInProgress = null;
              }
          }
          return this;
      } else {
          return this._isUTC ? offset : getDateOffset(this);
      }
  }

  function getSetZone(input, keepLocalTime) {
      if (input != null) {
          if (typeof input !== 'string') {
              input = -input;
          }

          this.utcOffset(input, keepLocalTime);

          return this;
      } else {
          return -this.utcOffset();
      }
  }

  function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
  }

  function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;

          if (keepLocalTime) {
              this.subtract(getDateOffset(this), 'm');
          }
      }
      return this;
  }

  function setOffsetToParsedOffset() {
      if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
              this.utcOffset(tZone);
          } else {
              this.utcOffset(0, true);
          }
      }
      return this;
  }

  function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
          return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;

      return (this.utcOffset() - input) % 60 === 0;
  }

  function isDaylightSavingTime() {
      return (
          this.utcOffset() > this.clone().month(0).utcOffset() ||
          this.utcOffset() > this.clone().month(5).utcOffset()
      );
  }

  function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
      }

      var c = {},
          other;

      copyConfig(c, this);
      c = prepareConfig(c);

      if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted =
              this.isValid() && compareArrays(c._a, other.toArray()) > 0;
      } else {
          this._isDSTShifted = false;
      }

      return this._isDSTShifted;
  }

  function isLocal() {
      return this.isValid() ? !this._isUTC : false;
  }

  function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
  }

  function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
  }

  // ASP.NET json date format regex
  var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
      // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day
      isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

  function createDuration(input, key) {
      var duration = input,
          // matching against regexp is expensive, do it on demand
          match = null,
          sign,
          ret,
          diffRes;

      if (isDuration(input)) {
          duration = {
              ms: input._milliseconds,
              d: input._days,
              M: input._months,
          };
      } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
              duration[key] = +input;
          } else {
              duration.milliseconds = +input;
          }
      } else if ((match = aspNetRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
              y: 0,
              d: toInt(match[DATE]) * sign,
              h: toInt(match[HOUR]) * sign,
              m: toInt(match[MINUTE]) * sign,
              s: toInt(match[SECOND]) * sign,
              ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
          };
      } else if ((match = isoRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
              y: parseIso(match[2], sign),
              M: parseIso(match[3], sign),
              w: parseIso(match[4], sign),
              d: parseIso(match[5], sign),
              h: parseIso(match[6], sign),
              m: parseIso(match[7], sign),
              s: parseIso(match[8], sign),
          };
      } else if (duration == null) {
          // checks for null or undefined
          duration = {};
      } else if (
          typeof duration === 'object' &&
          ('from' in duration || 'to' in duration)
      ) {
          diffRes = momentsDifference(
              createLocal(duration.from),
              createLocal(duration.to)
          );

          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
      }

      ret = new Duration(duration);

      if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
      }

      if (isDuration(input) && hasOwnProp(input, '_isValid')) {
          ret._isValid = input._isValid;
      }

      return ret;
  }

  createDuration.fn = Duration.prototype;
  createDuration.invalid = createInvalid$1;

  function parseIso(inp, sign) {
      // We'd normally use ~~inp for this, but unfortunately it also
      // converts floats to ints.
      // inp may be undefined, so careful calling replace on it.
      var res = inp && parseFloat(inp.replace(',', '.'));
      // apply sign while we're at it
      return (isNaN(res) ? 0 : res) * sign;
  }

  function positiveMomentsDifference(base, other) {
      var res = {};

      res.months =
          other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
      }

      res.milliseconds = +other - +base.clone().add(res.months, 'M');

      return res;
  }

  function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
      }

      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
      } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
      }

      return res;
  }

  // TODO: remove 'name' arg after deprecation is removed
  function createAdder(direction, name) {
      return function (val, period) {
          var dur, tmp;
          //invert the arguments, but complain about it
          if (period !== null && !isNaN(+period)) {
              deprecateSimple(
                  name,
                  'moment().' +
                      name +
                      '(period, number) is deprecated. Please use moment().' +
                      name +
                      '(number, period). ' +
                      'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
              );
              tmp = val;
              val = period;
              period = tmp;
          }

          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
      };
  }

  function addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds = duration._milliseconds,
          days = absRound(duration._days),
          months = absRound(duration._months);

      if (!mom.isValid()) {
          // No op
          return;
      }

      updateOffset = updateOffset == null ? true : updateOffset;

      if (months) {
          setMonth(mom, get$1(mom, 'Month') + months * isAdding);
      }
      if (days) {
          set$1$1(mom, 'Date', get$1(mom, 'Date') + days * isAdding);
      }
      if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
      }
      if (updateOffset) {
          hooks.updateOffset(mom, days || months);
      }
  }

  var add = createAdder(1, 'add'),
      subtract = createAdder(-1, 'subtract');

  function isString$1(input) {
      return typeof input === 'string' || input instanceof String;
  }

  // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
  function isMomentInput(input) {
      return (
          isMoment(input) ||
          isDate(input) ||
          isString$1(input) ||
          isNumber(input) ||
          isNumberOrStringArray(input) ||
          isMomentInputObject(input) ||
          input === null ||
          input === undefined
      );
  }

  function isMomentInputObject(input) {
      var objectTest = isObject$2(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = [
              'years',
              'year',
              'y',
              'months',
              'month',
              'M',
              'days',
              'day',
              'd',
              'dates',
              'date',
              'D',
              'hours',
              'hour',
              'h',
              'minutes',
              'minute',
              'm',
              'seconds',
              'second',
              's',
              'milliseconds',
              'millisecond',
              'ms',
          ],
          i,
          property;

      for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
      }

      return objectTest && propertyTest;
  }

  function isNumberOrStringArray(input) {
      var arrayTest = isArray$1(input),
          dataTypeTest = false;
      if (arrayTest) {
          dataTypeTest =
              input.filter(function (item) {
                  return !isNumber(item) && isString$1(input);
              }).length === 0;
      }
      return arrayTest && dataTypeTest;
  }

  function isCalendarSpec(input) {
      var objectTest = isObject$2(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = [
              'sameDay',
              'nextDay',
              'lastDay',
              'nextWeek',
              'lastWeek',
              'sameElse',
          ],
          i,
          property;

      for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
      }

      return objectTest && propertyTest;
  }

  function getCalendarFormat(myMoment, now) {
      var diff = myMoment.diff(now, 'days', true);
      return diff < -6
          ? 'sameElse'
          : diff < -1
          ? 'lastWeek'
          : diff < 0
          ? 'lastDay'
          : diff < 1
          ? 'sameDay'
          : diff < 2
          ? 'nextDay'
          : diff < 7
          ? 'nextWeek'
          : 'sameElse';
  }

  function calendar$1(time, formats) {
      // Support for single parameter, formats only overload to the calendar function
      if (arguments.length === 1) {
          if (!arguments[0]) {
              time = undefined;
              formats = undefined;
          } else if (isMomentInput(arguments[0])) {
              time = arguments[0];
              formats = undefined;
          } else if (isCalendarSpec(arguments[0])) {
              formats = arguments[0];
              time = undefined;
          }
      }
      // We want to compare the start of today, vs this.
      // Getting start-of-today depends on whether we're local/utc/offset or not.
      var now = time || createLocal(),
          sod = cloneWithOffset(now, this).startOf('day'),
          format = hooks.calendarFormat(this, sod) || 'sameElse',
          output =
              formats &&
              (isFunction$1(formats[format])
                  ? formats[format].call(this, now)
                  : formats[format]);

      return this.format(
          output || this.localeData().calendar(format, this, createLocal(now))
      );
  }

  function clone() {
      return new Moment(this);
  }

  function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
          return false;
      }
      units = normalizeUnits(units) || 'millisecond';
      if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
      } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
  }

  function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
          return false;
      }
      units = normalizeUnits(units) || 'millisecond';
      if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
      } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
  }

  function isBetween(from, to, units, inclusivity) {
      var localFrom = isMoment(from) ? from : createLocal(from),
          localTo = isMoment(to) ? to : createLocal(to);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
      }
      inclusivity = inclusivity || '()';
      return (
          (inclusivity[0] === '('
              ? this.isAfter(localFrom, units)
              : !this.isBefore(localFrom, units)) &&
          (inclusivity[1] === ')'
              ? this.isBefore(localTo, units)
              : !this.isAfter(localTo, units))
      );
  }

  function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input),
          inputMs;
      if (!(this.isValid() && localInput.isValid())) {
          return false;
      }
      units = normalizeUnits(units) || 'millisecond';
      if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
      } else {
          inputMs = localInput.valueOf();
          return (
              this.clone().startOf(units).valueOf() <= inputMs &&
              inputMs <= this.clone().endOf(units).valueOf()
          );
      }
  }

  function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
  }

  function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
  }

  function diff(input, units, asFloat) {
      var that, zoneDelta, output;

      if (!this.isValid()) {
          return NaN;
      }

      that = cloneWithOffset(input, this);

      if (!that.isValid()) {
          return NaN;
      }

      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

      units = normalizeUnits(units);

      switch (units) {
          case 'year':
              output = monthDiff(this, that) / 12;
              break;
          case 'month':
              output = monthDiff(this, that);
              break;
          case 'quarter':
              output = monthDiff(this, that) / 3;
              break;
          case 'second':
              output = (this - that) / 1e3;
              break; // 1000
          case 'minute':
              output = (this - that) / 6e4;
              break; // 1000 * 60
          case 'hour':
              output = (this - that) / 36e5;
              break; // 1000 * 60 * 60
          case 'day':
              output = (this - that - zoneDelta) / 864e5;
              break; // 1000 * 60 * 60 * 24, negate dst
          case 'week':
              output = (this - that - zoneDelta) / 6048e5;
              break; // 1000 * 60 * 60 * 24 * 7, negate dst
          default:
              output = this - that;
      }

      return asFloat ? output : absFloor(output);
  }

  function monthDiff(a, b) {
      if (a.date() < b.date()) {
          // end-of-month calculations work correct when the start month has more
          // days than the end month.
          return -monthDiff(b, a);
      }
      // difference in months
      var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
          // b is in (anchor - 1 month, anchor + 1 month)
          anchor = a.clone().add(wholeMonthDiff, 'months'),
          anchor2,
          adjust;

      if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor - anchor2);
      } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor2 - anchor);
      }

      //check for negative zero, return zero if negative zero
      return -(wholeMonthDiff + adjust) || 0;
  }

  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

  function toString() {
      return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
  }

  function toISOString(keepOffset) {
      if (!this.isValid()) {
          return null;
      }
      var utc = keepOffset !== true,
          m = utc ? this.clone().utc() : this;
      if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(
              m,
              utc
                  ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                  : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
          );
      }
      if (isFunction$1(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          if (utc) {
              return this.toDate().toISOString();
          } else {
              return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                  .toISOString()
                  .replace('Z', formatMoment(m, 'Z'));
          }
      }
      return formatMoment(
          m,
          utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
      );
  }

  /**
   * Return a human readable representation of a moment that can
   * also be evaluated to get a new moment which is the same
   *
   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
   */
  function inspect() {
      if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
      }
      var func = 'moment',
          zone = '',
          prefix,
          year,
          datetime,
          suffix;
      if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
      }
      prefix = '[' + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
      datetime = '-MM-DD[T]HH:mm:ss.SSS';
      suffix = zone + '[")]';

      return this.format(prefix + year + datetime + suffix);
  }

  function format$1(inputString) {
      if (!inputString) {
          inputString = this.isUtc()
              ? hooks.defaultFormatUtc
              : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
  }

  function from(time, withoutSuffix) {
      if (
          this.isValid() &&
          ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
      ) {
          return createDuration({ to: this, from: time })
              .locale(this.locale())
              .humanize(!withoutSuffix);
      } else {
          return this.localeData().invalidDate();
      }
  }

  function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
  }

  function to(time, withoutSuffix) {
      if (
          this.isValid() &&
          ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
      ) {
          return createDuration({ from: this, to: time })
              .locale(this.locale())
              .humanize(!withoutSuffix);
      } else {
          return this.localeData().invalidDate();
      }
  }

  function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
  }

  // If passed a locale key, it will set the locale for this
  // instance.  Otherwise, it will return the locale configuration
  // variables for this instance.
  function locale$3(key) {
      var newLocaleData;

      if (key === undefined) {
          return this._locale._abbr;
      } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
              this._locale = newLocaleData;
          }
          return this;
      }
  }

  var lang = deprecate(
      'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
      function (key) {
          if (key === undefined) {
              return this.localeData();
          } else {
              return this.locale(key);
          }
      }
  );

  function localeData() {
      return this._locale;
  }

  var MS_PER_SECOND = 1000,
      MS_PER_MINUTE = 60 * MS_PER_SECOND,
      MS_PER_HOUR = 60 * MS_PER_MINUTE,
      MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

  // actual modulo - handles negative numbers (for dates before 1970):
  function mod$1(dividend, divisor) {
      return ((dividend % divisor) + divisor) % divisor;
  }

  function localStartOfDate(y, m, d) {
      // the date constructor remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
          return new Date(y, m, d).valueOf();
      }
  }

  function utcStartOfDate(y, m, d) {
      // Date.UTC remaps years 0-99 to 1900-1999
      if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
          return Date.UTC(y, m, d);
      }
  }

  function startOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
      }

      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

      switch (units) {
          case 'year':
              time = startOfDate(this.year(), 0, 1);
              break;
          case 'quarter':
              time = startOfDate(
                  this.year(),
                  this.month() - (this.month() % 3),
                  1
              );
              break;
          case 'month':
              time = startOfDate(this.year(), this.month(), 1);
              break;
          case 'week':
              time = startOfDate(
                  this.year(),
                  this.month(),
                  this.date() - this.weekday()
              );
              break;
          case 'isoWeek':
              time = startOfDate(
                  this.year(),
                  this.month(),
                  this.date() - (this.isoWeekday() - 1)
              );
              break;
          case 'day':
          case 'date':
              time = startOfDate(this.year(), this.month(), this.date());
              break;
          case 'hour':
              time = this._d.valueOf();
              time -= mod$1(
                  time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                  MS_PER_HOUR
              );
              break;
          case 'minute':
              time = this._d.valueOf();
              time -= mod$1(time, MS_PER_MINUTE);
              break;
          case 'second':
              time = this._d.valueOf();
              time -= mod$1(time, MS_PER_SECOND);
              break;
      }

      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
  }

  function endOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
      }

      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

      switch (units) {
          case 'year':
              time = startOfDate(this.year() + 1, 0, 1) - 1;
              break;
          case 'quarter':
              time =
                  startOfDate(
                      this.year(),
                      this.month() - (this.month() % 3) + 3,
                      1
                  ) - 1;
              break;
          case 'month':
              time = startOfDate(this.year(), this.month() + 1, 1) - 1;
              break;
          case 'week':
              time =
                  startOfDate(
                      this.year(),
                      this.month(),
                      this.date() - this.weekday() + 7
                  ) - 1;
              break;
          case 'isoWeek':
              time =
                  startOfDate(
                      this.year(),
                      this.month(),
                      this.date() - (this.isoWeekday() - 1) + 7
                  ) - 1;
              break;
          case 'day':
          case 'date':
              time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
              break;
          case 'hour':
              time = this._d.valueOf();
              time +=
                  MS_PER_HOUR -
                  mod$1(
                      time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                      MS_PER_HOUR
                  ) -
                  1;
              break;
          case 'minute':
              time = this._d.valueOf();
              time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
              break;
          case 'second':
              time = this._d.valueOf();
              time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
              break;
      }

      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
  }

  function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 60000;
  }

  function unix() {
      return Math.floor(this.valueOf() / 1000);
  }

  function toDate() {
      return new Date(this.valueOf());
  }

  function toArray$3() {
      var m = this;
      return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond(),
      ];
  }

  function toObject$1() {
      var m = this;
      return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds(),
      };
  }

  function toJSON() {
      // new Date(NaN).toJSON() === null
      return this.isValid() ? this.toISOString() : null;
  }

  function isValid$2() {
      return isValid(this);
  }

  function parsingFlags() {
      return extend({}, getParsingFlags(this));
  }

  function invalidAt() {
      return getParsingFlags(this).overflow;
  }

  function creationData() {
      return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict,
      };
  }

  addFormatToken('N', 0, 0, 'eraAbbr');
  addFormatToken('NN', 0, 0, 'eraAbbr');
  addFormatToken('NNN', 0, 0, 'eraAbbr');
  addFormatToken('NNNN', 0, 0, 'eraName');
  addFormatToken('NNNNN', 0, 0, 'eraNarrow');

  addFormatToken('y', ['y', 1], 'yo', 'eraYear');
  addFormatToken('y', ['yy', 2], 0, 'eraYear');
  addFormatToken('y', ['yyy', 3], 0, 'eraYear');
  addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

  addRegexToken('N', matchEraAbbr);
  addRegexToken('NN', matchEraAbbr);
  addRegexToken('NNN', matchEraAbbr);
  addRegexToken('NNNN', matchEraName);
  addRegexToken('NNNNN', matchEraNarrow);

  addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
      input,
      array,
      config,
      token
  ) {
      var era = config._locale.erasParse(input, token, config._strict);
      if (era) {
          getParsingFlags(config).era = era;
      } else {
          getParsingFlags(config).invalidEra = input;
      }
  });

  addRegexToken('y', matchUnsigned);
  addRegexToken('yy', matchUnsigned);
  addRegexToken('yyy', matchUnsigned);
  addRegexToken('yyyy', matchUnsigned);
  addRegexToken('yo', matchEraYearOrdinal);

  addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
  addParseToken(['yo'], function (input, array, config, token) {
      var match;
      if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
      }

      if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
      } else {
          array[YEAR] = parseInt(input, 10);
      }
  });

  function localeEras(m, format) {
      var i,
          l,
          date,
          eras = this._eras || getLocale('en')._eras;
      for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
              case 'string':
                  // truncate time
                  date = hooks(eras[i].since).startOf('day');
                  eras[i].since = date.valueOf();
                  break;
          }

          switch (typeof eras[i].until) {
              case 'undefined':
                  eras[i].until = +Infinity;
                  break;
              case 'string':
                  // truncate time
                  date = hooks(eras[i].until).startOf('day').valueOf();
                  eras[i].until = date.valueOf();
                  break;
          }
      }
      return eras;
  }

  function localeErasParse(eraName, format, strict) {
      var i,
          l,
          eras = this.eras(),
          name,
          abbr,
          narrow;
      eraName = eraName.toUpperCase();

      for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();

          if (strict) {
              switch (format) {
                  case 'N':
                  case 'NN':
                  case 'NNN':
                      if (abbr === eraName) {
                          return eras[i];
                      }
                      break;

                  case 'NNNN':
                      if (name === eraName) {
                          return eras[i];
                      }
                      break;

                  case 'NNNNN':
                      if (narrow === eraName) {
                          return eras[i];
                      }
                      break;
              }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
              return eras[i];
          }
      }
  }

  function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? +1 : -1;
      if (year === undefined) {
          return hooks(era.since).year();
      } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
      }
  }

  function getEraName() {
      var i,
          l,
          val,
          eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
          // truncate time
          val = this.clone().startOf('day').valueOf();

          if (eras[i].since <= val && val <= eras[i].until) {
              return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
              return eras[i].name;
          }
      }

      return '';
  }

  function getEraNarrow() {
      var i,
          l,
          val,
          eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
          // truncate time
          val = this.clone().startOf('day').valueOf();

          if (eras[i].since <= val && val <= eras[i].until) {
              return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
              return eras[i].narrow;
          }
      }

      return '';
  }

  function getEraAbbr() {
      var i,
          l,
          val,
          eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
          // truncate time
          val = this.clone().startOf('day').valueOf();

          if (eras[i].since <= val && val <= eras[i].until) {
              return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
              return eras[i].abbr;
          }
      }

      return '';
  }

  function getEraYear() {
      var i,
          l,
          dir,
          val,
          eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? +1 : -1;

          // truncate time
          val = this.clone().startOf('day').valueOf();

          if (
              (eras[i].since <= val && val <= eras[i].until) ||
              (eras[i].until <= val && val <= eras[i].since)
          ) {
              return (
                  (this.year() - hooks(eras[i].since).year()) * dir +
                  eras[i].offset
              );
          }
      }

      return this.year();
  }

  function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, '_erasNameRegex')) {
          computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
  }

  function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, '_erasAbbrRegex')) {
          computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
  }

  function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, '_erasNarrowRegex')) {
          computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
  }

  function matchEraAbbr(isStrict, locale) {
      return locale.erasAbbrRegex(isStrict);
  }

  function matchEraName(isStrict, locale) {
      return locale.erasNameRegex(isStrict);
  }

  function matchEraNarrow(isStrict, locale) {
      return locale.erasNarrowRegex(isStrict);
  }

  function matchEraYearOrdinal(isStrict, locale) {
      return locale._eraYearOrdinalRegex || matchUnsigned;
  }

  function computeErasParse() {
      var abbrPieces = [],
          namePieces = [],
          narrowPieces = [],
          mixedPieces = [],
          i,
          l,
          eras = this.eras();

      for (i = 0, l = eras.length; i < l; ++i) {
          namePieces.push(regexEscape(eras[i].name));
          abbrPieces.push(regexEscape(eras[i].abbr));
          narrowPieces.push(regexEscape(eras[i].narrow));

          mixedPieces.push(regexEscape(eras[i].name));
          mixedPieces.push(regexEscape(eras[i].abbr));
          mixedPieces.push(regexEscape(eras[i].narrow));
      }

      this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
      this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
      this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
      this._erasNarrowRegex = new RegExp(
          '^(' + narrowPieces.join('|') + ')',
          'i'
      );
  }

  // FORMATTING

  addFormatToken(0, ['gg', 2], 0, function () {
      return this.weekYear() % 100;
  });

  addFormatToken(0, ['GG', 2], 0, function () {
      return this.isoWeekYear() % 100;
  });

  function addWeekYearFormatToken(token, getter) {
      addFormatToken(0, [token, token.length], 0, getter);
  }

  addWeekYearFormatToken('gggg', 'weekYear');
  addWeekYearFormatToken('ggggg', 'weekYear');
  addWeekYearFormatToken('GGGG', 'isoWeekYear');
  addWeekYearFormatToken('GGGGG', 'isoWeekYear');

  // ALIASES

  addUnitAlias('weekYear', 'gg');
  addUnitAlias('isoWeekYear', 'GG');

  // PRIORITY

  addUnitPriority('weekYear', 1);
  addUnitPriority('isoWeekYear', 1);

  // PARSING

  addRegexToken('G', matchSigned);
  addRegexToken('g', matchSigned);
  addRegexToken('GG', match1to2, match2);
  addRegexToken('gg', match1to2, match2);
  addRegexToken('GGGG', match1to4, match4);
  addRegexToken('gggg', match1to4, match4);
  addRegexToken('GGGGG', match1to6, match6);
  addRegexToken('ggggg', match1to6, match6);

  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
      input,
      week,
      config,
      token
  ) {
      week[token.substr(0, 2)] = toInt(input);
  });

  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
      week[token] = hooks.parseTwoDigitYear(input);
  });

  // MOMENTS

  function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(
          this,
          input,
          this.week(),
          this.weekday(),
          this.localeData()._week.dow,
          this.localeData()._week.doy
      );
  }

  function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(
          this,
          input,
          this.isoWeek(),
          this.isoWeekday(),
          1,
          4
      );
  }

  function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
  }

  function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
  }

  function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
  }

  function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
  }

  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
          return weekOfYear(this, dow, doy).year;
      } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
              week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
  }

  function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
          date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
  }

  // FORMATTING

  addFormatToken('Q', 0, 'Qo', 'quarter');

  // ALIASES

  addUnitAlias('quarter', 'Q');

  // PRIORITY

  addUnitPriority('quarter', 7);

  // PARSING

  addRegexToken('Q', match1);
  addParseToken('Q', function (input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
  });

  // MOMENTS

  function getSetQuarter(input) {
      return input == null
          ? Math.ceil((this.month() + 1) / 3)
          : this.month((input - 1) * 3 + (this.month() % 3));
  }

  // FORMATTING

  addFormatToken('D', ['DD', 2], 'Do', 'date');

  // ALIASES

  addUnitAlias('date', 'D');

  // PRIORITY
  addUnitPriority('date', 9);

  // PARSING

  addRegexToken('D', match1to2);
  addRegexToken('DD', match1to2, match2);
  addRegexToken('Do', function (isStrict, locale) {
      // TODO: Remove "ordinalParse" fallback in next major release.
      return isStrict
          ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
          : locale._dayOfMonthOrdinalParseLenient;
  });

  addParseToken(['D', 'DD'], DATE);
  addParseToken('Do', function (input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
  });

  // MOMENTS

  var getSetDayOfMonth = makeGetSet('Date', true);

  // FORMATTING

  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

  // ALIASES

  addUnitAlias('dayOfYear', 'DDD');

  // PRIORITY
  addUnitPriority('dayOfYear', 4);

  // PARSING

  addRegexToken('DDD', match1to3);
  addRegexToken('DDDD', match3);
  addParseToken(['DDD', 'DDDD'], function (input, array, config) {
      config._dayOfYear = toInt(input);
  });

  // HELPERS

  // MOMENTS

  function getSetDayOfYear(input) {
      var dayOfYear =
          Math.round(
              (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
          ) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
  }

  // FORMATTING

  addFormatToken('m', ['mm', 2], 0, 'minute');

  // ALIASES

  addUnitAlias('minute', 'm');

  // PRIORITY

  addUnitPriority('minute', 14);

  // PARSING

  addRegexToken('m', match1to2);
  addRegexToken('mm', match1to2, match2);
  addParseToken(['m', 'mm'], MINUTE);

  // MOMENTS

  var getSetMinute = makeGetSet('Minutes', false);

  // FORMATTING

  addFormatToken('s', ['ss', 2], 0, 'second');

  // ALIASES

  addUnitAlias('second', 's');

  // PRIORITY

  addUnitPriority('second', 15);

  // PARSING

  addRegexToken('s', match1to2);
  addRegexToken('ss', match1to2, match2);
  addParseToken(['s', 'ss'], SECOND);

  // MOMENTS

  var getSetSecond = makeGetSet('Seconds', false);

  // FORMATTING

  addFormatToken('S', 0, 0, function () {
      return ~~(this.millisecond() / 100);
  });

  addFormatToken(0, ['SS', 2], 0, function () {
      return ~~(this.millisecond() / 10);
  });

  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
  addFormatToken(0, ['SSSS', 4], 0, function () {
      return this.millisecond() * 10;
  });
  addFormatToken(0, ['SSSSS', 5], 0, function () {
      return this.millisecond() * 100;
  });
  addFormatToken(0, ['SSSSSS', 6], 0, function () {
      return this.millisecond() * 1000;
  });
  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
      return this.millisecond() * 10000;
  });
  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
      return this.millisecond() * 100000;
  });
  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
      return this.millisecond() * 1000000;
  });

  // ALIASES

  addUnitAlias('millisecond', 'ms');

  // PRIORITY

  addUnitPriority('millisecond', 16);

  // PARSING

  addRegexToken('S', match1to3, match1);
  addRegexToken('SS', match1to3, match2);
  addRegexToken('SSS', match1to3, match3);

  var token, getSetMillisecond;
  for (token = 'SSSS'; token.length <= 9; token += 'S') {
      addRegexToken(token, matchUnsigned);
  }

  function parseMs(input, array) {
      array[MILLISECOND] = toInt(('0.' + input) * 1000);
  }

  for (token = 'S'; token.length <= 9; token += 'S') {
      addParseToken(token, parseMs);
  }

  getSetMillisecond = makeGetSet('Milliseconds', false);

  // FORMATTING

  addFormatToken('z', 0, 0, 'zoneAbbr');
  addFormatToken('zz', 0, 0, 'zoneName');

  // MOMENTS

  function getZoneAbbr() {
      return this._isUTC ? 'UTC' : '';
  }

  function getZoneName() {
      return this._isUTC ? 'Coordinated Universal Time' : '';
  }

  var proto = Moment.prototype;

  proto.add = add;
  proto.calendar = calendar$1;
  proto.clone = clone;
  proto.diff = diff;
  proto.endOf = endOf;
  proto.format = format$1;
  proto.from = from;
  proto.fromNow = fromNow;
  proto.to = to;
  proto.toNow = toNow;
  proto.get = stringGet;
  proto.invalidAt = invalidAt;
  proto.isAfter = isAfter;
  proto.isBefore = isBefore;
  proto.isBetween = isBetween;
  proto.isSame = isSame;
  proto.isSameOrAfter = isSameOrAfter;
  proto.isSameOrBefore = isSameOrBefore;
  proto.isValid = isValid$2;
  proto.lang = lang;
  proto.locale = locale$3;
  proto.localeData = localeData;
  proto.max = prototypeMax;
  proto.min = prototypeMin;
  proto.parsingFlags = parsingFlags;
  proto.set = stringSet;
  proto.startOf = startOf;
  proto.subtract = subtract;
  proto.toArray = toArray$3;
  proto.toObject = toObject$1;
  proto.toDate = toDate;
  proto.toISOString = toISOString;
  proto.inspect = inspect;
  if (typeof Symbol !== 'undefined' && Symbol.for != null) {
      proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
          return 'Moment<' + this.format() + '>';
      };
  }
  proto.toJSON = toJSON;
  proto.toString = toString;
  proto.unix = unix;
  proto.valueOf = valueOf;
  proto.creationData = creationData;
  proto.eraName = getEraName;
  proto.eraNarrow = getEraNarrow;
  proto.eraAbbr = getEraAbbr;
  proto.eraYear = getEraYear;
  proto.year = getSetYear;
  proto.isLeapYear = getIsLeapYear;
  proto.weekYear = getSetWeekYear;
  proto.isoWeekYear = getSetISOWeekYear;
  proto.quarter = proto.quarters = getSetQuarter;
  proto.month = getSetMonth;
  proto.daysInMonth = getDaysInMonth;
  proto.week = proto.weeks = getSetWeek;
  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
  proto.weeksInYear = getWeeksInYear;
  proto.weeksInWeekYear = getWeeksInWeekYear;
  proto.isoWeeksInYear = getISOWeeksInYear;
  proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
  proto.date = getSetDayOfMonth;
  proto.day = proto.days = getSetDayOfWeek;
  proto.weekday = getSetLocaleDayOfWeek;
  proto.isoWeekday = getSetISODayOfWeek;
  proto.dayOfYear = getSetDayOfYear;
  proto.hour = proto.hours = getSetHour;
  proto.minute = proto.minutes = getSetMinute;
  proto.second = proto.seconds = getSetSecond;
  proto.millisecond = proto.milliseconds = getSetMillisecond;
  proto.utcOffset = getSetOffset;
  proto.utc = setOffsetToUTC;
  proto.local = setOffsetToLocal;
  proto.parseZone = setOffsetToParsedOffset;
  proto.hasAlignedHourOffset = hasAlignedHourOffset;
  proto.isDST = isDaylightSavingTime;
  proto.isLocal = isLocal;
  proto.isUtcOffset = isUtcOffset;
  proto.isUtc = isUtc;
  proto.isUTC = isUtc;
  proto.zoneAbbr = getZoneAbbr;
  proto.zoneName = getZoneName;
  proto.dates = deprecate(
      'dates accessor is deprecated. Use date instead.',
      getSetDayOfMonth
  );
  proto.months = deprecate(
      'months accessor is deprecated. Use month instead',
      getSetMonth
  );
  proto.years = deprecate(
      'years accessor is deprecated. Use year instead',
      getSetYear
  );
  proto.zone = deprecate(
      'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
      getSetZone
  );
  proto.isDSTShifted = deprecate(
      'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
      isDaylightSavingTimeShifted
  );

  function createUnix(input) {
      return createLocal(input * 1000);
  }

  function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
  }

  function preParsePostFormat(string) {
      return string;
  }

  var proto$1 = Locale.prototype;

  proto$1.calendar = calendar;
  proto$1.longDateFormat = longDateFormat;
  proto$1.invalidDate = invalidDate;
  proto$1.ordinal = ordinal;
  proto$1.preparse = preParsePostFormat;
  proto$1.postformat = preParsePostFormat;
  proto$1.relativeTime = relativeTime;
  proto$1.pastFuture = pastFuture;
  proto$1.set = set$1;
  proto$1.eras = localeEras;
  proto$1.erasParse = localeErasParse;
  proto$1.erasConvertYear = localeErasConvertYear;
  proto$1.erasAbbrRegex = erasAbbrRegex;
  proto$1.erasNameRegex = erasNameRegex;
  proto$1.erasNarrowRegex = erasNarrowRegex;

  proto$1.months = localeMonths;
  proto$1.monthsShort = localeMonthsShort;
  proto$1.monthsParse = localeMonthsParse;
  proto$1.monthsRegex = monthsRegex;
  proto$1.monthsShortRegex = monthsShortRegex;
  proto$1.week = localeWeek;
  proto$1.firstDayOfYear = localeFirstDayOfYear;
  proto$1.firstDayOfWeek = localeFirstDayOfWeek;

  proto$1.weekdays = localeWeekdays;
  proto$1.weekdaysMin = localeWeekdaysMin;
  proto$1.weekdaysShort = localeWeekdaysShort;
  proto$1.weekdaysParse = localeWeekdaysParse;

  proto$1.weekdaysRegex = weekdaysRegex;
  proto$1.weekdaysShortRegex = weekdaysShortRegex;
  proto$1.weekdaysMinRegex = weekdaysMinRegex;

  proto$1.isPM = localeIsPM;
  proto$1.meridiem = localeMeridiem;

  function get$1$1(format, index, field, setter) {
      var locale = getLocale(),
          utc = createUTC().set(setter, index);
      return locale[field](utc, format);
  }

  function listMonthsImpl(format, index, field) {
      if (isNumber(format)) {
          index = format;
          format = undefined;
      }

      format = format || '';

      if (index != null) {
          return get$1$1(format, index, field, 'month');
      }

      var i,
          out = [];
      for (i = 0; i < 12; i++) {
          out[i] = get$1$1(format, i, field, 'month');
      }
      return out;
  }

  // ()
  // (5)
  // (fmt, 5)
  // (fmt)
  // (true)
  // (true, 5)
  // (true, fmt, 5)
  // (true, fmt)
  function listWeekdaysImpl(localeSorted, format, index, field) {
      if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
              index = format;
              format = undefined;
          }

          format = format || '';
      } else {
          format = localeSorted;
          index = format;
          localeSorted = false;

          if (isNumber(format)) {
              index = format;
              format = undefined;
          }

          format = format || '';
      }

      var locale = getLocale(),
          shift = localeSorted ? locale._week.dow : 0,
          i,
          out = [];

      if (index != null) {
          return get$1$1(format, (index + shift) % 7, field, 'day');
      }

      for (i = 0; i < 7; i++) {
          out[i] = get$1$1(format, (i + shift) % 7, field, 'day');
      }
      return out;
  }

  function listMonths(format, index) {
      return listMonthsImpl(format, index, 'months');
  }

  function listMonthsShort(format, index) {
      return listMonthsImpl(format, index, 'monthsShort');
  }

  function listWeekdays(localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
  }

  function listWeekdaysShort(localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
  }

  function listWeekdaysMin(localeSorted, format, index) {
      return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
  }

  getSetGlobalLocale('en', {
      eras: [
          {
              since: '0001-01-01',
              until: +Infinity,
              offset: 1,
              name: 'Anno Domini',
              narrow: 'AD',
              abbr: 'AD',
          },
          {
              since: '0000-12-31',
              until: -Infinity,
              offset: 1,
              name: 'Before Christ',
              narrow: 'BC',
              abbr: 'BC',
          },
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function (number) {
          var b = number % 10,
              output =
                  toInt((number % 100) / 10) === 1
                      ? 'th'
                      : b === 1
                      ? 'st'
                      : b === 2
                      ? 'nd'
                      : b === 3
                      ? 'rd'
                      : 'th';
          return number + output;
      },
  });

  // Side effect imports

  hooks.lang = deprecate(
      'moment.lang is deprecated. Use moment.locale instead.',
      getSetGlobalLocale
  );
  hooks.langData = deprecate(
      'moment.langData is deprecated. Use moment.localeData instead.',
      getLocale
  );

  var mathAbs = Math.abs;

  function abs() {
      var data = this._data;

      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);

      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);

      return this;
  }

  function addSubtract$1(duration, input, value, direction) {
      var other = createDuration(input, value);

      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;

      return duration._bubble();
  }

  // supports only 2.0-style add(1, 's') or add(duration)
  function add$1(input, value) {
      return addSubtract$1(this, input, value, 1);
  }

  // supports only 2.0-style subtract(1, 's') or subtract(duration)
  function subtract$1(input, value) {
      return addSubtract$1(this, input, value, -1);
  }

  function absCeil(number) {
      if (number < 0) {
          return Math.floor(number);
      } else {
          return Math.ceil(number);
      }
  }

  function bubble() {
      var milliseconds = this._milliseconds,
          days = this._days,
          months = this._months,
          data = this._data,
          seconds,
          minutes,
          hours,
          years,
          monthsFromDays;

      // if we have a mix of positive and negative values, bubble down first
      // check: https://github.com/moment/moment/issues/2166
      if (
          !(
              (milliseconds >= 0 && days >= 0 && months >= 0) ||
              (milliseconds <= 0 && days <= 0 && months <= 0)
          )
      ) {
          milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
          days = 0;
          months = 0;
      }

      // The following code bubbles up values, see the tests for
      // examples of what that means.
      data.milliseconds = milliseconds % 1000;

      seconds = absFloor(milliseconds / 1000);
      data.seconds = seconds % 60;

      minutes = absFloor(seconds / 60);
      data.minutes = minutes % 60;

      hours = absFloor(minutes / 60);
      data.hours = hours % 24;

      days += absFloor(hours / 24);

      // convert days to months
      monthsFromDays = absFloor(daysToMonths(days));
      months += monthsFromDays;
      days -= absCeil(monthsToDays(monthsFromDays));

      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;

      data.days = days;
      data.months = months;
      data.years = years;

      return this;
  }

  function daysToMonths(days) {
      // 400 years have 146097 days (taking into account leap year rules)
      // 400 years have 12 months === 4800
      return (days * 4800) / 146097;
  }

  function monthsToDays(months) {
      // the reverse of daysToMonths
      return (months * 146097) / 4800;
  }

  function as(units) {
      if (!this.isValid()) {
          return NaN;
      }
      var days,
          months,
          milliseconds = this._milliseconds;

      units = normalizeUnits(units);

      if (units === 'month' || units === 'quarter' || units === 'year') {
          days = this._days + milliseconds / 864e5;
          months = this._months + daysToMonths(days);
          switch (units) {
              case 'month':
                  return months;
              case 'quarter':
                  return months / 3;
              case 'year':
                  return months / 12;
          }
      } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
              case 'week':
                  return days / 7 + milliseconds / 6048e5;
              case 'day':
                  return days + milliseconds / 864e5;
              case 'hour':
                  return days * 24 + milliseconds / 36e5;
              case 'minute':
                  return days * 1440 + milliseconds / 6e4;
              case 'second':
                  return days * 86400 + milliseconds / 1000;
              // Math.floor prevents floating point math errors here
              case 'millisecond':
                  return Math.floor(days * 864e5) + milliseconds;
              default:
                  throw new Error('Unknown unit ' + units);
          }
      }
  }

  // TODO: Use this.as('ms')?
  function valueOf$1() {
      if (!this.isValid()) {
          return NaN;
      }
      return (
          this._milliseconds +
          this._days * 864e5 +
          (this._months % 12) * 2592e6 +
          toInt(this._months / 12) * 31536e6
      );
  }

  function makeAs(alias) {
      return function () {
          return this.as(alias);
      };
  }

  var asMilliseconds = makeAs('ms'),
      asSeconds = makeAs('s'),
      asMinutes = makeAs('m'),
      asHours = makeAs('h'),
      asDays = makeAs('d'),
      asWeeks = makeAs('w'),
      asMonths = makeAs('M'),
      asQuarters = makeAs('Q'),
      asYears = makeAs('y');

  function clone$1() {
      return createDuration(this);
  }

  function get$2(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + 's']() : NaN;
  }

  function makeGetter(name) {
      return function () {
          return this.isValid() ? this._data[name] : NaN;
      };
  }

  var milliseconds = makeGetter('milliseconds'),
      seconds = makeGetter('seconds'),
      minutes = makeGetter('minutes'),
      hours = makeGetter('hours'),
      days = makeGetter('days'),
      months = makeGetter('months'),
      years = makeGetter('years');

  function weeks() {
      return absFloor(this.days() / 7);
  }

  var round = Math.round,
      thresholds = {
          ss: 44, // a few seconds to seconds
          s: 45, // seconds to minute
          m: 45, // minutes to hour
          h: 22, // hours to day
          d: 26, // days to month/week
          w: null, // weeks to month
          M: 11, // months to year
      };

  // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
      return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  }

  function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
      var duration = createDuration(posNegDuration).abs(),
          seconds = round(duration.as('s')),
          minutes = round(duration.as('m')),
          hours = round(duration.as('h')),
          days = round(duration.as('d')),
          months = round(duration.as('M')),
          weeks = round(duration.as('w')),
          years = round(duration.as('y')),
          a =
              (seconds <= thresholds.ss && ['s', seconds]) ||
              (seconds < thresholds.s && ['ss', seconds]) ||
              (minutes <= 1 && ['m']) ||
              (minutes < thresholds.m && ['mm', minutes]) ||
              (hours <= 1 && ['h']) ||
              (hours < thresholds.h && ['hh', hours]) ||
              (days <= 1 && ['d']) ||
              (days < thresholds.d && ['dd', days]);

      if (thresholds.w != null) {
          a =
              a ||
              (weeks <= 1 && ['w']) ||
              (weeks < thresholds.w && ['ww', weeks]);
      }
      a = a ||
          (months <= 1 && ['M']) ||
          (months < thresholds.M && ['MM', months]) ||
          (years <= 1 && ['y']) || ['yy', years];

      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale;
      return substituteTimeAgo.apply(null, a);
  }

  // This function allows you to set the rounding function for relative time strings
  function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === undefined) {
          return round;
      }
      if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true;
      }
      return false;
  }

  // This function allows you to set a threshold for relative time strings
  function getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === undefined) {
          return false;
      }
      if (limit === undefined) {
          return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === 's') {
          thresholds.ss = limit - 1;
      }
      return true;
  }

  function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
          return this.localeData().invalidDate();
      }

      var withSuffix = false,
          th = thresholds,
          locale,
          output;

      if (typeof argWithSuffix === 'object') {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
      }
      if (typeof argWithSuffix === 'boolean') {
          withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === 'object') {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
              th.ss = argThresholds.s - 1;
          }
      }

      locale = this.localeData();
      output = relativeTime$1(this, !withSuffix, th, locale);

      if (withSuffix) {
          output = locale.pastFuture(+this, output);
      }

      return locale.postformat(output);
  }

  var abs$1 = Math.abs;

  function sign(x) {
      return (x > 0) - (x < 0) || +x;
  }

  function toISOString$1() {
      // for ISO strings we do not use the normal bubbling rules:
      //  * milliseconds bubble up until they become hours
      //  * days do not bubble at all
      //  * months bubble up until they become years
      // This is because there is no context-free conversion between hours and days
      // (think of clock changes)
      // and also not between days and months (28-31 days per month)
      if (!this.isValid()) {
          return this.localeData().invalidDate();
      }

      var seconds = abs$1(this._milliseconds) / 1000,
          days = abs$1(this._days),
          months = abs$1(this._months),
          minutes,
          hours,
          years,
          s,
          total = this.asSeconds(),
          totalSign,
          ymSign,
          daysSign,
          hmsSign;

      if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D';
      }

      // 3600 seconds -> 60 minutes -> 1 hour
      minutes = absFloor(seconds / 60);
      hours = absFloor(minutes / 60);
      seconds %= 60;
      minutes %= 60;

      // 12 months -> 1 year
      years = absFloor(months / 12);
      months %= 12;

      // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
      s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

      totalSign = total < 0 ? '-' : '';
      ymSign = sign(this._months) !== sign(total) ? '-' : '';
      daysSign = sign(this._days) !== sign(total) ? '-' : '';
      hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

      return (
          totalSign +
          'P' +
          (years ? ymSign + years + 'Y' : '') +
          (months ? ymSign + months + 'M' : '') +
          (days ? daysSign + days + 'D' : '') +
          (hours || minutes || seconds ? 'T' : '') +
          (hours ? hmsSign + hours + 'H' : '') +
          (minutes ? hmsSign + minutes + 'M' : '') +
          (seconds ? hmsSign + s + 'S' : '')
      );
  }

  var proto$2 = Duration.prototype;

  proto$2.isValid = isValid$1;
  proto$2.abs = abs;
  proto$2.add = add$1;
  proto$2.subtract = subtract$1;
  proto$2.as = as;
  proto$2.asMilliseconds = asMilliseconds;
  proto$2.asSeconds = asSeconds;
  proto$2.asMinutes = asMinutes;
  proto$2.asHours = asHours;
  proto$2.asDays = asDays;
  proto$2.asWeeks = asWeeks;
  proto$2.asMonths = asMonths;
  proto$2.asQuarters = asQuarters;
  proto$2.asYears = asYears;
  proto$2.valueOf = valueOf$1;
  proto$2._bubble = bubble;
  proto$2.clone = clone$1;
  proto$2.get = get$2;
  proto$2.milliseconds = milliseconds;
  proto$2.seconds = seconds;
  proto$2.minutes = minutes;
  proto$2.hours = hours;
  proto$2.days = days;
  proto$2.weeks = weeks;
  proto$2.months = months;
  proto$2.years = years;
  proto$2.humanize = humanize;
  proto$2.toISOString = toISOString$1;
  proto$2.toString = toISOString$1;
  proto$2.toJSON = toISOString$1;
  proto$2.locale = locale$3;
  proto$2.localeData = localeData;

  proto$2.toIsoString = deprecate(
      'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
      toISOString$1
  );
  proto$2.lang = lang;

  // FORMATTING

  addFormatToken('X', 0, 0, 'unix');
  addFormatToken('x', 0, 0, 'valueOf');

  // PARSING

  addRegexToken('x', matchSigned);
  addRegexToken('X', matchTimestamp);
  addParseToken('X', function (input, array, config) {
      config._d = new Date(parseFloat(input) * 1000);
  });
  addParseToken('x', function (input, array, config) {
      config._d = new Date(toInt(input));
  });

  //! moment.js

  hooks.version = '2.29.1';

  setHookCallback(createLocal);

  hooks.fn = proto;
  hooks.min = min;
  hooks.max = max;
  hooks.now = now$1;
  hooks.utc = createUTC;
  hooks.unix = createUnix;
  hooks.months = listMonths;
  hooks.isDate = isDate;
  hooks.locale = getSetGlobalLocale;
  hooks.invalid = createInvalid;
  hooks.duration = createDuration;
  hooks.isMoment = isMoment;
  hooks.weekdays = listWeekdays;
  hooks.parseZone = createInZone;
  hooks.localeData = getLocale;
  hooks.isDuration = isDuration;
  hooks.monthsShort = listMonthsShort;
  hooks.weekdaysMin = listWeekdaysMin;
  hooks.defineLocale = defineLocale;
  hooks.updateLocale = updateLocale;
  hooks.locales = listLocales;
  hooks.weekdaysShort = listWeekdaysShort;
  hooks.normalizeUnits = normalizeUnits;
  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
  hooks.calendarFormat = getCalendarFormat;
  hooks.prototype = proto;

  // currently HTML5 input type only supports 24-hour formats
  hooks.HTML5_FMT = {
      DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
      DATE: 'YYYY-MM-DD', // <input type="date" />
      TIME: 'HH:mm', // <input type="time" />
      TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
      TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
      WEEK: 'GGGG-[W]WW', // <input type="week" />
      MONTH: 'YYYY-MM', // <input type="month" />
  };

  var generateConfig = {
    // get
    getNow: function getNow() {
      return hooks();
    },
    getFixedDate: function getFixedDate(string) {
      return hooks(string, 'YYYY-MM-DD');
    },
    getEndDate: function getEndDate(date) {
      var clone = date.clone();
      return clone.endOf('month');
    },
    getWeekDay: function getWeekDay(date) {
      var clone = date.clone().locale('en_US');
      return clone.weekday() + clone.localeData().firstDayOfWeek();
    },
    getYear: function getYear(date) {
      return date.year();
    },
    getMonth: function getMonth(date) {
      return date.month();
    },
    getDate: function getDate(date) {
      return date.date();
    },
    getHour: function getHour(date) {
      return date.hour();
    },
    getMinute: function getMinute(date) {
      return date.minute();
    },
    getSecond: function getSecond(date) {
      return date.second();
    },
    // set
    addYear: function addYear(date, diff) {
      var clone = date.clone();
      return clone.add(diff, 'year');
    },
    addMonth: function addMonth(date, diff) {
      var clone = date.clone();
      return clone.add(diff, 'month');
    },
    addDate: function addDate(date, diff) {
      var clone = date.clone();
      return clone.add(diff, 'day');
    },
    setYear: function setYear(date, year) {
      var clone = date.clone();
      return clone.year(year);
    },
    setMonth: function setMonth(date, month) {
      var clone = date.clone();
      return clone.month(month);
    },
    setDate: function setDate(date, num) {
      var clone = date.clone();
      return clone.date(num);
    },
    setHour: function setHour(date, hour) {
      var clone = date.clone();
      return clone.hour(hour);
    },
    setMinute: function setMinute(date, minute) {
      var clone = date.clone();
      return clone.minute(minute);
    },
    setSecond: function setSecond(date, second) {
      var clone = date.clone();
      return clone.second(second);
    },
    // Compare
    isAfter: function isAfter(date1, date2) {
      return date1.isAfter(date2);
    },
    isValidate: function isValidate(date) {
      return date.isValid();
    },
    locale: {
      getWeekFirstDay: function getWeekFirstDay(locale) {
        var date = hooks().locale(locale);
        return date.localeData().firstDayOfWeek();
      },
      getWeekFirstDate: function getWeekFirstDate(locale, date) {
        var clone = date.clone();
        var result = clone.locale(locale);
        return result.weekday(0);
      },
      getWeek: function getWeek(locale, date) {
        var clone = date.clone();
        var result = clone.locale(locale);
        return result.week();
      },
      getShortWeekDays: function getShortWeekDays(locale) {
        var date = hooks().locale(locale);
        return date.localeData().weekdaysMin();
      },
      getShortMonths: function getShortMonths(locale) {
        var date = hooks().locale(locale);
        return date.localeData().monthsShort();
      },
      format: function format(locale, date, _format) {
        var clone = date.clone();
        var result = clone.locale(locale);
        return result.format(_format);
      },
      parse: function parse(locale, text, formats) {
        var fallbackFormatList = [];

        for (var i = 0; i < formats.length; i += 1) {
          var format = formats[i];
          var formatText = text;

          if (format.includes('wo') || format.includes('Wo')) {
            format = format.replace(/wo/g, 'w').replace(/Wo/g, 'W');
            var matchFormat = format.match(/[-YyMmDdHhSsWwGg]+/g);
            var matchText = formatText.match(/[-\d]+/g);

            if (matchFormat && matchText) {
              format = matchFormat.join('');
              formatText = matchText.join('');
            } else {
              fallbackFormatList.push(format.replace(/o/g, ''));
            }
          }

          var date = hooks(formatText, format, locale, true);

          if (date.isValid()) {
            return date;
          }
        } // Fallback to fuzzy matching, this should always not reach match or need fire a issue


        for (var _i = 0; _i < fallbackFormatList.length; _i += 1) {
          var _date = hooks(text, fallbackFormatList[_i], locale, false);
          /* istanbul ignore next */


          if (_date.isValid()) {
            noteOnce(false, 'Not match any format strictly and fallback to fuzzy match. Please help to fire a issue about this.');
            return _date;
          }
        }

        return null;
      }
    }
  };

  var PanelContext = /*#__PURE__*/React.createContext({});

  var HIDDEN_STYLE = {
    visibility: 'hidden'
  };

  function Header(_ref) {
    var prefixCls = _ref.prefixCls,
        _ref$prevIcon = _ref.prevIcon,
        prevIcon = _ref$prevIcon === void 0 ? "\u2039" : _ref$prevIcon,
        _ref$nextIcon = _ref.nextIcon,
        nextIcon = _ref$nextIcon === void 0 ? "\u203A" : _ref$nextIcon,
        _ref$superPrevIcon = _ref.superPrevIcon,
        superPrevIcon = _ref$superPrevIcon === void 0 ? "\xAB" : _ref$superPrevIcon,
        _ref$superNextIcon = _ref.superNextIcon,
        superNextIcon = _ref$superNextIcon === void 0 ? "\xBB" : _ref$superNextIcon,
        onSuperPrev = _ref.onSuperPrev,
        onSuperNext = _ref.onSuperNext,
        onPrev = _ref.onPrev,
        onNext = _ref.onNext,
        children = _ref.children;

    var _React$useContext = React.useContext(PanelContext),
        hideNextBtn = _React$useContext.hideNextBtn,
        hidePrevBtn = _React$useContext.hidePrevBtn;

    return /*#__PURE__*/React.createElement("div", {
      className: prefixCls
    }, onSuperPrev && /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: onSuperPrev,
      tabIndex: -1,
      className: "".concat(prefixCls, "-super-prev-btn"),
      style: hidePrevBtn ? HIDDEN_STYLE : {}
    }, superPrevIcon), onPrev && /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: onPrev,
      tabIndex: -1,
      className: "".concat(prefixCls, "-prev-btn"),
      style: hidePrevBtn ? HIDDEN_STYLE : {}
    }, prevIcon), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-view")
    }, children), onNext && /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: onNext,
      tabIndex: -1,
      className: "".concat(prefixCls, "-next-btn"),
      style: hideNextBtn ? HIDDEN_STYLE : {}
    }, nextIcon), onSuperNext && /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: onSuperNext,
      tabIndex: -1,
      className: "".concat(prefixCls, "-super-next-btn"),
      style: hideNextBtn ? HIDDEN_STYLE : {}
    }, superNextIcon));
  }

  function DecadeHeader(props) {
    var prefixCls = props.prefixCls,
        generateConfig = props.generateConfig,
        viewDate = props.viewDate,
        onPrevDecades = props.onPrevDecades,
        onNextDecades = props.onNextDecades;

    var _React$useContext = React.useContext(PanelContext),
        hideHeader = _React$useContext.hideHeader;

    if (hideHeader) {
      return null;
    }

    var headerPrefixCls = "".concat(prefixCls, "-header");
    var yearNumber = generateConfig.getYear(viewDate);
    var startYear = Math.floor(yearNumber / DECADE_DISTANCE_COUNT) * DECADE_DISTANCE_COUNT;
    var endYear = startYear + DECADE_DISTANCE_COUNT - 1;
    return /*#__PURE__*/React.createElement(Header, _extends$1({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevDecades,
      onSuperNext: onNextDecades
    }), startYear, "-", endYear);
  }

  function setTime(generateConfig, date, hour, minute, second) {
    var nextTime = generateConfig.setHour(date, hour);
    nextTime = generateConfig.setMinute(nextTime, minute);
    nextTime = generateConfig.setSecond(nextTime, second);
    return nextTime;
  }
  function setDateTime(generateConfig, date, defaultDate) {
    if (!defaultDate) {
      return date;
    }

    var newDate = date;
    newDate = generateConfig.setHour(newDate, generateConfig.getHour(defaultDate));
    newDate = generateConfig.setMinute(newDate, generateConfig.getMinute(defaultDate));
    newDate = generateConfig.setSecond(newDate, generateConfig.getSecond(defaultDate));
    return newDate;
  }
  function getLowerBoundTime(hour, minute, second, hourStep, minuteStep, secondStep) {
    var lowerBoundHour = Math.floor(hour / hourStep) * hourStep;

    if (lowerBoundHour < hour) {
      return [lowerBoundHour, 60 - minuteStep, 60 - secondStep];
    }

    var lowerBoundMinute = Math.floor(minute / minuteStep) * minuteStep;

    if (lowerBoundMinute < minute) {
      return [lowerBoundHour, lowerBoundMinute, 60 - secondStep];
    }

    var lowerBoundSecond = Math.floor(second / secondStep) * secondStep;
    return [lowerBoundHour, lowerBoundMinute, lowerBoundSecond];
  }
  function getLastDay(generateConfig, date) {
    var year = generateConfig.getYear(date);
    var month = generateConfig.getMonth(date) + 1;
    var endDate = generateConfig.getEndDate(generateConfig.getFixedDate("".concat(year, "-").concat(month, "-01")));
    var lastDay = generateConfig.getDate(endDate);
    var monthShow = month < 10 ? "0".concat(month) : "".concat(month);
    return "".concat(year, "-").concat(monthShow, "-").concat(lastDay);
  }

  function PanelBody(_ref) {
    var prefixCls = _ref.prefixCls,
        disabledDate = _ref.disabledDate,
        onSelect = _ref.onSelect,
        picker = _ref.picker,
        rowNum = _ref.rowNum,
        colNum = _ref.colNum,
        prefixColumn = _ref.prefixColumn,
        rowClassName = _ref.rowClassName,
        baseDate = _ref.baseDate,
        getCellClassName = _ref.getCellClassName,
        getCellText = _ref.getCellText,
        getCellNode = _ref.getCellNode,
        getCellDate = _ref.getCellDate,
        generateConfig = _ref.generateConfig,
        titleCell = _ref.titleCell,
        headerCells = _ref.headerCells;

    var _React$useContext = React.useContext(PanelContext),
        onDateMouseEnter = _React$useContext.onDateMouseEnter,
        onDateMouseLeave = _React$useContext.onDateMouseLeave,
        mode = _React$useContext.mode;

    var cellPrefixCls = "".concat(prefixCls, "-cell"); // =============================== Body ===============================

    var rows = [];

    for (var i = 0; i < rowNum; i += 1) {
      var row = [];
      var rowStartDate = void 0;

      var _loop = function _loop(j) {
        var _objectSpread2;

        var offset = i * colNum + j;
        var currentDate = getCellDate(baseDate, offset);
        var disabled = getCellDateDisabled({
          cellDate: currentDate,
          mode: mode,
          disabledDate: disabledDate,
          generateConfig: generateConfig
        });

        if (j === 0) {
          rowStartDate = currentDate;

          if (prefixColumn) {
            row.push(prefixColumn(rowStartDate));
          }
        }

        var title = titleCell && titleCell(currentDate);
        row.push( /*#__PURE__*/React.createElement("td", {
          key: j,
          title: title,
          className: classnames(cellPrefixCls, _objectSpread2$1((_objectSpread2 = {}, _defineProperty$1(_objectSpread2, "".concat(cellPrefixCls, "-disabled"), disabled), _defineProperty$1(_objectSpread2, "".concat(cellPrefixCls, "-start"), getCellText(currentDate) === 1 || picker === 'year' && Number(title) % 10 === 0), _defineProperty$1(_objectSpread2, "".concat(cellPrefixCls, "-end"), title === getLastDay(generateConfig, currentDate) || picker === 'year' && Number(title) % 10 === 9), _objectSpread2), getCellClassName(currentDate))),
          onClick: function onClick() {
            if (!disabled) {
              onSelect(currentDate);
            }
          },
          onMouseEnter: function onMouseEnter() {
            if (!disabled && onDateMouseEnter) {
              onDateMouseEnter(currentDate);
            }
          },
          onMouseLeave: function onMouseLeave() {
            if (!disabled && onDateMouseLeave) {
              onDateMouseLeave(currentDate);
            }
          }
        }, getCellNode ? getCellNode(currentDate) : /*#__PURE__*/React.createElement("div", {
          className: "".concat(cellPrefixCls, "-inner")
        }, getCellText(currentDate))));
      };

      for (var j = 0; j < colNum; j += 1) {
        _loop(j);
      }

      rows.push( /*#__PURE__*/React.createElement("tr", {
        key: i,
        className: rowClassName && rowClassName(rowStartDate)
      }, row));
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-body")
    }, /*#__PURE__*/React.createElement("table", {
      className: "".concat(prefixCls, "-content")
    }, headerCells && /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", null, headerCells)), /*#__PURE__*/React.createElement("tbody", null, rows)));
  }

  var DECADE_COL_COUNT = 3;
  var DECADE_ROW_COUNT = 4;

  function DecadeBody(props) {
    var DECADE_UNIT_DIFF_DES = DECADE_UNIT_DIFF - 1;
    var prefixCls = props.prefixCls,
        viewDate = props.viewDate,
        generateConfig = props.generateConfig;
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var yearNumber = generateConfig.getYear(viewDate);
    var decadeYearNumber = Math.floor(yearNumber / DECADE_UNIT_DIFF) * DECADE_UNIT_DIFF;
    var startDecadeYear = Math.floor(yearNumber / DECADE_DISTANCE_COUNT) * DECADE_DISTANCE_COUNT;
    var endDecadeYear = startDecadeYear + DECADE_DISTANCE_COUNT - 1;
    var baseDecadeYear = generateConfig.setYear(viewDate, startDecadeYear - Math.ceil((DECADE_COL_COUNT * DECADE_ROW_COUNT * DECADE_UNIT_DIFF - DECADE_DISTANCE_COUNT) / 2));

    var getCellClassName = function getCellClassName(date) {
      var _ref;

      var startDecadeNumber = generateConfig.getYear(date);
      var endDecadeNumber = startDecadeNumber + DECADE_UNIT_DIFF_DES;
      return _ref = {}, _defineProperty$1(_ref, "".concat(cellPrefixCls, "-in-view"), startDecadeYear <= startDecadeNumber && endDecadeNumber <= endDecadeYear), _defineProperty$1(_ref, "".concat(cellPrefixCls, "-selected"), startDecadeNumber === decadeYearNumber), _ref;
    };

    return /*#__PURE__*/React.createElement(PanelBody, _extends$1({}, props, {
      rowNum: DECADE_ROW_COUNT,
      colNum: DECADE_COL_COUNT,
      baseDate: baseDecadeYear,
      getCellText: function getCellText(date) {
        var startDecadeNumber = generateConfig.getYear(date);
        return "".concat(startDecadeNumber, "-").concat(startDecadeNumber + DECADE_UNIT_DIFF_DES);
      },
      getCellClassName: getCellClassName,
      getCellDate: function getCellDate(date, offset) {
        return generateConfig.addYear(date, offset * DECADE_UNIT_DIFF);
      }
    }));
  }

  var scrollIds = new Map();
  /** Trigger when element is visible in view */

  function waitElementReady(element, callback) {
    var id;

    function tryOrNextFrame() {
      if (isVisible(element)) {
        callback();
      } else {
        id = wrapperRaf(function () {
          tryOrNextFrame();
        });
      }
    }

    tryOrNextFrame();
    return function () {
      wrapperRaf.cancel(id);
    };
  }
  /* eslint-disable no-param-reassign */

  function scrollTo(element, to, duration) {
    if (scrollIds.get(element)) {
      cancelAnimationFrame(scrollIds.get(element));
    } // jump to target if duration zero


    if (duration <= 0) {
      scrollIds.set(element, requestAnimationFrame(function () {
        element.scrollTop = to;
      }));
      return;
    }

    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;
    scrollIds.set(element, requestAnimationFrame(function () {
      element.scrollTop += perTick;

      if (element.scrollTop !== to) {
        scrollTo(element, to, duration - 10);
      }
    }));
  }
  function createKeyDownHandler(event, _ref) {
    var onLeftRight = _ref.onLeftRight,
        onCtrlLeftRight = _ref.onCtrlLeftRight,
        onUpDown = _ref.onUpDown,
        onPageUpDown = _ref.onPageUpDown,
        onEnter = _ref.onEnter;
    var which = event.which,
        ctrlKey = event.ctrlKey,
        metaKey = event.metaKey;

    switch (which) {
      case KeyCode.LEFT:
        if (ctrlKey || metaKey) {
          if (onCtrlLeftRight) {
            onCtrlLeftRight(-1);
            return true;
          }
        } else if (onLeftRight) {
          onLeftRight(-1);
          return true;
        }
        /* istanbul ignore next */


        break;

      case KeyCode.RIGHT:
        if (ctrlKey || metaKey) {
          if (onCtrlLeftRight) {
            onCtrlLeftRight(1);
            return true;
          }
        } else if (onLeftRight) {
          onLeftRight(1);
          return true;
        }
        /* istanbul ignore next */


        break;

      case KeyCode.UP:
        if (onUpDown) {
          onUpDown(-1);
          return true;
        }
        /* istanbul ignore next */


        break;

      case KeyCode.DOWN:
        if (onUpDown) {
          onUpDown(1);
          return true;
        }
        /* istanbul ignore next */


        break;

      case KeyCode.PAGE_UP:
        if (onPageUpDown) {
          onPageUpDown(-1);
          return true;
        }
        /* istanbul ignore next */


        break;

      case KeyCode.PAGE_DOWN:
        if (onPageUpDown) {
          onPageUpDown(1);
          return true;
        }
        /* istanbul ignore next */


        break;

      case KeyCode.ENTER:
        if (onEnter) {
          onEnter();
          return true;
        }
        /* istanbul ignore next */


        break;
    }

    return false;
  } // ===================== Format =====================

  function getDefaultFormat(format, picker, showTime, use12Hours) {
    var mergedFormat = format;

    if (!mergedFormat) {
      switch (picker) {
        case 'time':
          mergedFormat = use12Hours ? 'hh:mm:ss a' : 'HH:mm:ss';
          break;

        case 'week':
          mergedFormat = 'gggg-wo';
          break;

        case 'month':
          mergedFormat = 'YYYY-MM';
          break;

        case 'quarter':
          mergedFormat = 'YYYY-[Q]Q';
          break;

        case 'year':
          mergedFormat = 'YYYY';
          break;

        default:
          mergedFormat = showTime ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD';
      }
    }

    return mergedFormat;
  }
  function getInputSize(picker, format, generateConfig) {
    var defaultSize = picker === 'time' ? 8 : 10;
    var length = typeof format === 'function' ? format(generateConfig.getNow()).length : format.length;
    return Math.max(defaultSize, length) + 2;
  }
  var globalClickFunc = null;
  var clickCallbacks = new Set();
  function addGlobalMouseDownEvent(callback) {
    if (!globalClickFunc && typeof window !== 'undefined' && window.addEventListener) {
      globalClickFunc = function globalClickFunc(e) {
        // Clone a new list to avoid repeat trigger events
        _toConsumableArray$1(clickCallbacks).forEach(function (queueFunc) {
          queueFunc(e);
        });
      };

      window.addEventListener('mousedown', globalClickFunc);
    }

    clickCallbacks.add(callback);
    return function () {
      clickCallbacks.delete(callback);

      if (clickCallbacks.size === 0) {
        window.removeEventListener('mousedown', globalClickFunc);
        globalClickFunc = null;
      }
    };
  }
  function getTargetFromEvent(e) {
    var target = e.target; // get target if in shadow dom

    if (e.composed && target.shadowRoot) {
      var _e$composedPath;

      return ((_e$composedPath = e.composedPath) === null || _e$composedPath === void 0 ? void 0 : _e$composedPath.call(e)[0]) || target;
    }

    return target;
  } // ====================== Mode ======================

  var getYearNextMode = function getYearNextMode(next) {
    if (next === 'month' || next === 'date') {
      return 'year';
    }

    return next;
  };

  var getMonthNextMode = function getMonthNextMode(next) {
    if (next === 'date') {
      return 'month';
    }

    return next;
  };

  var getQuarterNextMode = function getQuarterNextMode(next) {
    if (next === 'month' || next === 'date') {
      return 'quarter';
    }

    return next;
  };

  var getWeekNextMode = function getWeekNextMode(next) {
    if (next === 'date') {
      return 'week';
    }

    return next;
  };

  var PickerModeMap = {
    year: getYearNextMode,
    month: getMonthNextMode,
    quarter: getQuarterNextMode,
    week: getWeekNextMode,
    time: null,
    date: null
  };
  function elementsContains(elements, target) {
    return elements.some(function (ele) {
      return ele && ele.contains(target);
    });
  }

  var DECADE_UNIT_DIFF = 10;
  var DECADE_DISTANCE_COUNT = DECADE_UNIT_DIFF * 10;

  function DecadePanel(props) {
    var prefixCls = props.prefixCls,
        onViewDateChange = props.onViewDateChange,
        generateConfig = props.generateConfig,
        viewDate = props.viewDate,
        operationRef = props.operationRef,
        onSelect = props.onSelect,
        onPanelChange = props.onPanelChange;
    var panelPrefixCls = "".concat(prefixCls, "-decade-panel"); // ======================= Keyboard =======================

    operationRef.current = {
      onKeyDown: function onKeyDown(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            onSelect(generateConfig.addYear(viewDate, diff * DECADE_UNIT_DIFF), 'key');
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            onSelect(generateConfig.addYear(viewDate, diff * DECADE_DISTANCE_COUNT), 'key');
          },
          onUpDown: function onUpDown(diff) {
            onSelect(generateConfig.addYear(viewDate, diff * DECADE_UNIT_DIFF * DECADE_COL_COUNT), 'key');
          },
          onEnter: function onEnter() {
            onPanelChange('year', viewDate);
          }
        });
      }
    }; // ==================== View Operation ====================

    var onDecadesChange = function onDecadesChange(diff) {
      var newDate = generateConfig.addYear(viewDate, diff * DECADE_DISTANCE_COUNT);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };

    var onInternalSelect = function onInternalSelect(date) {
      onSelect(date, 'mouse');
      onPanelChange('year', date);
    };

    return /*#__PURE__*/React.createElement("div", {
      className: panelPrefixCls
    }, /*#__PURE__*/React.createElement(DecadeHeader, _extends$1({}, props, {
      prefixCls: prefixCls,
      onPrevDecades: function onPrevDecades() {
        onDecadesChange(-1);
      },
      onNextDecades: function onNextDecades() {
        onDecadesChange(1);
      }
    })), /*#__PURE__*/React.createElement(DecadeBody, _extends$1({}, props, {
      prefixCls: prefixCls,
      onSelect: onInternalSelect
    })));
  }

  var WEEK_DAY_COUNT = 7;
  function isNullEqual(value1, value2) {
    if (!value1 && !value2) {
      return true;
    }

    if (!value1 || !value2) {
      return false;
    }

    return undefined;
  }
  function isSameDecade(generateConfig, decade1, decade2) {
    var equal = isNullEqual(decade1, decade2);

    if (typeof equal === 'boolean') {
      return equal;
    }

    var num1 = Math.floor(generateConfig.getYear(decade1) / 10);
    var num2 = Math.floor(generateConfig.getYear(decade2) / 10);
    return num1 === num2;
  }
  function isSameYear(generateConfig, year1, year2) {
    var equal = isNullEqual(year1, year2);

    if (typeof equal === 'boolean') {
      return equal;
    }

    return generateConfig.getYear(year1) === generateConfig.getYear(year2);
  }
  function getQuarter(generateConfig, date) {
    var quota = Math.floor(generateConfig.getMonth(date) / 3);
    return quota + 1;
  }
  function isSameQuarter(generateConfig, quarter1, quarter2) {
    var equal = isNullEqual(quarter1, quarter2);

    if (typeof equal === 'boolean') {
      return equal;
    }

    return isSameYear(generateConfig, quarter1, quarter2) && getQuarter(generateConfig, quarter1) === getQuarter(generateConfig, quarter2);
  }
  function isSameMonth(generateConfig, month1, month2) {
    var equal = isNullEqual(month1, month2);

    if (typeof equal === 'boolean') {
      return equal;
    }

    return isSameYear(generateConfig, month1, month2) && generateConfig.getMonth(month1) === generateConfig.getMonth(month2);
  }
  function isSameDate(generateConfig, date1, date2) {
    var equal = isNullEqual(date1, date2);

    if (typeof equal === 'boolean') {
      return equal;
    }

    return generateConfig.getYear(date1) === generateConfig.getYear(date2) && generateConfig.getMonth(date1) === generateConfig.getMonth(date2) && generateConfig.getDate(date1) === generateConfig.getDate(date2);
  }
  function isSameTime(generateConfig, time1, time2) {
    var equal = isNullEqual(time1, time2);

    if (typeof equal === 'boolean') {
      return equal;
    }

    return generateConfig.getHour(time1) === generateConfig.getHour(time2) && generateConfig.getMinute(time1) === generateConfig.getMinute(time2) && generateConfig.getSecond(time1) === generateConfig.getSecond(time2);
  }
  function isSameWeek(generateConfig, locale, date1, date2) {
    var equal = isNullEqual(date1, date2);

    if (typeof equal === 'boolean') {
      return equal;
    }

    return generateConfig.locale.getWeek(locale, date1) === generateConfig.locale.getWeek(locale, date2);
  }
  function isEqual$1(generateConfig, value1, value2) {
    return isSameDate(generateConfig, value1, value2) && isSameTime(generateConfig, value1, value2);
  }
  /** Between in date but not equal of date */

  function isInRange(generateConfig, startDate, endDate, current) {
    if (!startDate || !endDate || !current) {
      return false;
    }

    return !isSameDate(generateConfig, startDate, current) && !isSameDate(generateConfig, endDate, current) && generateConfig.isAfter(current, startDate) && generateConfig.isAfter(endDate, current);
  }
  function getWeekStartDate(locale, generateConfig, value) {
    var weekFirstDay = generateConfig.locale.getWeekFirstDay(locale);
    var monthStartDate = generateConfig.setDate(value, 1);
    var startDateWeekDay = generateConfig.getWeekDay(monthStartDate);
    var alignStartDate = generateConfig.addDate(monthStartDate, weekFirstDay - startDateWeekDay);

    if (generateConfig.getMonth(alignStartDate) === generateConfig.getMonth(value) && generateConfig.getDate(alignStartDate) > 1) {
      alignStartDate = generateConfig.addDate(alignStartDate, -7);
    }

    return alignStartDate;
  }
  function getClosingViewDate(viewDate, picker, generateConfig) {
    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    switch (picker) {
      case 'year':
        return generateConfig.addYear(viewDate, offset * 10);

      case 'quarter':
      case 'month':
        return generateConfig.addYear(viewDate, offset);

      default:
        return generateConfig.addMonth(viewDate, offset);
    }
  }
  function formatValue(value, _ref) {
    var generateConfig = _ref.generateConfig,
        locale = _ref.locale,
        format = _ref.format;
    return typeof format === 'function' ? format(value) : generateConfig.locale.format(locale.locale, value, format);
  }
  function parseValue(value, _ref2) {
    var generateConfig = _ref2.generateConfig,
        locale = _ref2.locale,
        formatList = _ref2.formatList;

    if (!value || typeof formatList[0] === 'function') {
      return null;
    }

    return generateConfig.locale.parse(locale.locale, value, formatList);
  } // eslint-disable-next-line consistent-return

  function getCellDateDisabled(_ref3) {
    var cellDate = _ref3.cellDate,
        mode = _ref3.mode,
        disabledDate = _ref3.disabledDate,
        generateConfig = _ref3.generateConfig;
    if (!disabledDate) return false; // Whether cellDate is disabled in range

    var getDisabledFromRange = function getDisabledFromRange(currentMode, start, end) {
      var current = start;

      while (current <= end) {
        var date = void 0;

        switch (currentMode) {
          case 'date':
            {
              date = generateConfig.setDate(cellDate, current);

              if (!disabledDate(date)) {
                return false;
              }

              break;
            }

          case 'month':
            {
              date = generateConfig.setMonth(cellDate, current);

              if (!getCellDateDisabled({
                cellDate: date,
                mode: 'month',
                generateConfig: generateConfig,
                disabledDate: disabledDate
              })) {
                return false;
              }

              break;
            }

          case 'year':
            {
              date = generateConfig.setYear(cellDate, current);

              if (!getCellDateDisabled({
                cellDate: date,
                mode: 'year',
                generateConfig: generateConfig,
                disabledDate: disabledDate
              })) {
                return false;
              }

              break;
            }
        }

        current += 1;
      }

      return true;
    };

    switch (mode) {
      case 'date':
      case 'week':
        {
          return disabledDate(cellDate);
        }

      case 'month':
        {
          var startDate = 1;
          var endDate = generateConfig.getDate(generateConfig.getEndDate(cellDate));
          return getDisabledFromRange('date', startDate, endDate);
        }

      case 'quarter':
        {
          var startMonth = Math.floor(generateConfig.getMonth(cellDate) / 3) * 3;
          var endMonth = startMonth + 2;
          return getDisabledFromRange('month', startMonth, endMonth);
        }

      case 'year':
        {
          return getDisabledFromRange('month', 0, 11);
        }

      case 'decade':
        {
          var year = generateConfig.getYear(cellDate);
          var startYear = Math.floor(year / DECADE_UNIT_DIFF) * DECADE_UNIT_DIFF;
          var endYear = startYear + DECADE_UNIT_DIFF - 1;
          return getDisabledFromRange('year', startYear, endYear);
        }
    }
  }

  function TimeHeader(props) {
    var _React$useContext = React.useContext(PanelContext),
        hideHeader = _React$useContext.hideHeader;

    if (hideHeader) {
      return null;
    }

    var prefixCls = props.prefixCls,
        generateConfig = props.generateConfig,
        locale = props.locale,
        value = props.value,
        format = props.format;
    var headerPrefixCls = "".concat(prefixCls, "-header");
    return /*#__PURE__*/React.createElement(Header, {
      prefixCls: headerPrefixCls
    }, value ? formatValue(value, {
      locale: locale,
      format: format,
      generateConfig: generateConfig
    }) : "\xA0");
  }

  function TimeUnitColumn(props) {
    var prefixCls = props.prefixCls,
        units = props.units,
        onSelect = props.onSelect,
        value = props.value,
        active = props.active,
        hideDisabledOptions = props.hideDisabledOptions;
    var cellPrefixCls = "".concat(prefixCls, "-cell");

    var _React$useContext = React.useContext(PanelContext),
        open = _React$useContext.open;

    var ulRef = React.useRef(null);
    var liRefs = React.useRef(new Map());
    var scrollRef = React.useRef(); // `useLayoutEffect` here to avoid blink by duration is 0

    React.useLayoutEffect(function () {
      var li = liRefs.current.get(value);

      if (li && open !== false) {
        scrollTo(ulRef.current, li.offsetTop, 120);
      }
    }, [value]);
    React.useLayoutEffect(function () {
      if (open) {
        var li = liRefs.current.get(value);

        if (li) {
          scrollRef.current = waitElementReady(li, function () {
            scrollTo(ulRef.current, li.offsetTop, 0);
          });
        }
      }

      return function () {
        var _scrollRef$current;

        (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.call(scrollRef);
      };
    }, [open]);
    return /*#__PURE__*/React.createElement("ul", {
      className: classnames("".concat(prefixCls, "-column"), _defineProperty$1({}, "".concat(prefixCls, "-column-active"), active)),
      ref: ulRef,
      style: {
        position: 'relative'
      }
    }, units.map(function (unit) {
      var _classNames2;

      if (hideDisabledOptions && unit.disabled) {
        return null;
      }

      return /*#__PURE__*/React.createElement("li", {
        key: unit.value,
        ref: function ref(element) {
          liRefs.current.set(unit.value, element);
        },
        className: classnames(cellPrefixCls, (_classNames2 = {}, _defineProperty$1(_classNames2, "".concat(cellPrefixCls, "-disabled"), unit.disabled), _defineProperty$1(_classNames2, "".concat(cellPrefixCls, "-selected"), value === unit.value), _classNames2)),
        onClick: function onClick() {
          if (unit.disabled) {
            return;
          }

          onSelect(unit.value);
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(cellPrefixCls, "-inner")
      }, unit.label));
    }));
  }

  function leftPad(str, length) {
    var fill = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';
    var current = String(str);

    while (current.length < length) {
      current = "".concat(fill).concat(str);
    }

    return current;
  }
  var tuple$1 = function tuple() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return args;
  };
  function toArray$4(val) {
    if (val === null || val === undefined) {
      return [];
    }

    return Array.isArray(val) ? val : [val];
  }
  function getDataOrAriaProps$1(props) {
    var retProps = {};
    Object.keys(props).forEach(function (key) {
      if ((key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role' || key === 'name') && key.substr(0, 7) !== 'data-__') {
        retProps[key] = props[key];
      }
    });
    return retProps;
  }
  function getValue$4(values, index) {
    return values ? values[index] : null;
  }
  function updateValues(values, value, index) {
    var newValues = [getValue$4(values, 0), getValue$4(values, 1)];
    newValues[index] = typeof value === 'function' ? value(newValues[index]) : value;

    if (!newValues[0] && !newValues[1]) {
      return null;
    }

    return newValues;
  }

  function shouldUnitsUpdate(prevUnits, nextUnits) {
    if (prevUnits.length !== nextUnits.length) return true; // if any unit's disabled status is different, the units should be re-evaluted

    for (var i = 0; i < prevUnits.length; i += 1) {
      if (prevUnits[i].disabled !== nextUnits[i].disabled) return true;
    }

    return false;
  }

  function generateUnits(start, end, step, disabledUnits) {
    var units = [];

    for (var i = start; i <= end; i += step) {
      units.push({
        label: leftPad(i, 2),
        value: i,
        disabled: (disabledUnits || []).includes(i)
      });
    }

    return units;
  }

  function TimeBody(props) {
    var generateConfig = props.generateConfig,
        prefixCls = props.prefixCls,
        operationRef = props.operationRef,
        activeColumnIndex = props.activeColumnIndex,
        value = props.value,
        showHour = props.showHour,
        showMinute = props.showMinute,
        showSecond = props.showSecond,
        use12Hours = props.use12Hours,
        _props$hourStep = props.hourStep,
        hourStep = _props$hourStep === void 0 ? 1 : _props$hourStep,
        _props$minuteStep = props.minuteStep,
        minuteStep = _props$minuteStep === void 0 ? 1 : _props$minuteStep,
        _props$secondStep = props.secondStep,
        secondStep = _props$secondStep === void 0 ? 1 : _props$secondStep,
        disabledHours = props.disabledHours,
        disabledMinutes = props.disabledMinutes,
        disabledSeconds = props.disabledSeconds,
        hideDisabledOptions = props.hideDisabledOptions,
        onSelect = props.onSelect;
    var columns = [];
    var contentPrefixCls = "".concat(prefixCls, "-content");
    var columnPrefixCls = "".concat(prefixCls, "-time-panel");
    var isPM;
    var originHour = value ? generateConfig.getHour(value) : -1;
    var hour = originHour;
    var minute = value ? generateConfig.getMinute(value) : -1;
    var second = value ? generateConfig.getSecond(value) : -1;

    var setTime$1 = function setTime$1(isNewPM, newHour, newMinute, newSecond) {
      var newDate = value || generateConfig.getNow();
      var mergedHour = Math.max(0, newHour);
      var mergedMinute = Math.max(0, newMinute);
      var mergedSecond = Math.max(0, newSecond);
      newDate = setTime(generateConfig, newDate, !use12Hours || !isNewPM ? mergedHour : mergedHour + 12, mergedMinute, mergedSecond);
      return newDate;
    }; // ========================= Unit =========================


    var rawHours = generateUnits(0, 23, hourStep, disabledHours && disabledHours());
    var memorizedRawHours = useMemo(function () {
      return rawHours;
    }, rawHours, shouldUnitsUpdate); // Should additional logic to handle 12 hours

    if (use12Hours) {
      isPM = hour >= 12; // -1 means should display AM

      hour %= 12;
    }

    var _React$useMemo = React.useMemo(function () {
      if (!use12Hours) {
        return [false, false];
      }

      var AMPMDisabled = [true, true];
      memorizedRawHours.forEach(function (_ref) {
        var disabled = _ref.disabled,
            hourValue = _ref.value;
        if (disabled) return;

        if (hourValue >= 12) {
          AMPMDisabled[1] = false;
        } else {
          AMPMDisabled[0] = false;
        }
      });
      return AMPMDisabled;
    }, [use12Hours, memorizedRawHours]),
        _React$useMemo2 = _slicedToArray$1(_React$useMemo, 2),
        AMDisabled = _React$useMemo2[0],
        PMDisabled = _React$useMemo2[1];

    var hours = React.useMemo(function () {
      if (!use12Hours) return memorizedRawHours;
      return memorizedRawHours.filter(isPM ? function (hourMeta) {
        return hourMeta.value >= 12;
      } : function (hourMeta) {
        return hourMeta.value < 12;
      }).map(function (hourMeta) {
        var hourValue = hourMeta.value % 12;
        var hourLabel = hourValue === 0 ? '12' : leftPad(hourValue, 2);
        return _objectSpread2$1(_objectSpread2$1({}, hourMeta), {}, {
          label: hourLabel,
          value: hourValue
        });
      });
    }, [use12Hours, isPM, memorizedRawHours]);
    var minutes = generateUnits(0, 59, minuteStep, disabledMinutes && disabledMinutes(originHour));
    var seconds = generateUnits(0, 59, secondStep, disabledSeconds && disabledSeconds(originHour, minute)); // ====================== Operations ======================

    operationRef.current = {
      onUpDown: function onUpDown(diff) {
        var column = columns[activeColumnIndex];

        if (column) {
          var valueIndex = column.units.findIndex(function (unit) {
            return unit.value === column.value;
          });
          var unitLen = column.units.length;

          for (var i = 1; i < unitLen; i += 1) {
            var nextUnit = column.units[(valueIndex + diff * i + unitLen) % unitLen];

            if (nextUnit.disabled !== true) {
              column.onSelect(nextUnit.value);
              break;
            }
          }
        }
      }
    }; // ======================== Render ========================

    function addColumnNode(condition, node, columnValue, units, onColumnSelect) {
      if (condition !== false) {
        columns.push({
          node: /*#__PURE__*/React.cloneElement(node, {
            prefixCls: columnPrefixCls,
            value: columnValue,
            active: activeColumnIndex === columns.length,
            onSelect: onColumnSelect,
            units: units,
            hideDisabledOptions: hideDisabledOptions
          }),
          onSelect: onColumnSelect,
          value: columnValue,
          units: units
        });
      }
    } // Hour


    addColumnNode(showHour, /*#__PURE__*/React.createElement(TimeUnitColumn, {
      key: "hour"
    }), hour, hours, function (num) {
      onSelect(setTime$1(isPM, num, minute, second), 'mouse');
    }); // Minute

    addColumnNode(showMinute, /*#__PURE__*/React.createElement(TimeUnitColumn, {
      key: "minute"
    }), minute, minutes, function (num) {
      onSelect(setTime$1(isPM, hour, num, second), 'mouse');
    }); // Second

    addColumnNode(showSecond, /*#__PURE__*/React.createElement(TimeUnitColumn, {
      key: "second"
    }), second, seconds, function (num) {
      onSelect(setTime$1(isPM, hour, minute, num), 'mouse');
    }); // 12 Hours

    var PMIndex = -1;

    if (typeof isPM === 'boolean') {
      PMIndex = isPM ? 1 : 0;
    }

    addColumnNode(use12Hours === true, /*#__PURE__*/React.createElement(TimeUnitColumn, {
      key: "12hours"
    }), PMIndex, [{
      label: 'AM',
      value: 0,
      disabled: AMDisabled
    }, {
      label: 'PM',
      value: 1,
      disabled: PMDisabled
    }], function (num) {
      onSelect(setTime$1(!!num, hour, minute, second), 'mouse');
    });
    return /*#__PURE__*/React.createElement("div", {
      className: contentPrefixCls
    }, columns.map(function (_ref2) {
      var node = _ref2.node;
      return node;
    }));
  }

  var countBoolean = function countBoolean(boolList) {
    return boolList.filter(function (bool) {
      return bool !== false;
    }).length;
  };

  function TimePanel(props) {
    var generateConfig = props.generateConfig,
        _props$format = props.format,
        format = _props$format === void 0 ? 'HH:mm:ss' : _props$format,
        prefixCls = props.prefixCls,
        active = props.active,
        operationRef = props.operationRef,
        showHour = props.showHour,
        showMinute = props.showMinute,
        showSecond = props.showSecond,
        _props$use12Hours = props.use12Hours,
        use12Hours = _props$use12Hours === void 0 ? false : _props$use12Hours,
        onSelect = props.onSelect,
        value = props.value;
    var panelPrefixCls = "".concat(prefixCls, "-time-panel");
    var bodyOperationRef = React.useRef(); // ======================= Keyboard =======================

    var _React$useState = React.useState(-1),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        activeColumnIndex = _React$useState2[0],
        setActiveColumnIndex = _React$useState2[1];

    var columnsCount = countBoolean([showHour, showMinute, showSecond, use12Hours]);
    operationRef.current = {
      onKeyDown: function onKeyDown(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            setActiveColumnIndex((activeColumnIndex + diff + columnsCount) % columnsCount);
          },
          onUpDown: function onUpDown(diff) {
            if (activeColumnIndex === -1) {
              setActiveColumnIndex(0);
            } else if (bodyOperationRef.current) {
              bodyOperationRef.current.onUpDown(diff);
            }
          },
          onEnter: function onEnter() {
            onSelect(value || generateConfig.getNow(), 'key');
            setActiveColumnIndex(-1);
          }
        });
      },
      onBlur: function onBlur() {
        setActiveColumnIndex(-1);
      }
    };
    return /*#__PURE__*/React.createElement("div", {
      className: classnames(panelPrefixCls, _defineProperty$1({}, "".concat(panelPrefixCls, "-active"), active))
    }, /*#__PURE__*/React.createElement(TimeHeader, _extends$1({}, props, {
      format: format,
      prefixCls: prefixCls
    })), /*#__PURE__*/React.createElement(TimeBody, _extends$1({}, props, {
      prefixCls: prefixCls,
      activeColumnIndex: activeColumnIndex,
      operationRef: bodyOperationRef
    })));
  }

  var RangeContext = /*#__PURE__*/React.createContext({});

  function useCellClassName(_ref) {
    var cellPrefixCls = _ref.cellPrefixCls,
        generateConfig = _ref.generateConfig,
        rangedValue = _ref.rangedValue,
        hoverRangedValue = _ref.hoverRangedValue,
        isInView = _ref.isInView,
        isSameCell = _ref.isSameCell,
        offsetCell = _ref.offsetCell,
        today = _ref.today,
        value = _ref.value;

    function getClassName(currentDate) {
      var _ref2;

      var prevDate = offsetCell(currentDate, -1);
      var nextDate = offsetCell(currentDate, 1);
      var rangeStart = getValue$4(rangedValue, 0);
      var rangeEnd = getValue$4(rangedValue, 1);
      var hoverStart = getValue$4(hoverRangedValue, 0);
      var hoverEnd = getValue$4(hoverRangedValue, 1);
      var isRangeHovered = isInRange(generateConfig, hoverStart, hoverEnd, currentDate);

      function isRangeStart(date) {
        return isSameCell(rangeStart, date);
      }

      function isRangeEnd(date) {
        return isSameCell(rangeEnd, date);
      }

      var isHoverStart = isSameCell(hoverStart, currentDate);
      var isHoverEnd = isSameCell(hoverEnd, currentDate);
      var isHoverEdgeStart = (isRangeHovered || isHoverEnd) && (!isInView(prevDate) || isRangeEnd(prevDate));
      var isHoverEdgeEnd = (isRangeHovered || isHoverStart) && (!isInView(nextDate) || isRangeStart(nextDate));
      return _ref2 = {}, _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-in-view"), isInView(currentDate)), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-in-range"), isInRange(generateConfig, rangeStart, rangeEnd, currentDate)), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-start"), isRangeStart(currentDate)), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-end"), isRangeEnd(currentDate)), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-start-single"), isRangeStart(currentDate) && !rangeEnd), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-end-single"), isRangeEnd(currentDate) && !rangeStart), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-start-near-hover"), isRangeStart(currentDate) && (isSameCell(prevDate, hoverStart) || isInRange(generateConfig, hoverStart, hoverEnd, prevDate))), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-end-near-hover"), isRangeEnd(currentDate) && (isSameCell(nextDate, hoverEnd) || isInRange(generateConfig, hoverStart, hoverEnd, nextDate))), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-hover"), isRangeHovered), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-hover-start"), isHoverStart), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-hover-end"), isHoverEnd), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-start"), isHoverEdgeStart), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-end"), isHoverEdgeEnd), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-start-near-range"), isHoverEdgeStart && isSameCell(prevDate, rangeEnd)), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-range-hover-edge-end-near-range"), isHoverEdgeEnd && isSameCell(nextDate, rangeStart)), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-today"), isSameCell(today, currentDate)), _defineProperty$1(_ref2, "".concat(cellPrefixCls, "-selected"), isSameCell(value, currentDate)), _ref2;
    }

    return getClassName;
  }

  function DateBody(props) {
    var prefixCls = props.prefixCls,
        generateConfig = props.generateConfig,
        prefixColumn = props.prefixColumn,
        locale = props.locale,
        rowCount = props.rowCount,
        viewDate = props.viewDate,
        value = props.value,
        dateRender = props.dateRender;

    var _React$useContext = React.useContext(RangeContext),
        rangedValue = _React$useContext.rangedValue,
        hoverRangedValue = _React$useContext.hoverRangedValue;

    var baseDate = getWeekStartDate(locale.locale, generateConfig, viewDate);
    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var weekFirstDay = generateConfig.locale.getWeekFirstDay(locale.locale);
    var today = generateConfig.getNow(); // ============================== Header ==============================

    var headerCells = [];
    var weekDaysLocale = locale.shortWeekDays || (generateConfig.locale.getShortWeekDays ? generateConfig.locale.getShortWeekDays(locale.locale) : []);

    if (prefixColumn) {
      headerCells.push( /*#__PURE__*/React.createElement("th", {
        key: "empty",
        "aria-label": "empty cell"
      }));
    }

    for (var i = 0; i < WEEK_DAY_COUNT; i += 1) {
      headerCells.push( /*#__PURE__*/React.createElement("th", {
        key: i
      }, weekDaysLocale[(i + weekFirstDay) % WEEK_DAY_COUNT]));
    } // =============================== Body ===============================


    var getCellClassName = useCellClassName({
      cellPrefixCls: cellPrefixCls,
      today: today,
      value: value,
      generateConfig: generateConfig,
      rangedValue: prefixColumn ? null : rangedValue,
      hoverRangedValue: prefixColumn ? null : hoverRangedValue,
      isSameCell: function isSameCell(current, target) {
        return isSameDate(generateConfig, current, target);
      },
      isInView: function isInView(date) {
        return isSameMonth(generateConfig, date, viewDate);
      },
      offsetCell: function offsetCell(date, offset) {
        return generateConfig.addDate(date, offset);
      }
    });
    var getCellNode = dateRender ? function (date) {
      return dateRender(date, today);
    } : undefined;
    return /*#__PURE__*/React.createElement(PanelBody, _extends$1({}, props, {
      rowNum: rowCount,
      colNum: WEEK_DAY_COUNT,
      baseDate: baseDate,
      getCellNode: getCellNode,
      getCellText: generateConfig.getDate,
      getCellClassName: getCellClassName,
      getCellDate: generateConfig.addDate,
      titleCell: function titleCell(date) {
        return formatValue(date, {
          locale: locale,
          format: 'YYYY-MM-DD',
          generateConfig: generateConfig
        });
      },
      headerCells: headerCells
    }));
  }

  function DateHeader(props) {
    var prefixCls = props.prefixCls,
        generateConfig = props.generateConfig,
        locale = props.locale,
        viewDate = props.viewDate,
        onNextMonth = props.onNextMonth,
        onPrevMonth = props.onPrevMonth,
        onNextYear = props.onNextYear,
        onPrevYear = props.onPrevYear,
        onYearClick = props.onYearClick,
        onMonthClick = props.onMonthClick;

    var _React$useContext = React.useContext(PanelContext),
        hideHeader = _React$useContext.hideHeader;

    if (hideHeader) {
      return null;
    }

    var headerPrefixCls = "".concat(prefixCls, "-header");
    var monthsLocale = locale.shortMonths || (generateConfig.locale.getShortMonths ? generateConfig.locale.getShortMonths(locale.locale) : []);
    var month = generateConfig.getMonth(viewDate); // =================== Month & Year ===================

    var yearNode = /*#__PURE__*/React.createElement("button", {
      type: "button",
      key: "year",
      onClick: onYearClick,
      tabIndex: -1,
      className: "".concat(prefixCls, "-year-btn")
    }, formatValue(viewDate, {
      locale: locale,
      format: locale.yearFormat,
      generateConfig: generateConfig
    }));
    var monthNode = /*#__PURE__*/React.createElement("button", {
      type: "button",
      key: "month",
      onClick: onMonthClick,
      tabIndex: -1,
      className: "".concat(prefixCls, "-month-btn")
    }, locale.monthFormat ? formatValue(viewDate, {
      locale: locale,
      format: locale.monthFormat,
      generateConfig: generateConfig
    }) : monthsLocale[month]);
    var monthYearNodes = locale.monthBeforeYear ? [monthNode, yearNode] : [yearNode, monthNode];
    return /*#__PURE__*/React.createElement(Header, _extends$1({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevYear,
      onPrev: onPrevMonth,
      onNext: onNextMonth,
      onSuperNext: onNextYear
    }), monthYearNodes);
  }

  var DATE_ROW_COUNT = 6;

  function DatePanel(props) {
    var prefixCls = props.prefixCls,
        _props$panelName = props.panelName,
        panelName = _props$panelName === void 0 ? 'date' : _props$panelName,
        keyboardConfig = props.keyboardConfig,
        active = props.active,
        operationRef = props.operationRef,
        generateConfig = props.generateConfig,
        value = props.value,
        viewDate = props.viewDate,
        onViewDateChange = props.onViewDateChange,
        onPanelChange = props.onPanelChange,
        _onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-").concat(panelName, "-panel"); // ======================= Keyboard =======================

    operationRef.current = {
      onKeyDown: function onKeyDown(event) {
        return createKeyDownHandler(event, _objectSpread2$1({
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig.addDate(value || viewDate, diff), 'key');
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig.addYear(value || viewDate, diff), 'key');
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig.addDate(value || viewDate, diff * WEEK_DAY_COUNT), 'key');
          },
          onPageUpDown: function onPageUpDown(diff) {
            _onSelect(generateConfig.addMonth(value || viewDate, diff), 'key');
          }
        }, keyboardConfig));
      }
    }; // ==================== View Operation ====================

    var onYearChange = function onYearChange(diff) {
      var newDate = generateConfig.addYear(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };

    var onMonthChange = function onMonthChange(diff) {
      var newDate = generateConfig.addMonth(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };

    return /*#__PURE__*/React.createElement("div", {
      className: classnames(panelPrefixCls, _defineProperty$1({}, "".concat(panelPrefixCls, "-active"), active))
    }, /*#__PURE__*/React.createElement(DateHeader, _extends$1({}, props, {
      prefixCls: prefixCls,
      value: value,
      viewDate: viewDate // View Operation
      ,
      onPrevYear: function onPrevYear() {
        onYearChange(-1);
      },
      onNextYear: function onNextYear() {
        onYearChange(1);
      },
      onPrevMonth: function onPrevMonth() {
        onMonthChange(-1);
      },
      onNextMonth: function onNextMonth() {
        onMonthChange(1);
      },
      onMonthClick: function onMonthClick() {
        onPanelChange('month', viewDate);
      },
      onYearClick: function onYearClick() {
        onPanelChange('year', viewDate);
      }
    })), /*#__PURE__*/React.createElement(DateBody, _extends$1({}, props, {
      onSelect: function onSelect(date) {
        return _onSelect(date, 'mouse');
      },
      prefixCls: prefixCls,
      value: value,
      viewDate: viewDate,
      rowCount: DATE_ROW_COUNT
    })));
  }

  var ACTIVE_PANEL = tuple$1('date', 'time');

  function DatetimePanel(props) {
    var prefixCls = props.prefixCls,
        operationRef = props.operationRef,
        generateConfig = props.generateConfig,
        value = props.value,
        defaultValue = props.defaultValue,
        disabledTime = props.disabledTime,
        showTime = props.showTime,
        onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-datetime-panel");

    var _React$useState = React.useState(null),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        activePanel = _React$useState2[0],
        setActivePanel = _React$useState2[1];

    var dateOperationRef = React.useRef({});
    var timeOperationRef = React.useRef({});
    var timeProps = _typeof$1(showTime) === 'object' ? _objectSpread2$1({}, showTime) : {}; // ======================= Keyboard =======================

    function getNextActive(offset) {
      var activeIndex = ACTIVE_PANEL.indexOf(activePanel) + offset;
      var nextActivePanel = ACTIVE_PANEL[activeIndex] || null;
      return nextActivePanel;
    }

    var onBlur = function onBlur(e) {
      if (timeOperationRef.current.onBlur) {
        timeOperationRef.current.onBlur(e);
      }

      setActivePanel(null);
    };

    operationRef.current = {
      onKeyDown: function onKeyDown(event) {
        // Switch active panel
        if (event.which === KeyCode.TAB) {
          var nextActivePanel = getNextActive(event.shiftKey ? -1 : 1);
          setActivePanel(nextActivePanel);

          if (nextActivePanel) {
            event.preventDefault();
          }

          return true;
        } // Operate on current active panel


        if (activePanel) {
          var ref = activePanel === 'date' ? dateOperationRef : timeOperationRef;

          if (ref.current && ref.current.onKeyDown) {
            ref.current.onKeyDown(event);
          }

          return true;
        } // Switch first active panel if operate without panel


        if ([KeyCode.LEFT, KeyCode.RIGHT, KeyCode.UP, KeyCode.DOWN].includes(event.which)) {
          setActivePanel('date');
          return true;
        }

        return false;
      },
      onBlur: onBlur,
      onClose: onBlur
    }; // ======================== Events ========================

    var onInternalSelect = function onInternalSelect(date, source) {
      var selectedDate = date;

      if (source === 'date' && !value && timeProps.defaultValue) {
        // Date with time defaultValue
        selectedDate = generateConfig.setHour(selectedDate, generateConfig.getHour(timeProps.defaultValue));
        selectedDate = generateConfig.setMinute(selectedDate, generateConfig.getMinute(timeProps.defaultValue));
        selectedDate = generateConfig.setSecond(selectedDate, generateConfig.getSecond(timeProps.defaultValue));
      } else if (source === 'time' && !value && defaultValue) {
        selectedDate = generateConfig.setYear(selectedDate, generateConfig.getYear(defaultValue));
        selectedDate = generateConfig.setMonth(selectedDate, generateConfig.getMonth(defaultValue));
        selectedDate = generateConfig.setDate(selectedDate, generateConfig.getDate(defaultValue));
      }

      if (onSelect) {
        onSelect(selectedDate, 'mouse');
      }
    }; // ======================== Render ========================


    var disabledTimes = disabledTime ? disabledTime(value || null) : {};
    return /*#__PURE__*/React.createElement("div", {
      className: classnames(panelPrefixCls, _defineProperty$1({}, "".concat(panelPrefixCls, "-active"), activePanel))
    }, /*#__PURE__*/React.createElement(DatePanel, _extends$1({}, props, {
      operationRef: dateOperationRef,
      active: activePanel === 'date',
      onSelect: function onSelect(date) {
        onInternalSelect(setDateTime(generateConfig, date, showTime && _typeof$1(showTime) === 'object' ? showTime.defaultValue : null), 'date');
      }
    })), /*#__PURE__*/React.createElement(TimePanel, _extends$1({}, props, {
      format: undefined
    }, timeProps, disabledTimes, {
      defaultValue: undefined,
      operationRef: timeOperationRef,
      active: activePanel === 'time',
      onSelect: function onSelect(date) {
        onInternalSelect(date, 'time');
      }
    })));
  }

  function WeekPanel(props) {
    var prefixCls = props.prefixCls,
        generateConfig = props.generateConfig,
        locale = props.locale,
        value = props.value; // Render additional column

    var cellPrefixCls = "".concat(prefixCls, "-cell");

    var prefixColumn = function prefixColumn(date) {
      return /*#__PURE__*/React.createElement("td", {
        key: "week",
        className: classnames(cellPrefixCls, "".concat(cellPrefixCls, "-week"))
      }, generateConfig.locale.getWeek(locale.locale, date));
    }; // Add row className


    var rowPrefixCls = "".concat(prefixCls, "-week-panel-row");

    var rowClassName = function rowClassName(date) {
      return classnames(rowPrefixCls, _defineProperty$1({}, "".concat(rowPrefixCls, "-selected"), isSameWeek(generateConfig, locale.locale, value, date)));
    };

    return /*#__PURE__*/React.createElement(DatePanel, _extends$1({}, props, {
      panelName: "week",
      prefixColumn: prefixColumn,
      rowClassName: rowClassName,
      keyboardConfig: {
        onLeftRight: null
      }
    }));
  }

  function MonthHeader(props) {
    var prefixCls = props.prefixCls,
        generateConfig = props.generateConfig,
        locale = props.locale,
        viewDate = props.viewDate,
        onNextYear = props.onNextYear,
        onPrevYear = props.onPrevYear,
        onYearClick = props.onYearClick;

    var _React$useContext = React.useContext(PanelContext),
        hideHeader = _React$useContext.hideHeader;

    if (hideHeader) {
      return null;
    }

    var headerPrefixCls = "".concat(prefixCls, "-header");
    return /*#__PURE__*/React.createElement(Header, _extends$1({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevYear,
      onSuperNext: onNextYear
    }), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: onYearClick,
      className: "".concat(prefixCls, "-year-btn")
    }, formatValue(viewDate, {
      locale: locale,
      format: locale.yearFormat,
      generateConfig: generateConfig
    })));
  }

  var MONTH_COL_COUNT = 3;
  var MONTH_ROW_COUNT = 4;

  function MonthBody(props) {
    var prefixCls = props.prefixCls,
        locale = props.locale,
        value = props.value,
        viewDate = props.viewDate,
        generateConfig = props.generateConfig,
        monthCellRender = props.monthCellRender;

    var _React$useContext = React.useContext(RangeContext),
        rangedValue = _React$useContext.rangedValue,
        hoverRangedValue = _React$useContext.hoverRangedValue;

    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var getCellClassName = useCellClassName({
      cellPrefixCls: cellPrefixCls,
      value: value,
      generateConfig: generateConfig,
      rangedValue: rangedValue,
      hoverRangedValue: hoverRangedValue,
      isSameCell: function isSameCell(current, target) {
        return isSameMonth(generateConfig, current, target);
      },
      isInView: function isInView() {
        return true;
      },
      offsetCell: function offsetCell(date, offset) {
        return generateConfig.addMonth(date, offset);
      }
    });
    var monthsLocale = locale.shortMonths || (generateConfig.locale.getShortMonths ? generateConfig.locale.getShortMonths(locale.locale) : []);
    var baseMonth = generateConfig.setMonth(viewDate, 0);
    var getCellNode = monthCellRender ? function (date) {
      return monthCellRender(date, locale);
    } : undefined;
    return /*#__PURE__*/React.createElement(PanelBody, _extends$1({}, props, {
      rowNum: MONTH_ROW_COUNT,
      colNum: MONTH_COL_COUNT,
      baseDate: baseMonth,
      getCellNode: getCellNode,
      getCellText: function getCellText(date) {
        return locale.monthFormat ? formatValue(date, {
          locale: locale,
          format: locale.monthFormat,
          generateConfig: generateConfig
        }) : monthsLocale[generateConfig.getMonth(date)];
      },
      getCellClassName: getCellClassName,
      getCellDate: generateConfig.addMonth,
      titleCell: function titleCell(date) {
        return formatValue(date, {
          locale: locale,
          format: 'YYYY-MM',
          generateConfig: generateConfig
        });
      }
    }));
  }

  function MonthPanel(props) {
    var prefixCls = props.prefixCls,
        operationRef = props.operationRef,
        onViewDateChange = props.onViewDateChange,
        generateConfig = props.generateConfig,
        value = props.value,
        viewDate = props.viewDate,
        onPanelChange = props.onPanelChange,
        _onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-month-panel"); // ======================= Keyboard =======================

    operationRef.current = {
      onKeyDown: function onKeyDown(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig.addMonth(value || viewDate, diff), 'key');
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig.addYear(value || viewDate, diff), 'key');
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig.addMonth(value || viewDate, diff * MONTH_COL_COUNT), 'key');
          },
          onEnter: function onEnter() {
            onPanelChange('date', value || viewDate);
          }
        });
      }
    }; // ==================== View Operation ====================

    var onYearChange = function onYearChange(diff) {
      var newDate = generateConfig.addYear(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };

    return /*#__PURE__*/React.createElement("div", {
      className: panelPrefixCls
    }, /*#__PURE__*/React.createElement(MonthHeader, _extends$1({}, props, {
      prefixCls: prefixCls,
      onPrevYear: function onPrevYear() {
        onYearChange(-1);
      },
      onNextYear: function onNextYear() {
        onYearChange(1);
      },
      onYearClick: function onYearClick() {
        onPanelChange('year', viewDate);
      }
    })), /*#__PURE__*/React.createElement(MonthBody, _extends$1({}, props, {
      prefixCls: prefixCls,
      onSelect: function onSelect(date) {
        _onSelect(date, 'mouse');

        onPanelChange('date', date);
      }
    })));
  }

  function QuarterHeader(props) {
    var prefixCls = props.prefixCls,
        generateConfig = props.generateConfig,
        locale = props.locale,
        viewDate = props.viewDate,
        onNextYear = props.onNextYear,
        onPrevYear = props.onPrevYear,
        onYearClick = props.onYearClick;

    var _React$useContext = React.useContext(PanelContext),
        hideHeader = _React$useContext.hideHeader;

    if (hideHeader) {
      return null;
    }

    var headerPrefixCls = "".concat(prefixCls, "-header");
    return /*#__PURE__*/React.createElement(Header, _extends$1({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevYear,
      onSuperNext: onNextYear
    }), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: onYearClick,
      className: "".concat(prefixCls, "-year-btn")
    }, formatValue(viewDate, {
      locale: locale,
      format: locale.yearFormat,
      generateConfig: generateConfig
    })));
  }

  var QUARTER_COL_COUNT = 4;
  var QUARTER_ROW_COUNT = 1;

  function QuarterBody(props) {
    var prefixCls = props.prefixCls,
        locale = props.locale,
        value = props.value,
        viewDate = props.viewDate,
        generateConfig = props.generateConfig;

    var _React$useContext = React.useContext(RangeContext),
        rangedValue = _React$useContext.rangedValue,
        hoverRangedValue = _React$useContext.hoverRangedValue;

    var cellPrefixCls = "".concat(prefixCls, "-cell");
    var getCellClassName = useCellClassName({
      cellPrefixCls: cellPrefixCls,
      value: value,
      generateConfig: generateConfig,
      rangedValue: rangedValue,
      hoverRangedValue: hoverRangedValue,
      isSameCell: function isSameCell(current, target) {
        return isSameQuarter(generateConfig, current, target);
      },
      isInView: function isInView() {
        return true;
      },
      offsetCell: function offsetCell(date, offset) {
        return generateConfig.addMonth(date, offset * 3);
      }
    });
    var baseQuarter = generateConfig.setDate(generateConfig.setMonth(viewDate, 0), 1);
    return /*#__PURE__*/React.createElement(PanelBody, _extends$1({}, props, {
      rowNum: QUARTER_ROW_COUNT,
      colNum: QUARTER_COL_COUNT,
      baseDate: baseQuarter,
      getCellText: function getCellText(date) {
        return formatValue(date, {
          locale: locale,
          format: locale.quarterFormat || '[Q]Q',
          generateConfig: generateConfig
        });
      },
      getCellClassName: getCellClassName,
      getCellDate: function getCellDate(date, offset) {
        return generateConfig.addMonth(date, offset * 3);
      },
      titleCell: function titleCell(date) {
        return formatValue(date, {
          locale: locale,
          format: 'YYYY-[Q]Q',
          generateConfig: generateConfig
        });
      }
    }));
  }

  function QuarterPanel(props) {
    var prefixCls = props.prefixCls,
        operationRef = props.operationRef,
        onViewDateChange = props.onViewDateChange,
        generateConfig = props.generateConfig,
        value = props.value,
        viewDate = props.viewDate,
        onPanelChange = props.onPanelChange,
        _onSelect = props.onSelect;
    var panelPrefixCls = "".concat(prefixCls, "-quarter-panel"); // ======================= Keyboard =======================

    operationRef.current = {
      onKeyDown: function onKeyDown(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig.addMonth(value || viewDate, diff * 3), 'key');
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig.addYear(value || viewDate, diff), 'key');
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig.addYear(value || viewDate, diff), 'key');
          }
        });
      }
    }; // ==================== View Operation ====================

    var onYearChange = function onYearChange(diff) {
      var newDate = generateConfig.addYear(viewDate, diff);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };

    return /*#__PURE__*/React.createElement("div", {
      className: panelPrefixCls
    }, /*#__PURE__*/React.createElement(QuarterHeader, _extends$1({}, props, {
      prefixCls: prefixCls,
      onPrevYear: function onPrevYear() {
        onYearChange(-1);
      },
      onNextYear: function onNextYear() {
        onYearChange(1);
      },
      onYearClick: function onYearClick() {
        onPanelChange('year', viewDate);
      }
    })), /*#__PURE__*/React.createElement(QuarterBody, _extends$1({}, props, {
      prefixCls: prefixCls,
      onSelect: function onSelect(date) {
        _onSelect(date, 'mouse');
      }
    })));
  }

  function YearHeader(props) {
    var prefixCls = props.prefixCls,
        generateConfig = props.generateConfig,
        viewDate = props.viewDate,
        onPrevDecade = props.onPrevDecade,
        onNextDecade = props.onNextDecade,
        onDecadeClick = props.onDecadeClick;

    var _React$useContext = React.useContext(PanelContext),
        hideHeader = _React$useContext.hideHeader;

    if (hideHeader) {
      return null;
    }

    var headerPrefixCls = "".concat(prefixCls, "-header");
    var yearNumber = generateConfig.getYear(viewDate);
    var startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;
    var endYear = startYear + YEAR_DECADE_COUNT - 1;
    return /*#__PURE__*/React.createElement(Header, _extends$1({}, props, {
      prefixCls: headerPrefixCls,
      onSuperPrev: onPrevDecade,
      onSuperNext: onNextDecade
    }), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: onDecadeClick,
      className: "".concat(prefixCls, "-decade-btn")
    }, startYear, "-", endYear));
  }

  var YEAR_COL_COUNT = 3;
  var YEAR_ROW_COUNT = 4;

  function YearBody(props) {
    var prefixCls = props.prefixCls,
        value = props.value,
        viewDate = props.viewDate,
        locale = props.locale,
        generateConfig = props.generateConfig;

    var _React$useContext = React.useContext(RangeContext),
        rangedValue = _React$useContext.rangedValue,
        hoverRangedValue = _React$useContext.hoverRangedValue;

    var yearPrefixCls = "".concat(prefixCls, "-cell"); // =============================== Year ===============================

    var yearNumber = generateConfig.getYear(viewDate);
    var startYear = Math.floor(yearNumber / YEAR_DECADE_COUNT) * YEAR_DECADE_COUNT;
    var endYear = startYear + YEAR_DECADE_COUNT - 1;
    var baseYear = generateConfig.setYear(viewDate, startYear - Math.ceil((YEAR_COL_COUNT * YEAR_ROW_COUNT - YEAR_DECADE_COUNT) / 2));

    var isInView = function isInView(date) {
      var currentYearNumber = generateConfig.getYear(date);
      return startYear <= currentYearNumber && currentYearNumber <= endYear;
    };

    var getCellClassName = useCellClassName({
      cellPrefixCls: yearPrefixCls,
      value: value,
      generateConfig: generateConfig,
      rangedValue: rangedValue,
      hoverRangedValue: hoverRangedValue,
      isSameCell: function isSameCell(current, target) {
        return isSameYear(generateConfig, current, target);
      },
      isInView: isInView,
      offsetCell: function offsetCell(date, offset) {
        return generateConfig.addYear(date, offset);
      }
    });
    return /*#__PURE__*/React.createElement(PanelBody, _extends$1({}, props, {
      rowNum: YEAR_ROW_COUNT,
      colNum: YEAR_COL_COUNT,
      baseDate: baseYear,
      getCellText: generateConfig.getYear,
      getCellClassName: getCellClassName,
      getCellDate: generateConfig.addYear,
      titleCell: function titleCell(date) {
        return formatValue(date, {
          locale: locale,
          format: 'YYYY',
          generateConfig: generateConfig
        });
      }
    }));
  }

  var YEAR_DECADE_COUNT = 10;

  function YearPanel(props) {
    var prefixCls = props.prefixCls,
        operationRef = props.operationRef,
        onViewDateChange = props.onViewDateChange,
        generateConfig = props.generateConfig,
        value = props.value,
        viewDate = props.viewDate,
        sourceMode = props.sourceMode,
        _onSelect = props.onSelect,
        onPanelChange = props.onPanelChange;
    var panelPrefixCls = "".concat(prefixCls, "-year-panel"); // ======================= Keyboard =======================

    operationRef.current = {
      onKeyDown: function onKeyDown(event) {
        return createKeyDownHandler(event, {
          onLeftRight: function onLeftRight(diff) {
            _onSelect(generateConfig.addYear(value || viewDate, diff), 'key');
          },
          onCtrlLeftRight: function onCtrlLeftRight(diff) {
            _onSelect(generateConfig.addYear(value || viewDate, diff * YEAR_DECADE_COUNT), 'key');
          },
          onUpDown: function onUpDown(diff) {
            _onSelect(generateConfig.addYear(value || viewDate, diff * YEAR_COL_COUNT), 'key');
          },
          onEnter: function onEnter() {
            onPanelChange(sourceMode === 'date' ? 'date' : 'month', value || viewDate);
          }
        });
      }
    }; // ==================== View Operation ====================

    var onDecadeChange = function onDecadeChange(diff) {
      var newDate = generateConfig.addYear(viewDate, diff * 10);
      onViewDateChange(newDate);
      onPanelChange(null, newDate);
    };

    return /*#__PURE__*/React.createElement("div", {
      className: panelPrefixCls
    }, /*#__PURE__*/React.createElement(YearHeader, _extends$1({}, props, {
      prefixCls: prefixCls,
      onPrevDecade: function onPrevDecade() {
        onDecadeChange(-1);
      },
      onNextDecade: function onNextDecade() {
        onDecadeChange(1);
      },
      onDecadeClick: function onDecadeClick() {
        onPanelChange('decade', viewDate);
      }
    })), /*#__PURE__*/React.createElement(YearBody, _extends$1({}, props, {
      prefixCls: prefixCls,
      onSelect: function onSelect(date) {
        onPanelChange(sourceMode === 'date' ? 'date' : 'month', date);

        _onSelect(date, 'mouse');
      }
    })));
  }

  function getExtraFooter(prefixCls, mode, renderExtraFooter) {
    if (!renderExtraFooter) {
      return null;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-footer-extra")
    }, renderExtraFooter(mode));
  }

  function getRanges(_ref) {
    var prefixCls = _ref.prefixCls,
        _ref$rangeList = _ref.rangeList,
        rangeList = _ref$rangeList === void 0 ? [] : _ref$rangeList,
        _ref$components = _ref.components,
        components = _ref$components === void 0 ? {} : _ref$components,
        needConfirmButton = _ref.needConfirmButton,
        onNow = _ref.onNow,
        onOk = _ref.onOk,
        okDisabled = _ref.okDisabled,
        showNow = _ref.showNow,
        locale = _ref.locale;
    var presetNode;
    var okNode;

    if (rangeList.length) {
      var Item = components.rangeItem || 'span';
      presetNode = /*#__PURE__*/React.createElement(React.Fragment, null, rangeList.map(function (_ref2) {
        var label = _ref2.label,
            onClick = _ref2.onClick,
            onMouseEnter = _ref2.onMouseEnter,
            onMouseLeave = _ref2.onMouseLeave;
        return /*#__PURE__*/React.createElement("li", {
          key: label,
          className: "".concat(prefixCls, "-preset")
        }, /*#__PURE__*/React.createElement(Item, {
          onClick: onClick,
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave
        }, label));
      }));
    }

    if (needConfirmButton) {
      var Button = components.button || 'button';

      if (onNow && !presetNode && showNow !== false) {
        presetNode = /*#__PURE__*/React.createElement("li", {
          className: "".concat(prefixCls, "-now")
        }, /*#__PURE__*/React.createElement("a", {
          className: "".concat(prefixCls, "-now-btn"),
          onClick: onNow
        }, locale.now));
      }

      okNode = needConfirmButton && /*#__PURE__*/React.createElement("li", {
        className: "".concat(prefixCls, "-ok")
      }, /*#__PURE__*/React.createElement(Button, {
        disabled: okDisabled,
        onClick: onOk
      }, locale.ok));
    }

    if (!presetNode && !okNode) {
      return null;
    }

    return /*#__PURE__*/React.createElement("ul", {
      className: "".concat(prefixCls, "-ranges")
    }, presetNode, okNode);
  }

  function PickerPanel(props) {
    var _classNames;

    var _props$prefixCls = props.prefixCls,
        prefixCls = _props$prefixCls === void 0 ? 'rc-picker' : _props$prefixCls,
        className = props.className,
        style = props.style,
        locale = props.locale,
        generateConfig = props.generateConfig,
        value = props.value,
        defaultValue = props.defaultValue,
        pickerValue = props.pickerValue,
        defaultPickerValue = props.defaultPickerValue,
        disabledDate = props.disabledDate,
        mode = props.mode,
        _props$picker = props.picker,
        picker = _props$picker === void 0 ? 'date' : _props$picker,
        _props$tabIndex = props.tabIndex,
        tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
        showNow = props.showNow,
        showTime = props.showTime,
        showToday = props.showToday,
        renderExtraFooter = props.renderExtraFooter,
        hideHeader = props.hideHeader,
        onSelect = props.onSelect,
        onChange = props.onChange,
        onPanelChange = props.onPanelChange,
        onMouseDown = props.onMouseDown,
        onPickerValueChange = props.onPickerValueChange,
        _onOk = props.onOk,
        components = props.components,
        direction = props.direction,
        _props$hourStep = props.hourStep,
        hourStep = _props$hourStep === void 0 ? 1 : _props$hourStep,
        _props$minuteStep = props.minuteStep,
        minuteStep = _props$minuteStep === void 0 ? 1 : _props$minuteStep,
        _props$secondStep = props.secondStep,
        secondStep = _props$secondStep === void 0 ? 1 : _props$secondStep;
    var needConfirmButton = picker === 'date' && !!showTime || picker === 'time';
    var isHourStepValid = 24 % hourStep === 0;
    var isMinuteStepValid = 60 % minuteStep === 0;
    var isSecondStepValid = 60 % secondStep === 0;

    {
      warningOnce(!value || generateConfig.isValidate(value), 'Invalidate date pass to `value`.');
      warningOnce(!value || generateConfig.isValidate(value), 'Invalidate date pass to `defaultValue`.');
      warningOnce(isHourStepValid, "`hourStep` ".concat(hourStep, " is invalid. It should be a factor of 24."));
      warningOnce(isMinuteStepValid, "`minuteStep` ".concat(minuteStep, " is invalid. It should be a factor of 60."));
      warningOnce(isSecondStepValid, "`secondStep` ".concat(secondStep, " is invalid. It should be a factor of 60."));
    } // ============================ State =============================


    var panelContext = React.useContext(PanelContext);
    var operationRef = panelContext.operationRef,
        panelDivRef = panelContext.panelRef,
        onContextSelect = panelContext.onSelect,
        hideRanges = panelContext.hideRanges,
        defaultOpenValue = panelContext.defaultOpenValue;

    var _React$useContext = React.useContext(RangeContext),
        inRange = _React$useContext.inRange,
        panelPosition = _React$useContext.panelPosition,
        rangedValue = _React$useContext.rangedValue,
        hoverRangedValue = _React$useContext.hoverRangedValue;

    var panelRef = React.useRef({}); // Handle init logic

    var initRef = React.useRef(true); // Value

    var _useMergedState = useControlledState(null, {
      value: value,
      defaultValue: defaultValue,
      postState: function postState(val) {
        if (!val && defaultOpenValue && picker === 'time') {
          return defaultOpenValue;
        }

        return val;
      }
    }),
        _useMergedState2 = _slicedToArray$1(_useMergedState, 2),
        mergedValue = _useMergedState2[0],
        setInnerValue = _useMergedState2[1]; // View date control


    var _useMergedState3 = useControlledState(null, {
      value: pickerValue,
      defaultValue: defaultPickerValue || mergedValue,
      postState: function postState(date) {
        var now = generateConfig.getNow();
        if (!date) return now; // When value is null and set showTime

        // When value is null and set showTime
        if (!mergedValue && showTime) {
          if (_typeof$1(showTime) === 'object') {
            return setDateTime(generateConfig, Array.isArray(date) ? date[0] : date, showTime.defaultValue || now);
          }

          if (defaultValue) {
            return setDateTime(generateConfig, Array.isArray(date) ? date[0] : date, defaultValue);
          }

          return setDateTime(generateConfig, Array.isArray(date) ? date[0] : date, now);
        }

        return date;
      }
    }),
        _useMergedState4 = _slicedToArray$1(_useMergedState3, 2),
        viewDate = _useMergedState4[0],
        setInnerViewDate = _useMergedState4[1];

    var setViewDate = function setViewDate(date) {
      setInnerViewDate(date);

      if (onPickerValueChange) {
        onPickerValueChange(date);
      }
    }; // Panel control


    var getInternalNextMode = function getInternalNextMode(nextMode) {
      var getNextMode = PickerModeMap[picker];

      if (getNextMode) {
        return getNextMode(nextMode);
      }

      return nextMode;
    }; // Save panel is changed from which panel


    var _useMergedState5 = useControlledState(function () {
      if (picker === 'time') {
        return 'time';
      }

      return getInternalNextMode('date');
    }, {
      value: mode
    }),
        _useMergedState6 = _slicedToArray$1(_useMergedState5, 2),
        mergedMode = _useMergedState6[0],
        setInnerMode = _useMergedState6[1];

    React.useEffect(function () {
      setInnerMode(picker);
    }, [picker]);

    var _React$useState = React.useState(function () {
      return mergedMode;
    }),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        sourceMode = _React$useState2[0],
        setSourceMode = _React$useState2[1];

    var onInternalPanelChange = function onInternalPanelChange(newMode, viewValue) {
      var nextMode = getInternalNextMode(newMode || mergedMode);
      setSourceMode(mergedMode);
      setInnerMode(nextMode);

      if (onPanelChange && (mergedMode !== nextMode || isEqual$1(generateConfig, viewDate, viewDate))) {
        onPanelChange(viewValue, nextMode);
      }
    };

    var triggerSelect = function triggerSelect(date, type) {
      var forceTriggerSelect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (mergedMode === picker || forceTriggerSelect) {
        setInnerValue(date);

        if (onSelect) {
          onSelect(date);
        }

        if (onContextSelect) {
          onContextSelect(date, type);
        }

        if (onChange && !isEqual$1(generateConfig, date, mergedValue) && !(disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date))) {
          onChange(date);
        }
      }
    }; // ========================= Interactive ==========================


    var onInternalKeyDown = function onInternalKeyDown(e) {
      if (panelRef.current && panelRef.current.onKeyDown) {
        if ([KeyCode.LEFT, KeyCode.RIGHT, KeyCode.UP, KeyCode.DOWN, KeyCode.PAGE_UP, KeyCode.PAGE_DOWN, KeyCode.ENTER].includes(e.which)) {
          e.preventDefault();
        }

        return panelRef.current.onKeyDown(e);
      }
      /* istanbul ignore next */

      /* eslint-disable no-lone-blocks */


      {
        warningOnce(false, 'Panel not correct handle keyDown event. Please help to fire issue about this.');
        return false;
      }
      /* eslint-enable no-lone-blocks */
    };

    var onInternalBlur = function onInternalBlur(e) {
      if (panelRef.current && panelRef.current.onBlur) {
        panelRef.current.onBlur(e);
      }
    };

    if (operationRef && panelPosition !== 'right') {
      operationRef.current = {
        onKeyDown: onInternalKeyDown,
        onClose: function onClose() {
          if (panelRef.current && panelRef.current.onClose) {
            panelRef.current.onClose();
          }
        }
      };
    } // ============================ Effect ============================


    React.useEffect(function () {
      if (value && !initRef.current) {
        setInnerViewDate(value);
      }
    }, [value]);
    React.useEffect(function () {
      initRef.current = false;
    }, []); // ============================ Panels ============================

    var panelNode;

    var pickerProps = _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      operationRef: panelRef,
      prefixCls: prefixCls,
      viewDate: viewDate,
      value: mergedValue,
      onViewDateChange: setViewDate,
      sourceMode: sourceMode,
      onPanelChange: onInternalPanelChange,
      disabledDate: disabledDate
    });

    delete pickerProps.onChange;
    delete pickerProps.onSelect;

    switch (mergedMode) {
      case 'decade':
        panelNode = /*#__PURE__*/React.createElement(DecadePanel, _extends$1({}, pickerProps, {
          onSelect: function onSelect(date, type) {
            setViewDate(date);
            triggerSelect(date, type);
          }
        }));
        break;

      case 'year':
        panelNode = /*#__PURE__*/React.createElement(YearPanel, _extends$1({}, pickerProps, {
          onSelect: function onSelect(date, type) {
            setViewDate(date);
            triggerSelect(date, type);
          }
        }));
        break;

      case 'month':
        panelNode = /*#__PURE__*/React.createElement(MonthPanel, _extends$1({}, pickerProps, {
          onSelect: function onSelect(date, type) {
            setViewDate(date);
            triggerSelect(date, type);
          }
        }));
        break;

      case 'quarter':
        panelNode = /*#__PURE__*/React.createElement(QuarterPanel, _extends$1({}, pickerProps, {
          onSelect: function onSelect(date, type) {
            setViewDate(date);
            triggerSelect(date, type);
          }
        }));
        break;

      case 'week':
        panelNode = /*#__PURE__*/React.createElement(WeekPanel, _extends$1({}, pickerProps, {
          onSelect: function onSelect(date, type) {
            setViewDate(date);
            triggerSelect(date, type);
          }
        }));
        break;

      case 'time':
        delete pickerProps.showTime;
        panelNode = /*#__PURE__*/React.createElement(TimePanel, _extends$1({}, pickerProps, _typeof$1(showTime) === 'object' ? showTime : null, {
          onSelect: function onSelect(date, type) {
            setViewDate(date);
            triggerSelect(date, type);
          }
        }));
        break;

      default:
        if (showTime) {
          panelNode = /*#__PURE__*/React.createElement(DatetimePanel, _extends$1({}, pickerProps, {
            onSelect: function onSelect(date, type) {
              setViewDate(date);
              triggerSelect(date, type);
            }
          }));
        } else {
          panelNode = /*#__PURE__*/React.createElement(DatePanel, _extends$1({}, pickerProps, {
            onSelect: function onSelect(date, type) {
              setViewDate(date);
              triggerSelect(date, type);
            }
          }));
        }

    } // ============================ Footer ============================


    var extraFooter;
    var rangesNode;

    var onNow = function onNow() {
      var now = generateConfig.getNow();
      var lowerBoundTime = getLowerBoundTime(generateConfig.getHour(now), generateConfig.getMinute(now), generateConfig.getSecond(now), isHourStepValid ? hourStep : 1, isMinuteStepValid ? minuteStep : 1, isSecondStepValid ? secondStep : 1);
      var adjustedNow = setTime(generateConfig, now, lowerBoundTime[0], // hour
      lowerBoundTime[1], // minute
      lowerBoundTime[2]);
      triggerSelect(adjustedNow, 'submit');
    };

    if (!hideRanges) {
      extraFooter = getExtraFooter(prefixCls, mergedMode, renderExtraFooter);
      rangesNode = getRanges({
        prefixCls: prefixCls,
        components: components,
        needConfirmButton: needConfirmButton,
        okDisabled: !mergedValue || disabledDate && disabledDate(mergedValue),
        locale: locale,
        showNow: showNow,
        onNow: needConfirmButton && onNow,
        onOk: function onOk() {
          if (mergedValue) {
            triggerSelect(mergedValue, 'submit', true);

            if (_onOk) {
              _onOk(mergedValue);
            }
          }
        }
      });
    }

    var todayNode;

    if (showToday && mergedMode === 'date' && picker === 'date' && !showTime) {
      var now = generateConfig.getNow();
      var todayCls = "".concat(prefixCls, "-today-btn");
      var disabled = disabledDate && disabledDate(now);
      todayNode = /*#__PURE__*/React.createElement("a", {
        className: classnames(todayCls, disabled && "".concat(todayCls, "-disabled")),
        "aria-disabled": disabled,
        onClick: function onClick() {
          if (!disabled) {
            triggerSelect(now, 'mouse', true);
          }
        }
      }, locale.today);
    }

    return /*#__PURE__*/React.createElement(PanelContext.Provider, {
      value: _objectSpread2$1(_objectSpread2$1({}, panelContext), {}, {
        mode: mergedMode,
        hideHeader: 'hideHeader' in props ? hideHeader : panelContext.hideHeader,
        hidePrevBtn: inRange && panelPosition === 'right',
        hideNextBtn: inRange && panelPosition === 'left'
      })
    }, /*#__PURE__*/React.createElement("div", {
      tabIndex: tabIndex,
      className: classnames("".concat(prefixCls, "-panel"), className, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-panel-has-range"), rangedValue && rangedValue[0] && rangedValue[1]), _defineProperty$1(_classNames, "".concat(prefixCls, "-panel-has-range-hover"), hoverRangedValue && hoverRangedValue[0] && hoverRangedValue[1]), _defineProperty$1(_classNames, "".concat(prefixCls, "-panel-rtl"), direction === 'rtl'), _classNames)),
      style: style,
      onKeyDown: onInternalKeyDown,
      onBlur: onInternalBlur,
      onMouseDown: onMouseDown,
      ref: panelDivRef
    }, panelNode, extraFooter || rangesNode || todayNode ? /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-footer")
    }, extraFooter, rangesNode, todayNode) : null));
  }
  /* eslint-enable */

  var BUILT_IN_PLACEMENTS = {
    bottomLeft: {
      points: ['tl', 'bl'],
      offset: [0, 4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    },
    bottomRight: {
      points: ['tr', 'br'],
      offset: [0, 4],
      overflow: {
        adjustX: 1,
        adjustY: 1
      }
    },
    topLeft: {
      points: ['bl', 'tl'],
      offset: [0, -4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    },
    topRight: {
      points: ['br', 'tr'],
      offset: [0, -4],
      overflow: {
        adjustX: 0,
        adjustY: 1
      }
    }
  };

  function PickerTrigger(_ref) {
    var _classNames;

    var prefixCls = _ref.prefixCls,
        popupElement = _ref.popupElement,
        popupStyle = _ref.popupStyle,
        visible = _ref.visible,
        dropdownClassName = _ref.dropdownClassName,
        dropdownAlign = _ref.dropdownAlign,
        transitionName = _ref.transitionName,
        getPopupContainer = _ref.getPopupContainer,
        children = _ref.children,
        range = _ref.range,
        popupPlacement = _ref.popupPlacement,
        direction = _ref.direction;
    var dropdownPrefixCls = "".concat(prefixCls, "-dropdown");

    var getPopupPlacement = function getPopupPlacement() {
      if (popupPlacement !== undefined) {
        return popupPlacement;
      }

      return direction === 'rtl' ? 'bottomRight' : 'bottomLeft';
    };

    return /*#__PURE__*/React.createElement(Trigger, {
      showAction: [],
      hideAction: [],
      popupPlacement: getPopupPlacement(),
      builtinPlacements: BUILT_IN_PLACEMENTS,
      prefixCls: dropdownPrefixCls,
      popupTransitionName: transitionName,
      popup: popupElement,
      popupAlign: dropdownAlign,
      popupVisible: visible,
      popupClassName: classnames(dropdownClassName, (_classNames = {}, _defineProperty$1(_classNames, "".concat(dropdownPrefixCls, "-range"), range), _defineProperty$1(_classNames, "".concat(dropdownPrefixCls, "-rtl"), direction === 'rtl'), _classNames)),
      popupStyle: popupStyle,
      getPopupContainer: getPopupContainer
    }, children);
  }

  function usePickerInput(_ref) {
    var open = _ref.open,
        value = _ref.value,
        isClickOutside = _ref.isClickOutside,
        triggerOpen = _ref.triggerOpen,
        forwardKeyDown = _ref.forwardKeyDown,
        _onKeyDown = _ref.onKeyDown,
        blurToCancel = _ref.blurToCancel,
        onSubmit = _ref.onSubmit,
        onCancel = _ref.onCancel,
        _onFocus = _ref.onFocus,
        _onBlur = _ref.onBlur;

    var _useState = React.useState(false),
        _useState2 = _slicedToArray$1(_useState, 2),
        typing = _useState2[0],
        setTyping = _useState2[1];

    var _useState3 = React.useState(false),
        _useState4 = _slicedToArray$1(_useState3, 2),
        focused = _useState4[0],
        setFocused = _useState4[1];
    /**
     * We will prevent blur to handle open event when user click outside,
     * since this will repeat trigger `onOpenChange` event.
     */


    var preventBlurRef = React.useRef(false);
    var valueChangedRef = React.useRef(false);
    var preventDefaultRef = React.useRef(false);
    var inputProps = {
      onMouseDown: function onMouseDown() {
        setTyping(true);
        triggerOpen(true);
      },
      onKeyDown: function onKeyDown(e) {
        var preventDefault = function preventDefault() {
          preventDefaultRef.current = true;
        };

        _onKeyDown(e, preventDefault);

        if (preventDefaultRef.current) return;

        switch (e.which) {
          case KeyCode.ENTER:
            {
              if (!open) {
                triggerOpen(true);
              } else if (onSubmit() !== false) {
                setTyping(true);
              }

              e.preventDefault();
              return;
            }

          case KeyCode.TAB:
            {
              if (typing && open && !e.shiftKey) {
                setTyping(false);
                e.preventDefault();
              } else if (!typing && open) {
                if (!forwardKeyDown(e) && e.shiftKey) {
                  setTyping(true);
                  e.preventDefault();
                }
              }

              return;
            }

          case KeyCode.ESC:
            {
              setTyping(true);
              onCancel();
              return;
            }
        }

        if (!open && ![KeyCode.SHIFT].includes(e.which)) {
          triggerOpen(true);
        } else if (!typing) {
          // Let popup panel handle keyboard
          forwardKeyDown(e);
        }
      },
      onFocus: function onFocus(e) {
        setTyping(true);
        setFocused(true);

        if (_onFocus) {
          _onFocus(e);
        }
      },
      onBlur: function onBlur(e) {
        if (preventBlurRef.current || !isClickOutside(document.activeElement)) {
          preventBlurRef.current = false;
          return;
        }

        if (blurToCancel) {
          setTimeout(function () {
            var _document = document,
                activeElement = _document.activeElement;

            while (activeElement && activeElement.shadowRoot) {
              activeElement = activeElement.shadowRoot.activeElement;
            }

            if (isClickOutside(activeElement)) {
              onCancel();
            }
          }, 0);
        } else if (open) {
          triggerOpen(false);

          if (valueChangedRef.current) {
            onSubmit();
          }
        }

        setFocused(false);

        if (_onBlur) {
          _onBlur(e);
        }
      }
    }; // check if value changed

    React.useEffect(function () {
      valueChangedRef.current = false;
    }, [open]);
    React.useEffect(function () {
      valueChangedRef.current = true;
    }, [value]); // Global click handler

    React.useEffect(function () {
      return addGlobalMouseDownEvent(function (e) {
        var target = getTargetFromEvent(e);

        if (open) {
          var clickedOutside = isClickOutside(target);

          if (!clickedOutside) {
            preventBlurRef.current = true; // Always set back in case `onBlur` prevented by user

            requestAnimationFrame(function () {
              preventBlurRef.current = false;
            });
          } else if (!focused || clickedOutside) {
            triggerOpen(false);
          }
        }
      });
    });
    return [inputProps, {
      focused: focused,
      typing: typing
    }];
  }

  function useTextValueMapping(_ref) {
    var valueTexts = _ref.valueTexts,
        onTextChange = _ref.onTextChange;

    var _React$useState = React.useState(''),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        text = _React$useState2[0],
        setInnerText = _React$useState2[1];

    var valueTextsRef = React.useRef([]);
    valueTextsRef.current = valueTexts;

    function triggerTextChange(value) {
      setInnerText(value);
      onTextChange(value);
    }

    function resetText() {
      setInnerText(valueTextsRef.current[0]);
    }

    React.useEffect(function () {
      if (valueTexts.every(function (valText) {
        return valText !== text;
      })) {
        resetText();
      }
    }, [valueTexts.join('||')]);
    return [text, triggerTextChange, resetText];
  }

  function useValueTexts(value, _ref) {
    var formatList = _ref.formatList,
        generateConfig = _ref.generateConfig,
        locale = _ref.locale;
    return useMemo(function () {
      if (!value) {
        return [[''], ''];
      } // We will convert data format back to first format


      var firstValueText = '';
      var fullValueTexts = [];

      for (var i = 0; i < formatList.length; i += 1) {
        var format = formatList[i];
        var formatStr = formatValue(value, {
          generateConfig: generateConfig,
          locale: locale,
          format: format
        });
        fullValueTexts.push(formatStr);

        if (i === 0) {
          firstValueText = formatStr;
        }
      }

      return [fullValueTexts, firstValueText];
    }, [value, formatList], function (prev, next) {
      return prev[0] !== next[0] || !shallowequal(prev[1], next[1]);
    });
  }

  function useHoverValue(valueText, _ref) {
    var formatList = _ref.formatList,
        generateConfig = _ref.generateConfig,
        locale = _ref.locale;

    var _useState = React.useState(null),
        _useState2 = _slicedToArray$1(_useState, 2),
        value = _useState2[0],
        internalSetValue = _useState2[1];

    var raf = React.useRef(null);

    function setValue(val) {
      var immediately = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      cancelAnimationFrame(raf.current);

      if (immediately) {
        internalSetValue(val);
        return;
      }

      raf.current = requestAnimationFrame(function () {
        internalSetValue(val);
      });
    }

    var _useValueTexts = useValueTexts(value, {
      formatList: formatList,
      generateConfig: generateConfig,
      locale: locale
    }),
        _useValueTexts2 = _slicedToArray$1(_useValueTexts, 2),
        firstText = _useValueTexts2[1];

    function onEnter(date) {
      setValue(date);
    }

    function onLeave() {
      var immediately = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      setValue(null, immediately);
    }

    React.useEffect(function () {
      onLeave(true);
    }, [valueText]);
    React.useEffect(function () {
      return function () {
        return cancelAnimationFrame(raf.current);
      };
    }, []);
    return [firstText, onEnter, onLeave];
  }

  function InnerPicker(props) {
    var _classNames2;

    var _props$prefixCls = props.prefixCls,
        prefixCls = _props$prefixCls === void 0 ? 'rc-picker' : _props$prefixCls,
        id = props.id,
        tabIndex = props.tabIndex,
        style = props.style,
        className = props.className,
        dropdownClassName = props.dropdownClassName,
        dropdownAlign = props.dropdownAlign,
        popupStyle = props.popupStyle,
        transitionName = props.transitionName,
        generateConfig = props.generateConfig,
        locale = props.locale,
        inputReadOnly = props.inputReadOnly,
        allowClear = props.allowClear,
        autoFocus = props.autoFocus,
        showTime = props.showTime,
        _props$picker = props.picker,
        picker = _props$picker === void 0 ? 'date' : _props$picker,
        format = props.format,
        use12Hours = props.use12Hours,
        value = props.value,
        defaultValue = props.defaultValue,
        open = props.open,
        defaultOpen = props.defaultOpen,
        defaultOpenValue = props.defaultOpenValue,
        suffixIcon = props.suffixIcon,
        clearIcon = props.clearIcon,
        disabled = props.disabled,
        disabledDate = props.disabledDate,
        placeholder = props.placeholder,
        getPopupContainer = props.getPopupContainer,
        pickerRef = props.pickerRef,
        panelRender = props.panelRender,
        onChange = props.onChange,
        onOpenChange = props.onOpenChange,
        onFocus = props.onFocus,
        onBlur = props.onBlur,
        onMouseDown = props.onMouseDown,
        onMouseUp = props.onMouseUp,
        onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave,
        onContextMenu = props.onContextMenu,
        onClick = props.onClick,
        _onKeyDown = props.onKeyDown,
        _onSelect = props.onSelect,
        direction = props.direction,
        _props$autoComplete = props.autoComplete,
        autoComplete = _props$autoComplete === void 0 ? 'off' : _props$autoComplete;
    var inputRef = React.useRef(null);
    var needConfirmButton = picker === 'date' && !!showTime || picker === 'time'; // ============================= State =============================

    var formatList = toArray$4(getDefaultFormat(format, picker, showTime, use12Hours)); // Panel ref

    var panelDivRef = React.useRef(null);
    var inputDivRef = React.useRef(null);
    var containerRef = React.useRef(null); // Real value

    var _useMergedState = useControlledState(null, {
      value: value,
      defaultValue: defaultValue
    }),
        _useMergedState2 = _slicedToArray$1(_useMergedState, 2),
        mergedValue = _useMergedState2[0],
        setInnerValue = _useMergedState2[1]; // Selected value


    var _React$useState = React.useState(mergedValue),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        selectedValue = _React$useState2[0],
        setSelectedValue = _React$useState2[1]; // Operation ref


    var operationRef = React.useRef(null); // Open

    var _useMergedState3 = useControlledState(false, {
      value: open,
      defaultValue: defaultOpen,
      postState: function postState(postOpen) {
        return disabled ? false : postOpen;
      },
      onChange: function onChange(newOpen) {
        if (onOpenChange) {
          onOpenChange(newOpen);
        }

        if (!newOpen && operationRef.current && operationRef.current.onClose) {
          operationRef.current.onClose();
        }
      }
    }),
        _useMergedState4 = _slicedToArray$1(_useMergedState3, 2),
        mergedOpen = _useMergedState4[0],
        triggerInnerOpen = _useMergedState4[1]; // ============================= Text ==============================


    var _useValueTexts = useValueTexts(selectedValue, {
      formatList: formatList,
      generateConfig: generateConfig,
      locale: locale
    }),
        _useValueTexts2 = _slicedToArray$1(_useValueTexts, 2),
        valueTexts = _useValueTexts2[0],
        firstValueText = _useValueTexts2[1];

    var _useTextValueMapping = useTextValueMapping({
      valueTexts: valueTexts,
      onTextChange: function onTextChange(newText) {
        var inputDate = parseValue(newText, {
          locale: locale,
          formatList: formatList,
          generateConfig: generateConfig
        });

        if (inputDate && (!disabledDate || !disabledDate(inputDate))) {
          setSelectedValue(inputDate);
        }
      }
    }),
        _useTextValueMapping2 = _slicedToArray$1(_useTextValueMapping, 3),
        text = _useTextValueMapping2[0],
        triggerTextChange = _useTextValueMapping2[1],
        resetText = _useTextValueMapping2[2]; // ============================ Trigger ============================


    var triggerChange = function triggerChange(newValue) {
      setSelectedValue(newValue);
      setInnerValue(newValue);

      if (onChange && !isEqual$1(generateConfig, mergedValue, newValue)) {
        onChange(newValue, newValue ? formatValue(newValue, {
          generateConfig: generateConfig,
          locale: locale,
          format: formatList[0]
        }) : '');
      }
    };

    var triggerOpen = function triggerOpen(newOpen) {
      if (disabled && newOpen) {
        return;
      }

      triggerInnerOpen(newOpen);
    };

    var forwardKeyDown = function forwardKeyDown(e) {
      if (mergedOpen && operationRef.current && operationRef.current.onKeyDown) {
        // Let popup panel handle keyboard
        return operationRef.current.onKeyDown(e);
      }
      /* istanbul ignore next */

      /* eslint-disable no-lone-blocks */


      {
        warningOnce(false, 'Picker not correct forward KeyDown operation. Please help to fire issue about this.');
        return false;
      }
    };

    var onInternalMouseUp = function onInternalMouseUp() {
      if (onMouseUp) {
        onMouseUp.apply(void 0, arguments);
      }

      if (inputRef.current) {
        inputRef.current.focus();
        triggerOpen(true);
      }
    }; // ============================= Input =============================


    var _usePickerInput = usePickerInput({
      blurToCancel: needConfirmButton,
      open: mergedOpen,
      value: text,
      triggerOpen: triggerOpen,
      forwardKeyDown: forwardKeyDown,
      isClickOutside: function isClickOutside(target) {
        return !elementsContains([panelDivRef.current, inputDivRef.current, containerRef.current], target);
      },
      onSubmit: function onSubmit() {
        if ( // When user typing disabledDate with keyboard and enter, this value will be empty
        !selectedValue || // Normal disabled check
        disabledDate && disabledDate(selectedValue)) {
          return false;
        }

        triggerChange(selectedValue);
        triggerOpen(false);
        resetText();
        return true;
      },
      onCancel: function onCancel() {
        triggerOpen(false);
        setSelectedValue(mergedValue);
        resetText();
      },
      onKeyDown: function onKeyDown(e, preventDefault) {
        _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e, preventDefault);
      },
      onFocus: onFocus,
      onBlur: onBlur
    }),
        _usePickerInput2 = _slicedToArray$1(_usePickerInput, 2),
        inputProps = _usePickerInput2[0],
        _usePickerInput2$ = _usePickerInput2[1],
        focused = _usePickerInput2$.focused,
        typing = _usePickerInput2$.typing; // ============================= Sync ==============================
    // Close should sync back with text value


    React.useEffect(function () {
      if (!mergedOpen) {
        setSelectedValue(mergedValue);

        if (!valueTexts.length || valueTexts[0] === '') {
          triggerTextChange('');
        } else if (firstValueText !== text) {
          resetText();
        }
      }
    }, [mergedOpen, valueTexts]); // Change picker should sync back with text value

    React.useEffect(function () {
      if (!mergedOpen) {
        resetText();
      }
    }, [picker]); // Sync innerValue with control mode

    React.useEffect(function () {
      // Sync select value
      setSelectedValue(mergedValue);
    }, [mergedValue]); // ============================ Private ============================

    if (pickerRef) {
      pickerRef.current = {
        focus: function focus() {
          if (inputRef.current) {
            inputRef.current.focus();
          }
        },
        blur: function blur() {
          if (inputRef.current) {
            inputRef.current.blur();
          }
        }
      };
    }

    var _useHoverValue = useHoverValue(text, {
      formatList: formatList,
      generateConfig: generateConfig,
      locale: locale
    }),
        _useHoverValue2 = _slicedToArray$1(_useHoverValue, 3),
        hoverValue = _useHoverValue2[0],
        onEnter = _useHoverValue2[1],
        onLeave = _useHoverValue2[2]; // ============================= Panel =============================


    var panelProps = _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      className: undefined,
      style: undefined,
      pickerValue: undefined,
      onPickerValueChange: undefined,
      onChange: null
    });

    var panelNode = /*#__PURE__*/React.createElement(PickerPanel, _extends$1({}, panelProps, {
      generateConfig: generateConfig,
      className: classnames(_defineProperty$1({}, "".concat(prefixCls, "-panel-focused"), !typing)),
      value: selectedValue,
      locale: locale,
      tabIndex: -1,
      onSelect: function onSelect(date) {
        _onSelect === null || _onSelect === void 0 ? void 0 : _onSelect(date);
        setSelectedValue(date);
      },
      direction: direction,
      onPanelChange: function onPanelChange(viewDate, mode) {
        var onPanelChange = props.onPanelChange;
        onLeave(true);
        onPanelChange === null || onPanelChange === void 0 ? void 0 : onPanelChange(viewDate, mode);
      }
    }));

    if (panelRender) {
      panelNode = panelRender(panelNode);
    }

    var panel = /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-panel-container"),
      onMouseDown: function onMouseDown(e) {
        e.preventDefault();
      }
    }, panelNode);
    var suffixNode;

    if (suffixIcon) {
      suffixNode = /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-suffix")
      }, suffixIcon);
    }

    var clearNode;

    if (allowClear && mergedValue && !disabled) {
      clearNode = /*#__PURE__*/React.createElement("span", {
        onMouseDown: function onMouseDown(e) {
          e.preventDefault();
          e.stopPropagation();
        },
        onMouseUp: function onMouseUp(e) {
          e.preventDefault();
          e.stopPropagation();
          triggerChange(null);
          triggerOpen(false);
        },
        className: "".concat(prefixCls, "-clear"),
        role: "button"
      }, clearIcon || /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-clear-btn")
      }));
    } // ============================ Warning ============================


    {
      warningOnce(!defaultOpenValue, '`defaultOpenValue` may confuse user for the current value status. Please use `defaultValue` instead.');
    } // ============================ Return =============================


    var onContextSelect = function onContextSelect(date, type) {
      if (type === 'submit' || type !== 'key' && !needConfirmButton) {
        // triggerChange will also update selected values
        triggerChange(date);
        triggerOpen(false);
      }
    };

    var popupPlacement = direction === 'rtl' ? 'bottomRight' : 'bottomLeft';
    return /*#__PURE__*/React.createElement(PanelContext.Provider, {
      value: {
        operationRef: operationRef,
        hideHeader: picker === 'time',
        panelRef: panelDivRef,
        onSelect: onContextSelect,
        open: mergedOpen,
        defaultOpenValue: defaultOpenValue,
        onDateMouseEnter: onEnter,
        onDateMouseLeave: onLeave
      }
    }, /*#__PURE__*/React.createElement(PickerTrigger, {
      visible: mergedOpen,
      popupElement: panel,
      popupStyle: popupStyle,
      prefixCls: prefixCls,
      dropdownClassName: dropdownClassName,
      dropdownAlign: dropdownAlign,
      getPopupContainer: getPopupContainer,
      transitionName: transitionName,
      popupPlacement: popupPlacement,
      direction: direction
    }, /*#__PURE__*/React.createElement("div", {
      ref: containerRef,
      className: classnames(prefixCls, className, (_classNames2 = {}, _defineProperty$1(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty$1(_classNames2, "".concat(prefixCls, "-focused"), focused), _defineProperty$1(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames2)),
      style: style,
      onMouseDown: onMouseDown,
      onMouseUp: onInternalMouseUp,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onContextMenu: onContextMenu,
      onClick: onClick
    }, /*#__PURE__*/React.createElement("div", {
      className: classnames("".concat(prefixCls, "-input"), _defineProperty$1({}, "".concat(prefixCls, "-input-placeholder"), !!hoverValue)),
      ref: inputDivRef
    }, /*#__PURE__*/React.createElement("input", _extends$1({
      id: id,
      tabIndex: tabIndex,
      disabled: disabled,
      readOnly: inputReadOnly || typeof formatList[0] === 'function' || !typing,
      value: hoverValue || text,
      onChange: function onChange(e) {
        triggerTextChange(e.target.value);
      },
      autoFocus: autoFocus,
      placeholder: placeholder,
      ref: inputRef,
      title: text
    }, inputProps, {
      size: getInputSize(picker, formatList[0], generateConfig)
    }, getDataOrAriaProps$1(props), {
      autoComplete: autoComplete
    })), suffixNode, clearNode))));
  } // Wrap with class component to enable pass generic with instance method


  var Picker = /*#__PURE__*/function (_React$Component) {
    _inherits(Picker, _React$Component);

    var _super = _createSuper(Picker);

    function Picker() {
      var _this;

      _classCallCheck(this, Picker);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.pickerRef = /*#__PURE__*/React.createRef();

      _this.focus = function () {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.focus();
        }
      };

      _this.blur = function () {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.blur();
        }
      };

      return _this;
    }

    _createClass(Picker, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(InnerPicker, _extends$1({}, this.props, {
          pickerRef: this.pickerRef
        }));
      }
    }]);

    return Picker;
  }(React.Component);

  function useRangeDisabled(_ref, disabledStart, disabledEnd) {
    var picker = _ref.picker,
        locale = _ref.locale,
        selectedValue = _ref.selectedValue,
        disabledDate = _ref.disabledDate,
        disabled = _ref.disabled,
        generateConfig = _ref.generateConfig;
    var startDate = getValue$4(selectedValue, 0);
    var endDate = getValue$4(selectedValue, 1);

    function weekFirstDate(date) {
      return generateConfig.locale.getWeekFirstDate(locale.locale, date);
    }

    function monthNumber(date) {
      var year = generateConfig.getYear(date);
      var month = generateConfig.getMonth(date);
      return year * 100 + month;
    }

    function quarterNumber(date) {
      var year = generateConfig.getYear(date);
      var quarter = getQuarter(generateConfig, date);
      return year * 10 + quarter;
    }

    var disabledStartDate = React.useCallback(function (date) {
      if (disabledDate && disabledDate(date)) {
        return true;
      } // Disabled range


      if (disabled[1] && endDate) {
        return !isSameDate(generateConfig, date, endDate) && generateConfig.isAfter(date, endDate);
      } // Disabled part


      if (disabledStart && endDate) {
        switch (picker) {
          case 'quarter':
            return quarterNumber(date) > quarterNumber(endDate);

          case 'month':
            return monthNumber(date) > monthNumber(endDate);

          case 'week':
            return weekFirstDate(date) > weekFirstDate(endDate);

          default:
            return !isSameDate(generateConfig, date, endDate) && generateConfig.isAfter(date, endDate);
        }
      }

      return false;
    }, [disabledDate, disabled[1], endDate, disabledStart]);
    var disabledEndDate = React.useCallback(function (date) {
      if (disabledDate && disabledDate(date)) {
        return true;
      } // Disabled range


      if (disabled[0] && startDate) {
        return !isSameDate(generateConfig, date, endDate) && generateConfig.isAfter(startDate, date);
      } // Disabled part


      if (disabledEnd && startDate) {
        switch (picker) {
          case 'quarter':
            return quarterNumber(date) < quarterNumber(startDate);

          case 'month':
            return monthNumber(date) < monthNumber(startDate);

          case 'week':
            return weekFirstDate(date) < weekFirstDate(startDate);

          default:
            return !isSameDate(generateConfig, date, startDate) && generateConfig.isAfter(startDate, date);
        }
      }

      return false;
    }, [disabledDate, disabled[0], startDate, disabledEnd]);
    return [disabledStartDate, disabledEndDate];
  }

  function getStartEndDistance(startDate, endDate, picker, generateConfig) {
    var startNext = getClosingViewDate(startDate, picker, generateConfig, 1);

    function getDistance(compareFunc) {
      if (compareFunc(startDate, endDate)) {
        return 'same';
      }

      if (compareFunc(startNext, endDate)) {
        return 'closing';
      }

      return 'far';
    }

    switch (picker) {
      case 'year':
        return getDistance(function (start, end) {
          return isSameDecade(generateConfig, start, end);
        });

      case 'quarter':
      case 'month':
        return getDistance(function (start, end) {
          return isSameYear(generateConfig, start, end);
        });

      default:
        return getDistance(function (start, end) {
          return isSameMonth(generateConfig, start, end);
        });
    }
  }

  function getRangeViewDate(values, index, picker, generateConfig) {
    var startDate = getValue$4(values, 0);
    var endDate = getValue$4(values, 1);

    if (index === 0) {
      return startDate;
    }

    if (startDate && endDate) {
      var distance = getStartEndDistance(startDate, endDate, picker, generateConfig);

      switch (distance) {
        case 'same':
          return startDate;

        case 'closing':
          return startDate;

        default:
          return getClosingViewDate(endDate, picker, generateConfig, -1);
      }
    }

    return startDate;
  }

  function useRangeViewDates(_ref) {
    var values = _ref.values,
        picker = _ref.picker,
        defaultDates = _ref.defaultDates,
        generateConfig = _ref.generateConfig;

    var _React$useState = React.useState(function () {
      return [getValue$4(defaultDates, 0), getValue$4(defaultDates, 1)];
    }),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        defaultViewDates = _React$useState2[0],
        setDefaultViewDates = _React$useState2[1];

    var _React$useState3 = React.useState(null),
        _React$useState4 = _slicedToArray$1(_React$useState3, 2),
        viewDates = _React$useState4[0],
        setInternalViewDates = _React$useState4[1];

    var startDate = getValue$4(values, 0);
    var endDate = getValue$4(values, 1);

    function getViewDate(index) {
      // If set default view date, use it
      if (defaultViewDates[index]) {
        return defaultViewDates[index];
      }

      return getValue$4(viewDates, index) || getRangeViewDate(values, index, picker, generateConfig) || startDate || endDate || generateConfig.getNow();
    }

    function setViewDate(viewDate, index) {
      if (viewDate) {
        var newViewDates = updateValues(viewDates, viewDate, index); // Set view date will clean up default one

        setDefaultViewDates( // Should always be an array
        updateValues(defaultViewDates, null, index) || [null, null]); // Reset another one when not have value

        var anotherIndex = (index + 1) % 2;

        if (!getValue$4(values, anotherIndex)) {
          newViewDates = updateValues(newViewDates, viewDate, anotherIndex);
        }

        setInternalViewDates(newViewDates);
      } else if (startDate || endDate) {
        // Reset all when has values when `viewDate` is `null` which means from open trigger
        setInternalViewDates(null);
      }
    }

    return [getViewDate, setViewDate];
  }

  function reorderValues(values, generateConfig) {
    if (values && values[0] && values[1] && generateConfig.isAfter(values[0], values[1])) {
      return [values[1], values[0]];
    }

    return values;
  }

  function canValueTrigger(value, index, disabled, allowEmpty) {
    if (value) {
      return true;
    }

    if (allowEmpty && allowEmpty[index]) {
      return true;
    }

    if (disabled[(index + 1) % 2]) {
      return true;
    }

    return false;
  }

  function InnerRangePicker(props) {
    var _classNames2, _classNames3, _classNames4;

    var _props$prefixCls = props.prefixCls,
        prefixCls = _props$prefixCls === void 0 ? 'rc-picker' : _props$prefixCls,
        id = props.id,
        style = props.style,
        className = props.className,
        popupStyle = props.popupStyle,
        dropdownClassName = props.dropdownClassName,
        transitionName = props.transitionName,
        dropdownAlign = props.dropdownAlign,
        getPopupContainer = props.getPopupContainer,
        generateConfig = props.generateConfig,
        locale = props.locale,
        placeholder = props.placeholder,
        autoFocus = props.autoFocus,
        disabled = props.disabled,
        format = props.format,
        _props$picker = props.picker,
        picker = _props$picker === void 0 ? 'date' : _props$picker,
        showTime = props.showTime,
        use12Hours = props.use12Hours,
        _props$separator = props.separator,
        separator = _props$separator === void 0 ? '~' : _props$separator,
        value = props.value,
        defaultValue = props.defaultValue,
        defaultPickerValue = props.defaultPickerValue,
        open = props.open,
        defaultOpen = props.defaultOpen,
        disabledDate = props.disabledDate,
        _disabledTime = props.disabledTime,
        dateRender = props.dateRender,
        panelRender = props.panelRender,
        ranges = props.ranges,
        allowEmpty = props.allowEmpty,
        allowClear = props.allowClear,
        suffixIcon = props.suffixIcon,
        clearIcon = props.clearIcon,
        pickerRef = props.pickerRef,
        inputReadOnly = props.inputReadOnly,
        mode = props.mode,
        renderExtraFooter = props.renderExtraFooter,
        onChange = props.onChange,
        onOpenChange = props.onOpenChange,
        onPanelChange = props.onPanelChange,
        onCalendarChange = props.onCalendarChange,
        _onFocus = props.onFocus,
        onBlur = props.onBlur,
        onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave,
        _onOk = props.onOk,
        _onKeyDown = props.onKeyDown,
        components = props.components,
        order = props.order,
        direction = props.direction,
        activePickerIndex = props.activePickerIndex,
        _props$autoComplete = props.autoComplete,
        autoComplete = _props$autoComplete === void 0 ? 'off' : _props$autoComplete;
    var needConfirmButton = picker === 'date' && !!showTime || picker === 'time'; // We record opened status here in case repeat open with picker

    var openRecordsRef = React.useRef({});
    var containerRef = React.useRef(null);
    var panelDivRef = React.useRef(null);
    var startInputDivRef = React.useRef(null);
    var endInputDivRef = React.useRef(null);
    var separatorRef = React.useRef(null);
    var startInputRef = React.useRef(null);
    var endInputRef = React.useRef(null); // ============================= Misc ==============================

    var formatList = toArray$4(getDefaultFormat(format, picker, showTime, use12Hours)); // Active picker

    var _useMergedState = useControlledState(0, {
      value: activePickerIndex
    }),
        _useMergedState2 = _slicedToArray$1(_useMergedState, 2),
        mergedActivePickerIndex = _useMergedState2[0],
        setMergedActivePickerIndex = _useMergedState2[1]; // Operation ref


    var operationRef = React.useRef(null);
    var mergedDisabled = React.useMemo(function () {
      if (Array.isArray(disabled)) {
        return disabled;
      }

      return [disabled || false, disabled || false];
    }, [disabled]); // ============================= Value =============================

    var _useMergedState3 = useControlledState(null, {
      value: value,
      defaultValue: defaultValue,
      postState: function postState(values) {
        return picker === 'time' && !order ? values : reorderValues(values, generateConfig);
      }
    }),
        _useMergedState4 = _slicedToArray$1(_useMergedState3, 2),
        mergedValue = _useMergedState4[0],
        setInnerValue = _useMergedState4[1]; // =========================== View Date ===========================
    // Config view panel


    var _useRangeViewDates = useRangeViewDates({
      values: mergedValue,
      picker: picker,
      defaultDates: defaultPickerValue,
      generateConfig: generateConfig
    }),
        _useRangeViewDates2 = _slicedToArray$1(_useRangeViewDates, 2),
        getViewDate = _useRangeViewDates2[0],
        setViewDate = _useRangeViewDates2[1]; // ========================= Select Values =========================


    var _useMergedState5 = useControlledState(mergedValue, {
      postState: function postState(values) {
        var postValues = values;

        if (mergedDisabled[0] && mergedDisabled[1]) {
          return postValues;
        } // Fill disabled unit


        // Fill disabled unit
        for (var i = 0; i < 2; i += 1) {
          if (mergedDisabled[i] && !getValue$4(postValues, i) && !getValue$4(allowEmpty, i)) {
            postValues = updateValues(postValues, generateConfig.getNow(), i);
          }
        }

        return postValues;
      }
    }),
        _useMergedState6 = _slicedToArray$1(_useMergedState5, 2),
        selectedValue = _useMergedState6[0],
        setSelectedValue = _useMergedState6[1]; // ============================= Modes =============================


    var _useMergedState7 = useControlledState([picker, picker], {
      value: mode
    }),
        _useMergedState8 = _slicedToArray$1(_useMergedState7, 2),
        mergedModes = _useMergedState8[0],
        setInnerModes = _useMergedState8[1];

    React.useEffect(function () {
      setInnerModes([picker, picker]);
    }, [picker]);

    var triggerModesChange = function triggerModesChange(modes, values) {
      setInnerModes(modes);

      if (onPanelChange) {
        onPanelChange(values, modes);
      }
    }; // ========================= Disable Date ==========================


    var _useRangeDisabled = useRangeDisabled({
      picker: picker,
      selectedValue: selectedValue,
      locale: locale,
      disabled: mergedDisabled,
      disabledDate: disabledDate,
      generateConfig: generateConfig
    }, openRecordsRef.current[1], openRecordsRef.current[0]),
        _useRangeDisabled2 = _slicedToArray$1(_useRangeDisabled, 2),
        disabledStartDate = _useRangeDisabled2[0],
        disabledEndDate = _useRangeDisabled2[1]; // ============================= Open ==============================


    var _useMergedState9 = useControlledState(false, {
      value: open,
      defaultValue: defaultOpen,
      postState: function postState(postOpen) {
        return mergedDisabled[mergedActivePickerIndex] ? false : postOpen;
      },
      onChange: function onChange(newOpen) {
        if (onOpenChange) {
          onOpenChange(newOpen);
        }

        if (!newOpen && operationRef.current && operationRef.current.onClose) {
          operationRef.current.onClose();
        }
      }
    }),
        _useMergedState10 = _slicedToArray$1(_useMergedState9, 2),
        mergedOpen = _useMergedState10[0],
        triggerInnerOpen = _useMergedState10[1];

    var startOpen = mergedOpen && mergedActivePickerIndex === 0;
    var endOpen = mergedOpen && mergedActivePickerIndex === 1; // ============================= Popup =============================
    // Popup min width

    var _useState = React.useState(0),
        _useState2 = _slicedToArray$1(_useState, 2),
        popupMinWidth = _useState2[0],
        setPopupMinWidth = _useState2[1];

    React.useEffect(function () {
      if (!mergedOpen && containerRef.current) {
        setPopupMinWidth(containerRef.current.offsetWidth);
      }
    }, [mergedOpen]); // ============================ Trigger ============================

    var triggerRef = React.useRef();

    function _triggerOpen(newOpen, index) {
      if (newOpen) {
        clearTimeout(triggerRef.current);
        openRecordsRef.current[index] = true;
        setMergedActivePickerIndex(index);
        triggerInnerOpen(newOpen); // Open to reset view date

        if (!mergedOpen) {
          setViewDate(null, index);
        }
      } else if (mergedActivePickerIndex === index) {
        triggerInnerOpen(newOpen); // Clean up async
        // This makes ref not quick refresh in case user open another input with blur trigger

        var openRecords = openRecordsRef.current;
        triggerRef.current = setTimeout(function () {
          if (openRecords === openRecordsRef.current) {
            openRecordsRef.current = {};
          }
        });
      }
    }

    function triggerOpenAndFocus(index) {
      _triggerOpen(true, index); // Use setTimeout to make sure panel DOM exists


      setTimeout(function () {
        var inputRef = [startInputRef, endInputRef][index];

        if (inputRef.current) {
          inputRef.current.focus();
        }
      }, 0);
    }

    function triggerChange(newValue, sourceIndex) {
      var values = newValue;
      var startValue = getValue$4(values, 0);
      var endValue = getValue$4(values, 1); // >>>>> Format start & end values

      if (startValue && endValue && generateConfig.isAfter(startValue, endValue)) {
        if ( // WeekPicker only compare week
        picker === 'week' && !isSameWeek(generateConfig, locale.locale, startValue, endValue) || // QuotaPicker only compare week
        picker === 'quarter' && !isSameQuarter(generateConfig, startValue, endValue) || // Other non-TimePicker compare date
        picker !== 'week' && picker !== 'quarter' && picker !== 'time' && !isSameDate(generateConfig, startValue, endValue)) {
          // Clean up end date when start date is after end date
          if (sourceIndex === 0) {
            values = [startValue, null];
            endValue = null;
          } else {
            startValue = null;
            values = [null, endValue];
          } // Clean up cache since invalidate


          openRecordsRef.current = _defineProperty$1({}, sourceIndex, true);
        } else if (picker !== 'time' || order !== false) {
          // Reorder when in same date
          values = reorderValues(values, generateConfig);
        }
      }

      setSelectedValue(values);
      var startStr = values && values[0] ? formatValue(values[0], {
        generateConfig: generateConfig,
        locale: locale,
        format: formatList[0]
      }) : '';
      var endStr = values && values[1] ? formatValue(values[1], {
        generateConfig: generateConfig,
        locale: locale,
        format: formatList[0]
      }) : '';

      if (onCalendarChange) {
        var info = {
          range: sourceIndex === 0 ? 'start' : 'end'
        };
        onCalendarChange(values, [startStr, endStr], info);
      } // >>>>> Trigger `onChange` event


      var canStartValueTrigger = canValueTrigger(startValue, 0, mergedDisabled, allowEmpty);
      var canEndValueTrigger = canValueTrigger(endValue, 1, mergedDisabled, allowEmpty);
      var canTrigger = values === null || canStartValueTrigger && canEndValueTrigger;

      if (canTrigger) {
        // Trigger onChange only when value is validate
        setInnerValue(values);

        if (onChange && (!isEqual$1(generateConfig, getValue$4(mergedValue, 0), startValue) || !isEqual$1(generateConfig, getValue$4(mergedValue, 1), endValue))) {
          onChange(values, [startStr, endStr]);
        }
      } // >>>>> Open picker when
      // Always open another picker if possible


      var nextOpenIndex = null;

      if (sourceIndex === 0 && !mergedDisabled[1]) {
        nextOpenIndex = 1;
      } else if (sourceIndex === 1 && !mergedDisabled[0]) {
        nextOpenIndex = 0;
      }

      if (nextOpenIndex !== null && nextOpenIndex !== mergedActivePickerIndex && (!openRecordsRef.current[nextOpenIndex] || !getValue$4(values, nextOpenIndex)) && getValue$4(values, sourceIndex)) {
        // Delay to focus to avoid input blur trigger expired selectedValues
        triggerOpenAndFocus(nextOpenIndex);
      } else {
        _triggerOpen(false, sourceIndex);
      }
    }

    var forwardKeyDown = function forwardKeyDown(e) {
      if (mergedOpen && operationRef.current && operationRef.current.onKeyDown) {
        // Let popup panel handle keyboard
        return operationRef.current.onKeyDown(e);
      }
      /* istanbul ignore next */

      /* eslint-disable no-lone-blocks */


      {
        warningOnce(false, 'Picker not correct forward KeyDown operation. Please help to fire issue about this.');
        return false;
      }
    }; // ============================= Text ==============================


    var sharedTextHooksProps = {
      formatList: formatList,
      generateConfig: generateConfig,
      locale: locale
    };

    var _useValueTexts = useValueTexts(getValue$4(selectedValue, 0), sharedTextHooksProps),
        _useValueTexts2 = _slicedToArray$1(_useValueTexts, 2),
        startValueTexts = _useValueTexts2[0],
        firstStartValueText = _useValueTexts2[1];

    var _useValueTexts3 = useValueTexts(getValue$4(selectedValue, 1), sharedTextHooksProps),
        _useValueTexts4 = _slicedToArray$1(_useValueTexts3, 2),
        endValueTexts = _useValueTexts4[0],
        firstEndValueText = _useValueTexts4[1];

    var _onTextChange = function onTextChange(newText, index) {
      var inputDate = parseValue(newText, {
        locale: locale,
        formatList: formatList,
        generateConfig: generateConfig
      });
      var disabledFunc = index === 0 ? disabledStartDate : disabledEndDate;

      if (inputDate && !disabledFunc(inputDate)) {
        setSelectedValue(updateValues(selectedValue, inputDate, index));
        setViewDate(inputDate, index);
      }
    };

    var _useTextValueMapping = useTextValueMapping({
      valueTexts: startValueTexts,
      onTextChange: function onTextChange(newText) {
        return _onTextChange(newText, 0);
      }
    }),
        _useTextValueMapping2 = _slicedToArray$1(_useTextValueMapping, 3),
        startText = _useTextValueMapping2[0],
        triggerStartTextChange = _useTextValueMapping2[1],
        resetStartText = _useTextValueMapping2[2];

    var _useTextValueMapping3 = useTextValueMapping({
      valueTexts: endValueTexts,
      onTextChange: function onTextChange(newText) {
        return _onTextChange(newText, 1);
      }
    }),
        _useTextValueMapping4 = _slicedToArray$1(_useTextValueMapping3, 3),
        endText = _useTextValueMapping4[0],
        triggerEndTextChange = _useTextValueMapping4[1],
        resetEndText = _useTextValueMapping4[2];

    var _useState3 = React.useState(null),
        _useState4 = _slicedToArray$1(_useState3, 2),
        rangeHoverValue = _useState4[0],
        setRangeHoverValue = _useState4[1]; // ========================== Hover Range ==========================


    var _useState5 = React.useState(null),
        _useState6 = _slicedToArray$1(_useState5, 2),
        hoverRangedValue = _useState6[0],
        setHoverRangedValue = _useState6[1];

    var _useHoverValue = useHoverValue(startText, {
      formatList: formatList,
      generateConfig: generateConfig,
      locale: locale
    }),
        _useHoverValue2 = _slicedToArray$1(_useHoverValue, 3),
        startHoverValue = _useHoverValue2[0],
        onStartEnter = _useHoverValue2[1],
        onStartLeave = _useHoverValue2[2];

    var _useHoverValue3 = useHoverValue(endText, {
      formatList: formatList,
      generateConfig: generateConfig,
      locale: locale
    }),
        _useHoverValue4 = _slicedToArray$1(_useHoverValue3, 3),
        endHoverValue = _useHoverValue4[0],
        onEndEnter = _useHoverValue4[1],
        onEndLeave = _useHoverValue4[2];

    var onDateMouseEnter = function onDateMouseEnter(date) {
      setHoverRangedValue(updateValues(selectedValue, date, mergedActivePickerIndex));

      if (mergedActivePickerIndex === 0) {
        onStartEnter(date);
      } else {
        onEndEnter(date);
      }
    };

    var onDateMouseLeave = function onDateMouseLeave() {
      setHoverRangedValue(updateValues(selectedValue, null, mergedActivePickerIndex));

      if (mergedActivePickerIndex === 0) {
        onStartLeave();
      } else {
        onEndLeave();
      }
    }; // ============================= Input =============================


    var getSharedInputHookProps = function getSharedInputHookProps(index, resetText) {
      return {
        blurToCancel: needConfirmButton,
        forwardKeyDown: forwardKeyDown,
        onBlur: onBlur,
        isClickOutside: function isClickOutside(target) {
          return !elementsContains([panelDivRef.current, startInputDivRef.current, endInputDivRef.current, containerRef.current], target);
        },
        onFocus: function onFocus(e) {
          setMergedActivePickerIndex(index);

          if (_onFocus) {
            _onFocus(e);
          }
        },
        triggerOpen: function triggerOpen(newOpen) {
          _triggerOpen(newOpen, index);
        },
        onSubmit: function onSubmit() {
          triggerChange(selectedValue, index);
          resetText();
        },
        onCancel: function onCancel() {
          _triggerOpen(false, index);

          setSelectedValue(mergedValue);
          resetText();
        }
      };
    };

    var _usePickerInput = usePickerInput(_objectSpread2$1(_objectSpread2$1({}, getSharedInputHookProps(0, resetStartText)), {}, {
      open: startOpen,
      value: startText,
      onKeyDown: function onKeyDown(e, preventDefault) {
        _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e, preventDefault);
      }
    })),
        _usePickerInput2 = _slicedToArray$1(_usePickerInput, 2),
        startInputProps = _usePickerInput2[0],
        _usePickerInput2$ = _usePickerInput2[1],
        startFocused = _usePickerInput2$.focused,
        startTyping = _usePickerInput2$.typing;

    var _usePickerInput3 = usePickerInput(_objectSpread2$1(_objectSpread2$1({}, getSharedInputHookProps(1, resetEndText)), {}, {
      open: endOpen,
      value: endText,
      onKeyDown: function onKeyDown(e, preventDefault) {
        _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e, preventDefault);
      }
    })),
        _usePickerInput4 = _slicedToArray$1(_usePickerInput3, 2),
        endInputProps = _usePickerInput4[0],
        _usePickerInput4$ = _usePickerInput4[1],
        endFocused = _usePickerInput4$.focused,
        endTyping = _usePickerInput4$.typing; // ========================== Click Picker ==========================


    var onPickerClick = function onPickerClick(e) {
      // When click inside the picker & outside the picker's input elements
      // the panel should still be opened
      if (!mergedOpen && !startInputRef.current.contains(e.target) && !endInputRef.current.contains(e.target)) {
        if (!mergedDisabled[0]) {
          triggerOpenAndFocus(0);
        } else if (!mergedDisabled[1]) {
          triggerOpenAndFocus(1);
        }
      }
    };

    var onPickerMouseDown = function onPickerMouseDown(e) {
      // shouldn't affect input elements if picker is active
      if (mergedOpen && (startFocused || endFocused) && !startInputRef.current.contains(e.target) && !endInputRef.current.contains(e.target)) {
        e.preventDefault();
      }
    }; // ============================= Sync ==============================
    // Close should sync back with text value


    var startStr = mergedValue && mergedValue[0] ? formatValue(mergedValue[0], {
      locale: locale,
      format: 'YYYYMMDDHHmmss',
      generateConfig: generateConfig
    }) : '';
    var endStr = mergedValue && mergedValue[1] ? formatValue(mergedValue[1], {
      locale: locale,
      format: 'YYYYMMDDHHmmss',
      generateConfig: generateConfig
    }) : '';
    React.useEffect(function () {
      if (!mergedOpen) {
        setSelectedValue(mergedValue);

        if (!startValueTexts.length || startValueTexts[0] === '') {
          triggerStartTextChange('');
        } else if (firstStartValueText !== startText) {
          resetStartText();
        }

        if (!endValueTexts.length || endValueTexts[0] === '') {
          triggerEndTextChange('');
        } else if (firstEndValueText !== endText) {
          resetEndText();
        }
      }
    }, [mergedOpen, startValueTexts, endValueTexts]); // Sync innerValue with control mode

    React.useEffect(function () {
      setSelectedValue(mergedValue);
    }, [startStr, endStr]); // ============================ Warning ============================

    {
      if (value && Array.isArray(disabled) && (getValue$4(disabled, 0) && !getValue$4(value, 0) || getValue$4(disabled, 1) && !getValue$4(value, 1))) {
        warningOnce(false, '`disabled` should not set with empty `value`. You should set `allowEmpty` or `value` instead.');
      }
    } // ============================ Private ============================


    if (pickerRef) {
      pickerRef.current = {
        focus: function focus() {
          if (startInputRef.current) {
            startInputRef.current.focus();
          }
        },
        blur: function blur() {
          if (startInputRef.current) {
            startInputRef.current.blur();
          }

          if (endInputRef.current) {
            endInputRef.current.blur();
          }
        }
      };
    } // ============================ Ranges =============================


    var rangeLabels = Object.keys(ranges || {});
    var rangeList = rangeLabels.map(function (label) {
      var range = ranges[label];
      var newValues = typeof range === 'function' ? range() : range;
      return {
        label: label,
        onClick: function onClick() {
          triggerChange(newValues, null);

          _triggerOpen(false, mergedActivePickerIndex);
        },
        onMouseEnter: function onMouseEnter() {
          setRangeHoverValue(newValues);
        },
        onMouseLeave: function onMouseLeave() {
          setRangeHoverValue(null);
        }
      };
    }); // ============================= Panel =============================

    function renderPanel() {
      var panelPosition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var panelProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var panelHoverRangedValue = null;

      if (mergedOpen && hoverRangedValue && hoverRangedValue[0] && hoverRangedValue[1] && generateConfig.isAfter(hoverRangedValue[1], hoverRangedValue[0])) {
        panelHoverRangedValue = hoverRangedValue;
      }

      var panelShowTime = showTime;

      if (showTime && _typeof$1(showTime) === 'object' && showTime.defaultValue) {
        var timeDefaultValues = showTime.defaultValue;
        panelShowTime = _objectSpread2$1(_objectSpread2$1({}, showTime), {}, {
          defaultValue: getValue$4(timeDefaultValues, mergedActivePickerIndex) || undefined
        });
      }

      var panelDateRender = null;

      if (dateRender) {
        panelDateRender = function panelDateRender(date, today) {
          return dateRender(date, today, {
            range: mergedActivePickerIndex ? 'end' : 'start'
          });
        };
      }

      return /*#__PURE__*/React.createElement(RangeContext.Provider, {
        value: {
          inRange: true,
          panelPosition: panelPosition,
          rangedValue: rangeHoverValue || selectedValue,
          hoverRangedValue: panelHoverRangedValue
        }
      }, /*#__PURE__*/React.createElement(PickerPanel, _extends$1({}, props, panelProps, {
        dateRender: panelDateRender,
        showTime: panelShowTime,
        mode: mergedModes[mergedActivePickerIndex],
        generateConfig: generateConfig,
        style: undefined,
        direction: direction,
        disabledDate: mergedActivePickerIndex === 0 ? disabledStartDate : disabledEndDate,
        disabledTime: function disabledTime(date) {
          if (_disabledTime) {
            return _disabledTime(date, mergedActivePickerIndex === 0 ? 'start' : 'end');
          }

          return false;
        },
        className: classnames(_defineProperty$1({}, "".concat(prefixCls, "-panel-focused"), mergedActivePickerIndex === 0 ? !startTyping : !endTyping)),
        value: getValue$4(selectedValue, mergedActivePickerIndex),
        locale: locale,
        tabIndex: -1,
        onPanelChange: function onPanelChange(date, newMode) {
          // clear hover value when panel change
          if (mergedActivePickerIndex === 0) {
            onStartLeave(true);
          }

          if (mergedActivePickerIndex === 1) {
            onEndLeave(true);
          }

          triggerModesChange(updateValues(mergedModes, newMode, mergedActivePickerIndex), updateValues(selectedValue, date, mergedActivePickerIndex));
          var viewDate = date;

          if (panelPosition === 'right' && mergedModes[mergedActivePickerIndex] === newMode) {
            viewDate = getClosingViewDate(viewDate, newMode, generateConfig, -1);
          }

          setViewDate(viewDate, mergedActivePickerIndex);
        },
        onOk: null,
        onSelect: undefined,
        onChange: undefined,
        defaultValue: mergedActivePickerIndex === 0 ? getValue$4(selectedValue, 1) : getValue$4(selectedValue, 0)
      })));
    }

    var arrowLeft = 0;
    var panelLeft = 0;

    if (mergedActivePickerIndex && startInputDivRef.current && separatorRef.current && panelDivRef.current) {
      // Arrow offset
      arrowLeft = startInputDivRef.current.offsetWidth + separatorRef.current.offsetWidth;

      if (panelDivRef.current.offsetWidth && arrowLeft > panelDivRef.current.offsetWidth) {
        panelLeft = arrowLeft;
      }
    }

    var arrowPositionStyle = direction === 'rtl' ? {
      right: arrowLeft
    } : {
      left: arrowLeft
    };

    function renderPanels() {
      var panels;
      var extraNode = getExtraFooter(prefixCls, mergedModes[mergedActivePickerIndex], renderExtraFooter);
      var rangesNode = getRanges({
        prefixCls: prefixCls,
        components: components,
        needConfirmButton: needConfirmButton,
        okDisabled: !getValue$4(selectedValue, mergedActivePickerIndex) || disabledDate && disabledDate(selectedValue[mergedActivePickerIndex]),
        locale: locale,
        rangeList: rangeList,
        onOk: function onOk() {
          if (getValue$4(selectedValue, mergedActivePickerIndex)) {
            // triggerChangeOld(selectedValue);
            triggerChange(selectedValue, mergedActivePickerIndex);

            if (_onOk) {
              _onOk(selectedValue);
            }
          }
        }
      });

      if (picker !== 'time' && !showTime) {
        var viewDate = getViewDate(mergedActivePickerIndex);
        var nextViewDate = getClosingViewDate(viewDate, picker, generateConfig);
        var currentMode = mergedModes[mergedActivePickerIndex];
        var showDoublePanel = currentMode === picker;
        var leftPanel = renderPanel(showDoublePanel ? 'left' : false, {
          pickerValue: viewDate,
          onPickerValueChange: function onPickerValueChange(newViewDate) {
            setViewDate(newViewDate, mergedActivePickerIndex);
          }
        });
        var rightPanel = renderPanel('right', {
          pickerValue: nextViewDate,
          onPickerValueChange: function onPickerValueChange(newViewDate) {
            setViewDate(getClosingViewDate(newViewDate, picker, generateConfig, -1), mergedActivePickerIndex);
          }
        });

        if (direction === 'rtl') {
          panels = /*#__PURE__*/React.createElement(React.Fragment, null, rightPanel, showDoublePanel && leftPanel);
        } else {
          panels = /*#__PURE__*/React.createElement(React.Fragment, null, leftPanel, showDoublePanel && rightPanel);
        }
      } else {
        panels = renderPanel();
      }

      var mergedNodes = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-panels")
      }, panels), (extraNode || rangesNode) && /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, extraNode, rangesNode));

      if (panelRender) {
        mergedNodes = panelRender(mergedNodes);
      }

      return /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-panel-container"),
        style: {
          marginLeft: panelLeft
        },
        ref: panelDivRef,
        onMouseDown: function onMouseDown(e) {
          e.preventDefault();
        }
      }, mergedNodes);
    }

    var rangePanel = /*#__PURE__*/React.createElement("div", {
      className: classnames("".concat(prefixCls, "-range-wrapper"), "".concat(prefixCls, "-").concat(picker, "-range-wrapper")),
      style: {
        minWidth: popupMinWidth
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-range-arrow"),
      style: arrowPositionStyle
    }), renderPanels()); // ============================= Icons =============================

    var suffixNode;

    if (suffixIcon) {
      suffixNode = /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-suffix")
      }, suffixIcon);
    }

    var clearNode;

    if (allowClear && (getValue$4(mergedValue, 0) && !mergedDisabled[0] || getValue$4(mergedValue, 1) && !mergedDisabled[1])) {
      clearNode = /*#__PURE__*/React.createElement("span", {
        onMouseDown: function onMouseDown(e) {
          e.preventDefault();
          e.stopPropagation();
        },
        onMouseUp: function onMouseUp(e) {
          e.preventDefault();
          e.stopPropagation();
          var values = mergedValue;

          if (!mergedDisabled[0]) {
            values = updateValues(values, null, 0);
          }

          if (!mergedDisabled[1]) {
            values = updateValues(values, null, 1);
          }

          triggerChange(values, null);

          _triggerOpen(false, mergedActivePickerIndex);
        },
        className: "".concat(prefixCls, "-clear")
      }, clearIcon || /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-clear-btn")
      }));
    }

    var inputSharedProps = {
      size: getInputSize(picker, formatList[0], generateConfig)
    };
    var activeBarLeft = 0;
    var activeBarWidth = 0;

    if (startInputDivRef.current && endInputDivRef.current && separatorRef.current) {
      if (mergedActivePickerIndex === 0) {
        activeBarWidth = startInputDivRef.current.offsetWidth;
      } else {
        activeBarLeft = arrowLeft;
        activeBarWidth = endInputDivRef.current.offsetWidth;
      }
    }

    var activeBarPositionStyle = direction === 'rtl' ? {
      right: activeBarLeft
    } : {
      left: activeBarLeft
    }; // ============================ Return =============================

    var onContextSelect = function onContextSelect(date, type) {
      var values = updateValues(selectedValue, date, mergedActivePickerIndex);

      if (type === 'submit' || type !== 'key' && !needConfirmButton) {
        // triggerChange will also update selected values
        triggerChange(values, mergedActivePickerIndex); // clear hover value style

        if (mergedActivePickerIndex === 0) {
          onStartLeave();
        } else {
          onEndLeave();
        }
      } else {
        setSelectedValue(values);
      }
    };

    return /*#__PURE__*/React.createElement(PanelContext.Provider, {
      value: {
        operationRef: operationRef,
        hideHeader: picker === 'time',
        onDateMouseEnter: onDateMouseEnter,
        onDateMouseLeave: onDateMouseLeave,
        hideRanges: true,
        onSelect: onContextSelect,
        open: mergedOpen
      }
    }, /*#__PURE__*/React.createElement(PickerTrigger, {
      visible: mergedOpen,
      popupElement: rangePanel,
      popupStyle: popupStyle,
      prefixCls: prefixCls,
      dropdownClassName: dropdownClassName,
      dropdownAlign: dropdownAlign,
      getPopupContainer: getPopupContainer,
      transitionName: transitionName,
      range: true,
      direction: direction
    }, /*#__PURE__*/React.createElement("div", _extends$1({
      ref: containerRef,
      className: classnames(prefixCls, "".concat(prefixCls, "-range"), className, (_classNames2 = {}, _defineProperty$1(_classNames2, "".concat(prefixCls, "-disabled"), mergedDisabled[0] && mergedDisabled[1]), _defineProperty$1(_classNames2, "".concat(prefixCls, "-focused"), mergedActivePickerIndex === 0 ? startFocused : endFocused), _defineProperty$1(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames2)),
      style: style,
      onClick: onPickerClick,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      onMouseDown: onPickerMouseDown
    }, getDataOrAriaProps$1(props)), /*#__PURE__*/React.createElement("div", {
      className: classnames("".concat(prefixCls, "-input"), (_classNames3 = {}, _defineProperty$1(_classNames3, "".concat(prefixCls, "-input-active"), mergedActivePickerIndex === 0), _defineProperty$1(_classNames3, "".concat(prefixCls, "-input-placeholder"), !!startHoverValue), _classNames3)),
      ref: startInputDivRef
    }, /*#__PURE__*/React.createElement("input", _extends$1({
      id: id,
      disabled: mergedDisabled[0],
      readOnly: inputReadOnly || typeof formatList[0] === 'function' || !startTyping,
      value: startHoverValue || startText,
      onChange: function onChange(e) {
        triggerStartTextChange(e.target.value);
      },
      autoFocus: autoFocus,
      placeholder: getValue$4(placeholder, 0) || '',
      ref: startInputRef
    }, startInputProps, inputSharedProps, {
      autoComplete: autoComplete
    }))), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-range-separator"),
      ref: separatorRef
    }, separator), /*#__PURE__*/React.createElement("div", {
      className: classnames("".concat(prefixCls, "-input"), (_classNames4 = {}, _defineProperty$1(_classNames4, "".concat(prefixCls, "-input-active"), mergedActivePickerIndex === 1), _defineProperty$1(_classNames4, "".concat(prefixCls, "-input-placeholder"), !!endHoverValue), _classNames4)),
      ref: endInputDivRef
    }, /*#__PURE__*/React.createElement("input", _extends$1({
      disabled: mergedDisabled[1],
      readOnly: inputReadOnly || typeof formatList[0] === 'function' || !endTyping,
      value: endHoverValue || endText,
      onChange: function onChange(e) {
        triggerEndTextChange(e.target.value);
      },
      placeholder: getValue$4(placeholder, 1) || '',
      ref: endInputRef
    }, endInputProps, inputSharedProps, {
      autoComplete: autoComplete
    }))), /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-active-bar"),
      style: _objectSpread2$1(_objectSpread2$1({}, activeBarPositionStyle), {}, {
        width: activeBarWidth,
        position: 'absolute'
      })
    }), suffixNode, clearNode)));
  } // Wrap with class component to enable pass generic with instance method


  var RangePicker = /*#__PURE__*/function (_React$Component) {
    _inherits(RangePicker, _React$Component);

    var _super = _createSuper(RangePicker);

    function RangePicker() {
      var _this;

      _classCallCheck(this, RangePicker);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.pickerRef = /*#__PURE__*/React.createRef();

      _this.focus = function () {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.focus();
        }
      };

      _this.blur = function () {
        if (_this.pickerRef.current) {
          _this.pickerRef.current.blur();
        }
      };

      return _this;
    }

    _createClass(RangePicker, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(InnerRangePicker, _extends$1({}, this.props, {
          pickerRef: this.pickerRef
        }));
      }
    }]);

    return RangePicker;
  }(React.Component);

  var Checkbox = /*#__PURE__*/function (_Component) {
    _inherits(Checkbox, _Component);

    var _super = _createSuper(Checkbox);

    function Checkbox(props) {
      var _this;

      _classCallCheck(this, Checkbox);

      _this = _super.call(this, props);

      _this.handleChange = function (e) {
        var _this$props = _this.props,
            disabled = _this$props.disabled,
            onChange = _this$props.onChange;

        if (disabled) {
          return;
        }

        if (!('checked' in _this.props)) {
          _this.setState({
            checked: e.target.checked
          });
        }

        if (onChange) {
          onChange({
            target: _objectSpread2$1(_objectSpread2$1({}, _this.props), {}, {
              checked: e.target.checked
            }),
            stopPropagation: function stopPropagation() {
              e.stopPropagation();
            },
            preventDefault: function preventDefault() {
              e.preventDefault();
            },
            nativeEvent: e.nativeEvent
          });
        }
      };

      _this.saveInput = function (node) {
        _this.input = node;
      };

      var checked = 'checked' in props ? props.checked : props.defaultChecked;
      _this.state = {
        checked: checked
      };
      return _this;
    }

    _createClass(Checkbox, [{
      key: "focus",
      value: function focus() {
        this.input.focus();
      }
    }, {
      key: "blur",
      value: function blur() {
        this.input.blur();
      }
    }, {
      key: "render",
      value: function render() {
        var _classNames;

        var _this$props2 = this.props,
            prefixCls = _this$props2.prefixCls,
            className = _this$props2.className,
            style = _this$props2.style,
            name = _this$props2.name,
            id = _this$props2.id,
            type = _this$props2.type,
            disabled = _this$props2.disabled,
            readOnly = _this$props2.readOnly,
            tabIndex = _this$props2.tabIndex,
            onClick = _this$props2.onClick,
            onFocus = _this$props2.onFocus,
            onBlur = _this$props2.onBlur,
            onKeyDown = _this$props2.onKeyDown,
            onKeyPress = _this$props2.onKeyPress,
            onKeyUp = _this$props2.onKeyUp,
            autoFocus = _this$props2.autoFocus,
            value = _this$props2.value,
            required = _this$props2.required,
            others = _objectWithoutProperties$1(_this$props2, ["prefixCls", "className", "style", "name", "id", "type", "disabled", "readOnly", "tabIndex", "onClick", "onFocus", "onBlur", "onKeyDown", "onKeyPress", "onKeyUp", "autoFocus", "value", "required"]);

        var globalProps = Object.keys(others).reduce(function (prev, key) {
          if (key.substr(0, 5) === 'aria-' || key.substr(0, 5) === 'data-' || key === 'role') {
            // eslint-disable-next-line no-param-reassign
            prev[key] = others[key];
          }

          return prev;
        }, {});
        var checked = this.state.checked;
        var classString = classnames(prefixCls, className, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-checked"), checked), _defineProperty$1(_classNames, "".concat(prefixCls, "-disabled"), disabled), _classNames));
        return /*#__PURE__*/React__default['default'].createElement("span", {
          className: classString,
          style: style
        }, /*#__PURE__*/React__default['default'].createElement("input", _extends$1({
          name: name,
          id: id,
          type: type,
          required: required,
          readOnly: readOnly,
          disabled: disabled,
          tabIndex: tabIndex,
          className: "".concat(prefixCls, "-input"),
          checked: !!checked,
          onClick: onClick,
          onFocus: onFocus,
          onBlur: onBlur,
          onKeyUp: onKeyUp,
          onKeyDown: onKeyDown,
          onKeyPress: onKeyPress,
          onChange: this.handleChange,
          autoFocus: autoFocus,
          ref: this.saveInput,
          value: value
        }, globalProps)), /*#__PURE__*/React__default['default'].createElement("span", {
          className: "".concat(prefixCls, "-inner")
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        if ('checked' in props) {
          return _objectSpread2$1(_objectSpread2$1({}, state), {}, {
            checked: props.checked
          });
        }

        return null;
      }
    }]);

    return Checkbox;
  }(React.Component);

  Checkbox.defaultProps = {
    prefixCls: 'rc-checkbox',
    className: '',
    style: {},
    type: 'checkbox',
    defaultChecked: false,
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    onChange: function onChange() {},
    onKeyDown: function onKeyDown() {},
    onKeyPress: function onKeyPress() {},
    onKeyUp: function onKeyUp() {}
  };

  var RadioGroupContext = /*#__PURE__*/React.createContext(null);
  var RadioGroupContextProvider = RadioGroupContext.Provider;

  var __rest$5 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var InternalRadio = function InternalRadio(props, ref) {
    var _classNames;

    var context = React.useContext(RadioGroupContext);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var innerRef = React.useRef();
    var mergedRef = composeRef(ref, innerRef);
    React.useEffect(function () {
      devWarning(!('optionType' in props), 'Radio', '`optionType` is only support in Radio.Group.');
    }, []);

    var onChange = function onChange(e) {
      var _a, _b;

      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, e);
      (_b = context === null || context === void 0 ? void 0 : context.onChange) === null || _b === void 0 ? void 0 : _b.call(context, e);
    };

    var customizePrefixCls = props.prefixCls,
        className = props.className,
        children = props.children,
        style = props.style,
        restProps = __rest$5(props, ["prefixCls", "className", "children", "style"]);

    var prefixCls = getPrefixCls('radio', customizePrefixCls);

    var radioProps = _extends$1({}, restProps);

    if (context) {
      radioProps.name = context.name;
      radioProps.onChange = onChange;
      radioProps.checked = props.value === context.value;
      radioProps.disabled = props.disabled || context.disabled;
    }

    var wrapperClassString = classnames("".concat(prefixCls, "-wrapper"), (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-wrapper-checked"), radioProps.checked), _defineProperty$1(_classNames, "".concat(prefixCls, "-wrapper-disabled"), radioProps.disabled), _defineProperty$1(_classNames, "".concat(prefixCls, "-wrapper-rtl"), direction === 'rtl'), _classNames), className);
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/label-has-associated-control
      React.createElement("label", {
        className: wrapperClassString,
        style: style,
        onMouseEnter: props.onMouseEnter,
        onMouseLeave: props.onMouseLeave
      }, /*#__PURE__*/React.createElement(Checkbox, _extends$1({}, radioProps, {
        type: "radio",
        prefixCls: prefixCls,
        ref: mergedRef
      })), children !== undefined ? /*#__PURE__*/React.createElement("span", null, children) : null)
    );
  };

  var Radio = /*#__PURE__*/React.forwardRef(InternalRadio);
  Radio.displayName = 'Radio';

  var RadioGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var size = React.useContext(SizeContext);

    var _useMergedState = useControlledState(props.defaultValue, {
      value: props.value
    }),
        _useMergedState2 = _slicedToArray$1(_useMergedState, 2),
        value = _useMergedState2[0],
        setValue = _useMergedState2[1];

    var onRadioChange = function onRadioChange(ev) {
      var lastValue = value;
      var val = ev.target.value;

      if (!('value' in props)) {
        setValue(val);
      }

      var onChange = props.onChange;

      if (onChange && val !== lastValue) {
        onChange(ev);
      }
    };

    var renderGroup = function renderGroup() {
      var _classNames;

      var customizePrefixCls = props.prefixCls,
          _props$className = props.className,
          className = _props$className === void 0 ? '' : _props$className,
          options = props.options,
          optionType = props.optionType,
          _props$buttonStyle = props.buttonStyle,
          buttonStyle = _props$buttonStyle === void 0 ? 'outline' : _props$buttonStyle,
          disabled = props.disabled,
          children = props.children,
          customizeSize = props.size,
          style = props.style,
          id = props.id,
          onMouseEnter = props.onMouseEnter,
          onMouseLeave = props.onMouseLeave;
      var prefixCls = getPrefixCls('radio', customizePrefixCls);
      var groupPrefixCls = "".concat(prefixCls, "-group");
      var childrenToRender = children; // 如果存在 options, 优先使用

      if (options && options.length > 0) {
        var optionsPrefixCls = optionType === 'button' ? "".concat(prefixCls, "-button") : prefixCls;
        childrenToRender = options.map(function (option) {
          if (typeof option === 'string') {
            // 此处类型自动推导为 string
            return /*#__PURE__*/React.createElement(Radio, {
              key: option,
              prefixCls: optionsPrefixCls,
              disabled: disabled,
              value: option,
              checked: value === option
            }, option);
          } // 此处类型自动推导为 { label: string value: string }


          return /*#__PURE__*/React.createElement(Radio, {
            key: "radio-group-value-options-".concat(option.value),
            prefixCls: optionsPrefixCls,
            disabled: option.disabled || disabled,
            value: option.value,
            checked: value === option.value,
            style: option.style
          }, option.label);
        });
      }

      var mergedSize = customizeSize || size;
      var classString = classnames(groupPrefixCls, "".concat(groupPrefixCls, "-").concat(buttonStyle), (_classNames = {}, _defineProperty$1(_classNames, "".concat(groupPrefixCls, "-").concat(mergedSize), mergedSize), _defineProperty$1(_classNames, "".concat(groupPrefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
      return /*#__PURE__*/React.createElement("div", _extends$1({}, getDataOrAriaProps(props), {
        className: classString,
        style: style,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        id: id,
        ref: ref
      }), childrenToRender);
    };

    return /*#__PURE__*/React.createElement(RadioGroupContextProvider, {
      value: {
        onChange: onRadioChange,
        value: value,
        disabled: props.disabled,
        name: props.name
      }
    }, renderGroup());
  });
  var Group = /*#__PURE__*/React.memo(RadioGroup);

  var __rest$6 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var RadioButton = function RadioButton(props, ref) {
    var radioGroupContext = React.useContext(RadioGroupContext);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls;

    var customizePrefixCls = props.prefixCls,
        radioProps = __rest$6(props, ["prefixCls"]);

    var prefixCls = getPrefixCls('radio-button', customizePrefixCls);

    if (radioGroupContext) {
      radioProps.checked = props.value === radioGroupContext.value;
      radioProps.disabled = props.disabled || radioGroupContext.disabled;
    }

    return /*#__PURE__*/React.createElement(Radio, _extends$1({
      prefixCls: prefixCls
    }, radioProps, {
      type: "radio",
      ref: ref
    }));
  };

  var Button$1 = /*#__PURE__*/React.forwardRef(RadioButton);

  var Radio$1 = Radio;
  Radio$1.Button = Button$1;
  Radio$1.Group = Group;

  // This icon file is generated automatically.
  var PlusOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "defs", "attrs": {}, "children": [{ "tag": "style", "attrs": {} }] }, { "tag": "path", "attrs": { "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z" } }, { "tag": "path", "attrs": { "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z" } }] }, "name": "plus", "theme": "outlined" };

  var PlusOutlined$1 = function PlusOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: PlusOutlined
    }));
  };

  PlusOutlined$1.displayName = 'PlusOutlined';
  var PlusOutlined$2 = /*#__PURE__*/React.forwardRef(PlusOutlined$1);

  var RowContext = /*#__PURE__*/React.createContext({});

  var canUseDocElement = function canUseDocElement() {
    return canUseDom() && window.document.documentElement;
  };
  var flexGapSupported;
  var detectFlexGapSupported = function detectFlexGapSupported() {
    if (!canUseDocElement()) {
      return false;
    }

    if (flexGapSupported !== undefined) {
      return flexGapSupported;
    } // create flex container with row-gap set


    var flex = document.createElement('div');
    flex.style.display = 'flex';
    flex.style.flexDirection = 'column';
    flex.style.rowGap = '1px'; // create two, elements inside it

    flex.appendChild(document.createElement('div'));
    flex.appendChild(document.createElement('div')); // append to the DOM (needed to obtain scrollHeight)

    document.body.appendChild(flex);
    flexGapSupported = flex.scrollHeight === 1; // flex container should be 1px high from the row-gap

    document.body.removeChild(flex);
    return flexGapSupported;
  };

  var useFlexGapSupport = (function () {
    var _React$useState = React.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        flexible = _React$useState2[0],
        setFlexible = _React$useState2[1];

    React.useEffect(function () {
      setFlexible(detectFlexGapSupported());
    }, []);
    return flexible;
  });

  var __rest$7 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var RowAligns = tuple('top', 'middle', 'bottom', 'stretch');
  var RowJustify = tuple('start', 'end', 'center', 'space-around', 'space-between');
  var Row = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var customizePrefixCls = props.prefixCls,
        justify = props.justify,
        align = props.align,
        className = props.className,
        style = props.style,
        children = props.children,
        _props$gutter = props.gutter,
        gutter = _props$gutter === void 0 ? 0 : _props$gutter,
        wrap = props.wrap,
        others = __rest$7(props, ["prefixCls", "justify", "align", "className", "style", "children", "gutter", "wrap"]);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var _React$useState = React.useState({
      xs: true,
      sm: true,
      md: true,
      lg: true,
      xl: true,
      xxl: true
    }),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        screens = _React$useState2[0],
        setScreens = _React$useState2[1];

    var supportFlexGap = useFlexGapSupport();
    var gutterRef = React.useRef(gutter); // ================================== Effect ==================================

    React.useEffect(function () {
      var token = responsiveObserve.subscribe(function (screen) {
        var currentGutter = gutterRef.current || 0;

        if (!Array.isArray(currentGutter) && _typeof$1(currentGutter) === 'object' || Array.isArray(currentGutter) && (_typeof$1(currentGutter[0]) === 'object' || _typeof$1(currentGutter[1]) === 'object')) {
          setScreens(screen);
        }
      });
      return function () {
        return responsiveObserve.unsubscribe(token);
      };
    }, []); // ================================== Render ==================================

    var getGutter = function getGutter() {
      var results = [0, 0];
      var normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, 0];
      normalizedGutter.forEach(function (g, index) {
        if (_typeof$1(g) === 'object') {
          for (var i = 0; i < responsiveArray.length; i++) {
            var breakpoint = responsiveArray[i];

            if (screens[breakpoint] && g[breakpoint] !== undefined) {
              results[index] = g[breakpoint];
              break;
            }
          }
        } else {
          results[index] = g || 0;
        }
      });
      return results;
    };

    var prefixCls = getPrefixCls('row', customizePrefixCls);
    var gutters = getGutter();
    var classes = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-no-wrap"), wrap === false), _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(justify), justify), _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(align), align), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className); // Add gutter related style

    var rowStyle = {};
    var horizontalGutter = gutters[0] > 0 ? gutters[0] / -2 : undefined;
    var verticalGutter = gutters[1] > 0 ? gutters[1] / -2 : undefined;

    if (horizontalGutter) {
      rowStyle.marginLeft = horizontalGutter;
      rowStyle.marginRight = horizontalGutter;
    }

    if (supportFlexGap) {
      // Set gap direct if flex gap support
      var _gutters = _slicedToArray$1(gutters, 2);

      rowStyle.rowGap = _gutters[1];
    } else if (verticalGutter) {
      rowStyle.marginTop = verticalGutter;
      rowStyle.marginBottom = verticalGutter;
    }

    var rowContext = React.useMemo(function () {
      return {
        gutter: gutters,
        wrap: wrap,
        supportFlexGap: supportFlexGap
      };
    }, [gutters, wrap, supportFlexGap]);
    return /*#__PURE__*/React.createElement(RowContext.Provider, {
      value: rowContext
    }, /*#__PURE__*/React.createElement("div", _extends$1({}, others, {
      className: classes,
      style: _extends$1(_extends$1({}, rowStyle), style),
      ref: ref
    }), children));
  });
  Row.displayName = 'Row';

  var __rest$8 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  function parseFlex(flex) {
    if (typeof flex === 'number') {
      return "".concat(flex, " ").concat(flex, " auto");
    }

    if (/^\d+(\.\d+)?(px|em|rem|%)$/.test(flex)) {
      return "0 0 ".concat(flex);
    }

    return flex;
  }

  var sizes = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
  var Col = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var _React$useContext2 = React.useContext(RowContext),
        gutter = _React$useContext2.gutter,
        wrap = _React$useContext2.wrap,
        supportFlexGap = _React$useContext2.supportFlexGap;

    var customizePrefixCls = props.prefixCls,
        span = props.span,
        order = props.order,
        offset = props.offset,
        push = props.push,
        pull = props.pull,
        className = props.className,
        children = props.children,
        flex = props.flex,
        style = props.style,
        others = __rest$8(props, ["prefixCls", "span", "order", "offset", "push", "pull", "className", "children", "flex", "style"]);

    var prefixCls = getPrefixCls('col', customizePrefixCls);
    var sizeClassObj = {};
    sizes.forEach(function (size) {
      var _extends2;

      var sizeProps = {};
      var propSize = props[size];

      if (typeof propSize === 'number') {
        sizeProps.span = propSize;
      } else if (_typeof$1(propSize) === 'object') {
        sizeProps = propSize || {};
      }

      delete others[size];
      sizeClassObj = _extends$1(_extends$1({}, sizeClassObj), (_extends2 = {}, _defineProperty$1(_extends2, "".concat(prefixCls, "-").concat(size, "-").concat(sizeProps.span), sizeProps.span !== undefined), _defineProperty$1(_extends2, "".concat(prefixCls, "-").concat(size, "-order-").concat(sizeProps.order), sizeProps.order || sizeProps.order === 0), _defineProperty$1(_extends2, "".concat(prefixCls, "-").concat(size, "-offset-").concat(sizeProps.offset), sizeProps.offset || sizeProps.offset === 0), _defineProperty$1(_extends2, "".concat(prefixCls, "-").concat(size, "-push-").concat(sizeProps.push), sizeProps.push || sizeProps.push === 0), _defineProperty$1(_extends2, "".concat(prefixCls, "-").concat(size, "-pull-").concat(sizeProps.pull), sizeProps.pull || sizeProps.pull === 0), _defineProperty$1(_extends2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _extends2));
    });
    var classes = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(span), span !== undefined), _defineProperty$1(_classNames, "".concat(prefixCls, "-order-").concat(order), order), _defineProperty$1(_classNames, "".concat(prefixCls, "-offset-").concat(offset), offset), _defineProperty$1(_classNames, "".concat(prefixCls, "-push-").concat(push), push), _defineProperty$1(_classNames, "".concat(prefixCls, "-pull-").concat(pull), pull), _classNames), className, sizeClassObj);
    var mergedStyle = {}; // Horizontal gutter use padding

    if (gutter && gutter[0] > 0) {
      var horizontalGutter = gutter[0] / 2;
      mergedStyle.paddingLeft = horizontalGutter;
      mergedStyle.paddingRight = horizontalGutter;
    } // Vertical gutter use padding when gap not support


    if (gutter && gutter[1] > 0 && !supportFlexGap) {
      var verticalGutter = gutter[1] / 2;
      mergedStyle.paddingTop = verticalGutter;
      mergedStyle.paddingBottom = verticalGutter;
    }

    if (flex) {
      mergedStyle.flex = parseFlex(flex); // Hack for Firefox to avoid size issue
      // https://github.com/ant-design/ant-design/pull/20023#issuecomment-564389553

      if (wrap === false && !mergedStyle.minWidth) {
        mergedStyle.minWidth = 0;
      }
    }

    return /*#__PURE__*/React.createElement("div", _extends$1({}, others, {
      style: _extends$1(_extends$1({}, mergedStyle), style),
      className: classes,
      ref: ref
    }), children);
  });
  Col.displayName = 'Col';

  var __rest$9 = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var GroupContext = /*#__PURE__*/React.createContext(null);

  var InternalCheckboxGroup = function InternalCheckboxGroup(_a, ref) {
    var defaultValue = _a.defaultValue,
        children = _a.children,
        _a$options = _a.options,
        options = _a$options === void 0 ? [] : _a$options,
        customizePrefixCls = _a.prefixCls,
        className = _a.className,
        style = _a.style,
        onChange = _a.onChange,
        restProps = __rest$9(_a, ["defaultValue", "children", "options", "prefixCls", "className", "style", "onChange"]);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var _React$useState = React.useState(restProps.value || defaultValue || []),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        value = _React$useState2[0],
        setValue = _React$useState2[1];

    var _React$useState3 = React.useState([]),
        _React$useState4 = _slicedToArray$1(_React$useState3, 2),
        registeredValues = _React$useState4[0],
        setRegisteredValues = _React$useState4[1];

    React.useEffect(function () {
      if ('value' in restProps) {
        setValue(restProps.value || []);
      }
    }, [restProps.value]);

    var getOptions = function getOptions() {
      return options.map(function (option) {
        if (typeof option === 'string') {
          return {
            label: option,
            value: option
          };
        }

        return option;
      });
    };

    var cancelValue = function cancelValue(val) {
      setRegisteredValues(function (prevValues) {
        return prevValues.filter(function (v) {
          return v !== val;
        });
      });
    };

    var registerValue = function registerValue(val) {
      setRegisteredValues(function (prevValues) {
        return [].concat(_toConsumableArray$1(prevValues), [val]);
      });
    };

    var toggleOption = function toggleOption(option) {
      var optionIndex = value.indexOf(option.value);

      var newValue = _toConsumableArray$1(value);

      if (optionIndex === -1) {
        newValue.push(option.value);
      } else {
        newValue.splice(optionIndex, 1);
      }

      if (!('value' in restProps)) {
        setValue(newValue);
      }

      var opts = getOptions();
      onChange === null || onChange === void 0 ? void 0 : onChange(newValue.filter(function (val) {
        return registeredValues.indexOf(val) !== -1;
      }).sort(function (a, b) {
        var indexA = opts.findIndex(function (opt) {
          return opt.value === a;
        });
        var indexB = opts.findIndex(function (opt) {
          return opt.value === b;
        });
        return indexA - indexB;
      }));
    };

    var prefixCls = getPrefixCls('checkbox', customizePrefixCls);
    var groupPrefixCls = "".concat(prefixCls, "-group");
    var domProps = omit(restProps, ['value', 'disabled']);

    if (options && options.length > 0) {
      children = getOptions().map(function (option) {
        return /*#__PURE__*/React.createElement(Checkbox$1, {
          prefixCls: prefixCls,
          key: option.value.toString(),
          disabled: 'disabled' in option ? option.disabled : restProps.disabled,
          value: option.value,
          checked: value.indexOf(option.value) !== -1,
          onChange: option.onChange,
          className: "".concat(groupPrefixCls, "-item"),
          style: option.style
        }, option.label);
      });
    }

    var context = {
      toggleOption: toggleOption,
      value: value,
      disabled: restProps.disabled,
      name: restProps.name,
      // https://github.com/ant-design/ant-design/issues/16376
      registerValue: registerValue,
      cancelValue: cancelValue
    };
    var classString = classnames(groupPrefixCls, _defineProperty$1({}, "".concat(groupPrefixCls, "-rtl"), direction === 'rtl'), className);
    return /*#__PURE__*/React.createElement("div", _extends$1({
      className: classString,
      style: style
    }, domProps, {
      ref: ref
    }), /*#__PURE__*/React.createElement(GroupContext.Provider, {
      value: context
    }, children));
  };

  var CheckboxGroup = /*#__PURE__*/React.forwardRef(InternalCheckboxGroup);
  var Group$1 = /*#__PURE__*/React.memo(CheckboxGroup);

  var __rest$a = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var InternalCheckbox = function InternalCheckbox(_a, ref) {
    var _classNames;

    var customizePrefixCls = _a.prefixCls,
        className = _a.className,
        children = _a.children,
        _a$indeterminate = _a.indeterminate,
        indeterminate = _a$indeterminate === void 0 ? false : _a$indeterminate,
        style = _a.style,
        onMouseEnter = _a.onMouseEnter,
        onMouseLeave = _a.onMouseLeave,
        _a$skipGroup = _a.skipGroup,
        skipGroup = _a$skipGroup === void 0 ? false : _a$skipGroup,
        restProps = __rest$a(_a, ["prefixCls", "className", "children", "indeterminate", "style", "onMouseEnter", "onMouseLeave", "skipGroup"]);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var checkboxGroup = React.useContext(GroupContext);
    var prevValue = React.useRef(restProps.value);
    React.useEffect(function () {
      checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.registerValue(restProps.value);
      devWarning('checked' in restProps || !!checkboxGroup || !('value' in restProps), 'Checkbox', '`value` is not a valid prop, do you mean `checked`?');
    }, []);
    React.useEffect(function () {
      if (skipGroup) {
        return;
      }

      if (restProps.value !== prevValue.current) {
        checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.cancelValue(prevValue.current);
        checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.registerValue(restProps.value);
      }

      return function () {
        return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.cancelValue(restProps.value);
      };
    }, [restProps.value]);
    var prefixCls = getPrefixCls('checkbox', customizePrefixCls);

    var checkboxProps = _extends$1({}, restProps);

    if (checkboxGroup && !skipGroup) {
      checkboxProps.onChange = function () {
        if (restProps.onChange) {
          restProps.onChange.apply(restProps, arguments);
        }

        if (checkboxGroup.toggleOption) {
          checkboxGroup.toggleOption({
            label: children,
            value: restProps.value
          });
        }
      };

      checkboxProps.name = checkboxGroup.name;
      checkboxProps.checked = checkboxGroup.value.indexOf(restProps.value) !== -1;
      checkboxProps.disabled = restProps.disabled || checkboxGroup.disabled;
    }

    var classString = classnames((_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-wrapper"), true), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty$1(_classNames, "".concat(prefixCls, "-wrapper-checked"), checkboxProps.checked), _defineProperty$1(_classNames, "".concat(prefixCls, "-wrapper-disabled"), checkboxProps.disabled), _classNames), className);
    var checkboxClass = classnames(_defineProperty$1({}, "".concat(prefixCls, "-indeterminate"), indeterminate));
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/label-has-associated-control
      React.createElement("label", {
        className: classString,
        style: style,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave
      }, /*#__PURE__*/React.createElement(Checkbox, _extends$1({}, checkboxProps, {
        prefixCls: prefixCls,
        className: checkboxClass,
        ref: ref
      })), children !== undefined && /*#__PURE__*/React.createElement("span", null, children))
    );
  };

  var Checkbox$1 = /*#__PURE__*/React.forwardRef(InternalCheckbox);
  Checkbox$1.displayName = 'Checkbox';

  var Checkbox$2 = Checkbox$1;
  Checkbox$2.Group = Group$1;
  Checkbox$2.__ANT_CHECKBOX = true;

  function PickerButton(props) {
    return /*#__PURE__*/React.createElement(Button, _extends$1({
      size: "small",
      type: "primary"
    }, props));
  }

  var __rest$b = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var CheckableTag = function CheckableTag(_a) {
    var _classNames;

    var customizePrefixCls = _a.prefixCls,
        className = _a.className,
        checked = _a.checked,
        onChange = _a.onChange,
        onClick = _a.onClick,
        restProps = __rest$b(_a, ["prefixCls", "className", "checked", "onChange", "onClick"]);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls;

    var handleClick = function handleClick(e) {
      onChange === null || onChange === void 0 ? void 0 : onChange(!checked);
      onClick === null || onClick === void 0 ? void 0 : onClick(e);
    };

    var prefixCls = getPrefixCls('tag', customizePrefixCls);
    var cls = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-checkable"), true), _defineProperty$1(_classNames, "".concat(prefixCls, "-checkable-checked"), checked), _classNames), className);
    return /*#__PURE__*/React.createElement("span", _extends$1({}, restProps, {
      className: cls,
      onClick: handleClick
    }));
  };

  var __rest$c = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var PresetColorRegex$1 = new RegExp("^(".concat(PresetColorTypes.join('|'), ")(-inverse)?$"));
  var PresetStatusColorRegex = new RegExp("^(".concat(PresetStatusColorTypes.join('|'), ")$"));

  var InternalTag = function InternalTag(_a, ref) {
    var _classNames;

    var customizePrefixCls = _a.prefixCls,
        className = _a.className,
        style = _a.style,
        children = _a.children,
        icon = _a.icon,
        color = _a.color,
        onClose = _a.onClose,
        closeIcon = _a.closeIcon,
        _a$closable = _a.closable,
        closable = _a$closable === void 0 ? false : _a$closable,
        props = __rest$c(_a, ["prefixCls", "className", "style", "children", "icon", "color", "onClose", "closeIcon", "closable"]);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var _React$useState = React.useState(true),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        visible = _React$useState2[0],
        setVisible = _React$useState2[1];

    React.useEffect(function () {
      if ('visible' in props) {
        setVisible(props.visible);
      }
    }, [props.visible]);

    var isPresetColor = function isPresetColor() {
      if (!color) {
        return false;
      }

      return PresetColorRegex$1.test(color) || PresetStatusColorRegex.test(color);
    };

    var tagStyle = _extends$1({
      backgroundColor: color && !isPresetColor() ? color : undefined
    }, style);

    var presetColor = isPresetColor();
    var prefixCls = getPrefixCls('tag', customizePrefixCls);
    var tagClassName = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(color), presetColor), _defineProperty$1(_classNames, "".concat(prefixCls, "-has-color"), color && !presetColor), _defineProperty$1(_classNames, "".concat(prefixCls, "-hidden"), !visible), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);

    var handleCloseClick = function handleCloseClick(e) {
      e.stopPropagation();
      onClose === null || onClose === void 0 ? void 0 : onClose(e);

      if (e.defaultPrevented) {
        return;
      }

      if (!('visible' in props)) {
        setVisible(false);
      }
    };

    var renderCloseIcon = function renderCloseIcon() {
      if (closable) {
        return closeIcon ? /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-close-icon"),
          onClick: handleCloseClick
        }, closeIcon) : /*#__PURE__*/React.createElement(CloseOutlined$2, {
          className: "".concat(prefixCls, "-close-icon"),
          onClick: handleCloseClick
        });
      }

      return null;
    };

    var isNeedWave = 'onClick' in props || children && children.type === 'a';
    var tagProps = omit(props, ['visible']);
    var iconNode = icon || null;
    var kids = iconNode ? /*#__PURE__*/React.createElement(React.Fragment, null, iconNode, /*#__PURE__*/React.createElement("span", null, children)) : children;
    var tagNode = /*#__PURE__*/React.createElement("span", _extends$1({}, tagProps, {
      ref: ref,
      className: tagClassName,
      style: tagStyle
    }), kids, renderCloseIcon());
    return isNeedWave ? /*#__PURE__*/React.createElement(Wave, null, tagNode) : tagNode;
  };

  var Tag = /*#__PURE__*/React.forwardRef(InternalTag);
  Tag.displayName = 'Tag';
  Tag.CheckableTag = CheckableTag;

  function PickerTag(props) {
    return /*#__PURE__*/React.createElement(Tag, _extends$1({
      color: "blue"
    }, props));
  }

  // This icon file is generated automatically.
  var CalendarOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z" } }] }, "name": "calendar", "theme": "outlined" };

  var CalendarOutlined$1 = function CalendarOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: CalendarOutlined
    }));
  };

  CalendarOutlined$1.displayName = 'CalendarOutlined';
  var CalendarOutlined$2 = /*#__PURE__*/React.forwardRef(CalendarOutlined$1);

  // This icon file is generated automatically.
  var ClockCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M686.7 638.6L544.1 535.5V288c0-4.4-3.6-8-8-8H488c-4.4 0-8 3.6-8 8v275.4c0 2.6 1.2 5 3.3 6.5l165.4 120.6c3.6 2.6 8.6 1.8 11.2-1.7l28.6-39c2.6-3.7 1.8-8.7-1.8-11.2z" } }] }, "name": "clock-circle", "theme": "outlined" };

  var ClockCircleOutlined$1 = function ClockCircleOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: ClockCircleOutlined
    }));
  };

  ClockCircleOutlined$1.displayName = 'ClockCircleOutlined';
  var ClockCircleOutlined$2 = /*#__PURE__*/React.forwardRef(ClockCircleOutlined$1);

  function getPlaceholder(picker, locale, customizePlaceholder) {
    if (customizePlaceholder !== undefined) {
      return customizePlaceholder;
    }

    if (picker === 'year' && locale.lang.yearPlaceholder) {
      return locale.lang.yearPlaceholder;
    }

    if (picker === 'quarter' && locale.lang.quarterPlaceholder) {
      return locale.lang.quarterPlaceholder;
    }

    if (picker === 'month' && locale.lang.monthPlaceholder) {
      return locale.lang.monthPlaceholder;
    }

    if (picker === 'week' && locale.lang.weekPlaceholder) {
      return locale.lang.weekPlaceholder;
    }

    if (picker === 'time' && locale.timePickerLocale.placeholder) {
      return locale.timePickerLocale.placeholder;
    }

    return locale.lang.placeholder;
  }
  function getRangePlaceholder(picker, locale, customizePlaceholder) {
    if (customizePlaceholder !== undefined) {
      return customizePlaceholder;
    }

    if (picker === 'year' && locale.lang.yearPlaceholder) {
      return locale.lang.rangeYearPlaceholder;
    }

    if (picker === 'month' && locale.lang.monthPlaceholder) {
      return locale.lang.rangeMonthPlaceholder;
    }

    if (picker === 'week' && locale.lang.weekPlaceholder) {
      return locale.lang.rangeWeekPlaceholder;
    }

    if (picker === 'time' && locale.timePickerLocale.placeholder) {
      return locale.timePickerLocale.rangePlaceholder;
    }

    return locale.lang.rangePlaceholder;
  }

  var __rest$d = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  function generatePicker(generateConfig) {
    function getPicker(picker, displayName) {
      var Picker$1 = /*#__PURE__*/function (_React$Component) {
        _inherits(Picker$1, _React$Component);

        var _super = _createSuper(Picker$1);

        function Picker$1(props) {
          var _this;

          _classCallCheck(this, Picker$1);

          _this = _super.call(this, props);
          _this.pickerRef = /*#__PURE__*/React.createRef();

          _this.focus = function () {
            if (_this.pickerRef.current) {
              _this.pickerRef.current.focus();
            }
          };

          _this.blur = function () {
            if (_this.pickerRef.current) {
              _this.pickerRef.current.blur();
            }
          };

          _this.renderPicker = function (contextLocale) {
            var locale = _extends$1(_extends$1({}, contextLocale), _this.props.locale);

            var _this$context = _this.context,
                getPrefixCls = _this$context.getPrefixCls,
                direction = _this$context.direction,
                getPopupContainer = _this$context.getPopupContainer;

            var _a = _this.props,
                customizePrefixCls = _a.prefixCls,
                customizeGetPopupContainer = _a.getPopupContainer,
                className = _a.className,
                customizeSize = _a.size,
                _a$bordered = _a.bordered,
                bordered = _a$bordered === void 0 ? true : _a$bordered,
                placeholder = _a.placeholder,
                restProps = __rest$d(_a, ["prefixCls", "getPopupContainer", "className", "size", "bordered", "placeholder"]);

            var _this$props = _this.props,
                format = _this$props.format,
                showTime = _this$props.showTime;
            var prefixCls = getPrefixCls('picker', customizePrefixCls);
            var additionalProps = {
              showToday: true
            };
            var additionalOverrideProps = {};

            if (picker) {
              additionalOverrideProps.picker = picker;
            }

            var mergedPicker = picker || _this.props.picker;
            additionalOverrideProps = _extends$1(_extends$1(_extends$1({}, additionalOverrideProps), showTime ? getTimeProps(_extends$1({
              format: format,
              picker: mergedPicker
            }, showTime)) : {}), mergedPicker === 'time' ? getTimeProps(_extends$1(_extends$1({
              format: format
            }, _this.props), {
              picker: mergedPicker
            })) : {});
            var rootPrefixCls = getPrefixCls();
            return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (size) {
              var _classNames;

              var mergedSize = customizeSize || size;
              return /*#__PURE__*/React.createElement(Picker, _extends$1({
                ref: _this.pickerRef,
                placeholder: getPlaceholder(mergedPicker, locale, placeholder),
                suffixIcon: mergedPicker === 'time' ? /*#__PURE__*/React.createElement(ClockCircleOutlined$2, null) : /*#__PURE__*/React.createElement(CalendarOutlined$2, null),
                clearIcon: /*#__PURE__*/React.createElement(CloseCircleFilled$2, null),
                prevIcon: /*#__PURE__*/React.createElement("span", {
                  className: "".concat(prefixCls, "-prev-icon")
                }),
                nextIcon: /*#__PURE__*/React.createElement("span", {
                  className: "".concat(prefixCls, "-next-icon")
                }),
                superPrevIcon: /*#__PURE__*/React.createElement("span", {
                  className: "".concat(prefixCls, "-super-prev-icon")
                }),
                superNextIcon: /*#__PURE__*/React.createElement("span", {
                  className: "".concat(prefixCls, "-super-next-icon")
                }),
                allowClear: true,
                transitionName: "".concat(rootPrefixCls, "-slide-up")
              }, additionalProps, restProps, additionalOverrideProps, {
                locale: locale.lang,
                className: classnames((_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(mergedSize), mergedSize), _defineProperty$1(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames), className),
                prefixCls: prefixCls,
                getPopupContainer: customizeGetPopupContainer || getPopupContainer,
                generateConfig: generateConfig,
                components: Components,
                direction: direction
              }));
            });
          };

          devWarning(picker !== 'quarter', displayName, "DatePicker.".concat(displayName, " is legacy usage. Please use DatePicker[picker='").concat(picker, "'] directly."));
          return _this;
        }

        _createClass(Picker$1, [{
          key: "render",
          value: function render() {
            return /*#__PURE__*/React.createElement(LocaleReceiver, {
              componentName: "DatePicker",
              defaultLocale: locale$2
            }, this.renderPicker);
          }
        }]);

        return Picker$1;
      }(React.Component);

      Picker$1.contextType = ConfigContext;

      if (displayName) {
        Picker$1.displayName = displayName;
      }

      return Picker$1;
    }

    var DatePicker = getPicker();
    var WeekPicker = getPicker('week', 'WeekPicker');
    var MonthPicker = getPicker('month', 'MonthPicker');
    var YearPicker = getPicker('year', 'YearPicker');
    var TimePicker = getPicker('time', 'TimePicker');
    var QuarterPicker = getPicker('quarter', 'QuarterPicker');
    return {
      DatePicker: DatePicker,
      WeekPicker: WeekPicker,
      MonthPicker: MonthPicker,
      YearPicker: YearPicker,
      TimePicker: TimePicker,
      QuarterPicker: QuarterPicker
    };
  }

  // This icon file is generated automatically.
  var SwapRightOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "0 0 1024 1024", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M873.1 596.2l-164-208A32 32 0 00684 376h-64.8c-6.7 0-10.4 7.7-6.3 13l144.3 183H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h695.9c26.8 0 41.7-30.8 25.2-51.8z" } }] }, "name": "swap-right", "theme": "outlined" };

  var SwapRightOutlined$1 = function SwapRightOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: SwapRightOutlined
    }));
  };

  SwapRightOutlined$1.displayName = 'SwapRightOutlined';
  var SwapRightOutlined$2 = /*#__PURE__*/React.forwardRef(SwapRightOutlined$1);

  var __rest$e = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  function generateRangePicker(generateConfig) {
    var RangePicker$1 = /*#__PURE__*/function (_React$Component) {
      _inherits(RangePicker$1, _React$Component);

      var _super = _createSuper(RangePicker$1);

      function RangePicker$1() {
        var _this;

        _classCallCheck(this, RangePicker$1);

        _this = _super.apply(this, arguments);
        _this.pickerRef = /*#__PURE__*/React.createRef();

        _this.focus = function () {
          if (_this.pickerRef.current) {
            _this.pickerRef.current.focus();
          }
        };

        _this.blur = function () {
          if (_this.pickerRef.current) {
            _this.pickerRef.current.blur();
          }
        };

        _this.renderPicker = function (contextLocale) {
          var locale = _extends$1(_extends$1({}, contextLocale), _this.props.locale);

          var _this$context = _this.context,
              getPrefixCls = _this$context.getPrefixCls,
              direction = _this$context.direction,
              getPopupContainer = _this$context.getPopupContainer;

          var _a = _this.props,
              customizePrefixCls = _a.prefixCls,
              customGetPopupContainer = _a.getPopupContainer,
              className = _a.className,
              customizeSize = _a.size,
              _a$bordered = _a.bordered,
              bordered = _a$bordered === void 0 ? true : _a$bordered,
              placeholder = _a.placeholder,
              restProps = __rest$e(_a, ["prefixCls", "getPopupContainer", "className", "size", "bordered", "placeholder"]);

          var _this$props = _this.props,
              format = _this$props.format,
              showTime = _this$props.showTime,
              picker = _this$props.picker;
          var prefixCls = getPrefixCls('picker', customizePrefixCls);
          var additionalOverrideProps = {};
          additionalOverrideProps = _extends$1(_extends$1(_extends$1({}, additionalOverrideProps), showTime ? getTimeProps(_extends$1({
            format: format,
            picker: picker
          }, showTime)) : {}), picker === 'time' ? getTimeProps(_extends$1(_extends$1({
            format: format
          }, _this.props), {
            picker: picker
          })) : {});
          var rootPrefixCls = getPrefixCls();
          return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (size) {
            var _classNames;

            var mergedSize = customizeSize || size;
            return /*#__PURE__*/React.createElement(RangePicker, _extends$1({
              separator: /*#__PURE__*/React.createElement("span", {
                "aria-label": "to",
                className: "".concat(prefixCls, "-separator")
              }, /*#__PURE__*/React.createElement(SwapRightOutlined$2, null)),
              ref: _this.pickerRef,
              placeholder: getRangePlaceholder(picker, locale, placeholder),
              suffixIcon: picker === 'time' ? /*#__PURE__*/React.createElement(ClockCircleOutlined$2, null) : /*#__PURE__*/React.createElement(CalendarOutlined$2, null),
              clearIcon: /*#__PURE__*/React.createElement(CloseCircleFilled$2, null),
              prevIcon: /*#__PURE__*/React.createElement("span", {
                className: "".concat(prefixCls, "-prev-icon")
              }),
              nextIcon: /*#__PURE__*/React.createElement("span", {
                className: "".concat(prefixCls, "-next-icon")
              }),
              superPrevIcon: /*#__PURE__*/React.createElement("span", {
                className: "".concat(prefixCls, "-super-prev-icon")
              }),
              superNextIcon: /*#__PURE__*/React.createElement("span", {
                className: "".concat(prefixCls, "-super-next-icon")
              }),
              allowClear: true,
              transitionName: "".concat(rootPrefixCls, "-slide-up")
            }, restProps, additionalOverrideProps, {
              className: classnames((_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(mergedSize), mergedSize), _defineProperty$1(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames), className),
              locale: locale.lang,
              prefixCls: prefixCls,
              getPopupContainer: customGetPopupContainer || getPopupContainer,
              generateConfig: generateConfig,
              components: Components,
              direction: direction
            }));
          });
        };

        return _this;
      }

      _createClass(RangePicker$1, [{
        key: "render",
        value: function render() {
          return /*#__PURE__*/React.createElement(LocaleReceiver, {
            componentName: "DatePicker",
            defaultLocale: locale$2
          }, this.renderPicker);
        }
      }]);

      return RangePicker$1;
    }(React.Component);

    RangePicker$1.contextType = ConfigContext;
    return RangePicker$1;
  }

  var Components = {
    button: PickerButton,
    rangeItem: PickerTag
  };

  function toArray$5(list) {
    if (!list) {
      return [];
    }

    return Array.isArray(list) ? list : [list];
  }

  function getTimeProps(props) {
    var format = props.format,
        picker = props.picker,
        showHour = props.showHour,
        showMinute = props.showMinute,
        showSecond = props.showSecond,
        use12Hours = props.use12Hours;
    var firstFormat = toArray$5(format)[0];

    var showTimeObj = _extends$1({}, props);

    if (firstFormat && typeof firstFormat === 'string') {
      if (!firstFormat.includes('s') && showSecond === undefined) {
        showTimeObj.showSecond = false;
      }

      if (!firstFormat.includes('m') && showMinute === undefined) {
        showTimeObj.showMinute = false;
      }

      if (!firstFormat.includes('H') && !firstFormat.includes('h') && showHour === undefined) {
        showTimeObj.showHour = false;
      }

      if ((firstFormat.includes('a') || firstFormat.includes('A')) && use12Hours === undefined) {
        showTimeObj.use12Hours = true;
      }
    }

    if (picker === 'time') {
      return showTimeObj;
    }

    if (typeof firstFormat === 'function') {
      // format of showTime should use default when format is custom format function
      delete showTimeObj.format;
    }

    return {
      showTime: showTimeObj
    };
  }

  function generatePicker$1(generateConfig) {
    // =========================== Picker ===========================
    var _generateSinglePicker = generatePicker(generateConfig),
        DatePicker = _generateSinglePicker.DatePicker,
        WeekPicker = _generateSinglePicker.WeekPicker,
        MonthPicker = _generateSinglePicker.MonthPicker,
        YearPicker = _generateSinglePicker.YearPicker,
        TimePicker = _generateSinglePicker.TimePicker,
        QuarterPicker = _generateSinglePicker.QuarterPicker; // ======================== Range Picker ========================


    var RangePicker = generateRangePicker(generateConfig);
    var MergedDatePicker = DatePicker;
    MergedDatePicker.WeekPicker = WeekPicker;
    MergedDatePicker.MonthPicker = MonthPicker;
    MergedDatePicker.YearPicker = YearPicker;
    MergedDatePicker.RangePicker = RangePicker;
    MergedDatePicker.TimePicker = TimePicker;
    MergedDatePicker.QuarterPicker = QuarterPicker;
    return MergedDatePicker;
  }

  var DatePicker = generatePicker$1(generateConfig);

  /* eslint-disable no-param-reassign */
  var cached;
  function getScrollBarSize(fresh) {
    if (typeof document === 'undefined') {
      return 0;
    }

    if (fresh || cached === undefined) {
      var inner = document.createElement('div');
      inner.style.width = '100%';
      inner.style.height = '200px';
      var outer = document.createElement('div');
      var outerStyle = outer.style;
      outerStyle.position = 'absolute';
      outerStyle.top = '0';
      outerStyle.left = '0';
      outerStyle.pointerEvents = 'none';
      outerStyle.visibility = 'hidden';
      outerStyle.width = '200px';
      outerStyle.height = '150px';
      outerStyle.overflow = 'hidden';
      outer.appendChild(inner);
      document.body.appendChild(outer);
      var widthContained = inner.offsetWidth;
      outer.style.overflow = 'scroll';
      var widthScroll = inner.offsetWidth;

      if (widthContained === widthScroll) {
        widthScroll = outer.clientWidth;
      }

      document.body.removeChild(outer);
      cached = widthContained - widthScroll;
    }

    return cached;
  }

  /**
   * Easy to set element style, return previous style
   * IE browser compatible(IE browser doesn't merge overflow style, need to set it separately)
   * https://github.com/ant-design/ant-design/issues/19393
   *
   */
  function setStyle(style) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!style) {
      return {};
    }

    var _options$element = options.element,
        element = _options$element === void 0 ? document.body : _options$element;
    var oldStyle = {};
    var styleKeys = Object.keys(style); // IE browser compatible

    styleKeys.forEach(function (key) {
      oldStyle[key] = element.style[key];
    });
    styleKeys.forEach(function (key) {
      element.style[key] = style[key];
    });
    return oldStyle;
  }

  function isBodyOverflowing() {
    return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight) && window.innerWidth > document.body.offsetWidth;
  }

  var cacheStyle = {};
  var switchScrollingEffect = (function (close) {
    if (!isBodyOverflowing() && !close) {
      return;
    } // https://github.com/ant-design/ant-design/issues/19729


    var scrollingEffectClassName = 'ant-scrolling-effect';
    var scrollingEffectClassNameReg = new RegExp("".concat(scrollingEffectClassName), 'g');
    var bodyClassName = document.body.className;

    if (close) {
      if (!scrollingEffectClassNameReg.test(bodyClassName)) return;
      setStyle(cacheStyle);
      cacheStyle = {};
      document.body.className = bodyClassName.replace(scrollingEffectClassNameReg, '').trim();
      return;
    }

    var scrollBarSize = getScrollBarSize();

    if (scrollBarSize) {
      cacheStyle = setStyle({
        position: 'relative',
        width: "calc(100% - ".concat(scrollBarSize, "px)")
      });

      if (!scrollingEffectClassNameReg.test(bodyClassName)) {
        var addClassName = "".concat(bodyClassName, " ").concat(scrollingEffectClassName);
        document.body.className = addClassName.trim();
      }
    }
  });

  var locks = [];
  var scrollingEffectClassName = 'ant-scrolling-effect';
  var scrollingEffectClassNameReg = new RegExp("".concat(scrollingEffectClassName), 'g');
  var uuid$1 = 0; // https://github.com/ant-design/ant-design/issues/19340
  // https://github.com/ant-design/ant-design/issues/19332

  var cacheStyle$1 = new Map();

  var ScrollLocker = function ScrollLocker(_options) {
    var _this = this;

    _classCallCheck(this, ScrollLocker);

    this.lockTarget = void 0;
    this.options = void 0;

    this.getContainer = function () {
      var _this$options;

      return (_this$options = _this.options) === null || _this$options === void 0 ? void 0 : _this$options.container;
    };

    this.reLock = function (options) {
      var findLock = locks.find(function (_ref) {
        var target = _ref.target;
        return target === _this.lockTarget;
      });

      if (findLock) {
        _this.unLock();
      }

      _this.options = options;

      if (findLock) {
        findLock.options = options;

        _this.lock();
      }
    };

    this.lock = function () {
      var _this$options3;

      // If lockTarget exist return
      if (locks.some(function (_ref2) {
        var target = _ref2.target;
        return target === _this.lockTarget;
      })) {
        return;
      } // If same container effect, return


      if (locks.some(function (_ref3) {
        var _this$options2;

        var options = _ref3.options;
        return (options === null || options === void 0 ? void 0 : options.container) === ((_this$options2 = _this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.container);
      })) {
        locks = [].concat(_toConsumableArray$1(locks), [{
          target: _this.lockTarget,
          options: _this.options
        }]);
        return;
      }

      var scrollBarSize = 0;
      var container = ((_this$options3 = _this.options) === null || _this$options3 === void 0 ? void 0 : _this$options3.container) || document.body;

      if (container === document.body && window.innerWidth - document.documentElement.clientWidth > 0 || container.scrollHeight > container.clientHeight) {
        scrollBarSize = getScrollBarSize();
      }

      var containerClassName = container.className;

      if (locks.filter(function (_ref4) {
        var _this$options4;

        var options = _ref4.options;
        return (options === null || options === void 0 ? void 0 : options.container) === ((_this$options4 = _this.options) === null || _this$options4 === void 0 ? void 0 : _this$options4.container);
      }).length === 0) {
        cacheStyle$1.set(container, setStyle({
          width: scrollBarSize !== 0 ? "calc(100% - ".concat(scrollBarSize, "px)") : undefined,
          overflow: 'hidden',
          overflowX: 'hidden',
          overflowY: 'hidden'
        }, {
          element: container
        }));
      } // https://github.com/ant-design/ant-design/issues/19729


      if (!scrollingEffectClassNameReg.test(containerClassName)) {
        var addClassName = "".concat(containerClassName, " ").concat(scrollingEffectClassName);
        container.className = addClassName.trim();
      }

      locks = [].concat(_toConsumableArray$1(locks), [{
        target: _this.lockTarget,
        options: _this.options
      }]);
    };

    this.unLock = function () {
      var _this$options5;

      var findLock = locks.find(function (_ref5) {
        var target = _ref5.target;
        return target === _this.lockTarget;
      });
      locks = locks.filter(function (_ref6) {
        var target = _ref6.target;
        return target !== _this.lockTarget;
      });

      if (!findLock || locks.some(function (_ref7) {
        var _findLock$options;

        var options = _ref7.options;
        return (options === null || options === void 0 ? void 0 : options.container) === ((_findLock$options = findLock.options) === null || _findLock$options === void 0 ? void 0 : _findLock$options.container);
      })) {
        return;
      } // Remove Effect


      var container = ((_this$options5 = _this.options) === null || _this$options5 === void 0 ? void 0 : _this$options5.container) || document.body;
      var containerClassName = container.className;
      if (!scrollingEffectClassNameReg.test(containerClassName)) return;
      setStyle(cacheStyle$1.get(container), {
        element: container
      });
      cacheStyle$1.delete(container);
      container.className = container.className.replace(scrollingEffectClassNameReg, '').trim();
    };

    // eslint-disable-next-line no-plusplus
    this.lockTarget = uuid$1++;
    this.options = _options;
  };

  var openCount = 0;
  var supportDom = canUseDom();
  // https://github.com/ant-design/ant-design/issues/19332

  var cacheOverflow = {};

  var getParent$2 = function getParent(getContainer) {
    if (!supportDom) {
      return null;
    }

    if (getContainer) {
      if (typeof getContainer === 'string') {
        return document.querySelectorAll(getContainer)[0];
      }

      if (typeof getContainer === 'function') {
        return getContainer();
      }

      if (_typeof$1(getContainer) === 'object' && getContainer instanceof window.HTMLElement) {
        return getContainer;
      }
    }

    return document.body;
  };

  var PortalWrapper = /*#__PURE__*/function (_React$Component) {
    _inherits(PortalWrapper, _React$Component);

    var _super = _createSuper(PortalWrapper);

    function PortalWrapper(props) {
      var _this;

      _classCallCheck(this, PortalWrapper);

      _this = _super.call(this, props);
      _this.container = void 0;
      _this.componentRef = /*#__PURE__*/React.createRef();
      _this.rafId = void 0;
      _this.scrollLocker = void 0;
      _this.renderComponent = void 0;

      _this.updateScrollLocker = function (prevProps) {
        var _ref = prevProps || {},
            prevVisible = _ref.visible;

        var _this$props = _this.props,
            getContainer = _this$props.getContainer,
            visible = _this$props.visible;

        if (visible && visible !== prevVisible && supportDom && getParent$2(getContainer) !== _this.scrollLocker.getContainer()) {
          _this.scrollLocker.reLock({
            container: getParent$2(getContainer)
          });
        }
      };

      _this.updateOpenCount = function (prevProps) {
        var _ref2 = prevProps || {},
            prevVisible = _ref2.visible,
            prevGetContainer = _ref2.getContainer;

        var _this$props2 = _this.props,
            visible = _this$props2.visible,
            getContainer = _this$props2.getContainer; // Update count

        if (visible !== prevVisible && supportDom && getParent$2(getContainer) === document.body) {
          if (visible && !prevVisible) {
            openCount += 1;
          } else if (prevProps) {
            openCount -= 1;
          }
        } // Clean up container if needed


        var getContainerIsFunc = typeof getContainer === 'function' && typeof prevGetContainer === 'function';

        if (getContainerIsFunc ? getContainer.toString() !== prevGetContainer.toString() : getContainer !== prevGetContainer) {
          _this.removeCurrentContainer();
        }
      };

      _this.attachToParent = function () {
        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (force || _this.container && !_this.container.parentNode) {
          var parent = getParent$2(_this.props.getContainer);

          if (parent) {
            parent.appendChild(_this.container);
            return true;
          }

          return false;
        }

        return true;
      };

      _this.getContainer = function () {
        if (!supportDom) {
          return null;
        }

        if (!_this.container) {
          _this.container = document.createElement('div');

          _this.attachToParent(true);
        }

        _this.setWrapperClassName();

        return _this.container;
      };

      _this.setWrapperClassName = function () {
        var wrapperClassName = _this.props.wrapperClassName;

        if (_this.container && wrapperClassName && wrapperClassName !== _this.container.className) {
          _this.container.className = wrapperClassName;
        }
      };

      _this.removeCurrentContainer = function () {
        var _this$container, _this$container$paren;

        // Portal will remove from `parentNode`.
        // Let's handle this again to avoid refactor issue.
        (_this$container = _this.container) === null || _this$container === void 0 ? void 0 : (_this$container$paren = _this$container.parentNode) === null || _this$container$paren === void 0 ? void 0 : _this$container$paren.removeChild(_this.container);
      };

      _this.switchScrollingEffect = function () {
        if (openCount === 1 && !Object.keys(cacheOverflow).length) {
          switchScrollingEffect(); // Must be set after switchScrollingEffect

          cacheOverflow = setStyle({
            overflow: 'hidden',
            overflowX: 'hidden',
            overflowY: 'hidden'
          });
        } else if (!openCount) {
          setStyle(cacheOverflow);
          cacheOverflow = {};
          switchScrollingEffect(true);
        }
      };

      _this.scrollLocker = new ScrollLocker({
        container: getParent$2(props.getContainer)
      });
      return _this;
    }

    _createClass(PortalWrapper, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this.updateOpenCount();

        if (!this.attachToParent()) {
          this.rafId = wrapperRaf(function () {
            _this2.forceUpdate();
          });
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this.updateOpenCount(prevProps);
        this.updateScrollLocker(prevProps);
        this.setWrapperClassName();
        this.attachToParent();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this$props3 = this.props,
            visible = _this$props3.visible,
            getContainer = _this$props3.getContainer;

        if (supportDom && getParent$2(getContainer) === document.body) {
          // 离开时不会 render， 导到离开时数值不变，改用 func 。。
          openCount = visible && openCount ? openCount - 1 : openCount;
        }

        this.removeCurrentContainer();
        wrapperRaf.cancel(this.rafId);
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props4 = this.props,
            children = _this$props4.children,
            forceRender = _this$props4.forceRender,
            visible = _this$props4.visible;
        var portal = null;
        var childProps = {
          getOpenCount: function getOpenCount() {
            return openCount;
          },
          getContainer: this.getContainer,
          switchScrollingEffect: this.switchScrollingEffect,
          scrollLocker: this.scrollLocker
        };

        if (forceRender || visible || this.componentRef.current) {
          portal = /*#__PURE__*/React.createElement(Portal, {
            getContainer: this.getContainer,
            ref: this.componentRef
          }, children(childProps));
        }

        return portal;
      }
    }]);

    return PortalWrapper;
  }(React.Component);

  function useForceUpdate() {
    var _React$useReducer = React.useReducer(function (x) {
      return x + 1;
    }, 0),
        _React$useReducer2 = _slicedToArray$1(_React$useReducer, 2),
        forceUpdate = _React$useReducer2[1];

    return forceUpdate;
  }

  var FormContext$1 = /*#__PURE__*/React.createContext({
    labelAlign: 'right',
    vertical: false,
    itemRef: function itemRef() {}
  });
  var NoStyleItemContext = /*#__PURE__*/React.createContext(null);
  var FormProvider$1 = function FormProvider$1(props) {
    var providerProps = omit(props, ['prefixCls']);
    return /*#__PURE__*/React.createElement(FormProvider, providerProps);
  };
  var FormItemPrefixContext = /*#__PURE__*/React.createContext({
    prefixCls: ''
  });

  function t(t){return "object"==typeof t&&null!=t&&1===t.nodeType}function e(t,e){return (!e||"hidden"!==t)&&"visible"!==t&&"clip"!==t}function n(t,n){if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){var r=getComputedStyle(t,null);return e(r.overflowY,n)||e(r.overflowX,n)||function(t){var e=function(t){if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}}(t);return !!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)}(t)}return !1}function r(t,e,n,r,i,o,l,d){return o<t&&l>e||o>t&&l<e?0:o<=t&&d<=n||l>=e&&d>=n?o-t-r:l>e&&d<n||o<t&&d>n?l-e+i:0}function compute(e,i){var o=window,l=i.scrollMode,d=i.block,u=i.inline,h=i.boundary,a=i.skipOverflowHiddenElements,c="function"==typeof h?h:function(t){return t!==h};if(!t(e))throw new TypeError("Invalid target");for(var f=document.scrollingElement||document.documentElement,s=[],p=e;t(p)&&c(p);){if((p=p.parentElement)===f){s.push(p);break}null!=p&&p===document.body&&n(p)&&!n(document.documentElement)||null!=p&&n(p,a)&&s.push(p);}for(var m=o.visualViewport?o.visualViewport.width:innerWidth,g=o.visualViewport?o.visualViewport.height:innerHeight,w=window.scrollX||pageXOffset,v=window.scrollY||pageYOffset,W=e.getBoundingClientRect(),b=W.height,H=W.width,y=W.top,E=W.right,M=W.bottom,V=W.left,x="start"===d||"nearest"===d?y:"end"===d?M:y+b/2,I="center"===u?V+H/2:"end"===u?E:V,C=[],T=0;T<s.length;T++){var k=s[T],B=k.getBoundingClientRect(),D=B.height,O=B.width,R=B.top,X=B.right,Y=B.bottom,L=B.left;if("if-needed"===l&&y>=0&&V>=0&&M<=g&&E<=m&&y>=R&&M<=Y&&V>=L&&E<=X)return C;var S=getComputedStyle(k),j=parseInt(S.borderLeftWidth,10),q=parseInt(S.borderTopWidth,10),z=parseInt(S.borderRightWidth,10),A=parseInt(S.borderBottomWidth,10),F=0,G=0,J="offsetWidth"in k?k.offsetWidth-k.clientWidth-j-z:0,K="offsetHeight"in k?k.offsetHeight-k.clientHeight-q-A:0;if(f===k)F="start"===d?x:"end"===d?x-g:"nearest"===d?r(v,v+g,g,q,A,v+x,v+x+b,b):x-g/2,G="start"===u?I:"center"===u?I-m/2:"end"===u?I-m:r(w,w+m,m,j,z,w+I,w+I+H,H),F=Math.max(0,F+v),G=Math.max(0,G+w);else {F="start"===d?x-R-q:"end"===d?x-Y+A+K:"nearest"===d?r(R,Y,D,q,A+K,x,x+b,b):x-(R+D/2)+K/2,G="start"===u?I-L-j:"center"===u?I-(L+O/2)+J/2:"end"===u?I-X+z+J:r(L,X,O,j,z+J,I,I+H,H);var N=k.scrollLeft,P=k.scrollTop;x+=P-(F=Math.max(0,Math.min(P+F,k.scrollHeight-D+K))),I+=N-(G=Math.max(0,Math.min(N+G,k.scrollWidth-O+J)));}C.push({el:k,top:F,left:G});}return C}

  function isOptionsObject(options) {
    return options === Object(options) && Object.keys(options).length !== 0;
  }

  function defaultBehavior(actions, behavior) {
    if (behavior === void 0) {
      behavior = 'auto';
    }

    var canSmoothScroll = ('scrollBehavior' in document.body.style);
    actions.forEach(function (_ref) {
      var el = _ref.el,
          top = _ref.top,
          left = _ref.left;

      if (el.scroll && canSmoothScroll) {
        el.scroll({
          top: top,
          left: left,
          behavior: behavior
        });
      } else {
        el.scrollTop = top;
        el.scrollLeft = left;
      }
    });
  }

  function getOptions(options) {
    if (options === false) {
      return {
        block: 'end',
        inline: 'nearest'
      };
    }

    if (isOptionsObject(options)) {
      return options;
    }

    return {
      block: 'start',
      inline: 'nearest'
    };
  }

  function scrollIntoView(target, options) {
    var targetIsDetached = !target.ownerDocument.documentElement.contains(target);

    if (isOptionsObject(options) && typeof options.behavior === 'function') {
      return options.behavior(targetIsDetached ? [] : compute(target, options));
    }

    if (targetIsDetached) {
      return;
    }

    var computeOptions = getOptions(options);
    return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);
  }

  function toArray$6(candidate) {
    if (candidate === undefined || candidate === false) return [];
    return Array.isArray(candidate) ? candidate : [candidate];
  }
  function getFieldId(namePath, formName) {
    if (!namePath.length) return undefined;
    var mergedId = namePath.join('_');
    return formName ? "".concat(formName, "_").concat(mergedId) : mergedId;
  }

  function toNamePathStr(name) {
    var namePath = toArray$6(name);
    return namePath.join('_');
  }

  function useForm$1(form) {
    var _useRcForm = useForm(),
        _useRcForm2 = _slicedToArray$1(_useRcForm, 1),
        rcForm = _useRcForm2[0];

    var itemsRef = React.useRef({});
    var wrapForm = React.useMemo(function () {
      return form !== null && form !== void 0 ? form : _extends$1(_extends$1({}, rcForm), {
        __INTERNAL__: {
          itemRef: function itemRef(name) {
            return function (node) {
              var namePathStr = toNamePathStr(name);

              if (node) {
                itemsRef.current[namePathStr] = node;
              } else {
                delete itemsRef.current[namePathStr];
              }
            };
          }
        },
        scrollToField: function scrollToField(name) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var namePath = toArray$6(name);
          var fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);
          var node = fieldId ? document.getElementById(fieldId) : null;

          if (node) {
            scrollIntoView(node, _extends$1({
              scrollMode: 'if-needed',
              block: 'nearest'
            }, options));
          }
        },
        getFieldInstance: function getFieldInstance(name) {
          var namePathStr = toNamePathStr(name);
          return itemsRef.current[namePathStr];
        }
      });
    }, [form, rcForm]);
    return [wrapForm];
  }

  var __rest$f = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var InternalForm$1 = function InternalForm(props, ref) {
    var _classNames;

    var contextSize = React.useContext(SizeContext);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction,
        contextForm = _React$useContext.form;

    var customizePrefixCls = props.prefixCls,
        _props$className = props.className,
        className = _props$className === void 0 ? '' : _props$className,
        _props$size = props.size,
        size = _props$size === void 0 ? contextSize : _props$size,
        form = props.form,
        colon = props.colon,
        labelAlign = props.labelAlign,
        labelCol = props.labelCol,
        wrapperCol = props.wrapperCol,
        hideRequiredMark = props.hideRequiredMark,
        _props$layout = props.layout,
        layout = _props$layout === void 0 ? 'horizontal' : _props$layout,
        scrollToFirstError = props.scrollToFirstError,
        requiredMark = props.requiredMark,
        onFinishFailed = props.onFinishFailed,
        name = props.name,
        restFormProps = __rest$f(props, ["prefixCls", "className", "size", "form", "colon", "labelAlign", "labelCol", "wrapperCol", "hideRequiredMark", "layout", "scrollToFirstError", "requiredMark", "onFinishFailed", "name"]);

    var mergedRequiredMark = React.useMemo(function () {
      if (requiredMark !== undefined) {
        return requiredMark;
      }

      if (contextForm && contextForm.requiredMark !== undefined) {
        return contextForm.requiredMark;
      }

      if (hideRequiredMark) {
        return false;
      }

      return true;
    }, [hideRequiredMark, requiredMark, contextForm]);
    var prefixCls = getPrefixCls('form', customizePrefixCls);
    var formClassName = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(layout), true), _defineProperty$1(_classNames, "".concat(prefixCls, "-hide-required-mark"), mergedRequiredMark === false), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(size), size), _classNames), className);

    var _useForm = useForm$1(form),
        _useForm2 = _slicedToArray$1(_useForm, 1),
        wrapForm = _useForm2[0];

    var __INTERNAL__ = wrapForm.__INTERNAL__;
    __INTERNAL__.name = name;
    var formContextValue = React.useMemo(function () {
      return {
        name: name,
        labelAlign: labelAlign,
        labelCol: labelCol,
        wrapperCol: wrapperCol,
        vertical: layout === 'vertical',
        colon: colon,
        requiredMark: mergedRequiredMark,
        itemRef: __INTERNAL__.itemRef
      };
    }, [name, labelAlign, labelCol, wrapperCol, layout, colon, mergedRequiredMark]);
    React.useImperativeHandle(ref, function () {
      return wrapForm;
    });

    var onInternalFinishFailed = function onInternalFinishFailed(errorInfo) {
      onFinishFailed === null || onFinishFailed === void 0 ? void 0 : onFinishFailed(errorInfo);
      var defaultScrollToFirstError = {
        block: 'nearest'
      };

      if (scrollToFirstError && errorInfo.errorFields.length) {
        if (_typeof$1(scrollToFirstError) === 'object') {
          defaultScrollToFirstError = scrollToFirstError;
        }

        wrapForm.scrollToField(errorInfo.errorFields[0].name, defaultScrollToFirstError);
      }
    };

    return /*#__PURE__*/React.createElement(SizeContextProvider, {
      size: size
    }, /*#__PURE__*/React.createElement(FormContext$1.Provider, {
      value: formContextValue
    }, /*#__PURE__*/React.createElement(RefForm, _extends$1({
      id: name
    }, restFormProps, {
      name: name,
      onFinishFailed: onInternalFinishFailed,
      form: wrapForm,
      className: formClassName
    }))));
  };

  var Form$1 = /*#__PURE__*/React.forwardRef(InternalForm$1);

  // This icon file is generated automatically.
  var QuestionCircleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z" } }, { "tag": "path", "attrs": { "d": "M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z" } }] }, "name": "question-circle", "theme": "outlined" };

  var QuestionCircleOutlined$1 = function QuestionCircleOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: QuestionCircleOutlined
    }));
  };

  QuestionCircleOutlined$1.displayName = 'QuestionCircleOutlined';
  var QuestionCircleOutlined$2 = /*#__PURE__*/React.forwardRef(QuestionCircleOutlined$1);

  var __rest$g = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  function toTooltipProps(tooltip) {
    if (!tooltip) {
      return null;
    }

    if (_typeof$1(tooltip) === 'object' && ! /*#__PURE__*/React.isValidElement(tooltip)) {
      return tooltip;
    }

    return {
      title: tooltip
    };
  }

  var FormItemLabel = function FormItemLabel(_ref) {
    var prefixCls = _ref.prefixCls,
        label = _ref.label,
        htmlFor = _ref.htmlFor,
        labelCol = _ref.labelCol,
        labelAlign = _ref.labelAlign,
        colon = _ref.colon,
        required = _ref.required,
        requiredMark = _ref.requiredMark,
        tooltip = _ref.tooltip;

    var _useLocaleReceiver = useLocaleReceiver('Form'),
        _useLocaleReceiver2 = _slicedToArray$1(_useLocaleReceiver, 1),
        formLocale = _useLocaleReceiver2[0];

    if (!label) return null;
    return /*#__PURE__*/React.createElement(FormContext$1.Consumer, {
      key: "label"
    }, function (_ref2) {
      var _classNames;

      var vertical = _ref2.vertical,
          contextLabelAlign = _ref2.labelAlign,
          contextLabelCol = _ref2.labelCol,
          contextColon = _ref2.colon;

      var _a;

      var mergedLabelCol = labelCol || contextLabelCol || {};
      var mergedLabelAlign = labelAlign || contextLabelAlign;
      var labelClsBasic = "".concat(prefixCls, "-item-label");
      var labelColClassName = classnames(labelClsBasic, mergedLabelAlign === 'left' && "".concat(labelClsBasic, "-left"), mergedLabelCol.className);
      var labelChildren = label; // Keep label is original where there should have no colon

      var computedColon = colon === true || contextColon !== false && colon !== false;
      var haveColon = computedColon && !vertical; // Remove duplicated user input colon

      if (haveColon && typeof label === 'string' && label.trim() !== '') {
        labelChildren = label.replace(/[:|：]\s*$/, '');
      } // Tooltip


      var tooltipProps = toTooltipProps(tooltip);

      if (tooltipProps) {
        var _tooltipProps$icon = tooltipProps.icon,
            icon = _tooltipProps$icon === void 0 ? /*#__PURE__*/React.createElement(QuestionCircleOutlined$2, null) : _tooltipProps$icon,
            restTooltipProps = __rest$g(tooltipProps, ["icon"]);

        var tooltipNode = /*#__PURE__*/React.createElement(Tooltip$2, restTooltipProps, /*#__PURE__*/React.cloneElement(icon, {
          className: "".concat(prefixCls, "-item-tooltip"),
          title: ''
        }));
        labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, tooltipNode);
      } // Add required mark if optional


      if (requiredMark === 'optional' && !required) {
        labelChildren = /*#__PURE__*/React.createElement(React.Fragment, null, labelChildren, /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-item-optional"),
          title: ""
        }, (formLocale === null || formLocale === void 0 ? void 0 : formLocale.optional) || ((_a = localeValues.Form) === null || _a === void 0 ? void 0 : _a.optional)));
      }

      var labelClassName = classnames((_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-item-required"), required), _defineProperty$1(_classNames, "".concat(prefixCls, "-item-required-mark-optional"), requiredMark === 'optional'), _defineProperty$1(_classNames, "".concat(prefixCls, "-item-no-colon"), !computedColon), _classNames));
      return /*#__PURE__*/React.createElement(Col, _extends$1({}, mergedLabelCol, {
        className: labelColClassName
      }), /*#__PURE__*/React.createElement("label", {
        htmlFor: htmlFor,
        className: labelClassName,
        title: typeof label === 'string' ? label : ''
      }, labelChildren));
    });
  };

  var EMPTY_LIST = [];

  function toErrorEntity(error, errorStatus, prefix) {
    var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    return {
      key: typeof error === 'string' ? error : "".concat(prefix, "-").concat(index),
      error: error,
      errorStatus: errorStatus
    };
  }

  function ErrorList(_ref) {
    var help = _ref.help,
        helpStatus = _ref.helpStatus,
        _ref$errors = _ref.errors,
        errors = _ref$errors === void 0 ? EMPTY_LIST : _ref$errors,
        _ref$warnings = _ref.warnings,
        warnings = _ref$warnings === void 0 ? EMPTY_LIST : _ref$warnings,
        rootClassName = _ref.className;

    var _React$useContext = React.useContext(FormItemPrefixContext),
        prefixCls = _React$useContext.prefixCls;

    var _React$useContext2 = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext2.getPrefixCls;

    var baseClassName = "".concat(prefixCls, "-item-explain");
    var rootPrefixCls = getPrefixCls();
    var fullKeyList = React.useMemo(function () {
      if (help !== undefined && help !== null) {
        return [toErrorEntity(help, helpStatus, 'help')];
      }

      return [].concat(_toConsumableArray$1(errors.map(function (error, index) {
        return toErrorEntity(error, 'error', 'error', index);
      })), _toConsumableArray$1(warnings.map(function (warning, index) {
        return toErrorEntity(warning, 'warning', 'warning', index);
      })));
    }, [help, helpStatus, errors, warnings]);
    return /*#__PURE__*/React.createElement(CSSMotion, _extends$1({}, collapseMotion, {
      motionName: "".concat(rootPrefixCls, "-show-help"),
      motionAppear: false,
      motionEnter: false,
      visible: !!fullKeyList.length,
      onLeaveStart: function onLeaveStart(node) {
        // Force disable css override style in index.less configured
        node.style.height = 'auto';
        return {
          height: node.offsetHeight
        };
      }
    }), function (holderProps) {
      var holderClassName = holderProps.className,
          holderStyle = holderProps.style;
      return /*#__PURE__*/React.createElement("div", {
        className: classnames(baseClassName, holderClassName, rootClassName),
        style: holderStyle
      }, /*#__PURE__*/React.createElement(CSSMotionList, _extends$1({
        keys: fullKeyList
      }, collapseMotion, {
        motionName: "".concat(rootPrefixCls, "-show-help-item"),
        component: false
      }), function (itemProps) {
        var key = itemProps.key,
            error = itemProps.error,
            errorStatus = itemProps.errorStatus,
            itemClassName = itemProps.className,
            itemStyle = itemProps.style;
        return /*#__PURE__*/React.createElement("div", {
          key: key,
          role: "alert",
          className: classnames(itemClassName, _defineProperty$1({}, "".concat(baseClassName, "-").concat(errorStatus), errorStatus)),
          style: itemStyle
        }, error);
      }));
    });
  }

  var iconMap = {
    success: CheckCircleFilled$2,
    warning: ExclamationCircleFilled$2,
    error: CloseCircleFilled$2,
    validating: LoadingOutlined$2
  };

  var FormItemInput = function FormItemInput(props) {
    var prefixCls = props.prefixCls,
        status = props.status,
        wrapperCol = props.wrapperCol,
        children = props.children,
        errors = props.errors,
        warnings = props.warnings,
        hasFeedback = props.hasFeedback,
        formItemRender = props._internalItemRender,
        validateStatus = props.validateStatus,
        extra = props.extra,
        help = props.help;
    var baseClassName = "".concat(prefixCls, "-item");
    var formContext = React.useContext(FormContext$1);
    var mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};
    var className = classnames("".concat(baseClassName, "-control"), mergedWrapperCol.className); // Should provides additional icon if `hasFeedback`

    var IconNode = validateStatus && iconMap[validateStatus];
    var icon = hasFeedback && IconNode ? /*#__PURE__*/React.createElement("span", {
      className: "".concat(baseClassName, "-children-icon")
    }, /*#__PURE__*/React.createElement(IconNode, null)) : null; // Pass to sub FormItem should not with col info

    var subFormContext = _extends$1({}, formContext);

    delete subFormContext.labelCol;
    delete subFormContext.wrapperCol;
    var inputDom = /*#__PURE__*/React.createElement("div", {
      className: "".concat(baseClassName, "-control-input")
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(baseClassName, "-control-input-content")
    }, children), icon);
    var errorListDom = /*#__PURE__*/React.createElement(FormItemPrefixContext.Provider, {
      value: {
        prefixCls: prefixCls,
        status: status
      }
    }, /*#__PURE__*/React.createElement(ErrorList, {
      errors: errors,
      warnings: warnings,
      help: help,
      helpStatus: status,
      className: "".concat(baseClassName, "-explain-connected")
    })); // If extra = 0, && will goes wrong
    // 0&&error -> 0

    var extraDom = extra ? /*#__PURE__*/React.createElement("div", {
      className: "".concat(baseClassName, "-extra")
    }, extra) : null;
    var dom = formItemRender && formItemRender.mark === 'pro_table_render' && formItemRender.render ? formItemRender.render(props, {
      input: inputDom,
      errorList: errorListDom,
      extra: extraDom
    }) : /*#__PURE__*/React.createElement(React.Fragment, null, inputDom, errorListDom, extraDom);
    return /*#__PURE__*/React.createElement(FormContext$1.Provider, {
      value: subFormContext
    }, /*#__PURE__*/React.createElement(Col, _extends$1({}, mergedWrapperCol, {
      className: className
    }), dom));
  };

  function useFrameState(defaultValue) {
    var _React$useState = React.useState(defaultValue),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        value = _React$useState2[0],
        setValue = _React$useState2[1];

    var frameRef = React.useRef(null);
    var batchRef = React.useRef([]);
    var destroyRef = React.useRef(false);
    React.useEffect(function () {
      return function () {
        destroyRef.current = true;
        wrapperRaf.cancel(frameRef.current);
      };
    }, []);

    function setFrameValue(updater) {
      if (destroyRef.current) {
        return;
      }

      if (frameRef.current === null) {
        batchRef.current = [];
        frameRef.current = wrapperRaf(function () {
          frameRef.current = null;
          setValue(function (prevValue) {
            var current = prevValue;
            batchRef.current.forEach(function (func) {
              current = func(current);
            });
            return current;
          });
        });
      }

      batchRef.current.push(updater);
    }

    return [value, setFrameValue];
  }

  function useDebounce(value) {
    var _React$useState = React.useState(value),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        cacheValue = _React$useState2[0],
        setCacheValue = _React$useState2[1];

    React.useEffect(function () {
      var timeout = setTimeout(function () {
        setCacheValue(value);
      }, value.length ? 0 : 10);
      return function () {
        clearTimeout(timeout);
      };
    }, [value]);
    return cacheValue;
  }

  function useItemRef() {
    var _React$useContext = React.useContext(FormContext$1),
        itemRef = _React$useContext.itemRef;

    var cacheRef = React.useRef({});

    function getRef(name, children) {
      var childrenRef = children && _typeof$1(children) === 'object' && children.ref;
      var nameStr = name.join('_');

      if (cacheRef.current.name !== nameStr || cacheRef.current.originRef !== childrenRef) {
        cacheRef.current.name = nameStr;
        cacheRef.current.originRef = childrenRef;
        cacheRef.current.ref = composeRef(itemRef(name), childrenRef);
      }

      return cacheRef.current.ref;
    }

    return getRef;
  }

  var __rest$h = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var NAME_SPLIT = '__SPLIT__';
  var ValidateStatuses = tuple('success', 'warning', 'error', 'validating', '');
  var MemoInput = /*#__PURE__*/React.memo(function (_ref) {
    var children = _ref.children;
    return children;
  }, function (prev, next) {
    return prev.value === next.value && prev.update === next.update;
  });

  function hasValidName(name) {
    if (name === null) {
      devWarning(false, 'Form.Item', '`null` is passed as `name` property');
    }

    return !(name === undefined || name === null);
  }

  function genEmptyMeta() {
    return {
      errors: [],
      warnings: [],
      touched: false,
      validating: false,
      name: []
    };
  }

  function FormItem(props) {
    var name = props.name,
        fieldKey = props.fieldKey,
        noStyle = props.noStyle,
        dependencies = props.dependencies,
        customizePrefixCls = props.prefixCls,
        style = props.style,
        className = props.className,
        shouldUpdate = props.shouldUpdate,
        hasFeedback = props.hasFeedback,
        help = props.help,
        rules = props.rules,
        validateStatus = props.validateStatus,
        children = props.children,
        required = props.required,
        label = props.label,
        messageVariables = props.messageVariables,
        _props$trigger = props.trigger,
        trigger = _props$trigger === void 0 ? 'onChange' : _props$trigger,
        validateTrigger = props.validateTrigger,
        hidden = props.hidden,
        restProps = __rest$h(props, ["name", "fieldKey", "noStyle", "dependencies", "prefixCls", "style", "className", "shouldUpdate", "hasFeedback", "help", "rules", "validateStatus", "children", "required", "label", "messageVariables", "trigger", "validateTrigger", "hidden"]);

    var _useContext = React.useContext(ConfigContext),
        getPrefixCls = _useContext.getPrefixCls;

    var _useContext2 = React.useContext(FormContext$1),
        formName = _useContext2.name,
        requiredMark = _useContext2.requiredMark;

    var isRenderProps = typeof children === 'function';
    var notifyParentMetaChange = React.useContext(NoStyleItemContext);

    var _useContext3 = React.useContext(Context),
        contextValidateTrigger = _useContext3.validateTrigger;

    var mergedValidateTrigger = validateTrigger !== undefined ? validateTrigger : contextValidateTrigger;
    var hasName = hasValidName(name);
    var prefixCls = getPrefixCls('form', customizePrefixCls); // ======================== Errors ========================
    // >>>>> Collect sub field errors

    var _useFrameState = useFrameState({}),
        _useFrameState2 = _slicedToArray$1(_useFrameState, 2),
        subFieldErrors = _useFrameState2[0],
        setSubFieldErrors = _useFrameState2[1]; // >>>>> Current field errors


    var _React$useState = React.useState(function () {
      return genEmptyMeta();
    }),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        meta = _React$useState2[0],
        setMeta = _React$useState2[1];

    var onMetaChange = function onMetaChange(nextMeta) {
      // Destroy will reset all the meta
      setMeta(nextMeta.destroy ? genEmptyMeta() : nextMeta); // Bump to parent since noStyle

      if (noStyle && notifyParentMetaChange) {
        var namePath = nextMeta.name;

        if (fieldKey !== undefined) {
          namePath = Array.isArray(fieldKey) ? fieldKey : [fieldKey];
        }

        notifyParentMetaChange(nextMeta, namePath);
      }
    }; // >>>>> Collect noStyle Field error to the top FormItem


    var onSubItemMetaChange = function onSubItemMetaChange(subMeta, uniqueKeys) {
      // Only `noStyle` sub item will trigger
      setSubFieldErrors(function (prevSubFieldErrors) {
        var clone = _extends$1({}, prevSubFieldErrors); // name: ['user', 1] + key: [4] = ['user', 4]


        var mergedNamePath = [].concat(_toConsumableArray$1(subMeta.name.slice(0, -1)), _toConsumableArray$1(uniqueKeys));
        var mergedNameKey = mergedNamePath.join(NAME_SPLIT);

        if (subMeta.destroy) {
          // Remove
          delete clone[mergedNameKey];
        } else {
          // Update
          clone[mergedNameKey] = subMeta;
        }

        return clone;
      });
    }; // >>>>> Get merged errors


    var _React$useMemo = React.useMemo(function () {
      var errorList = _toConsumableArray$1(meta.errors);

      var warningList = _toConsumableArray$1(meta.warnings);

      Object.values(subFieldErrors).forEach(function (subFieldError) {
        errorList.push.apply(errorList, _toConsumableArray$1(subFieldError.errors || []));
        warningList.push.apply(warningList, _toConsumableArray$1(subFieldError.warnings || []));
      });
      return [errorList, warningList];
    }, [subFieldErrors, meta.errors, meta.warnings]),
        _React$useMemo2 = _slicedToArray$1(_React$useMemo, 2),
        mergedErrors = _React$useMemo2[0],
        mergedWarnings = _React$useMemo2[1];

    var debounceErrors = useDebounce(mergedErrors);
    var debounceWarnings = useDebounce(mergedWarnings); // ===================== Children Ref =====================

    var getItemRef = useItemRef(); // ======================== Render ========================

    function renderLayout(baseChildren, fieldId, isRequired) {
      var _itemClassName;

      if (noStyle && !hidden) {
        return baseChildren;
      } // ======================== Status ========================


      var mergedValidateStatus = '';

      if (validateStatus !== undefined) {
        mergedValidateStatus = validateStatus;
      } else if (meta === null || meta === void 0 ? void 0 : meta.validating) {
        mergedValidateStatus = 'validating';
      } else if (debounceErrors.length) {
        mergedValidateStatus = 'error';
      } else if (debounceWarnings.length) {
        mergedValidateStatus = 'warning';
      } else if (meta === null || meta === void 0 ? void 0 : meta.touched) {
        mergedValidateStatus = 'success';
      }

      var itemClassName = (_itemClassName = {}, _defineProperty$1(_itemClassName, "".concat(prefixCls, "-item"), true), _defineProperty$1(_itemClassName, "".concat(prefixCls, "-item-with-help"), help || debounceErrors.length || debounceWarnings.length), _defineProperty$1(_itemClassName, "".concat(className), !!className), _defineProperty$1(_itemClassName, "".concat(prefixCls, "-item-has-feedback"), mergedValidateStatus && hasFeedback), _defineProperty$1(_itemClassName, "".concat(prefixCls, "-item-has-success"), mergedValidateStatus === 'success'), _defineProperty$1(_itemClassName, "".concat(prefixCls, "-item-has-warning"), mergedValidateStatus === 'warning'), _defineProperty$1(_itemClassName, "".concat(prefixCls, "-item-has-error"), mergedValidateStatus === 'error'), _defineProperty$1(_itemClassName, "".concat(prefixCls, "-item-is-validating"), mergedValidateStatus === 'validating'), _defineProperty$1(_itemClassName, "".concat(prefixCls, "-item-hidden"), hidden), _itemClassName); // ======================= Children =======================

      return /*#__PURE__*/React.createElement(Row, _extends$1({
        className: classnames(itemClassName),
        style: style,
        key: "row"
      }, omit(restProps, ['colon', 'extra', 'getValueFromEvent', 'getValueProps', 'htmlFor', 'id', 'initialValue', 'isListField', 'labelAlign', 'labelCol', 'normalize', 'preserve', 'tooltip', 'validateFirst', 'valuePropName', 'wrapperCol', '_internalItemRender'])), /*#__PURE__*/React.createElement(FormItemLabel, _extends$1({
        htmlFor: fieldId,
        required: isRequired,
        requiredMark: requiredMark
      }, props, {
        prefixCls: prefixCls
      })), /*#__PURE__*/React.createElement(FormItemInput, _extends$1({}, props, meta, {
        errors: debounceErrors,
        warnings: debounceWarnings,
        prefixCls: prefixCls,
        status: mergedValidateStatus,
        validateStatus: mergedValidateStatus,
        help: help
      }), /*#__PURE__*/React.createElement(NoStyleItemContext.Provider, {
        value: onSubItemMetaChange
      }, baseChildren)));
    }

    if (!hasName && !isRenderProps && !dependencies) {
      return renderLayout(children);
    }

    var variables = {};

    if (typeof label === 'string') {
      variables.label = label;
    } else if (name) {
      variables.label = String(name);
    }

    if (messageVariables) {
      variables = _extends$1(_extends$1({}, variables), messageVariables);
    } // >>>>> With Field


    return /*#__PURE__*/React.createElement(WrapperField, _extends$1({}, props, {
      messageVariables: variables,
      trigger: trigger,
      validateTrigger: mergedValidateTrigger,
      onMetaChange: onMetaChange
    }), function (control, renderMeta, context) {
      var mergedName = toArray$6(name).length && renderMeta ? renderMeta.name : [];
      var fieldId = getFieldId(mergedName, formName);
      var isRequired = required !== undefined ? required : !!(rules && rules.some(function (rule) {
        if (rule && _typeof$1(rule) === 'object' && rule.required && !rule.warningOnly) {
          return true;
        }

        if (typeof rule === 'function') {
          var ruleEntity = rule(context);
          return ruleEntity && ruleEntity.required && !ruleEntity.warningOnly;
        }

        return false;
      })); // ======================= Children =======================

      var mergedControl = _extends$1({}, control);

      var childNode = null;
      devWarning(!(shouldUpdate && dependencies), 'Form.Item', "`shouldUpdate` and `dependencies` shouldn't be used together. See https://ant.design/components/form/#dependencies.");

      if (Array.isArray(children) && hasName) {
        devWarning(false, 'Form.Item', '`children` is array of render props cannot have `name`.');
        childNode = children;
      } else if (isRenderProps && (!(shouldUpdate || dependencies) || hasName)) {
        devWarning(!!(shouldUpdate || dependencies), 'Form.Item', '`children` of render props only work with `shouldUpdate` or `dependencies`.');
        devWarning(!hasName, 'Form.Item', "Do not use `name` with `children` of render props since it's not a field.");
      } else if (dependencies && !isRenderProps && !hasName) {
        devWarning(false, 'Form.Item', 'Must set `name` or use render props when `dependencies` is set.');
      } else if (isValidElement(children)) {
        devWarning(children.props.defaultValue === undefined, 'Form.Item', '`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.');

        var childProps = _extends$1(_extends$1({}, children.props), mergedControl);

        if (!childProps.id) {
          childProps.id = fieldId;
        }

        if (supportRef(children)) {
          childProps.ref = getItemRef(mergedName, children);
        } // We should keep user origin event handler


        var triggers = new Set([].concat(_toConsumableArray$1(toArray$6(trigger)), _toConsumableArray$1(toArray$6(mergedValidateTrigger))));
        triggers.forEach(function (eventName) {
          childProps[eventName] = function () {
            var _a2, _c2;

            var _a, _b, _c;

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            (_a = mergedControl[eventName]) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [mergedControl].concat(args));
            (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : (_c2 = _c).call.apply(_c2, [_b].concat(args));
          };
        });
        childNode = /*#__PURE__*/React.createElement(MemoInput, {
          value: mergedControl[props.valuePropName || 'value'],
          update: children
        }, cloneElement(children, childProps));
      } else if (isRenderProps && (shouldUpdate || dependencies) && !hasName) {
        childNode = children(context);
      } else {
        devWarning(!mergedName.length, 'Form.Item', '`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.');
        childNode = children;
      }

      return renderLayout(childNode, fieldId, isRequired);
    });
  }

  var __rest$i = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var FormList = function FormList(_a) {
    var customizePrefixCls = _a.prefixCls,
        children = _a.children,
        props = __rest$i(_a, ["prefixCls", "children"]);

    devWarning(!!props.name, 'Form.List', 'Miss `name` prop.');

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls;

    var prefixCls = getPrefixCls('form', customizePrefixCls);
    return /*#__PURE__*/React.createElement(List, props, function (fields, operation, meta) {
      return /*#__PURE__*/React.createElement(FormItemPrefixContext.Provider, {
        value: {
          prefixCls: prefixCls,
          status: 'error'
        }
      }, children(fields.map(function (field) {
        return _extends$1(_extends$1({}, field), {
          fieldKey: field.key
        });
      }), operation, {
        errors: meta.errors,
        warnings: meta.warnings
      }));
    });
  };

  var Form$2 = Form$1;
  Form$2.Item = FormItem;
  Form$2.List = FormList;
  Form$2.ErrorList = ErrorList;
  Form$2.useForm = useForm$1;
  Form$2.Provider = FormProvider$1;

  Form$2.create = function () {
    devWarning(false, 'Form', 'antd v4 removed `Form.create`. Please remove or use `@ant-design/compatible` instead.');
  };

  function getInputClassName(prefixCls, bordered, size, disabled, direction) {
    var _classNames;

    return classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-sm"), size === 'small'), _defineProperty$1(_classNames, "".concat(prefixCls, "-lg"), size === 'large'), _defineProperty$1(_classNames, "".concat(prefixCls, "-disabled"), disabled), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty$1(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames));
  }
  function hasPrefixSuffix(props) {
    return !!(props.prefix || props.suffix || props.allowClear);
  }

  var ClearableInputType = tuple('text', 'input');

  function hasAddon(props) {
    return !!(props.addonBefore || props.addonAfter);
  }

  var ClearableLabeledInput = /*#__PURE__*/function (_React$Component) {
    _inherits(ClearableLabeledInput, _React$Component);

    var _super = _createSuper(ClearableLabeledInput);

    function ClearableLabeledInput() {
      var _this;

      _classCallCheck(this, ClearableLabeledInput);

      _this = _super.apply(this, arguments);
      /** @private Do Not use out of this class. We do not promise this is always keep. */

      _this.containerRef = /*#__PURE__*/React.createRef();

      _this.onInputMouseUp = function (e) {
        var _a;

        if ((_a = _this.containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target)) {
          var triggerFocus = _this.props.triggerFocus;
          triggerFocus === null || triggerFocus === void 0 ? void 0 : triggerFocus();
        }
      };

      return _this;
    }

    _createClass(ClearableLabeledInput, [{
      key: "renderClearIcon",
      value: function renderClearIcon(prefixCls) {
        var _classNames;

        var _this$props = this.props,
            allowClear = _this$props.allowClear,
            value = _this$props.value,
            disabled = _this$props.disabled,
            readOnly = _this$props.readOnly,
            handleReset = _this$props.handleReset,
            suffix = _this$props.suffix;

        if (!allowClear) {
          return null;
        }

        var needClear = !disabled && !readOnly && value;
        var className = "".concat(prefixCls, "-clear-icon");
        return /*#__PURE__*/React.createElement(CloseCircleFilled$2, {
          onClick: handleReset // Do not trigger onBlur when clear input
          // https://github.com/ant-design/ant-design/issues/31200
          ,
          onMouseDown: function onMouseDown(e) {
            return e.preventDefault();
          },
          className: classnames((_classNames = {}, _defineProperty$1(_classNames, "".concat(className, "-hidden"), !needClear), _defineProperty$1(_classNames, "".concat(className, "-has-suffix"), !!suffix), _classNames), className),
          role: "button"
        });
      }
    }, {
      key: "renderSuffix",
      value: function renderSuffix(prefixCls) {
        var _this$props2 = this.props,
            suffix = _this$props2.suffix,
            allowClear = _this$props2.allowClear;

        if (suffix || allowClear) {
          return /*#__PURE__*/React.createElement("span", {
            className: "".concat(prefixCls, "-suffix")
          }, this.renderClearIcon(prefixCls), suffix);
        }

        return null;
      }
    }, {
      key: "renderLabeledIcon",
      value: function renderLabeledIcon(prefixCls, element) {
        var _classNames2;

        var _this$props3 = this.props,
            focused = _this$props3.focused,
            value = _this$props3.value,
            prefix = _this$props3.prefix,
            className = _this$props3.className,
            size = _this$props3.size,
            suffix = _this$props3.suffix,
            disabled = _this$props3.disabled,
            allowClear = _this$props3.allowClear,
            direction = _this$props3.direction,
            style = _this$props3.style,
            readOnly = _this$props3.readOnly,
            bordered = _this$props3.bordered;
        var suffixNode = this.renderSuffix(prefixCls);

        if (!hasPrefixSuffix(this.props)) {
          return cloneElement(element, {
            value: value
          });
        }

        var prefixNode = prefix ? /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-prefix")
        }, prefix) : null;
        var affixWrapperCls = classnames("".concat(prefixCls, "-affix-wrapper"), (_classNames2 = {}, _defineProperty$1(_classNames2, "".concat(prefixCls, "-affix-wrapper-focused"), focused), _defineProperty$1(_classNames2, "".concat(prefixCls, "-affix-wrapper-disabled"), disabled), _defineProperty$1(_classNames2, "".concat(prefixCls, "-affix-wrapper-sm"), size === 'small'), _defineProperty$1(_classNames2, "".concat(prefixCls, "-affix-wrapper-lg"), size === 'large'), _defineProperty$1(_classNames2, "".concat(prefixCls, "-affix-wrapper-input-with-clear-btn"), suffix && allowClear && value), _defineProperty$1(_classNames2, "".concat(prefixCls, "-affix-wrapper-rtl"), direction === 'rtl'), _defineProperty$1(_classNames2, "".concat(prefixCls, "-affix-wrapper-readonly"), readOnly), _defineProperty$1(_classNames2, "".concat(prefixCls, "-affix-wrapper-borderless"), !bordered), _defineProperty$1(_classNames2, "".concat(className), !hasAddon(this.props) && className), _classNames2));
        return /*#__PURE__*/React.createElement("span", {
          ref: this.containerRef,
          className: affixWrapperCls,
          style: style,
          onMouseUp: this.onInputMouseUp
        }, prefixNode, cloneElement(element, {
          style: null,
          value: value,
          className: getInputClassName(prefixCls, bordered, size, disabled)
        }), suffixNode);
      }
    }, {
      key: "renderInputWithLabel",
      value: function renderInputWithLabel(prefixCls, labeledElement) {
        var _classNames4;

        var _this$props4 = this.props,
            addonBefore = _this$props4.addonBefore,
            addonAfter = _this$props4.addonAfter,
            style = _this$props4.style,
            size = _this$props4.size,
            className = _this$props4.className,
            direction = _this$props4.direction; // Not wrap when there is not addons

        if (!hasAddon(this.props)) {
          return labeledElement;
        }

        var wrapperClassName = "".concat(prefixCls, "-group");
        var addonClassName = "".concat(wrapperClassName, "-addon");
        var addonBeforeNode = addonBefore ? /*#__PURE__*/React.createElement("span", {
          className: addonClassName
        }, addonBefore) : null;
        var addonAfterNode = addonAfter ? /*#__PURE__*/React.createElement("span", {
          className: addonClassName
        }, addonAfter) : null;
        var mergedWrapperClassName = classnames("".concat(prefixCls, "-wrapper"), wrapperClassName, _defineProperty$1({}, "".concat(wrapperClassName, "-rtl"), direction === 'rtl'));
        var mergedGroupClassName = classnames("".concat(prefixCls, "-group-wrapper"), (_classNames4 = {}, _defineProperty$1(_classNames4, "".concat(prefixCls, "-group-wrapper-sm"), size === 'small'), _defineProperty$1(_classNames4, "".concat(prefixCls, "-group-wrapper-lg"), size === 'large'), _defineProperty$1(_classNames4, "".concat(prefixCls, "-group-wrapper-rtl"), direction === 'rtl'), _classNames4), className); // Need another wrapper for changing display:table to display:inline-block
        // and put style prop in wrapper

        return /*#__PURE__*/React.createElement("span", {
          className: mergedGroupClassName,
          style: style
        }, /*#__PURE__*/React.createElement("span", {
          className: mergedWrapperClassName
        }, addonBeforeNode, cloneElement(labeledElement, {
          style: null
        }), addonAfterNode));
      }
    }, {
      key: "renderTextAreaWithClearIcon",
      value: function renderTextAreaWithClearIcon(prefixCls, element) {
        var _classNames5;

        var _this$props5 = this.props,
            value = _this$props5.value,
            allowClear = _this$props5.allowClear,
            className = _this$props5.className,
            style = _this$props5.style,
            direction = _this$props5.direction,
            bordered = _this$props5.bordered;

        if (!allowClear) {
          return cloneElement(element, {
            value: value
          });
        }

        var affixWrapperCls = classnames("".concat(prefixCls, "-affix-wrapper"), "".concat(prefixCls, "-affix-wrapper-textarea-with-clear-btn"), (_classNames5 = {}, _defineProperty$1(_classNames5, "".concat(prefixCls, "-affix-wrapper-rtl"), direction === 'rtl'), _defineProperty$1(_classNames5, "".concat(prefixCls, "-affix-wrapper-borderless"), !bordered), _defineProperty$1(_classNames5, "".concat(className), !hasAddon(this.props) && className), _classNames5));
        return /*#__PURE__*/React.createElement("span", {
          className: affixWrapperCls,
          style: style
        }, cloneElement(element, {
          style: null,
          value: value
        }), this.renderClearIcon(prefixCls));
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props6 = this.props,
            prefixCls = _this$props6.prefixCls,
            inputType = _this$props6.inputType,
            element = _this$props6.element;

        if (inputType === ClearableInputType[0]) {
          return this.renderTextAreaWithClearIcon(prefixCls, element);
        }

        return this.renderInputWithLabel(prefixCls, this.renderLabeledIcon(prefixCls, element));
      }
    }]);

    return ClearableLabeledInput;
  }(React.Component);

  function fixControlledValue(value) {
    if (typeof value === 'undefined' || value === null) {
      return '';
    }

    return value;
  }
  function resolveOnChange(target, e, onChange, targetValue) {
    if (!onChange) {
      return;
    }

    var event = e;

    if (e.type === 'click') {
      // click clear icon
      event = Object.create(e); // Clone a new target for event.
      // Avoid the following usage, the setQuery method gets the original value.
      //
      // const [query, setQuery] = React.useState('');
      // <Input
      //   allowClear
      //   value={query}
      //   onChange={(e)=> {
      //     setQuery((prevStatus) => e.target.value);
      //   }}
      // />

      var currentTarget = target.cloneNode(true);
      event.target = currentTarget;
      event.currentTarget = currentTarget;
      currentTarget.value = '';
      onChange(event);
      return;
    } // Trigger by composition event, this means we need force change the input value


    if (targetValue !== undefined) {
      event = Object.create(e);
      event.target = target;
      event.currentTarget = target;
      target.value = targetValue;
      onChange(event);
      return;
    }

    onChange(event);
  }
  function triggerFocus(element, option) {
    if (!element) return;
    element.focus(option); // Selection content

    var _ref = option || {},
        cursor = _ref.cursor;

    if (cursor) {
      var len = element.value.length;

      switch (cursor) {
        case 'start':
          element.setSelectionRange(0, 0);
          break;

        case 'end':
          element.setSelectionRange(len, len);
          break;

        default:
          element.setSelectionRange(0, len);
      }
    }
  }

  var Input$1 = /*#__PURE__*/function (_React$Component) {
    _inherits(Input, _React$Component);

    var _super = _createSuper(Input);

    function Input(props) {
      var _this;

      _classCallCheck(this, Input);

      _this = _super.call(this, props);
      _this.direction = 'ltr';

      _this.focus = function (option) {
        triggerFocus(_this.input, option);
      };

      _this.saveClearableInput = function (input) {
        _this.clearableInput = input;
      };

      _this.saveInput = function (input) {
        _this.input = input;
      };

      _this.onFocus = function (e) {
        var onFocus = _this.props.onFocus;

        _this.setState({
          focused: true
        }, _this.clearPasswordValueAttribute);

        onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
      };

      _this.onBlur = function (e) {
        var onBlur = _this.props.onBlur;

        _this.setState({
          focused: false
        }, _this.clearPasswordValueAttribute);

        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
      };

      _this.handleReset = function (e) {
        _this.setValue('', function () {
          _this.focus();
        });

        resolveOnChange(_this.input, e, _this.props.onChange);
      };

      _this.renderInput = function (prefixCls, size, bordered) {
        var input = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
        var _this$props = _this.props,
            className = _this$props.className,
            addonBefore = _this$props.addonBefore,
            addonAfter = _this$props.addonAfter,
            customizeSize = _this$props.size,
            disabled = _this$props.disabled,
            htmlSize = _this$props.htmlSize; // Fix https://fb.me/react-unknown-prop

        var otherProps = omit(_this.props, ['prefixCls', 'onPressEnter', 'addonBefore', 'addonAfter', 'prefix', 'suffix', 'allowClear', // Input elements must be either controlled or uncontrolled,
        // specify either the value prop, or the defaultValue prop, but not both.
        'defaultValue', 'size', 'inputType', 'bordered', 'htmlSize']);
        return /*#__PURE__*/React.createElement("input", _extends$1({
          autoComplete: input.autoComplete
        }, otherProps, {
          onChange: _this.handleChange,
          onFocus: _this.onFocus,
          onBlur: _this.onBlur,
          onKeyDown: _this.handleKeyDown,
          className: classnames(getInputClassName(prefixCls, bordered, customizeSize || size, disabled, _this.direction), _defineProperty$1({}, className, className && !addonBefore && !addonAfter)),
          ref: _this.saveInput,
          size: htmlSize
        }));
      };

      _this.clearPasswordValueAttribute = function () {
        // https://github.com/ant-design/ant-design/issues/20541
        _this.removePasswordTimeout = setTimeout(function () {
          if (_this.input && _this.input.getAttribute('type') === 'password' && _this.input.hasAttribute('value')) {
            _this.input.removeAttribute('value');
          }
        });
      };

      _this.handleChange = function (e) {
        _this.setValue(e.target.value, _this.clearPasswordValueAttribute);

        resolveOnChange(_this.input, e, _this.props.onChange);
      };

      _this.handleKeyDown = function (e) {
        var _this$props2 = _this.props,
            onPressEnter = _this$props2.onPressEnter,
            onKeyDown = _this$props2.onKeyDown;

        if (onPressEnter && e.keyCode === 13) {
          onPressEnter(e);
        }

        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
      };

      _this.renderComponent = function (_ref2) {
        var getPrefixCls = _ref2.getPrefixCls,
            direction = _ref2.direction,
            input = _ref2.input;
        var _this$state = _this.state,
            value = _this$state.value,
            focused = _this$state.focused;
        var _this$props3 = _this.props,
            customizePrefixCls = _this$props3.prefixCls,
            _this$props3$bordered = _this$props3.bordered,
            bordered = _this$props3$bordered === void 0 ? true : _this$props3$bordered;
        var prefixCls = getPrefixCls('input', customizePrefixCls);
        _this.direction = direction;
        return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (size) {
          return /*#__PURE__*/React.createElement(ClearableLabeledInput, _extends$1({
            size: size
          }, _this.props, {
            prefixCls: prefixCls,
            inputType: "input",
            value: fixControlledValue(value),
            element: _this.renderInput(prefixCls, size, bordered, input),
            handleReset: _this.handleReset,
            ref: _this.saveClearableInput,
            direction: direction,
            focused: focused,
            triggerFocus: _this.focus,
            bordered: bordered
          }));
        });
      };

      var value = typeof props.value === 'undefined' ? props.defaultValue : props.value;
      _this.state = {
        value: value,
        focused: false,
        // eslint-disable-next-line react/no-unused-state
        prevValue: props.value
      };
      return _this;
    }

    _createClass(Input, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.clearPasswordValueAttribute();
      } // Since polyfill `getSnapshotBeforeUpdate` need work with `componentDidUpdate`.
      // We keep an empty function here.

    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {}
    }, {
      key: "getSnapshotBeforeUpdate",
      value: function getSnapshotBeforeUpdate(prevProps) {
        if (hasPrefixSuffix(prevProps) !== hasPrefixSuffix(this.props)) {
          devWarning(this.input !== document.activeElement, 'Input', "When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ");
        }

        return null;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        if (this.removePasswordTimeout) {
          clearTimeout(this.removePasswordTimeout);
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        this.input.blur();
      }
    }, {
      key: "setSelectionRange",
      value: function setSelectionRange(start, end, direction) {
        this.input.setSelectionRange(start, end, direction);
      }
    }, {
      key: "select",
      value: function select() {
        this.input.select();
      }
    }, {
      key: "setValue",
      value: function setValue(value, callback) {
        if (this.props.value === undefined) {
          this.setState({
            value: value
          }, callback);
        } else {
          callback === null || callback === void 0 ? void 0 : callback();
        }
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderComponent);
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, _ref3) {
        var prevValue = _ref3.prevValue;
        var newState = {
          prevValue: nextProps.value
        };

        if (nextProps.value !== undefined || prevValue !== nextProps.value) {
          newState.value = nextProps.value;
        }

        if (nextProps.disabled) {
          newState.focused = false;
        }

        return newState;
      }
    }]);

    return Input;
  }(React.Component);

  Input$1.defaultProps = {
    type: 'text'
  };

  var Group$2 = function Group(props) {
    return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {
      var _classNames;

      var getPrefixCls = _ref.getPrefixCls,
          direction = _ref.direction;
      var customizePrefixCls = props.prefixCls,
          _props$className = props.className,
          className = _props$className === void 0 ? '' : _props$className;
      var prefixCls = getPrefixCls('input-group', customizePrefixCls);
      var cls = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-lg"), props.size === 'large'), _defineProperty$1(_classNames, "".concat(prefixCls, "-sm"), props.size === 'small'), _defineProperty$1(_classNames, "".concat(prefixCls, "-compact"), props.compact), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
      return /*#__PURE__*/React.createElement("span", {
        className: cls,
        style: props.style,
        onMouseEnter: props.onMouseEnter,
        onMouseLeave: props.onMouseLeave,
        onFocus: props.onFocus,
        onBlur: props.onBlur
      }, props.children);
    });
  };

  var __rest$j = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var Search = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var customizePrefixCls = props.prefixCls,
        customizeInputPrefixCls = props.inputPrefixCls,
        className = props.className,
        customizeSize = props.size,
        suffix = props.suffix,
        _props$enterButton = props.enterButton,
        enterButton = _props$enterButton === void 0 ? false : _props$enterButton,
        addonAfter = props.addonAfter,
        loading = props.loading,
        disabled = props.disabled,
        customOnSearch = props.onSearch,
        customOnChange = props.onChange,
        restProps = __rest$j(props, ["prefixCls", "inputPrefixCls", "className", "size", "suffix", "enterButton", "addonAfter", "loading", "disabled", "onSearch", "onChange"]);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var contextSize = React.useContext(SizeContext);
    var size = customizeSize || contextSize;
    var inputRef = React.useRef(null);

    var onChange = function onChange(e) {
      if (e && e.target && e.type === 'click' && customOnSearch) {
        customOnSearch(e.target.value, e);
      }

      if (customOnChange) {
        customOnChange(e);
      }
    };

    var onMouseDown = function onMouseDown(e) {
      var _a;

      if (document.activeElement === ((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input)) {
        e.preventDefault();
      }
    };

    var onSearch = function onSearch(e) {
      var _a;

      if (customOnSearch) {
        customOnSearch((_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.input.value, e);
      }
    };

    var prefixCls = getPrefixCls('input-search', customizePrefixCls);
    var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);
    var searchIcon = typeof enterButton === 'boolean' ? /*#__PURE__*/React.createElement(SearchOutlined$2, null) : null;
    var btnClassName = "".concat(prefixCls, "-button");
    var button;
    var enterButtonAsElement = enterButton || {};
    var isAntdButton = enterButtonAsElement.type && enterButtonAsElement.type.__ANT_BUTTON === true;

    if (isAntdButton || enterButtonAsElement.type === 'button') {
      button = cloneElement(enterButtonAsElement, _extends$1({
        onMouseDown: onMouseDown,
        onClick: onSearch,
        key: 'enterButton'
      }, isAntdButton ? {
        className: btnClassName,
        size: size
      } : {}));
    } else {
      button = /*#__PURE__*/React.createElement(Button, {
        className: btnClassName,
        type: enterButton ? 'primary' : undefined,
        size: size,
        disabled: disabled,
        key: "enterButton",
        onMouseDown: onMouseDown,
        onClick: onSearch,
        loading: loading,
        icon: searchIcon
      }, enterButton);
    }

    if (addonAfter) {
      button = [button, cloneElement(addonAfter, {
        key: 'addonAfter'
      })];
    }

    var cls = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(size), !!size), _defineProperty$1(_classNames, "".concat(prefixCls, "-with-button"), !!enterButton), _classNames), className);
    return /*#__PURE__*/React.createElement(Input$1, _extends$1({
      ref: composeRef(inputRef, ref),
      onPressEnter: onSearch
    }, restProps, {
      size: size,
      prefixCls: inputPrefixCls,
      addonAfter: button,
      suffix: suffix,
      onChange: onChange,
      className: cls,
      disabled: disabled
    }));
  });
  Search.displayName = 'Search';

  // Thanks to https://github.com/andreypopp/react-textarea-autosize/

  /**
   * calculateNodeHeight(uiTextNode, useCache = false)
   */
  var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
  var SIZING_STYLE = ['letter-spacing', 'line-height', 'padding-top', 'padding-bottom', 'font-family', 'font-weight', 'font-size', 'font-variant', 'text-rendering', 'text-transform', 'width', 'text-indent', 'padding-left', 'padding-right', 'border-width', 'box-sizing', 'word-break'];
  var computedStyleCache = {};
  var hiddenTextarea;
  function calculateNodeStyling(node) {
    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var nodeRef = node.getAttribute('id') || node.getAttribute('data-reactid') || node.getAttribute('name');

    if (useCache && computedStyleCache[nodeRef]) {
      return computedStyleCache[nodeRef];
    }

    var style = window.getComputedStyle(node);
    var boxSizing = style.getPropertyValue('box-sizing') || style.getPropertyValue('-moz-box-sizing') || style.getPropertyValue('-webkit-box-sizing');
    var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) + parseFloat(style.getPropertyValue('padding-top'));
    var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) + parseFloat(style.getPropertyValue('border-top-width'));
    var sizingStyle = SIZING_STYLE.map(function (name) {
      return "".concat(name, ":").concat(style.getPropertyValue(name));
    }).join(';');
    var nodeInfo = {
      sizingStyle: sizingStyle,
      paddingSize: paddingSize,
      borderSize: borderSize,
      boxSizing: boxSizing
    };

    if (useCache && nodeRef) {
      computedStyleCache[nodeRef] = nodeInfo;
    }

    return nodeInfo;
  }
  function calculateNodeHeight(uiTextNode) {
    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement('textarea');
      hiddenTextarea.setAttribute('tab-index', '-1');
      hiddenTextarea.setAttribute('aria-hidden', 'true');
      document.body.appendChild(hiddenTextarea);
    } // Fix wrap="off" issue
    // https://github.com/ant-design/ant-design/issues/6577


    if (uiTextNode.getAttribute('wrap')) {
      hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));
    } else {
      hiddenTextarea.removeAttribute('wrap');
    } // Copy all CSS properties that have an impact on the height of the content in
    // the textbox


    var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache),
        paddingSize = _calculateNodeStyling.paddingSize,
        borderSize = _calculateNodeStyling.borderSize,
        boxSizing = _calculateNodeStyling.boxSizing,
        sizingStyle = _calculateNodeStyling.sizingStyle; // Need to have the overflow attribute to hide the scrollbar otherwise
    // text-lines will not calculated properly as the shadow will technically be
    // narrower for content


    hiddenTextarea.setAttribute('style', "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';
    var minHeight = Number.MIN_SAFE_INTEGER;
    var maxHeight = Number.MAX_SAFE_INTEGER;
    var height = hiddenTextarea.scrollHeight;
    var overflowY;

    if (boxSizing === 'border-box') {
      // border-box: add border, since height = content + padding + border
      height += borderSize;
    } else if (boxSizing === 'content-box') {
      // remove padding, since height = content
      height -= paddingSize;
    }

    if (minRows !== null || maxRows !== null) {
      // measure height of a textarea with a single row
      hiddenTextarea.value = ' ';
      var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;

      if (minRows !== null) {
        minHeight = singleRowHeight * minRows;

        if (boxSizing === 'border-box') {
          minHeight = minHeight + paddingSize + borderSize;
        }

        height = Math.max(minHeight, height);
      }

      if (maxRows !== null) {
        maxHeight = singleRowHeight * maxRows;

        if (boxSizing === 'border-box') {
          maxHeight = maxHeight + paddingSize + borderSize;
        }

        overflowY = height > maxHeight ? '' : 'hidden';
        height = Math.min(maxHeight, height);
      }
    }

    return {
      height: height,
      minHeight: minHeight,
      maxHeight: maxHeight,
      overflowY: overflowY,
      resize: 'none'
    };
  }

  var RESIZE_STATUS;

  (function (RESIZE_STATUS) {
    RESIZE_STATUS[RESIZE_STATUS["NONE"] = 0] = "NONE";
    RESIZE_STATUS[RESIZE_STATUS["RESIZING"] = 1] = "RESIZING";
    RESIZE_STATUS[RESIZE_STATUS["RESIZED"] = 2] = "RESIZED";
  })(RESIZE_STATUS || (RESIZE_STATUS = {}));

  var ResizableTextArea = /*#__PURE__*/function (_React$Component) {
    _inherits(ResizableTextArea, _React$Component);

    var _super = _createSuper(ResizableTextArea);

    function ResizableTextArea(props) {
      var _this;

      _classCallCheck(this, ResizableTextArea);

      _this = _super.call(this, props);
      _this.nextFrameActionId = void 0;
      _this.resizeFrameId = void 0;
      _this.textArea = void 0;

      _this.saveTextArea = function (textArea) {
        _this.textArea = textArea;
      };

      _this.handleResize = function (size) {
        var resizeStatus = _this.state.resizeStatus;
        var _this$props = _this.props,
            autoSize = _this$props.autoSize,
            onResize = _this$props.onResize;

        if (resizeStatus !== RESIZE_STATUS.NONE) {
          return;
        }

        if (typeof onResize === 'function') {
          onResize(size);
        }

        if (autoSize) {
          _this.resizeOnNextFrame();
        }
      };

      _this.resizeOnNextFrame = function () {
        cancelAnimationFrame(_this.nextFrameActionId);
        _this.nextFrameActionId = requestAnimationFrame(_this.resizeTextarea);
      };

      _this.resizeTextarea = function () {
        var autoSize = _this.props.autoSize;

        if (!autoSize || !_this.textArea) {
          return;
        }

        var minRows = autoSize.minRows,
            maxRows = autoSize.maxRows;
        var textareaStyles = calculateNodeHeight(_this.textArea, false, minRows, maxRows);

        _this.setState({
          textareaStyles: textareaStyles,
          resizeStatus: RESIZE_STATUS.RESIZING
        }, function () {
          cancelAnimationFrame(_this.resizeFrameId);
          _this.resizeFrameId = requestAnimationFrame(function () {
            _this.setState({
              resizeStatus: RESIZE_STATUS.RESIZED
            }, function () {
              _this.resizeFrameId = requestAnimationFrame(function () {
                _this.setState({
                  resizeStatus: RESIZE_STATUS.NONE
                });

                _this.fixFirefoxAutoScroll();
              });
            });
          });
        });
      };

      _this.renderTextArea = function () {
        var _this$props2 = _this.props,
            _this$props2$prefixCl = _this$props2.prefixCls,
            prefixCls = _this$props2$prefixCl === void 0 ? 'rc-textarea' : _this$props2$prefixCl,
            autoSize = _this$props2.autoSize,
            onResize = _this$props2.onResize,
            className = _this$props2.className,
            disabled = _this$props2.disabled;
        var _this$state = _this.state,
            textareaStyles = _this$state.textareaStyles,
            resizeStatus = _this$state.resizeStatus;
        var otherProps = omit(_this.props, ['prefixCls', 'onPressEnter', 'autoSize', 'defaultValue', 'onResize']);
        var cls = classnames(prefixCls, className, _defineProperty$1({}, "".concat(prefixCls, "-disabled"), disabled)); // Fix https://github.com/ant-design/ant-design/issues/6776
        // Make sure it could be reset when using form.getFieldDecorator

        if ('value' in otherProps) {
          otherProps.value = otherProps.value || '';
        }

        var style = _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, _this.props.style), textareaStyles), resizeStatus === RESIZE_STATUS.RESIZING ? // React will warning when mix `overflow` & `overflowY`.
        // We need to define this separately.
        {
          overflowX: 'hidden',
          overflowY: 'hidden'
        } : null);

        return /*#__PURE__*/React.createElement(ReactResizeObserver, {
          onResize: _this.handleResize,
          disabled: !(autoSize || onResize)
        }, /*#__PURE__*/React.createElement("textarea", _extends$1({}, otherProps, {
          className: cls,
          style: style,
          ref: _this.saveTextArea
        })));
      };

      _this.state = {
        textareaStyles: {},
        resizeStatus: RESIZE_STATUS.NONE
      };
      return _this;
    }

    _createClass(ResizableTextArea, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.resizeTextarea();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        // Re-render with the new content then recalculate the height as required.
        if (prevProps.value !== this.props.value) {
          this.resizeTextarea();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        cancelAnimationFrame(this.nextFrameActionId);
        cancelAnimationFrame(this.resizeFrameId);
      } // https://github.com/ant-design/ant-design/issues/21870

    }, {
      key: "fixFirefoxAutoScroll",
      value: function fixFirefoxAutoScroll() {
        try {
          if (document.activeElement === this.textArea) {
            var currentStart = this.textArea.selectionStart;
            var currentEnd = this.textArea.selectionEnd;
            this.textArea.setSelectionRange(currentStart, currentEnd);
          }
        } catch (e) {// Fix error in Chrome:
          // Failed to read the 'selectionStart' property from 'HTMLInputElement'
          // http://stackoverflow.com/q/21177489/3040605
        }
      }
    }, {
      key: "render",
      value: function render() {
        return this.renderTextArea();
      }
    }]);

    return ResizableTextArea;
  }(React.Component);

  var TextArea = /*#__PURE__*/function (_React$Component) {
    _inherits(TextArea, _React$Component);

    var _super = _createSuper(TextArea);

    function TextArea(props) {
      var _this;

      _classCallCheck(this, TextArea);

      _this = _super.call(this, props);
      _this.resizableTextArea = void 0;

      _this.focus = function () {
        _this.resizableTextArea.textArea.focus();
      };

      _this.saveTextArea = function (resizableTextArea) {
        _this.resizableTextArea = resizableTextArea;
      };

      _this.handleChange = function (e) {
        var onChange = _this.props.onChange;

        _this.setValue(e.target.value, function () {
          _this.resizableTextArea.resizeTextarea();
        });

        if (onChange) {
          onChange(e);
        }
      };

      _this.handleKeyDown = function (e) {
        var _this$props = _this.props,
            onPressEnter = _this$props.onPressEnter,
            onKeyDown = _this$props.onKeyDown;

        if (e.keyCode === 13 && onPressEnter) {
          onPressEnter(e);
        }

        if (onKeyDown) {
          onKeyDown(e);
        }
      };

      var value = typeof props.value === 'undefined' || props.value === null ? props.defaultValue : props.value;
      _this.state = {
        value: value
      };
      return _this;
    }

    _createClass(TextArea, [{
      key: "setValue",
      value: function setValue(value, callback) {
        if (!('value' in this.props)) {
          this.setState({
            value: value
          }, callback);
        }
      }
    }, {
      key: "blur",
      value: function blur() {
        this.resizableTextArea.textArea.blur();
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(ResizableTextArea, _extends$1({}, this.props, {
          value: this.state.value,
          onKeyDown: this.handleKeyDown,
          onChange: this.handleChange,
          ref: this.saveTextArea
        }));
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps) {
        if ('value' in nextProps) {
          return {
            value: nextProps.value
          };
        }

        return null;
      }
    }]);

    return TextArea;
  }(React.Component);

  var __rest$k = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  function fixEmojiLength(value, maxLength) {
    return _toConsumableArray$1(value || '').slice(0, maxLength).join('');
  }

  var TextArea$1 = /*#__PURE__*/React.forwardRef(function (_a, ref) {
    var _classNames;

    var customizePrefixCls = _a.prefixCls,
        _a$bordered = _a.bordered,
        bordered = _a$bordered === void 0 ? true : _a$bordered,
        _a$showCount = _a.showCount,
        showCount = _a$showCount === void 0 ? false : _a$showCount,
        maxLength = _a.maxLength,
        className = _a.className,
        style = _a.style,
        customizeSize = _a.size,
        onCompositionStart = _a.onCompositionStart,
        onCompositionEnd = _a.onCompositionEnd,
        onChange = _a.onChange,
        props = __rest$k(_a, ["prefixCls", "bordered", "showCount", "maxLength", "className", "style", "size", "onCompositionStart", "onCompositionEnd", "onChange"]);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var size = React.useContext(SizeContext);
    var innerRef = React.useRef(null);
    var clearableInputRef = React.useRef(null);

    var _React$useState = React.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        compositing = _React$useState2[0],
        setCompositing = _React$useState2[1];

    var _useMergedState = useControlledState(props.defaultValue, {
      value: props.value
    }),
        _useMergedState2 = _slicedToArray$1(_useMergedState, 2),
        value = _useMergedState2[0],
        setValue = _useMergedState2[1];

    var handleSetValue = function handleSetValue(val, callback) {
      if (props.value === undefined) {
        setValue(val);
        callback === null || callback === void 0 ? void 0 : callback();
      }
    }; // =========================== Value Update ===========================
    // Max length value


    var hasMaxLength = Number(maxLength) > 0;

    var onInternalCompositionStart = function onInternalCompositionStart(e) {
      setCompositing(true);
      onCompositionStart === null || onCompositionStart === void 0 ? void 0 : onCompositionStart(e);
    };

    var onInternalCompositionEnd = function onInternalCompositionEnd(e) {
      setCompositing(false);
      var triggerValue = e.currentTarget.value;

      if (hasMaxLength) {
        triggerValue = fixEmojiLength(triggerValue, maxLength);
      } // Patch composition onChange when value changed


      if (triggerValue !== value) {
        handleSetValue(triggerValue);
        resolveOnChange(e.currentTarget, e, onChange, triggerValue);
      }

      onCompositionEnd === null || onCompositionEnd === void 0 ? void 0 : onCompositionEnd(e);
    };

    var handleChange = function handleChange(e) {
      var triggerValue = e.target.value;

      if (!compositing && hasMaxLength) {
        triggerValue = fixEmojiLength(triggerValue, maxLength);
      }

      handleSetValue(triggerValue);
      resolveOnChange(e.currentTarget, e, onChange, triggerValue);
    }; // ============================== Reset ===============================


    var handleReset = function handleReset(e) {
      var _a, _b;

      handleSetValue('', function () {
        var _a;

        (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
      });
      resolveOnChange((_b = (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) === null || _b === void 0 ? void 0 : _b.textArea, e, onChange);
    };

    var prefixCls = getPrefixCls('input', customizePrefixCls);
    React.useImperativeHandle(ref, function () {
      var _a;

      return {
        resizableTextArea: (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea,
        focus: function focus(option) {
          var _a, _b;

          triggerFocus((_b = (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.resizableTextArea) === null || _b === void 0 ? void 0 : _b.textArea, option);
        },
        blur: function blur() {
          var _a;

          return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.blur();
        }
      };
    });
    var textArea = /*#__PURE__*/React.createElement(TextArea, _extends$1({}, omit(props, ['allowClear']), {
      className: classnames((_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _defineProperty$1(_classNames, className, className && !showCount), _defineProperty$1(_classNames, "".concat(prefixCls, "-sm"), size === 'small' || customizeSize === 'small'), _defineProperty$1(_classNames, "".concat(prefixCls, "-lg"), size === 'large' || customizeSize === 'large'), _classNames)),
      style: showCount ? undefined : style,
      prefixCls: prefixCls,
      onCompositionStart: onInternalCompositionStart,
      onChange: handleChange,
      onCompositionEnd: onInternalCompositionEnd,
      ref: innerRef,
      maxLength: maxLength
    }));
    var val = fixControlledValue(value);

    if (!compositing && hasMaxLength && (props.value === null || props.value === undefined)) {
      // fix #27612 将value转为数组进行截取，解决 '😂'.length === 2 等emoji表情导致的截取乱码的问题
      val = fixEmojiLength(val, maxLength);
    } // TextArea


    var textareaNode = /*#__PURE__*/React.createElement(ClearableLabeledInput, _extends$1({}, props, {
      prefixCls: prefixCls,
      direction: direction,
      inputType: "text",
      value: val,
      element: textArea,
      handleReset: handleReset,
      ref: clearableInputRef,
      bordered: bordered,
      style: showCount ? undefined : style
    })); // Only show text area wrapper when needed

    if (showCount) {
      var valueLength = _toConsumableArray$1(val).length;

      var dataCount = '';

      if (_typeof$1(showCount) === 'object') {
        dataCount = showCount.formatter({
          count: valueLength,
          maxLength: maxLength
        });
      } else {
        dataCount = "".concat(valueLength).concat(hasMaxLength ? " / ".concat(maxLength) : '');
      }

      return /*#__PURE__*/React.createElement("div", {
        className: classnames("".concat(prefixCls, "-textarea"), _defineProperty$1({}, "".concat(prefixCls, "-textarea-rtl"), direction === 'rtl'), "".concat(prefixCls, "-textarea-show-count"), className),
        style: style,
        "data-count": dataCount
      }, textareaNode);
    }

    return textareaNode;
  });

  // This icon file is generated automatically.
  var EyeOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z" } }] }, "name": "eye", "theme": "outlined" };

  var EyeOutlined$1 = function EyeOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: EyeOutlined
    }));
  };

  EyeOutlined$1.displayName = 'EyeOutlined';
  var EyeOutlined$2 = /*#__PURE__*/React.forwardRef(EyeOutlined$1);

  // This icon file is generated automatically.
  var EyeInvisibleOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z" } }, { "tag": "path", "attrs": { "d": "M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z" } }] }, "name": "eye-invisible", "theme": "outlined" };

  var EyeInvisibleOutlined$1 = function EyeInvisibleOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: EyeInvisibleOutlined
    }));
  };

  EyeInvisibleOutlined$1.displayName = 'EyeInvisibleOutlined';
  var EyeInvisibleOutlined$2 = /*#__PURE__*/React.forwardRef(EyeInvisibleOutlined$1);

  var __rest$l = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var ActionMap = {
    click: 'onClick',
    hover: 'onMouseOver'
  };
  var Password = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _useState = React.useState(false),
        _useState2 = _slicedToArray$1(_useState, 2),
        visible = _useState2[0],
        setVisible = _useState2[1];

    var onVisibleChange = function onVisibleChange() {
      var disabled = props.disabled;

      if (disabled) {
        return;
      }

      setVisible(!visible);
    };

    var getIcon = function getIcon(prefixCls) {
      var _iconProps;

      var action = props.action,
          _props$iconRender = props.iconRender,
          iconRender = _props$iconRender === void 0 ? function () {
        return null;
      } : _props$iconRender;
      var iconTrigger = ActionMap[action] || '';
      var icon = iconRender(visible);
      var iconProps = (_iconProps = {}, _defineProperty$1(_iconProps, iconTrigger, onVisibleChange), _defineProperty$1(_iconProps, "className", "".concat(prefixCls, "-icon")), _defineProperty$1(_iconProps, "key", 'passwordIcon'), _defineProperty$1(_iconProps, "onMouseDown", function onMouseDown(e) {
        // Prevent focused state lost
        // https://github.com/ant-design/ant-design/issues/15173
        e.preventDefault();
      }), _defineProperty$1(_iconProps, "onMouseUp", function onMouseUp(e) {
        // Prevent caret position change
        // https://github.com/ant-design/ant-design/issues/23524
        e.preventDefault();
      }), _iconProps);
      return /*#__PURE__*/React.cloneElement( /*#__PURE__*/React.isValidElement(icon) ? icon : /*#__PURE__*/React.createElement("span", null, icon), iconProps);
    };

    var renderPassword = function renderPassword(_ref) {
      var getPrefixCls = _ref.getPrefixCls;

      var className = props.className,
          customizePrefixCls = props.prefixCls,
          customizeInputPrefixCls = props.inputPrefixCls,
          size = props.size,
          visibilityToggle = props.visibilityToggle,
          restProps = __rest$l(props, ["className", "prefixCls", "inputPrefixCls", "size", "visibilityToggle"]);

      var inputPrefixCls = getPrefixCls('input', customizeInputPrefixCls);
      var prefixCls = getPrefixCls('input-password', customizePrefixCls);
      var suffixIcon = visibilityToggle && getIcon(prefixCls);
      var inputClassName = classnames(prefixCls, className, _defineProperty$1({}, "".concat(prefixCls, "-").concat(size), !!size));

      var omittedProps = _extends$1(_extends$1({}, omit(restProps, ['suffix', 'iconRender'])), {
        type: visible ? 'text' : 'password',
        className: inputClassName,
        prefixCls: inputPrefixCls,
        suffix: suffixIcon
      });

      if (size) {
        omittedProps.size = size;
      }

      return /*#__PURE__*/React.createElement(Input$1, _extends$1({
        ref: ref
      }, omittedProps));
    };

    return /*#__PURE__*/React.createElement(ConfigConsumer, null, renderPassword);
  });
  Password.defaultProps = {
    action: 'click',
    visibilityToggle: true,
    iconRender: function iconRender(visible) {
      return visible ? /*#__PURE__*/React.createElement(EyeOutlined$2, null) : /*#__PURE__*/React.createElement(EyeInvisibleOutlined$2, null);
    }
  };
  Password.displayName = 'Password';

  Input$1.Group = Group$2;
  Input$1.Search = Search;
  Input$1.TextArea = TextArea$1;
  Input$1.Password = Password;

  function Mask$1(props) {
    var prefixCls = props.prefixCls,
        style = props.style,
        visible = props.visible,
        maskProps = props.maskProps,
        motionName = props.motionName;
    return /*#__PURE__*/React.createElement(CSSMotion, {
      key: "mask",
      visible: visible,
      motionName: motionName,
      leavedClassName: "".concat(prefixCls, "-mask-hidden")
    }, function (_ref) {
      var motionClassName = _ref.className,
          motionStyle = _ref.style;
      return /*#__PURE__*/React.createElement("div", _extends$1({
        style: _objectSpread2$1(_objectSpread2$1({}, motionStyle), style),
        className: classnames("".concat(prefixCls, "-mask"), motionClassName)
      }, maskProps));
    });
  }

  // =============================== Motion ===============================
  function getMotionName(prefixCls, transitionName, animationName) {
    var motionName = transitionName;

    if (!motionName && animationName) {
      motionName = "".concat(prefixCls, "-").concat(animationName);
    }

    return motionName;
  } // ================================ UUID ================================

  var uuid$2 = -1;
  function getUUID$1() {
    uuid$2 += 1;
    return uuid$2;
  } // =============================== Offset ===============================

  function getScroll$1(w, top) {
    var ret = w["page".concat(top ? 'Y' : 'X', "Offset")];
    var method = "scroll".concat(top ? 'Top' : 'Left');

    if (typeof ret !== 'number') {
      var d = w.document;
      ret = d.documentElement[method];

      if (typeof ret !== 'number') {
        ret = d.body[method];
      }
    }

    return ret;
  }

  function offset$1(el) {
    var rect = el.getBoundingClientRect();
    var pos = {
      left: rect.left,
      top: rect.top
    };
    var doc = el.ownerDocument;
    var w = doc.defaultView || doc.parentWindow;
    pos.left += getScroll$1(w);
    pos.top += getScroll$1(w, true);
    return pos;
  }

  var MemoChildren = /*#__PURE__*/React.memo(function (_ref) {
    var children = _ref.children;
    return children;
  }, function (_, _ref2) {
    var shouldUpdate = _ref2.shouldUpdate;
    return !shouldUpdate;
  });

  var sentinelStyle = {
    width: 0,
    height: 0,
    overflow: 'hidden',
    outline: 'none'
  };
  var Content$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var closable = props.closable,
        prefixCls = props.prefixCls,
        width = props.width,
        height = props.height,
        footer = props.footer,
        title = props.title,
        closeIcon = props.closeIcon,
        style = props.style,
        className = props.className,
        visible = props.visible,
        forceRender = props.forceRender,
        bodyStyle = props.bodyStyle,
        bodyProps = props.bodyProps,
        children = props.children,
        destroyOnClose = props.destroyOnClose,
        modalRender = props.modalRender,
        motionName = props.motionName,
        ariaId = props.ariaId,
        onClose = props.onClose,
        onVisibleChanged = props.onVisibleChanged,
        onMouseDown = props.onMouseDown,
        onMouseUp = props.onMouseUp,
        mousePosition = props.mousePosition;
    var sentinelStartRef = React.useRef();
    var sentinelEndRef = React.useRef();
    var dialogRef = React.useRef(); // ============================== Ref ===============================

    React.useImperativeHandle(ref, function () {
      return {
        focus: function focus() {
          var _sentinelStartRef$cur;

          (_sentinelStartRef$cur = sentinelStartRef.current) === null || _sentinelStartRef$cur === void 0 ? void 0 : _sentinelStartRef$cur.focus();
        },
        changeActive: function changeActive(next) {
          var _document = document,
              activeElement = _document.activeElement;

          if (next && activeElement === sentinelEndRef.current) {
            sentinelStartRef.current.focus();
          } else if (!next && activeElement === sentinelStartRef.current) {
            sentinelEndRef.current.focus();
          }
        }
      };
    }); // ============================= Style ==============================

    var _React$useState = React.useState(),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        transformOrigin = _React$useState2[0],
        setTransformOrigin = _React$useState2[1];

    var contentStyle = {};

    if (width !== undefined) {
      contentStyle.width = width;
    }

    if (height !== undefined) {
      contentStyle.height = height;
    }

    if (transformOrigin) {
      contentStyle.transformOrigin = transformOrigin;
    }

    function onPrepare() {
      var elementOffset = offset$1(dialogRef.current);
      setTransformOrigin(mousePosition ? "".concat(mousePosition.x - elementOffset.left, "px ").concat(mousePosition.y - elementOffset.top, "px") : '');
    } // ============================= Render =============================


    var footerNode;

    if (footer) {
      footerNode = /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-footer")
      }, footer);
    }

    var headerNode;

    if (title) {
      headerNode = /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-header")
      }, /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-title"),
        id: ariaId
      }, title));
    }

    var closer;

    if (closable) {
      closer = /*#__PURE__*/React.createElement("button", {
        type: "button",
        onClick: onClose,
        "aria-label": "Close",
        className: "".concat(prefixCls, "-close")
      }, closeIcon || /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-close-x")
      }));
    }

    var content = /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-content")
    }, closer, headerNode, /*#__PURE__*/React.createElement("div", _extends$1({
      className: "".concat(prefixCls, "-body"),
      style: bodyStyle
    }, bodyProps), children), footerNode);
    return /*#__PURE__*/React.createElement(CSSMotion, {
      visible: visible,
      onVisibleChanged: onVisibleChanged,
      onAppearPrepare: onPrepare,
      onEnterPrepare: onPrepare,
      forceRender: forceRender,
      motionName: motionName,
      removeOnLeave: destroyOnClose,
      ref: dialogRef
    }, function (_ref, motionRef) {
      var motionClassName = _ref.className,
          motionStyle = _ref.style;
      return /*#__PURE__*/React.createElement("div", {
        key: "dialog-element",
        role: "document",
        ref: motionRef,
        style: _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, motionStyle), style), contentStyle),
        className: classnames(prefixCls, className, motionClassName),
        onMouseDown: onMouseDown,
        onMouseUp: onMouseUp
      }, /*#__PURE__*/React.createElement("div", {
        tabIndex: 0,
        ref: sentinelStartRef,
        style: sentinelStyle,
        "aria-hidden": "true"
      }), /*#__PURE__*/React.createElement(MemoChildren, {
        shouldUpdate: visible || forceRender
      }, modalRender ? modalRender(content) : content), /*#__PURE__*/React.createElement("div", {
        tabIndex: 0,
        ref: sentinelEndRef,
        style: sentinelStyle,
        "aria-hidden": "true"
      }));
    });
  });
  Content$1.displayName = 'Content';

  function Dialog(props) {
    var _props$prefixCls = props.prefixCls,
        prefixCls = _props$prefixCls === void 0 ? 'rc-dialog' : _props$prefixCls,
        zIndex = props.zIndex,
        _props$visible = props.visible,
        visible = _props$visible === void 0 ? false : _props$visible,
        _props$keyboard = props.keyboard,
        keyboard = _props$keyboard === void 0 ? true : _props$keyboard,
        _props$focusTriggerAf = props.focusTriggerAfterClose,
        focusTriggerAfterClose = _props$focusTriggerAf === void 0 ? true : _props$focusTriggerAf,
        scrollLocker = props.scrollLocker,
        title = props.title,
        wrapStyle = props.wrapStyle,
        wrapClassName = props.wrapClassName,
        wrapProps = props.wrapProps,
        onClose = props.onClose,
        afterClose = props.afterClose,
        transitionName = props.transitionName,
        animation = props.animation,
        _props$closable = props.closable,
        closable = _props$closable === void 0 ? true : _props$closable,
        _props$mask = props.mask,
        mask = _props$mask === void 0 ? true : _props$mask,
        maskTransitionName = props.maskTransitionName,
        maskAnimation = props.maskAnimation,
        _props$maskClosable = props.maskClosable,
        maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable,
        maskStyle = props.maskStyle,
        maskProps = props.maskProps;
    var lastOutSideActiveElementRef = React.useRef();
    var wrapperRef = React.useRef();
    var contentRef = React.useRef();

    var _React$useState = React.useState(visible),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        animatedVisible = _React$useState2[0],
        setAnimatedVisible = _React$useState2[1]; // ========================== Init ==========================


    var ariaIdRef = React.useRef();

    if (!ariaIdRef.current) {
      ariaIdRef.current = "rcDialogTitle".concat(getUUID$1());
    } // ========================= Events =========================


    function onDialogVisibleChanged(newVisible) {
      if (newVisible) {
        // Try to focus
        if (!contains(wrapperRef.current, document.activeElement)) {
          var _contentRef$current;

          lastOutSideActiveElementRef.current = document.activeElement;
          (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.focus();
        }
      } else {
        // Clean up scroll bar & focus back
        setAnimatedVisible(false);

        if (mask && lastOutSideActiveElementRef.current && focusTriggerAfterClose) {
          try {
            lastOutSideActiveElementRef.current.focus({
              preventScroll: true
            });
          } catch (e) {// Do nothing
          }

          lastOutSideActiveElementRef.current = null;
        } // Trigger afterClose only when change visible from true to false


        if (animatedVisible) {
          afterClose === null || afterClose === void 0 ? void 0 : afterClose();
        }
      }
    }

    function onInternalClose(e) {
      onClose === null || onClose === void 0 ? void 0 : onClose(e);
    } // >>> Content


    var contentClickRef = React.useRef(false);
    var contentTimeoutRef = React.useRef(); // We need record content click incase content popup out of dialog

    var onContentMouseDown = function onContentMouseDown() {
      clearTimeout(contentTimeoutRef.current);
      contentClickRef.current = true;
    };

    var onContentMouseUp = function onContentMouseUp() {
      contentTimeoutRef.current = setTimeout(function () {
        contentClickRef.current = false;
      });
    }; // >>> Wrapper
    // Close only when element not on dialog


    var onWrapperClick = null;

    if (maskClosable) {
      onWrapperClick = function onWrapperClick(e) {
        if (contentClickRef.current) {
          contentClickRef.current = false;
        } else if (wrapperRef.current === e.target) {
          onInternalClose(e);
        }
      };
    }

    function onWrapperKeyDown(e) {
      if (keyboard && e.keyCode === KeyCode.ESC) {
        e.stopPropagation();
        onInternalClose(e);
        return;
      } // keep focus inside dialog


      if (visible) {
        if (e.keyCode === KeyCode.TAB) {
          contentRef.current.changeActive(!e.shiftKey);
        }
      }
    } // ========================= Effect =========================


    React.useEffect(function () {
      if (visible) {
        setAnimatedVisible(true);
      }

      return function () {};
    }, [visible]); // Remove direct should also check the scroll bar update

    React.useEffect(function () {
      return function () {
        clearTimeout(contentTimeoutRef.current);
      };
    }, []);
    React.useEffect(function () {
      if (animatedVisible) {
        scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.lock();
        return scrollLocker === null || scrollLocker === void 0 ? void 0 : scrollLocker.unLock;
      }

      return function () {};
    }, [animatedVisible, scrollLocker]); // ========================= Render =========================

    return /*#__PURE__*/React.createElement("div", _extends$1({
      className: "".concat(prefixCls, "-root")
    }, pickAttrs(props, {
      data: true
    })), /*#__PURE__*/React.createElement(Mask$1, {
      prefixCls: prefixCls,
      visible: mask && visible,
      motionName: getMotionName(prefixCls, maskTransitionName, maskAnimation),
      style: _objectSpread2$1({
        zIndex: zIndex
      }, maskStyle),
      maskProps: maskProps
    }), /*#__PURE__*/React.createElement("div", _extends$1({
      tabIndex: -1,
      onKeyDown: onWrapperKeyDown,
      className: classnames("".concat(prefixCls, "-wrap"), wrapClassName),
      ref: wrapperRef,
      onClick: onWrapperClick,
      role: "dialog",
      "aria-labelledby": title ? ariaIdRef.current : null,
      style: _objectSpread2$1(_objectSpread2$1({
        zIndex: zIndex
      }, wrapStyle), {}, {
        display: !animatedVisible ? 'none' : null
      })
    }, wrapProps), /*#__PURE__*/React.createElement(Content$1, _extends$1({}, props, {
      onMouseDown: onContentMouseDown,
      onMouseUp: onContentMouseUp,
      ref: contentRef,
      closable: closable,
      ariaId: ariaIdRef.current,
      prefixCls: prefixCls,
      visible: visible,
      onClose: onInternalClose,
      onVisibleChanged: onDialogVisibleChanged,
      motionName: getMotionName(prefixCls, transitionName, animation)
    }))));
  }

  /*
   * getContainer remarks
   * Custom container should not be return, because in the Portal component, it will remove the
   * return container element here, if the custom container is the only child of it's component,
   * like issue #10656, It will has a conflict with removeChild method in react-dom.
   * So here should add a child (div element) to custom container.
   * */

  var DialogWrap = function DialogWrap(props) {
    var visible = props.visible,
        getContainer = props.getContainer,
        forceRender = props.forceRender,
        _props$destroyOnClose = props.destroyOnClose,
        destroyOnClose = _props$destroyOnClose === void 0 ? false : _props$destroyOnClose,
        _afterClose = props.afterClose;

    var _React$useState = React.useState(visible),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        animatedVisible = _React$useState2[0],
        setAnimatedVisible = _React$useState2[1];

    React.useEffect(function () {
      if (visible) {
        setAnimatedVisible(true);
      }
    }, [visible]); // 渲染在当前 dom 里；

    if (getContainer === false) {
      return /*#__PURE__*/React.createElement(Dialog, _extends$1({}, props, {
        getOpenCount: function getOpenCount() {
          return 2;
        } // 不对 body 做任何操作。。

      }));
    } // Destroy on close will remove wrapped div


    if (!forceRender && destroyOnClose && !animatedVisible) {
      return null;
    }

    return /*#__PURE__*/React.createElement(PortalWrapper, {
      visible: visible,
      forceRender: forceRender,
      getContainer: getContainer
    }, function (childProps) {
      return /*#__PURE__*/React.createElement(Dialog, _extends$1({}, props, {
        destroyOnClose: destroyOnClose,
        afterClose: function afterClose() {
          _afterClose === null || _afterClose === void 0 ? void 0 : _afterClose();
          setAnimatedVisible(false);
        }
      }, childProps));
    });
  };

  DialogWrap.displayName = 'Dialog';

  function supportBigInt() {
    return typeof BigInt === 'function';
  }

  /**
   * Format string number to readable number
   */

  function trimNumber(numStr) {
    var str = numStr.trim();
    var negative = str.startsWith('-');

    if (negative) {
      str = str.slice(1);
    }

    str = str // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`
    .replace(/(\.\d*[^0])0*$/, '$1') // Remove useless decimal. `1.` => `1`
    .replace(/\.0*$/, '') // Remove integer 0. `0001` => `1`, 000.1' => `.1`
    .replace(/^0+/, '');

    if (str.startsWith('.')) {
      str = "0".concat(str);
    }

    var trimStr = str || '0';
    var splitNumber = trimStr.split('.');
    var integerStr = splitNumber[0] || '0';
    var decimalStr = splitNumber[1] || '0';

    if (integerStr === '0' && decimalStr === '0') {
      negative = false;
    }

    var negativeStr = negative ? '-' : '';
    return {
      negative: negative,
      negativeStr: negativeStr,
      trimStr: trimStr,
      integerStr: integerStr,
      decimalStr: decimalStr,
      fullStr: "".concat(negativeStr).concat(trimStr)
    };
  }
  function isE(number) {
    var str = String(number);
    return !Number.isNaN(Number(str)) && str.includes('e');
  }
  /**
   * [Legacy] Convert 1e-9 to 0.000000001.
   * This may lose some precision if user really want 1e-9.
   */

  function getNumberPrecision(number) {
    var numStr = String(number);

    if (isE(number)) {
      var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));
      var decimalMatch = numStr.match(/\.(\d+)/);

      if (decimalMatch === null || decimalMatch === void 0 ? void 0 : decimalMatch[1]) {
        precision += decimalMatch[1].length;
      }

      return precision;
    }

    return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;
  }
  /**
   * Convert number (includes scientific notation) to -xxx.yyy format
   */

  function num2str(number) {
    var numStr = String(number);

    if (isE(number)) {
      if (number > Number.MAX_SAFE_INTEGER) {
        return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);
      }

      if (number < Number.MIN_SAFE_INTEGER) {
        return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);
      }

      numStr = number.toFixed(getNumberPrecision(numStr));
    }

    return trimNumber(numStr).fullStr;
  }
  function validateNumber(num) {
    if (typeof num === 'number') {
      return !Number.isNaN(num);
    } // Empty


    if (!num) {
      return false;
    }

    return (// Normal type: 11.28
      /^\s*-?\d+(\.\d+)?\s*$/.test(num) || // Pre-number: 1.
      /^\s*-?\d+\.\s*$/.test(num) || // Post-number: .1
      /^\s*-?\.\d+\s*$/.test(num)
    );
  }

  /**
   * We can remove this when IE not support anymore
   */

  var NumberDecimal = /*#__PURE__*/function () {
    function NumberDecimal(value) {
      _classCallCheck(this, NumberDecimal);

      this.origin = '';
      this.number = void 0;
      this.empty = void 0;

      if (!value && value !== 0 || !String(value).trim()) {
        this.empty = true;
        return;
      }

      this.origin = String(value);
      this.number = Number(value);
    }

    _createClass(NumberDecimal, [{
      key: "negate",
      value: function negate() {
        return new NumberDecimal(-this.toNumber());
      }
    }, {
      key: "add",
      value: function add(value) {
        if (this.isInvalidate()) {
          return new NumberDecimal(value);
        }

        var target = Number(value);

        if (Number.isNaN(target)) {
          return this;
        }

        var number = this.number + target; // [Legacy] Back to safe integer

        if (number > Number.MAX_SAFE_INTEGER) {
          return new NumberDecimal(Number.MAX_SAFE_INTEGER);
        }

        if (number < Number.MIN_SAFE_INTEGER) {
          return new NumberDecimal(Number.MIN_SAFE_INTEGER);
        }

        var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));
        return new NumberDecimal(number.toFixed(maxPrecision));
      }
    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return this.empty;
      }
    }, {
      key: "isNaN",
      value: function isNaN() {
        return Number.isNaN(this.number);
      }
    }, {
      key: "isInvalidate",
      value: function isInvalidate() {
        return this.isEmpty() || this.isNaN();
      }
    }, {
      key: "equals",
      value: function equals(target) {
        return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());
      }
    }, {
      key: "lessEquals",
      value: function lessEquals(target) {
        return this.add(target.negate().toString()).toNumber() <= 0;
      }
    }, {
      key: "toNumber",
      value: function toNumber() {
        return this.number;
      }
    }, {
      key: "toString",
      value: function toString() {
        var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (!safe) {
          return this.origin;
        }

        if (this.isInvalidate()) {
          return '';
        }

        return num2str(this.number);
      }
    }]);

    return NumberDecimal;
  }();
  var BigIntDecimal = /*#__PURE__*/function () {
    /** BigInt will convert `0009` to `9`. We need record the len of decimal */
    function BigIntDecimal(value) {
      _classCallCheck(this, BigIntDecimal);

      this.origin = '';
      this.negative = void 0;
      this.integer = void 0;
      this.decimal = void 0;
      this.decimalLen = void 0;
      this.empty = void 0;
      this.nan = void 0;

      if (!value && value !== 0 || !String(value).trim()) {
        this.empty = true;
        return;
      }

      this.origin = String(value); // Act like Number convert

      if (value === '-') {
        this.nan = true;
        return;
      }

      var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this

      if (isE(mergedValue)) {
        mergedValue = Number(mergedValue);
      }

      mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);

      if (validateNumber(mergedValue)) {
        var trimRet = trimNumber(mergedValue);
        this.negative = trimRet.negative;
        var numbers = trimRet.trimStr.split('.');
        this.integer = BigInt(numbers[0]);
        var decimalStr = numbers[1] || '0';
        this.decimal = BigInt(decimalStr);
        this.decimalLen = decimalStr.length;
      } else {
        this.nan = true;
      }
    }

    _createClass(BigIntDecimal, [{
      key: "getMark",
      value: function getMark() {
        return this.negative ? '-' : '';
      }
    }, {
      key: "getIntegerStr",
      value: function getIntegerStr() {
        return this.integer.toString();
      }
    }, {
      key: "getDecimalStr",
      value: function getDecimalStr() {
        return this.decimal.toString().padStart(this.decimalLen, '0');
      }
      /**
       * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000
       * This is used for add function only.
       */

    }, {
      key: "alignDecimal",
      value: function alignDecimal(decimalLength) {
        var str = "".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));
        return BigInt(str);
      }
    }, {
      key: "negate",
      value: function negate() {
        var clone = new BigIntDecimal(this.toString());
        clone.negative = !clone.negative;
        return clone;
      }
    }, {
      key: "add",
      value: function add(value) {
        if (this.isInvalidate()) {
          return new BigIntDecimal(value);
        }

        var offset = new BigIntDecimal(value);

        if (offset.isInvalidate()) {
          return this;
        }

        var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);
        var myAlignedDecimal = this.alignDecimal(maxDecimalLength);
        var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);
        var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed

        var _trimNumber = trimNumber(valueStr),
            negativeStr = _trimNumber.negativeStr,
            trimStr = _trimNumber.trimStr;

        var hydrateValueStr = "".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));
        return new BigIntDecimal("".concat(hydrateValueStr.slice(0, -maxDecimalLength), ".").concat(hydrateValueStr.slice(-maxDecimalLength)));
      }
    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return this.empty;
      }
    }, {
      key: "isNaN",
      value: function isNaN() {
        return this.nan;
      }
    }, {
      key: "isInvalidate",
      value: function isInvalidate() {
        return this.isEmpty() || this.isNaN();
      }
    }, {
      key: "equals",
      value: function equals(target) {
        return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());
      }
    }, {
      key: "lessEquals",
      value: function lessEquals(target) {
        return this.add(target.negate().toString()).toNumber() <= 0;
      }
    }, {
      key: "toNumber",
      value: function toNumber() {
        if (this.isNaN()) {
          return NaN;
        }

        return Number(this.toString());
      }
    }, {
      key: "toString",
      value: function toString() {
        var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (!safe) {
          return this.origin;
        }

        if (this.isInvalidate()) {
          return '';
        }

        return trimNumber("".concat(this.getMark()).concat(this.getIntegerStr(), ".").concat(this.getDecimalStr())).fullStr;
      }
    }]);

    return BigIntDecimal;
  }();
  function getMiniDecimal(value) {
    // We use BigInt here.
    // Will fallback to Number if not support.
    if (supportBigInt()) {
      return new BigIntDecimal(value);
    }

    return new NumberDecimal(value);
  }
  /**
   * Align the logic of toFixed to around like 1.5 => 2
   */

  function toFixed(numStr, separatorStr, precision) {
    if (numStr === '') {
      return '';
    }

    var _trimNumber2 = trimNumber(numStr),
        negativeStr = _trimNumber2.negativeStr,
        integerStr = _trimNumber2.integerStr,
        decimalStr = _trimNumber2.decimalStr;

    var precisionDecimalStr = "".concat(separatorStr).concat(decimalStr);
    var numberWithoutDecimal = "".concat(negativeStr).concat(integerStr);

    if (precision >= 0) {
      // We will get last + 1 number to check if need advanced number
      var advancedNum = Number(decimalStr[precision]);

      if (advancedNum >= 5) {
        var advancedDecimal = getMiniDecimal(numStr).add("".concat(negativeStr, "0.").concat('0'.repeat(precision)).concat(10 - advancedNum));
        return toFixed(advancedDecimal.toString(), separatorStr, precision);
      }

      if (precision === 0) {
        return numberWithoutDecimal;
      }

      return "".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));
    }

    if (precisionDecimalStr === '.0') {
      return numberWithoutDecimal;
    }

    return "".concat(numberWithoutDecimal).concat(precisionDecimalStr);
  }

  /**
   * When click and hold on a button - the speed of auto changing the value.
   */

  var STEP_INTERVAL = 200;
  /**
   * When click and hold on a button - the delay before auto changing the value.
   */

  var STEP_DELAY = 600;
  function StepHandler(_ref) {
    var prefixCls = _ref.prefixCls,
        upNode = _ref.upNode,
        downNode = _ref.downNode,
        upDisabled = _ref.upDisabled,
        downDisabled = _ref.downDisabled,
        onStep = _ref.onStep;
    // ======================== Step ========================
    var stepTimeoutRef = React.useRef();
    var onStepRef = React.useRef();
    onStepRef.current = onStep; // We will interval update step when hold mouse down

    var onStepMouseDown = function onStepMouseDown(e, up) {
      e.preventDefault();
      onStepRef.current(up); // Loop step for interval

      function loopStep() {
        onStepRef.current(up);
        stepTimeoutRef.current = setTimeout(loopStep, STEP_INTERVAL);
      } // First time press will wait some time to trigger loop step update


      stepTimeoutRef.current = setTimeout(loopStep, STEP_DELAY);
    };

    var onStopStep = function onStopStep() {
      clearTimeout(stepTimeoutRef.current);
    };

    React.useEffect(function () {
      return onStopStep;
    }, []); // ======================= Render =======================

    if (isMobile()) {
      return null;
    }

    var handlerClassName = "".concat(prefixCls, "-handler");
    var upClassName = classnames(handlerClassName, "".concat(handlerClassName, "-up"), _defineProperty$1({}, "".concat(handlerClassName, "-up-disabled"), upDisabled));
    var downClassName = classnames(handlerClassName, "".concat(handlerClassName, "-down"), _defineProperty$1({}, "".concat(handlerClassName, "-down-disabled"), downDisabled));
    var sharedHandlerProps = {
      unselectable: 'on',
      role: 'button',
      onMouseUp: onStopStep,
      onMouseLeave: onStopStep
    };
    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(handlerClassName, "-wrap")
    }, /*#__PURE__*/React.createElement("span", _extends$1({}, sharedHandlerProps, {
      onMouseDown: function onMouseDown(e) {
        onStepMouseDown(e, true);
      },
      "aria-label": "Increase Value",
      "aria-disabled": upDisabled,
      className: upClassName
    }), upNode || /*#__PURE__*/React.createElement("span", {
      unselectable: "on",
      className: "".concat(prefixCls, "-handler-up-inner")
    })), /*#__PURE__*/React.createElement("span", _extends$1({}, sharedHandlerProps, {
      onMouseDown: function onMouseDown(e) {
        onStepMouseDown(e, false);
      },
      "aria-label": "Decrease Value",
      "aria-disabled": downDisabled,
      className: downClassName
    }), downNode || /*#__PURE__*/React.createElement("span", {
      unselectable: "on",
      className: "".concat(prefixCls, "-handler-down-inner")
    })));
  }

  /**
   * Keep input cursor in the correct position if possible.
   * Is this necessary since we have `formatter` which may mass the content?
   */

  function useCursor(input, focused) {
    var selectionRef = React.useRef(null);

    function recordCursor() {
      // Record position
      try {
        var start = input.selectionStart,
            end = input.selectionEnd,
            value = input.value;
        var beforeTxt = value.substring(0, start);
        var afterTxt = value.substring(end);
        selectionRef.current = {
          start: start,
          end: end,
          value: value,
          beforeTxt: beforeTxt,
          afterTxt: afterTxt
        };
      } catch (e) {// Fix error in Chrome:
        // Failed to read the 'selectionStart' property from 'HTMLInputElement'
        // http://stackoverflow.com/q/21177489/3040605
      }
    }
    /**
     * Restore logic:
     *  1. back string same
     *  2. start string same
     */


    function restoreCursor() {
      if (input && selectionRef.current && focused) {
        try {
          var value = input.value;
          var _selectionRef$current = selectionRef.current,
              beforeTxt = _selectionRef$current.beforeTxt,
              afterTxt = _selectionRef$current.afterTxt,
              start = _selectionRef$current.start;
          var startPos = value.length;

          if (value.endsWith(afterTxt)) {
            startPos = value.length - selectionRef.current.afterTxt.length;
          } else if (value.startsWith(beforeTxt)) {
            startPos = beforeTxt.length;
          } else {
            var beforeLastChar = beforeTxt[start - 1];
            var newIndex = value.indexOf(beforeLastChar, start - 1);

            if (newIndex !== -1) {
              startPos = newIndex + 1;
            }
          }

          input.setSelectionRange(startPos, startPos);
        } catch (e) {
          warningOnce(false, "Something warning of cursor restore. Please fire issue about this: ".concat(e.message));
        }
      }
    }

    return [recordCursor, restoreCursor];
  }

  var useLayoutEffect$1 = canUseDom() ? React.useLayoutEffect : React.useEffect;

  /**
   * Work as `componentDidUpdate`
   */

  function useUpdateEffect(callback, condition) {
    var initRef = React.useRef(false);
    useLayoutEffect$1(function () {
      if (!initRef.current) {
        initRef.current = true;
        return undefined;
      }

      return callback();
    }, condition);
  }

  /**
   * Always trigger latest once when call multiple time
   */

  var useFrame = (function () {
    var idRef = React.useRef(0);

    var cleanUp = function cleanUp() {
      wrapperRaf.cancel(idRef.current);
    };

    React.useEffect(function () {
      return cleanUp;
    }, []);
    return function (callback) {
      cleanUp();
      idRef.current = wrapperRaf(function () {
        callback();
      });
    };
  });

  var _excluded$b = ["prefixCls", "className", "style", "min", "max", "step", "defaultValue", "value", "disabled", "readOnly", "upHandler", "downHandler", "keyboard", "controls", "stringMode", "parser", "formatter", "precision", "decimalSeparator", "onChange", "onInput", "onPressEnter", "onStep"];
  /**
   * We support `stringMode` which need handle correct type when user call in onChange
   */

  var getDecimalValue = function getDecimalValue(stringMode, decimalValue) {
    if (stringMode || decimalValue.isEmpty()) {
      return decimalValue.toString();
    }

    return decimalValue.toNumber();
  };

  var getDecimalIfValidate = function getDecimalIfValidate(value) {
    var decimal = getMiniDecimal(value);
    return decimal.isInvalidate() ? null : decimal;
  };

  var InputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var _props$prefixCls = props.prefixCls,
        prefixCls = _props$prefixCls === void 0 ? 'rc-input-number' : _props$prefixCls,
        className = props.className,
        style = props.style,
        min = props.min,
        max = props.max,
        _props$step = props.step,
        step = _props$step === void 0 ? 1 : _props$step,
        defaultValue = props.defaultValue,
        value = props.value,
        disabled = props.disabled,
        readOnly = props.readOnly,
        upHandler = props.upHandler,
        downHandler = props.downHandler,
        keyboard = props.keyboard,
        _props$controls = props.controls,
        controls = _props$controls === void 0 ? true : _props$controls,
        stringMode = props.stringMode,
        parser = props.parser,
        formatter = props.formatter,
        precision = props.precision,
        decimalSeparator = props.decimalSeparator,
        onChange = props.onChange,
        onInput = props.onInput,
        onPressEnter = props.onPressEnter,
        onStep = props.onStep,
        inputProps = _objectWithoutProperties$1(props, _excluded$b);

    var inputClassName = "".concat(prefixCls, "-input");
    var inputRef = React.useRef(null);

    var _React$useState = React.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        focus = _React$useState2[0],
        setFocus = _React$useState2[1];

    var userTypingRef = React.useRef(false);
    var compositionRef = React.useRef(false); // ============================ Value =============================
    // Real value control

    var _React$useState3 = React.useState(function () {
      return getMiniDecimal(value !== null && value !== void 0 ? value : defaultValue);
    }),
        _React$useState4 = _slicedToArray$1(_React$useState3, 2),
        decimalValue = _React$useState4[0],
        setDecimalValue = _React$useState4[1];

    function setUncontrolledDecimalValue(newDecimal) {
      if (value === undefined) {
        setDecimalValue(newDecimal);
      }
    } // ====================== Parser & Formatter ======================

    /**
     * `precision` is used for formatter & onChange.
     * It will auto generate by `value` & `step`.
     * But it will not block user typing.
     *
     * Note: Auto generate `precision` is used for legacy logic.
     * We should remove this since we already support high precision with BigInt.
     *
     * @param number  Provide which number should calculate precision
     * @param userTyping  Change by user typing
     */


    var getPrecision = React.useCallback(function (numStr, userTyping) {
      if (userTyping) {
        return undefined;
      }

      if (precision >= 0) {
        return precision;
      }

      return Math.max(getNumberPrecision(numStr), getNumberPrecision(step));
    }, [precision, step]); // >>> Parser

    var mergedParser = React.useCallback(function (num) {
      var numStr = String(num);

      if (parser) {
        return parser(numStr);
      }

      var parsedStr = numStr;

      if (decimalSeparator) {
        parsedStr = parsedStr.replace(decimalSeparator, '.');
      } // [Legacy] We still support auto convert `$ 123,456` to `123456`


      return parsedStr.replace(/[^\w.-]+/g, '');
    }, [parser, decimalSeparator]); // >>> Formatter

    var inputValueRef = React.useRef('');
    var mergedFormatter = React.useCallback(function (number, userTyping) {
      if (formatter) {
        return formatter(number, {
          userTyping: userTyping,
          input: String(inputValueRef.current)
        });
      }

      var str = typeof number === 'number' ? num2str(number) : number; // User typing will not auto format with precision directly

      if (!userTyping) {
        var mergedPrecision = getPrecision(str, userTyping);

        if (validateNumber(str) && (decimalSeparator || mergedPrecision >= 0)) {
          // Separator
          var separatorStr = decimalSeparator || '.';
          str = toFixed(str, separatorStr, mergedPrecision);
        }
      }

      return str;
    }, [formatter, getPrecision, decimalSeparator]); // ========================== InputValue ==========================

    /**
     * Input text value control
     *
     * User can not update input content directly. It update with follow rules by priority:
     *  1. controlled `value` changed
     *    * [SPECIAL] Typing like `1.` should not immediately convert to `1`
     *  2. User typing with format (not precision)
     *  3. Blur or Enter trigger revalidate
     */

    var _React$useState5 = React.useState(function () {
      var initValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : value;

      if (decimalValue.isInvalidate() && ['string', 'number'].includes(_typeof$1(initValue))) {
        return Number.isNaN(initValue) ? '' : initValue;
      }

      return mergedFormatter(decimalValue.toString(), false);
    }),
        _React$useState6 = _slicedToArray$1(_React$useState5, 2),
        inputValue = _React$useState6[0],
        setInternalInputValue = _React$useState6[1];

    inputValueRef.current = inputValue; // Should always be string

    function setInputValue(newValue, userTyping) {
      setInternalInputValue(mergedFormatter( // Invalidate number is sometime passed by external control, we should let it go
      // Otherwise is controlled by internal interactive logic which check by userTyping
      // You can ref 'show limited value when input is not focused' test for more info.
      newValue.isInvalidate() ? newValue.toString(false) : newValue.toString(!userTyping), userTyping));
    } // >>> Max & Min limit


    var maxDecimal = React.useMemo(function () {
      return getDecimalIfValidate(max);
    }, [max]);
    var minDecimal = React.useMemo(function () {
      return getDecimalIfValidate(min);
    }, [min]);
    var upDisabled = React.useMemo(function () {
      if (!maxDecimal || !decimalValue || decimalValue.isInvalidate()) {
        return false;
      }

      return maxDecimal.lessEquals(decimalValue);
    }, [maxDecimal, decimalValue]);
    var downDisabled = React.useMemo(function () {
      if (!minDecimal || !decimalValue || decimalValue.isInvalidate()) {
        return false;
      }

      return decimalValue.lessEquals(minDecimal);
    }, [minDecimal, decimalValue]); // Cursor controller

    var _useCursor = useCursor(inputRef.current, focus),
        _useCursor2 = _slicedToArray$1(_useCursor, 2),
        recordCursor = _useCursor2[0],
        restoreCursor = _useCursor2[1]; // ============================= Data =============================

    /**
     * Find target value closet within range.
     * e.g. [11, 28]:
     *    3  => 11
     *    23 => 23
     *    99 => 28
     */


    var getRangeValue = function getRangeValue(target) {
      // target > max
      if (maxDecimal && !target.lessEquals(maxDecimal)) {
        return maxDecimal;
      } // target < min


      if (minDecimal && !minDecimal.lessEquals(target)) {
        return minDecimal;
      }

      return null;
    };
    /**
     * Check value is in [min, max] range
     */


    var isInRange = function isInRange(target) {
      return !getRangeValue(target);
    };
    /**
     * Trigger `onChange` if value validated and not equals of origin.
     * Return the value that re-align in range.
     */


    var triggerValueUpdate = function triggerValueUpdate(newValue, userTyping) {
      var updateValue = newValue;
      var isRangeValidate = isInRange(updateValue) || updateValue.isEmpty(); // Skip align value when trigger value is empty.
      // We just trigger onChange(null)
      // This should not block user typing

      if (!updateValue.isEmpty() && !userTyping) {
        // Revert value in range if needed
        updateValue = getRangeValue(updateValue) || updateValue;
        isRangeValidate = true;
      }

      if (!readOnly && !disabled && isRangeValidate) {
        var numStr = updateValue.toString();
        var mergedPrecision = getPrecision(numStr, userTyping);

        if (mergedPrecision >= 0) {
          updateValue = getMiniDecimal(toFixed(numStr, '.', mergedPrecision));
        } // Trigger event


        if (!updateValue.equals(decimalValue)) {
          setUncontrolledDecimalValue(updateValue);
          onChange === null || onChange === void 0 ? void 0 : onChange(updateValue.isEmpty() ? null : getDecimalValue(stringMode, updateValue)); // Reformat input if value is not controlled

          if (value === undefined) {
            setInputValue(updateValue, userTyping);
          }
        }

        return updateValue;
      }

      return decimalValue;
    }; // ========================== User Input ==========================


    var onNextPromise = useFrame(); // >>> Collect input value

    var collectInputValue = function collectInputValue(inputStr) {
      recordCursor(); // Update inputValue incase input can not parse as number

      setInternalInputValue(inputStr); // Parse number

      if (!compositionRef.current) {
        var finalValue = mergedParser(inputStr);
        var finalDecimal = getMiniDecimal(finalValue);

        if (!finalDecimal.isNaN()) {
          triggerValueUpdate(finalDecimal, true);
        }
      } // Trigger onInput later to let user customize value if they want do handle something after onChange


      onInput === null || onInput === void 0 ? void 0 : onInput(inputStr); // optimize for chinese input experience
      // https://github.com/ant-design/ant-design/issues/8196

      onNextPromise(function () {
        var nextInputStr = inputStr;

        if (!parser) {
          nextInputStr = inputStr.replace(/。/g, '.');
        }

        if (nextInputStr !== inputStr) {
          collectInputValue(nextInputStr);
        }
      });
    }; // >>> Composition


    var onCompositionStart = function onCompositionStart() {
      compositionRef.current = true;
    };

    var onCompositionEnd = function onCompositionEnd() {
      compositionRef.current = false;
      collectInputValue(inputRef.current.value);
    }; // >>> Input


    var onInternalInput = function onInternalInput(e) {
      collectInputValue(e.target.value);
    }; // ============================= Step =============================


    var onInternalStep = function onInternalStep(up) {
      var _inputRef$current;

      // Ignore step since out of range
      if (up && upDisabled || !up && downDisabled) {
        return;
      } // Clear typing status since it may caused by up & down key.
      // We should sync with input value.


      userTypingRef.current = false;
      var stepDecimal = getMiniDecimal(step);

      if (!up) {
        stepDecimal = stepDecimal.negate();
      }

      var target = (decimalValue || getMiniDecimal(0)).add(stepDecimal.toString());
      var updatedValue = triggerValueUpdate(target, false);
      onStep === null || onStep === void 0 ? void 0 : onStep(getDecimalValue(stringMode, updatedValue), {
        offset: step,
        type: up ? 'up' : 'down'
      });
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
    }; // ============================ Flush =============================

    /**
     * Flush current input content to trigger value change & re-formatter input if needed
     */


    var flushInputValue = function flushInputValue(userTyping) {
      var parsedValue = getMiniDecimal(mergedParser(inputValue));
      var formatValue = parsedValue;

      if (!parsedValue.isNaN()) {
        // Only validate value or empty value can be re-fill to inputValue
        // Reassign the formatValue within ranged of trigger control
        formatValue = triggerValueUpdate(parsedValue, userTyping);
      } else {
        formatValue = decimalValue;
      }

      if (value !== undefined) {
        // Reset back with controlled value first
        setInputValue(decimalValue, false);
      } else if (!formatValue.isNaN()) {
        // Reset input back since no validate value
        setInputValue(formatValue, false);
      }
    };

    var onKeyDown = function onKeyDown(event) {
      var which = event.which;
      userTypingRef.current = true;

      if (which === KeyCode.ENTER) {
        if (!compositionRef.current) {
          userTypingRef.current = false;
        }

        flushInputValue(false);
        onPressEnter === null || onPressEnter === void 0 ? void 0 : onPressEnter(event);
      }

      if (keyboard === false) {
        return;
      } // Do step


      if (!compositionRef.current && [KeyCode.UP, KeyCode.DOWN].includes(which)) {
        onInternalStep(KeyCode.UP === which);
        event.preventDefault();
      }
    };

    var onKeyUp = function onKeyUp() {
      userTypingRef.current = false;
    }; // >>> Focus & Blur


    var onBlur = function onBlur() {
      flushInputValue(false);
      setFocus(false);
      userTypingRef.current = false;
    }; // ========================== Controlled ==========================
    // Input by precision


    useUpdateEffect(function () {
      if (!decimalValue.isInvalidate()) {
        setInputValue(decimalValue, false);
      }
    }, [precision]); // Input by value

    useUpdateEffect(function () {
      var newValue = getMiniDecimal(value);
      setDecimalValue(newValue);
      var currentParsedValue = getMiniDecimal(mergedParser(inputValue)); // When user typing from `1.2` to `1.`, we should not convert to `1` immediately.
      // But let it go if user set `formatter`

      if (!newValue.equals(currentParsedValue) || !userTypingRef.current || formatter) {
        // Update value as effect
        setInputValue(newValue, userTypingRef.current);
      }
    }, [value]); // ============================ Cursor ============================

    useUpdateEffect(function () {
      if (formatter) {
        restoreCursor();
      }
    }, [inputValue]); // ============================ Render ============================

    return /*#__PURE__*/React.createElement("div", {
      className: classnames(prefixCls, className, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-focused"), focus), _defineProperty$1(_classNames, "".concat(prefixCls, "-disabled"), disabled), _defineProperty$1(_classNames, "".concat(prefixCls, "-readonly"), readOnly), _defineProperty$1(_classNames, "".concat(prefixCls, "-not-a-number"), decimalValue.isNaN()), _defineProperty$1(_classNames, "".concat(prefixCls, "-out-of-range"), !decimalValue.isInvalidate() && !isInRange(decimalValue)), _classNames)),
      style: style,
      onFocus: function onFocus() {
        setFocus(true);
      },
      onBlur: onBlur,
      onKeyDown: onKeyDown,
      onKeyUp: onKeyUp,
      onCompositionStart: onCompositionStart,
      onCompositionEnd: onCompositionEnd
    }, controls && /*#__PURE__*/React.createElement(StepHandler, {
      prefixCls: prefixCls,
      upNode: upHandler,
      downNode: downHandler,
      upDisabled: upDisabled,
      downDisabled: downDisabled,
      onStep: onInternalStep
    }), /*#__PURE__*/React.createElement("div", {
      className: "".concat(inputClassName, "-wrap")
    }, /*#__PURE__*/React.createElement("input", _extends$1({
      autoComplete: "off",
      role: "spinbutton",
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": decimalValue.isInvalidate() ? null : decimalValue.toString(),
      step: step
    }, inputProps, {
      ref: composeRef(inputRef, ref),
      className: inputClassName,
      value: inputValue,
      onChange: onInternalInput,
      disabled: disabled,
      readOnly: readOnly
    }))));
  });
  InputNumber.displayName = 'InputNumber';

  // This icon file is generated automatically.
  var UpOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M890.5 755.3L537.9 269.2c-12.8-17.6-39-17.6-51.7 0L133.5 755.3A8 8 0 00140 768h75c5.1 0 9.9-2.5 12.9-6.6L512 369.8l284.1 391.6c3 4.1 7.8 6.6 12.9 6.6h75c6.5 0 10.3-7.4 6.5-12.7z" } }] }, "name": "up", "theme": "outlined" };

  var UpOutlined$1 = function UpOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: UpOutlined
    }));
  };

  UpOutlined$1.displayName = 'UpOutlined';
  var UpOutlined$2 = /*#__PURE__*/React.forwardRef(UpOutlined$1);

  var __rest$m = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var InputNumber$1 = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _classNames;

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var size = React.useContext(SizeContext);

    var className = props.className,
        customizeSize = props.size,
        customizePrefixCls = props.prefixCls,
        addonBefore = props.addonBefore,
        addonAfter = props.addonAfter,
        _props$bordered = props.bordered,
        bordered = _props$bordered === void 0 ? true : _props$bordered,
        readOnly = props.readOnly,
        others = __rest$m(props, ["className", "size", "prefixCls", "addonBefore", "addonAfter", "bordered", "readOnly"]);

    var prefixCls = getPrefixCls('input-number', customizePrefixCls);
    var upIcon = /*#__PURE__*/React.createElement(UpOutlined$2, {
      className: "".concat(prefixCls, "-handler-up-inner")
    });
    var downIcon = /*#__PURE__*/React.createElement(DownOutlined$2, {
      className: "".concat(prefixCls, "-handler-down-inner")
    });
    var mergeSize = customizeSize || size;
    var inputNumberClass = classnames((_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-lg"), mergeSize === 'large'), _defineProperty$1(_classNames, "".concat(prefixCls, "-sm"), mergeSize === 'small'), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _defineProperty$1(_classNames, "".concat(prefixCls, "-readonly"), readOnly), _defineProperty$1(_classNames, "".concat(prefixCls, "-borderless"), !bordered), _classNames), className);
    var element = /*#__PURE__*/React.createElement(InputNumber, _extends$1({
      ref: ref,
      className: inputNumberClass,
      upHandler: upIcon,
      downHandler: downIcon,
      prefixCls: prefixCls,
      readOnly: readOnly
    }, others));

    if (addonBefore != null || addonAfter != null) {
      var _classNames3;

      var wrapperClassName = "".concat(prefixCls, "-group");
      var addonClassName = "".concat(wrapperClassName, "-addon");
      var addonBeforeNode = addonBefore ? /*#__PURE__*/React.createElement("div", {
        className: addonClassName
      }, addonBefore) : null;
      var addonAfterNode = addonAfter ? /*#__PURE__*/React.createElement("div", {
        className: addonClassName
      }, addonAfter) : null;
      var mergedWrapperClassName = classnames("".concat(prefixCls, "-wrapper"), wrapperClassName, _defineProperty$1({}, "".concat(wrapperClassName, "-rtl"), direction === 'rtl'));
      var mergedGroupClassName = classnames("".concat(prefixCls, "-group-wrapper"), (_classNames3 = {}, _defineProperty$1(_classNames3, "".concat(prefixCls, "-group-wrapper-sm"), size === 'small'), _defineProperty$1(_classNames3, "".concat(prefixCls, "-group-wrapper-lg"), size === 'large'), _defineProperty$1(_classNames3, "".concat(prefixCls, "-group-wrapper-rtl"), direction === 'rtl'), _classNames3), className);
      return /*#__PURE__*/React.createElement("div", {
        className: mergedGroupClassName,
        style: props.style
      }, /*#__PURE__*/React.createElement("div", {
        className: mergedWrapperClassName
      }, addonBeforeNode, cloneElement(element, {
        style: null
      }), addonAfterNode));
    }

    return element;
  });

  var __rest$n = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var mousePosition; // ref: https://github.com/ant-design/ant-design/issues/15795

  var getClickPosition = function getClickPosition(e) {
    mousePosition = {
      x: e.pageX,
      y: e.pageY
    }; // 100ms 内发生过点击事件，则从点击位置动画展示
    // 否则直接 zoom 展示
    // 这样可以兼容非点击方式展开

    setTimeout(function () {
      mousePosition = null;
    }, 100);
  }; // 只有点击事件支持从鼠标位置动画展开


  if (canUseDocElement()) {
    document.documentElement.addEventListener('click', getClickPosition, true);
  }

  var Modal = function Modal(props) {
    var _classNames;

    var _React$useContext = React.useContext(ConfigContext),
        getContextPopupContainer = _React$useContext.getPopupContainer,
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var handleCancel = function handleCancel(e) {
      var onCancel = props.onCancel;
      onCancel === null || onCancel === void 0 ? void 0 : onCancel(e);
    };

    var handleOk = function handleOk(e) {
      var onOk = props.onOk;
      onOk === null || onOk === void 0 ? void 0 : onOk(e);
    };

    var renderFooter = function renderFooter(locale) {
      var okText = props.okText,
          okType = props.okType,
          cancelText = props.cancelText,
          confirmLoading = props.confirmLoading;
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, _extends$1({
        onClick: handleCancel
      }, props.cancelButtonProps), cancelText || locale.cancelText), /*#__PURE__*/React.createElement(Button, _extends$1({}, convertLegacyProps(okType), {
        loading: confirmLoading,
        onClick: handleOk
      }, props.okButtonProps), okText || locale.okText));
    };

    var customizePrefixCls = props.prefixCls,
        footer = props.footer,
        visible = props.visible,
        wrapClassName = props.wrapClassName,
        centered = props.centered,
        getContainer = props.getContainer,
        closeIcon = props.closeIcon,
        _props$focusTriggerAf = props.focusTriggerAfterClose,
        focusTriggerAfterClose = _props$focusTriggerAf === void 0 ? true : _props$focusTriggerAf,
        restProps = __rest$n(props, ["prefixCls", "footer", "visible", "wrapClassName", "centered", "getContainer", "closeIcon", "focusTriggerAfterClose"]);

    var prefixCls = getPrefixCls('modal', customizePrefixCls);
    var rootPrefixCls = getPrefixCls();
    var defaultFooter = /*#__PURE__*/React.createElement(LocaleReceiver, {
      componentName: "Modal",
      defaultLocale: getConfirmLocale()
    }, renderFooter);
    var closeIconToRender = /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-close-x")
    }, closeIcon || /*#__PURE__*/React.createElement(CloseOutlined$2, {
      className: "".concat(prefixCls, "-close-icon")
    }));
    var wrapClassNameExtended = classnames(wrapClassName, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-centered"), !!centered), _defineProperty$1(_classNames, "".concat(prefixCls, "-wrap-rtl"), direction === 'rtl'), _classNames));
    return /*#__PURE__*/React.createElement(DialogWrap, _extends$1({}, restProps, {
      getContainer: getContainer === undefined ? getContextPopupContainer : getContainer,
      prefixCls: prefixCls,
      wrapClassName: wrapClassNameExtended,
      footer: footer === undefined ? defaultFooter : footer,
      visible: visible,
      mousePosition: mousePosition,
      onClose: handleCancel,
      closeIcon: closeIconToRender,
      focusTriggerAfterClose: focusTriggerAfterClose,
      transitionName: getTransitionName$2(rootPrefixCls, 'zoom', props.transitionName),
      maskTransitionName: getTransitionName$2(rootPrefixCls, 'fade', props.maskTransitionName)
    }));
  };

  Modal.defaultProps = {
    width: 520,
    confirmLoading: false,
    visible: false,
    okType: 'primary'
  };

  function isThenable(thing) {
    return !!(thing && !!thing.then);
  }

  var ActionButton = function ActionButton(props) {
    var clickedRef = React.useRef(false);
    var ref = React.useRef();

    var _React$useState = React.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        loading = _React$useState2[0],
        setLoading = _React$useState2[1];

    React.useEffect(function () {
      var timeoutId;

      if (props.autoFocus) {
        var $this = ref.current;
        timeoutId = setTimeout(function () {
          return $this.focus();
        });
      }

      return function () {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
      };
    }, []);

    var handlePromiseOnOk = function handlePromiseOnOk(returnValueOfOnOk) {
      var close = props.close;

      if (!isThenable(returnValueOfOnOk)) {
        return;
      }

      setLoading(true);
      returnValueOfOnOk.then(function () {
        setLoading(false);
        close.apply(void 0, arguments);
        clickedRef.current = false;
      }, function (e) {
        // Emit error when catch promise reject
        // eslint-disable-next-line no-console
        console.error(e); // See: https://github.com/ant-design/ant-design/issues/6183

        setLoading(false);
        clickedRef.current = false;
      });
    };

    var onClick = function onClick(e) {
      var actionFn = props.actionFn,
          close = props.close;

      if (clickedRef.current) {
        return;
      }

      clickedRef.current = true;

      if (!actionFn) {
        close();
        return;
      }

      var returnValueOfOnOk;

      if (props.emitEvent) {
        returnValueOfOnOk = actionFn(e);

        if (props.quitOnNullishReturnValue && !isThenable(returnValueOfOnOk)) {
          clickedRef.current = false;
          close(e);
          return;
        }
      } else if (actionFn.length) {
        returnValueOfOnOk = actionFn(close); // https://github.com/ant-design/ant-design/issues/23358

        clickedRef.current = false;
      } else {
        returnValueOfOnOk = actionFn();

        if (!returnValueOfOnOk) {
          close();
          return;
        }
      }

      handlePromiseOnOk(returnValueOfOnOk);
    };

    var type = props.type,
        children = props.children,
        prefixCls = props.prefixCls,
        buttonProps = props.buttonProps;
    return /*#__PURE__*/React.createElement(Button, _extends$1({}, convertLegacyProps(type), {
      onClick: onClick,
      loading: loading,
      prefixCls: prefixCls
    }, buttonProps, {
      ref: ref
    }), children);
  };

  var ConfirmDialog = function ConfirmDialog(props) {
    var icon = props.icon,
        onCancel = props.onCancel,
        onOk = props.onOk,
        close = props.close,
        zIndex = props.zIndex,
        afterClose = props.afterClose,
        visible = props.visible,
        keyboard = props.keyboard,
        centered = props.centered,
        getContainer = props.getContainer,
        maskStyle = props.maskStyle,
        okText = props.okText,
        okButtonProps = props.okButtonProps,
        cancelText = props.cancelText,
        cancelButtonProps = props.cancelButtonProps,
        direction = props.direction,
        prefixCls = props.prefixCls,
        rootPrefixCls = props.rootPrefixCls,
        iconPrefixCls = props.iconPrefixCls,
        bodyStyle = props.bodyStyle,
        _props$closable = props.closable,
        closable = _props$closable === void 0 ? false : _props$closable,
        closeIcon = props.closeIcon,
        modalRender = props.modalRender,
        focusTriggerAfterClose = props.focusTriggerAfterClose;
    devWarning(!(typeof icon === 'string' && icon.length > 2), 'Modal', "`icon` is using ReactNode instead of string naming in v4. Please check `".concat(icon, "` at https://ant.design/components/icon")); // 支持传入{ icon: null }来隐藏`Modal.confirm`默认的Icon

    var okType = props.okType || 'primary';
    var contentPrefixCls = "".concat(prefixCls, "-confirm"); // 默认为 true，保持向下兼容

    var okCancel = 'okCancel' in props ? props.okCancel : true;
    var width = props.width || 416;
    var style = props.style || {};
    var mask = props.mask === undefined ? true : props.mask; // 默认为 false，保持旧版默认行为

    var maskClosable = props.maskClosable === undefined ? false : props.maskClosable;
    var autoFocusButton = props.autoFocusButton === null ? false : props.autoFocusButton || 'ok';
    var classString = classnames(contentPrefixCls, "".concat(contentPrefixCls, "-").concat(props.type), _defineProperty$1({}, "".concat(contentPrefixCls, "-rtl"), direction === 'rtl'), props.className);
    var cancelButton = okCancel && /*#__PURE__*/React.createElement(ActionButton, {
      actionFn: onCancel,
      close: close,
      autoFocus: autoFocusButton === 'cancel',
      buttonProps: cancelButtonProps,
      prefixCls: "".concat(rootPrefixCls, "-btn")
    }, cancelText);
    return /*#__PURE__*/React.createElement(ConfigProvider, {
      prefixCls: rootPrefixCls,
      iconPrefixCls: iconPrefixCls,
      direction: direction
    }, /*#__PURE__*/React.createElement(Modal, {
      prefixCls: prefixCls,
      className: classString,
      wrapClassName: classnames(_defineProperty$1({}, "".concat(contentPrefixCls, "-centered"), !!props.centered)),
      onCancel: function onCancel() {
        return close({
          triggerCancel: true
        });
      },
      visible: visible,
      title: "",
      footer: "",
      transitionName: getTransitionName$2(rootPrefixCls, 'zoom', props.transitionName),
      maskTransitionName: getTransitionName$2(rootPrefixCls, 'fade', props.maskTransitionName),
      mask: mask,
      maskClosable: maskClosable,
      maskStyle: maskStyle,
      style: style,
      bodyStyle: bodyStyle,
      width: width,
      zIndex: zIndex,
      afterClose: afterClose,
      keyboard: keyboard,
      centered: centered,
      getContainer: getContainer,
      closable: closable,
      closeIcon: closeIcon,
      modalRender: modalRender,
      focusTriggerAfterClose: focusTriggerAfterClose
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(contentPrefixCls, "-body-wrapper")
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(contentPrefixCls, "-body")
    }, icon, props.title === undefined ? null : /*#__PURE__*/React.createElement("span", {
      className: "".concat(contentPrefixCls, "-title")
    }, props.title), /*#__PURE__*/React.createElement("div", {
      className: "".concat(contentPrefixCls, "-content")
    }, props.content)), /*#__PURE__*/React.createElement("div", {
      className: "".concat(contentPrefixCls, "-btns")
    }, cancelButton, /*#__PURE__*/React.createElement(ActionButton, {
      type: okType,
      actionFn: onOk,
      close: close,
      autoFocus: autoFocusButton === 'ok',
      buttonProps: okButtonProps,
      prefixCls: "".concat(rootPrefixCls, "-btn")
    }, okText)))));
  };

  var destroyFns = [];

  var __rest$o = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var defaultRootPrefixCls = '';

  function getRootPrefixCls() {
    return defaultRootPrefixCls;
  }

  function confirm(config) {
    var container = document.createDocumentFragment(); // eslint-disable-next-line @typescript-eslint/no-use-before-define

    var currentConfig = _extends$1(_extends$1({}, config), {
      close: close,
      visible: true
    });

    function destroy() {
      reactDom.unmountComponentAtNode(container);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var triggerCancel = args.some(function (param) {
        return param && param.triggerCancel;
      });

      if (config.onCancel && triggerCancel) {
        config.onCancel.apply(config, args);
      }

      for (var i = 0; i < destroyFns.length; i++) {
        var fn = destroyFns[i]; // eslint-disable-next-line @typescript-eslint/no-use-before-define

        if (fn === close) {
          destroyFns.splice(i, 1);
          break;
        }
      }
    }

    function render(_a) {
      var okText = _a.okText,
          cancelText = _a.cancelText,
          customizePrefixCls = _a.prefixCls,
          props = __rest$o(_a, ["okText", "cancelText", "prefixCls"]);
      /**
       * https://github.com/ant-design/ant-design/issues/23623
       *
       * Sync render blocks React event. Let's make this async.
       */


      setTimeout(function () {
        var runtimeLocale = getConfirmLocale();

        var _globalConfig = globalConfig(),
            getPrefixCls = _globalConfig.getPrefixCls,
            getIconPrefixCls = _globalConfig.getIconPrefixCls; // because Modal.config  set rootPrefixCls, which is different from other components


        var rootPrefixCls = getPrefixCls(undefined, getRootPrefixCls());
        var prefixCls = customizePrefixCls || "".concat(rootPrefixCls, "-modal");
        var iconPrefixCls = getIconPrefixCls();
        reactDom.render( /*#__PURE__*/React.createElement(ConfirmDialog, _extends$1({}, props, {
          prefixCls: prefixCls,
          rootPrefixCls: rootPrefixCls,
          iconPrefixCls: iconPrefixCls,
          okText: okText || (props.okCancel ? runtimeLocale.okText : runtimeLocale.justOkText),
          cancelText: cancelText || runtimeLocale.cancelText
        })), container);
      });
    }

    function close() {
      var _this = this;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      currentConfig = _extends$1(_extends$1({}, currentConfig), {
        visible: false,
        afterClose: function afterClose() {
          if (typeof config.afterClose === 'function') {
            config.afterClose();
          }

          destroy.apply(_this, args);
        }
      });
      render(currentConfig);
    }

    function update(configUpdate) {
      if (typeof configUpdate === 'function') {
        currentConfig = configUpdate(currentConfig);
      } else {
        currentConfig = _extends$1(_extends$1({}, currentConfig), configUpdate);
      }

      render(currentConfig);
    }

    render(currentConfig);
    destroyFns.push(close);
    return {
      destroy: close,
      update: update
    };
  }
  function withWarn(props) {
    return _extends$1(_extends$1({
      icon: /*#__PURE__*/React.createElement(ExclamationCircleOutlined$2, null),
      okCancel: false
    }, props), {
      type: 'warning'
    });
  }
  function withInfo(props) {
    return _extends$1(_extends$1({
      icon: /*#__PURE__*/React.createElement(InfoCircleOutlined$2, null),
      okCancel: false
    }, props), {
      type: 'info'
    });
  }
  function withSuccess(props) {
    return _extends$1(_extends$1({
      icon: /*#__PURE__*/React.createElement(CheckCircleOutlined$2, null),
      okCancel: false
    }, props), {
      type: 'success'
    });
  }
  function withError(props) {
    return _extends$1(_extends$1({
      icon: /*#__PURE__*/React.createElement(CloseCircleOutlined$2, null),
      okCancel: false
    }, props), {
      type: 'error'
    });
  }
  function withConfirm(props) {
    return _extends$1(_extends$1({
      icon: /*#__PURE__*/React.createElement(ExclamationCircleOutlined$2, null),
      okCancel: true
    }, props), {
      type: 'confirm'
    });
  }
  function modalGlobalConfig(_ref) {
    var rootPrefixCls = _ref.rootPrefixCls;
    devWarning(false, 'Modal', 'Modal.config is deprecated. Please use ConfigProvider.config instead.');
    defaultRootPrefixCls = rootPrefixCls;
  }

  function usePatchElement() {
    var _React$useState = React.useState([]),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        elements = _React$useState2[0],
        setElements = _React$useState2[1];

    var patchElement = React.useCallback(function (element) {
      // append a new element to elements (and create a new ref)
      setElements(function (originElements) {
        return [].concat(_toConsumableArray$1(originElements), [element]);
      }); // return a function that removes the new element out of elements (and create a new ref)
      // it works a little like useEffect

      return function () {
        setElements(function (originElements) {
          return originElements.filter(function (ele) {
            return ele !== element;
          });
        });
      };
    }, []);
    return [elements, patchElement];
  }

  var HookModal = function HookModal(_ref, ref) {
    var afterClose = _ref.afterClose,
        config = _ref.config;

    var _React$useState = React.useState(true),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        visible = _React$useState2[0],
        setVisible = _React$useState2[1];

    var _React$useState3 = React.useState(config),
        _React$useState4 = _slicedToArray$1(_React$useState3, 2),
        innerConfig = _React$useState4[0],
        setInnerConfig = _React$useState4[1];

    var _React$useContext = React.useContext(ConfigContext),
        direction = _React$useContext.direction,
        getPrefixCls = _React$useContext.getPrefixCls;

    var prefixCls = getPrefixCls('modal');
    var rootPrefixCls = getPrefixCls();

    var close = function close() {
      setVisible(false);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var triggerCancel = args.some(function (param) {
        return param && param.triggerCancel;
      });

      if (innerConfig.onCancel && triggerCancel) {
        innerConfig.onCancel();
      }
    };

    React.useImperativeHandle(ref, function () {
      return {
        destroy: close,
        update: function update(newConfig) {
          setInnerConfig(function (originConfig) {
            return _extends$1(_extends$1({}, originConfig), newConfig);
          });
        }
      };
    });
    return /*#__PURE__*/React.createElement(LocaleReceiver, {
      componentName: "Modal",
      defaultLocale: localeValues.Modal
    }, function (modalLocale) {
      return /*#__PURE__*/React.createElement(ConfirmDialog, _extends$1({
        prefixCls: prefixCls,
        rootPrefixCls: rootPrefixCls
      }, innerConfig, {
        close: close,
        visible: visible,
        afterClose: afterClose,
        okText: innerConfig.okText || (innerConfig.okCancel ? modalLocale.okText : modalLocale.justOkText),
        direction: direction,
        cancelText: innerConfig.cancelText || modalLocale.cancelText
      }));
    });
  };

  var HookModal$1 = /*#__PURE__*/React.forwardRef(HookModal);

  var uuid$3 = 0;
  var ElementsHolder = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (_props, ref) {
    var _usePatchElement = usePatchElement(),
        _usePatchElement2 = _slicedToArray$1(_usePatchElement, 2),
        elements = _usePatchElement2[0],
        patchElement = _usePatchElement2[1];

    React.useImperativeHandle(ref, function () {
      return {
        patchElement: patchElement
      };
    }, []);
    return /*#__PURE__*/React.createElement(React.Fragment, null, elements);
  }));
  function useModal() {
    var holderRef = React.useRef(null); // ========================== Effect ==========================

    var _React$useState = React.useState([]),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        actionQueue = _React$useState2[0],
        setActionQueue = _React$useState2[1];

    React.useEffect(function () {
      if (actionQueue.length) {
        var cloneQueue = _toConsumableArray$1(actionQueue);

        cloneQueue.forEach(function (action) {
          action();
        });
        setActionQueue([]);
      }
    }, [actionQueue]); // =========================== Hook ===========================

    var getConfirmFunc = React.useCallback(function (withFunc) {
      return function hookConfirm(config) {
        var _a;

        uuid$3 += 1;
        var modalRef = /*#__PURE__*/React.createRef();
        var closeFunc;
        var modal = /*#__PURE__*/React.createElement(HookModal$1, {
          key: "modal-".concat(uuid$3),
          config: withFunc(config),
          ref: modalRef,
          afterClose: function afterClose() {
            closeFunc();
          }
        });
        closeFunc = (_a = holderRef.current) === null || _a === void 0 ? void 0 : _a.patchElement(modal);
        return {
          destroy: function destroy() {
            function destroyAction() {
              var _a;

              (_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.destroy();
            }

            if (modalRef.current) {
              destroyAction();
            } else {
              setActionQueue(function (prev) {
                return [].concat(_toConsumableArray$1(prev), [destroyAction]);
              });
            }
          },
          update: function update(newConfig) {
            function updateAction() {
              var _a;

              (_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.update(newConfig);
            }

            if (modalRef.current) {
              updateAction();
            } else {
              setActionQueue(function (prev) {
                return [].concat(_toConsumableArray$1(prev), [updateAction]);
              });
            }
          }
        };
      };
    }, []);
    var fns = React.useMemo(function () {
      return {
        info: getConfirmFunc(withInfo),
        success: getConfirmFunc(withSuccess),
        error: getConfirmFunc(withError),
        warning: getConfirmFunc(withWarn),
        confirm: getConfirmFunc(withConfirm)
      };
    }, []); // eslint-disable-next-line react/jsx-key

    return [fns, /*#__PURE__*/React.createElement(ElementsHolder, {
      ref: holderRef
    })];
  }

  function modalWarn(props) {
    return confirm(withWarn(props));
  }

  var Modal$1 = Modal;
  Modal$1.useModal = useModal;

  Modal$1.info = function infoFn(props) {
    return confirm(withInfo(props));
  };

  Modal$1.success = function successFn(props) {
    return confirm(withSuccess(props));
  };

  Modal$1.error = function errorFn(props) {
    return confirm(withError(props));
  };

  Modal$1.warning = modalWarn;
  Modal$1.warn = modalWarn;

  Modal$1.confirm = function confirmFn(props) {
    return confirm(withConfirm(props));
  };

  Modal$1.destroyAll = function destroyAllFn() {
    while (destroyFns.length) {
      var close = destroyFns.pop();

      if (close) {
        close();
      }
    }
  };

  Modal$1.config = modalGlobalConfig;

  function validProgress(progress) {
    if (!progress || progress < 0) {
      return 0;
    }

    if (progress > 100) {
      return 100;
    }

    return progress;
  }
  function getSuccessPercent(_ref) {
    var success = _ref.success,
        successPercent = _ref.successPercent;
    var percent = successPercent;
    /** @deprecated Use `percent` instead */

    if (success && 'progress' in success) {
      devWarning(false, 'Progress', '`success.progress` is deprecated. Please use `success.percent` instead.');
      percent = success.progress;
    }

    if (success && 'percent' in success) {
      percent = success.percent;
    }

    return percent;
  }

  var __rest$p = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  /**
   * @example
   *   {
   *     "0%": "#afc163",
   *     "75%": "#009900",
   *     "50%": "green", // ====> '#afc163 0%, #66FF00 25%, #00CC00 50%, #009900 75%, #ffffff 100%'
   *     "25%": "#66FF00",
   *     "100%": "#ffffff"
   *   }
   */

  var sortGradient = function sortGradient(gradients) {
    var tempArr = [];
    Object.keys(gradients).forEach(function (key) {
      var formattedKey = parseFloat(key.replace(/%/g, ''));

      if (!isNaN(formattedKey)) {
        tempArr.push({
          key: formattedKey,
          value: gradients[key]
        });
      }
    });
    tempArr = tempArr.sort(function (a, b) {
      return a.key - b.key;
    });
    return tempArr.map(function (_ref) {
      var key = _ref.key,
          value = _ref.value;
      return "".concat(value, " ").concat(key, "%");
    }).join(', ');
  };
  /**
   * Then this man came to realize the truth: Besides six pence, there is the moon. Besides bread and
   * butter, there is the bug. And... Besides women, there is the code.
   *
   * @example
   *   {
   *     "0%": "#afc163",
   *     "25%": "#66FF00",
   *     "50%": "#00CC00", // ====>  linear-gradient(to right, #afc163 0%, #66FF00 25%,
   *     "75%": "#009900", //        #00CC00 50%, #009900 75%, #ffffff 100%)
   *     "100%": "#ffffff"
   *   }
   */

  var handleGradient = function handleGradient(strokeColor, directionConfig) {
    var _strokeColor$from = strokeColor.from,
        from = _strokeColor$from === void 0 ? presetPrimaryColors.blue : _strokeColor$from,
        _strokeColor$to = strokeColor.to,
        to = _strokeColor$to === void 0 ? presetPrimaryColors.blue : _strokeColor$to,
        _strokeColor$directio = strokeColor.direction,
        direction = _strokeColor$directio === void 0 ? directionConfig === 'rtl' ? 'to left' : 'to right' : _strokeColor$directio,
        rest = __rest$p(strokeColor, ["from", "to", "direction"]);

    if (Object.keys(rest).length !== 0) {
      var sortedGradients = sortGradient(rest);
      return {
        backgroundImage: "linear-gradient(".concat(direction, ", ").concat(sortedGradients, ")")
      };
    }

    return {
      backgroundImage: "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")")
    };
  };

  var Line = function Line(props) {
    var prefixCls = props.prefixCls,
        directionConfig = props.direction,
        percent = props.percent,
        strokeWidth = props.strokeWidth,
        size = props.size,
        strokeColor = props.strokeColor,
        strokeLinecap = props.strokeLinecap,
        children = props.children,
        trailColor = props.trailColor,
        success = props.success;
    var backgroundProps = strokeColor && typeof strokeColor !== 'string' ? handleGradient(strokeColor, directionConfig) : {
      background: strokeColor
    };
    var trailStyle = trailColor ? {
      backgroundColor: trailColor
    } : undefined;

    var percentStyle = _extends$1({
      width: "".concat(validProgress(percent), "%"),
      height: strokeWidth || (size === 'small' ? 6 : 8),
      borderRadius: strokeLinecap === 'square' ? 0 : ''
    }, backgroundProps);

    var successPercent = getSuccessPercent(props);
    var successPercentStyle = {
      width: "".concat(validProgress(successPercent), "%"),
      height: strokeWidth || (size === 'small' ? 6 : 8),
      borderRadius: strokeLinecap === 'square' ? 0 : '',
      backgroundColor: success === null || success === void 0 ? void 0 : success.strokeColor
    };
    var successSegment = successPercent !== undefined ? /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-success-bg"),
      style: successPercentStyle
    }) : null;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-outer")
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-inner"),
      style: trailStyle
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-bg"),
      style: percentStyle
    }), successSegment)), children);
  };

  var defaultProps = {
    className: '',
    percent: 0,
    prefixCls: 'rc-progress',
    strokeColor: '#2db7f5',
    strokeLinecap: 'round',
    strokeWidth: 1,
    style: {},
    trailColor: '#D9D9D9',
    trailWidth: 1
  };
  var useTransitionDuration = function useTransitionDuration(percentList) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var paths = percentList.map(function () {
      return React.useRef();
    });
    var prevTimeStamp = React.useRef(null);
    React.useEffect(function () {
      var now = Date.now();
      var updated = false;
      Object.keys(paths).forEach(function (key) {
        var path = paths[key].current;

        if (!path) {
          return;
        }

        updated = true;
        var pathStyle = path.style;
        pathStyle.transitionDuration = '.3s, .3s, .3s, .06s';

        if (prevTimeStamp.current && now - prevTimeStamp.current < 100) {
          pathStyle.transitionDuration = '0s, 0s';
        }
      });

      if (updated) {
        prevTimeStamp.current = Date.now();
      }
    });
    return [paths];
  };

  var gradientSeed = 0;

  function stripPercentToNumber(percent) {
    return +percent.replace('%', '');
  }

  function toArray$7(symArray) {
    return Array.isArray(symArray) ? symArray : [symArray];
  }

  function getPathStyles(offset, percent, strokeColor, strokeWidth) {
    var gapDegree = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var gapPosition = arguments.length > 5 ? arguments[5] : undefined;
    var radius = 50 - strokeWidth / 2;
    var beginPositionX = 0;
    var beginPositionY = -radius;
    var endPositionX = 0;
    var endPositionY = -2 * radius;

    switch (gapPosition) {
      case 'left':
        beginPositionX = -radius;
        beginPositionY = 0;
        endPositionX = 2 * radius;
        endPositionY = 0;
        break;

      case 'right':
        beginPositionX = radius;
        beginPositionY = 0;
        endPositionX = -2 * radius;
        endPositionY = 0;
        break;

      case 'bottom':
        beginPositionY = radius;
        endPositionY = 2 * radius;
        break;
    }

    var pathString = "M 50,50 m ".concat(beginPositionX, ",").concat(beginPositionY, "\n   a ").concat(radius, ",").concat(radius, " 0 1 1 ").concat(endPositionX, ",").concat(-endPositionY, "\n   a ").concat(radius, ",").concat(radius, " 0 1 1 ").concat(-endPositionX, ",").concat(endPositionY);
    var len = Math.PI * 2 * radius;
    var pathStyle = {
      stroke: typeof strokeColor === 'string' ? strokeColor : undefined,
      strokeDasharray: "".concat(percent / 100 * (len - gapDegree), "px ").concat(len, "px"),
      strokeDashoffset: "-".concat(gapDegree / 2 + offset / 100 * (len - gapDegree), "px"),
      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s, opacity .3s ease 0s' // eslint-disable-line

    };
    return {
      pathString: pathString,
      pathStyle: pathStyle
    };
  }

  var Circle = function Circle(_ref) {
    var prefixCls = _ref.prefixCls,
        strokeWidth = _ref.strokeWidth,
        trailWidth = _ref.trailWidth,
        gapDegree = _ref.gapDegree,
        gapPosition = _ref.gapPosition,
        trailColor = _ref.trailColor,
        strokeLinecap = _ref.strokeLinecap,
        style = _ref.style,
        className = _ref.className,
        strokeColor = _ref.strokeColor,
        percent = _ref.percent,
        restProps = _objectWithoutProperties$1(_ref, ["prefixCls", "strokeWidth", "trailWidth", "gapDegree", "gapPosition", "trailColor", "strokeLinecap", "style", "className", "strokeColor", "percent"]);

    var gradientId = React.useMemo(function () {
      gradientSeed += 1;
      return gradientSeed;
    }, []);

    var _getPathStyles = getPathStyles(0, 100, trailColor, strokeWidth, gapDegree, gapPosition),
        pathString = _getPathStyles.pathString,
        pathStyle = _getPathStyles.pathStyle;

    var percentList = toArray$7(percent);
    var strokeColorList = toArray$7(strokeColor);
    var gradient = strokeColorList.find(function (color) {
      return Object.prototype.toString.call(color) === '[object Object]';
    });

    var _useTransitionDuratio = useTransitionDuration(percentList),
        _useTransitionDuratio2 = _slicedToArray$1(_useTransitionDuratio, 1),
        paths = _useTransitionDuratio2[0];

    var getStokeList = function getStokeList() {
      var stackPtg = 0;
      return percentList.map(function (ptg, index) {
        var color = strokeColorList[index] || strokeColorList[strokeColorList.length - 1];
        var stroke = Object.prototype.toString.call(color) === '[object Object]' ? "url(#".concat(prefixCls, "-gradient-").concat(gradientId, ")") : '';
        var pathStyles = getPathStyles(stackPtg, ptg, color, strokeWidth, gapDegree, gapPosition);
        stackPtg += ptg;
        return /*#__PURE__*/React.createElement("path", {
          key: index,
          className: "".concat(prefixCls, "-circle-path"),
          d: pathStyles.pathString,
          stroke: stroke,
          strokeLinecap: strokeLinecap,
          strokeWidth: strokeWidth,
          opacity: ptg === 0 ? 0 : 1,
          fillOpacity: "0",
          style: pathStyles.pathStyle,
          ref: paths[index]
        });
      });
    };

    return /*#__PURE__*/React.createElement("svg", _extends$1({
      className: classnames("".concat(prefixCls, "-circle"), className),
      viewBox: "0 0 100 100",
      style: style
    }, restProps), gradient && /*#__PURE__*/React.createElement("defs", null, /*#__PURE__*/React.createElement("linearGradient", {
      id: "".concat(prefixCls, "-gradient-").concat(gradientId),
      x1: "100%",
      y1: "0%",
      x2: "0%",
      y2: "0%"
    }, Object.keys(gradient).sort(function (a, b) {
      return stripPercentToNumber(a) - stripPercentToNumber(b);
    }).map(function (key, index) {
      return /*#__PURE__*/React.createElement("stop", {
        key: index,
        offset: key,
        stopColor: gradient[key]
      });
    }))), /*#__PURE__*/React.createElement("path", {
      className: "".concat(prefixCls, "-circle-trail"),
      d: pathString,
      stroke: trailColor,
      strokeLinecap: strokeLinecap,
      strokeWidth: trailWidth || strokeWidth,
      fillOpacity: "0",
      style: pathStyle
    }), getStokeList().reverse());
  };

  Circle.defaultProps = defaultProps;
  Circle.displayName = 'Circle';

  function getPercentage(_ref) {
    var percent = _ref.percent,
        success = _ref.success,
        successPercent = _ref.successPercent;
    var realSuccessPercent = validProgress(getSuccessPercent({
      success: success,
      successPercent: successPercent
    }));
    return [realSuccessPercent, validProgress(validProgress(percent) - realSuccessPercent)];
  }

  function getStrokeColor(_ref2) {
    var _ref2$success = _ref2.success,
        success = _ref2$success === void 0 ? {} : _ref2$success,
        strokeColor = _ref2.strokeColor;
    var successColor = success.strokeColor;
    return [successColor || presetPrimaryColors.green, strokeColor || null];
  }

  var Circle$1 = function Circle$1(props) {
    var prefixCls = props.prefixCls,
        width = props.width,
        strokeWidth = props.strokeWidth,
        trailColor = props.trailColor,
        strokeLinecap = props.strokeLinecap,
        gapPosition = props.gapPosition,
        gapDegree = props.gapDegree,
        type = props.type,
        children = props.children,
        success = props.success;
    var circleSize = width || 120;
    var circleStyle = {
      width: circleSize,
      height: circleSize,
      fontSize: circleSize * 0.15 + 6
    };
    var circleWidth = strokeWidth || 6;
    var gapPos = gapPosition || type === 'dashboard' && 'bottom' || 'top';

    var getGapDegree = function getGapDegree() {
      // Support gapDeg = 0 when type = 'dashboard'
      if (gapDegree || gapDegree === 0) {
        return gapDegree;
      }

      if (type === 'dashboard') {
        return 75;
      }

      return undefined;
    }; // using className to style stroke color


    var isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';
    var strokeColor = getStrokeColor({
      success: success,
      strokeColor: props.strokeColor
    });
    var wrapperClassName = classnames("".concat(prefixCls, "-inner"), _defineProperty$1({}, "".concat(prefixCls, "-circle-gradient"), isGradient));
    return /*#__PURE__*/React.createElement("div", {
      className: wrapperClassName,
      style: circleStyle
    }, /*#__PURE__*/React.createElement(Circle, {
      percent: getPercentage(props),
      strokeWidth: circleWidth,
      trailWidth: circleWidth,
      strokeColor: strokeColor,
      strokeLinecap: strokeLinecap,
      trailColor: trailColor,
      prefixCls: prefixCls,
      gapDegree: getGapDegree(),
      gapPosition: gapPos
    }), children);
  };

  var Steps = function Steps(props) {
    var size = props.size,
        steps = props.steps,
        _props$percent = props.percent,
        percent = _props$percent === void 0 ? 0 : _props$percent,
        _props$strokeWidth = props.strokeWidth,
        strokeWidth = _props$strokeWidth === void 0 ? 8 : _props$strokeWidth,
        strokeColor = props.strokeColor,
        trailColor = props.trailColor,
        prefixCls = props.prefixCls,
        children = props.children;
    var current = Math.round(steps * (percent / 100));
    var stepWidth = size === 'small' ? 2 : 14;
    var styledSteps = [];

    for (var i = 0; i < steps; i += 1) {
      styledSteps.push( /*#__PURE__*/React.createElement("div", {
        key: i,
        className: classnames("".concat(prefixCls, "-steps-item"), _defineProperty$1({}, "".concat(prefixCls, "-steps-item-active"), i <= current - 1)),
        style: {
          backgroundColor: i <= current - 1 ? strokeColor : trailColor,
          width: stepWidth,
          height: strokeWidth
        }
      }));
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-steps-outer")
    }, styledSteps, children);
  };

  var __rest$q = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };
  var ProgressTypes = tuple('line', 'circle', 'dashboard');
  var ProgressStatuses = tuple('normal', 'exception', 'active', 'success');

  var Progress = /*#__PURE__*/function (_React$Component) {
    _inherits(Progress, _React$Component);

    var _super = _createSuper(Progress);

    function Progress() {
      var _this;

      _classCallCheck(this, Progress);

      _this = _super.apply(this, arguments);

      _this.renderProgress = function (_ref) {
        var _classNames;

        var getPrefixCls = _ref.getPrefixCls,
            direction = _ref.direction;

        var _assertThisInitialize = _assertThisInitialized(_this),
            props = _assertThisInitialize.props;

        var customizePrefixCls = props.prefixCls,
            className = props.className,
            size = props.size,
            type = props.type,
            steps = props.steps,
            showInfo = props.showInfo,
            strokeColor = props.strokeColor,
            restProps = __rest$q(props, ["prefixCls", "className", "size", "type", "steps", "showInfo", "strokeColor"]);

        var prefixCls = getPrefixCls('progress', customizePrefixCls);

        var progressStatus = _this.getProgressStatus();

        var progressInfo = _this.renderProcessInfo(prefixCls, progressStatus);

        devWarning(!('successPercent' in props), 'Progress', '`successPercent` is deprecated. Please use `success.percent` instead.');
        var progress; // Render progress shape

        if (type === 'line') {
          progress = steps ? /*#__PURE__*/React.createElement(Steps, _extends$1({}, _this.props, {
            strokeColor: typeof strokeColor === 'string' ? strokeColor : undefined,
            prefixCls: prefixCls,
            steps: steps
          }), progressInfo) : /*#__PURE__*/React.createElement(Line, _extends$1({}, _this.props, {
            prefixCls: prefixCls,
            direction: direction
          }), progressInfo);
        } else if (type === 'circle' || type === 'dashboard') {
          progress = /*#__PURE__*/React.createElement(Circle$1, _extends$1({}, _this.props, {
            prefixCls: prefixCls,
            progressStatus: progressStatus
          }), progressInfo);
        }

        var classString = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(type === 'dashboard' && 'circle' || steps && 'steps' || type), true), _defineProperty$1(_classNames, "".concat(prefixCls, "-status-").concat(progressStatus), true), _defineProperty$1(_classNames, "".concat(prefixCls, "-show-info"), showInfo), _defineProperty$1(_classNames, "".concat(prefixCls, "-").concat(size), size), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
        return /*#__PURE__*/React.createElement("div", _extends$1({}, omit(restProps, ['status', 'format', 'trailColor', 'strokeWidth', 'width', 'gapDegree', 'gapPosition', 'strokeLinecap', 'percent', 'success', 'successPercent']), {
          className: classString
        }), progress);
      };

      return _this;
    }

    _createClass(Progress, [{
      key: "getPercentNumber",
      value: function getPercentNumber() {
        var _this$props$percent = this.props.percent,
            percent = _this$props$percent === void 0 ? 0 : _this$props$percent;
        var successPercent = getSuccessPercent(this.props);
        return parseInt(successPercent !== undefined ? successPercent.toString() : percent.toString(), 10);
      }
    }, {
      key: "getProgressStatus",
      value: function getProgressStatus() {
        var status = this.props.status;

        if (ProgressStatuses.indexOf(status) < 0 && this.getPercentNumber() >= 100) {
          return 'success';
        }

        return status || 'normal';
      }
    }, {
      key: "renderProcessInfo",
      value: function renderProcessInfo(prefixCls, progressStatus) {
        var _this$props = this.props,
            showInfo = _this$props.showInfo,
            format = _this$props.format,
            type = _this$props.type,
            percent = _this$props.percent;
        var successPercent = getSuccessPercent(this.props);

        if (!showInfo) {
          return null;
        }

        var text;

        var textFormatter = format || function (percentNumber) {
          return "".concat(percentNumber, "%");
        };

        var isLineType = type === 'line';

        if (format || progressStatus !== 'exception' && progressStatus !== 'success') {
          text = textFormatter(validProgress(percent), validProgress(successPercent));
        } else if (progressStatus === 'exception') {
          text = isLineType ? /*#__PURE__*/React.createElement(CloseCircleFilled$2, null) : /*#__PURE__*/React.createElement(CloseOutlined$2, null);
        } else if (progressStatus === 'success') {
          text = isLineType ? /*#__PURE__*/React.createElement(CheckCircleFilled$2, null) : /*#__PURE__*/React.createElement(CheckOutlined$2, null);
        }

        return /*#__PURE__*/React.createElement("span", {
          className: "".concat(prefixCls, "-text"),
          title: typeof text === 'string' ? text : undefined
        }, text);
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderProgress);
      }
    }]);

    return Progress;
  }(React.Component);
  Progress.defaultProps = {
    type: 'line',
    percent: 0,
    showInfo: true,
    // null for different theme definition
    trailColor: null,
    size: 'default',
    gapDegree: undefined,
    strokeLinecap: 'round'
  };

  // This icon file is generated automatically.
  var DeleteOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z" } }] }, "name": "delete", "theme": "outlined" };

  var DeleteOutlined$1 = function DeleteOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: DeleteOutlined
    }));
  };

  DeleteOutlined$1.displayName = 'DeleteOutlined';
  var DeleteOutlined$2 = /*#__PURE__*/React.forwardRef(DeleteOutlined$1);

  function getError(option, xhr) {
    var msg = "cannot ".concat(option.method, " ").concat(option.action, " ").concat(xhr.status, "'");
    var err = new Error(msg);
    err.status = xhr.status;
    err.method = option.method;
    err.url = option.action;
    return err;
  }

  function getBody(xhr) {
    var text = xhr.responseText || xhr.response;

    if (!text) {
      return text;
    }

    try {
      return JSON.parse(text);
    } catch (e) {
      return text;
    }
  }

  function upload(option) {
    // eslint-disable-next-line no-undef
    var xhr = new XMLHttpRequest();

    if (option.onProgress && xhr.upload) {
      xhr.upload.onprogress = function progress(e) {
        if (e.total > 0) {
          e.percent = e.loaded / e.total * 100;
        }

        option.onProgress(e);
      };
    } // eslint-disable-next-line no-undef


    var formData = new FormData();

    if (option.data) {
      Object.keys(option.data).forEach(function (key) {
        var value = option.data[key]; // support key-value array data

        if (Array.isArray(value)) {
          value.forEach(function (item) {
            // { list: [ 11, 22 ] }
            // formData.append('list[]', 11);
            formData.append("".concat(key, "[]"), item);
          });
          return;
        }

        formData.append(key, option.data[key]);
      });
    } // eslint-disable-next-line no-undef


    if (option.file instanceof Blob) {
      formData.append(option.filename, option.file, option.file.name);
    } else {
      formData.append(option.filename, option.file);
    }

    xhr.onerror = function error(e) {
      option.onError(e);
    };

    xhr.onload = function onload() {
      // allow success when 2xx status
      // see https://github.com/react-component/upload/issues/34
      if (xhr.status < 200 || xhr.status >= 300) {
        return option.onError(getError(option, xhr), getBody(xhr));
      }

      return option.onSuccess(getBody(xhr), xhr);
    };

    xhr.open(option.method, option.action, true); // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179

    if (option.withCredentials && 'withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    var headers = option.headers || {}; // when set headers['X-Requested-With'] = null , can close default XHR header
    // see https://github.com/react-component/upload/issues/33

    if (headers['X-Requested-With'] !== null) {
      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    }

    Object.keys(headers).forEach(function (h) {
      if (headers[h] !== null) {
        xhr.setRequestHeader(h, headers[h]);
      }
    });
    xhr.send(formData);
    return {
      abort: function abort() {
        xhr.abort();
      }
    };
  }

  var now$2 = +new Date();
  var index$1 = 0;
  function uid() {
    // eslint-disable-next-line no-plusplus
    return "rc-upload-".concat(now$2, "-").concat(++index$1);
  }

  var attrAccept = (function (file, acceptedFiles) {
    if (file && acceptedFiles) {
      var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');
      var fileName = file.name || '';
      var mimeType = file.type || '';
      var baseMimeType = mimeType.replace(/\/.*$/, '');
      return acceptedFilesArray.some(function (type) {
        var validType = type.trim(); // This is something like */*,*  allow all files

        if (/^\*(\/\*)?$/.test(type)) {
          return true;
        } // like .jpg, .png


        if (validType.charAt(0) === '.') {
          var lowerFileName = fileName.toLowerCase();
          var lowerType = validType.toLowerCase();
          var affixList = [lowerType];

          if (lowerType === '.jpg' || lowerType === '.jpeg') {
            affixList = ['.jpg', '.jpeg'];
          }

          return affixList.some(function (affix) {
            return lowerFileName.endsWith(affix);
          });
        } // This is something like a image/* mime type


        if (/\/\*$/.test(validType)) {
          return baseMimeType === validType.replace(/\/.*$/, '');
        } // Full match


        if (mimeType === validType) {
          return true;
        } // Invalidate type should skip


        if (/^\w+$/.test(validType)) {
          warningOnce(false, "Upload takes an invalidate 'accept' type '".concat(validType, "'.Skip for check."));
          return true;
        }

        return false;
      });
    }

    return true;
  });

  function loopFiles(item, callback) {
    var dirReader = item.createReader();
    var fileList = [];

    function sequence() {
      dirReader.readEntries(function (entries) {
        var entryList = Array.prototype.slice.apply(entries);
        fileList = fileList.concat(entryList); // Check if all the file has been viewed

        var isFinished = !entryList.length;

        if (isFinished) {
          callback(fileList);
        } else {
          sequence();
        }
      });
    }

    sequence();
  }

  var traverseFileTree = function traverseFileTree(files, callback, isAccepted) {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    var _traverseFileTree = function _traverseFileTree(item, path) {
      // eslint-disable-next-line no-param-reassign
      item.path = path || '';

      if (item.isFile) {
        item.file(function (file) {
          if (isAccepted(file)) {
            // https://github.com/ant-design/ant-design/issues/16426
            if (item.fullPath && !file.webkitRelativePath) {
              Object.defineProperties(file, {
                webkitRelativePath: {
                  writable: true
                }
              }); // eslint-disable-next-line no-param-reassign

              file.webkitRelativePath = item.fullPath.replace(/^\//, '');
              Object.defineProperties(file, {
                webkitRelativePath: {
                  writable: false
                }
              });
            }

            callback([file]);
          }
        });
      } else if (item.isDirectory) {
        loopFiles(item, function (entries) {
          entries.forEach(function (entryItem) {
            _traverseFileTree(entryItem, "".concat(path).concat(item.name, "/"));
          });
        });
      }
    };

    files.forEach(function (file) {
      _traverseFileTree(file.webkitGetAsEntry());
    });
  };

  var _excluded$c = ["component", "prefixCls", "className", "disabled", "id", "style", "multiple", "accept", "children", "directory", "openFileDialogOnClick", "onMouseEnter", "onMouseLeave", "capture"];

  var AjaxUploader = /*#__PURE__*/function (_Component) {
    _inherits(AjaxUploader, _Component);

    var _super = _createSuper(AjaxUploader);

    function AjaxUploader() {
      var _this;

      _classCallCheck(this, AjaxUploader);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.state = {
        uid: uid()
      };
      _this.reqs = {};
      _this.fileInput = void 0;
      _this._isMounted = void 0;

      _this.onChange = function (e) {
        var _this$props = _this.props,
            accept = _this$props.accept,
            directory = _this$props.directory;
        var files = e.target.files;

        var acceptedFiles = _toConsumableArray$1(files).filter(function (file) {
          return !directory || attrAccept(file, accept);
        });

        _this.uploadFiles(acceptedFiles);

        _this.reset();
      };

      _this.onClick = function (e) {
        var el = _this.fileInput;

        if (!el) {
          return;
        }

        var _this$props2 = _this.props,
            children = _this$props2.children,
            onClick = _this$props2.onClick;

        if (children && children.type === 'button') {
          var parent = el.parentNode;
          parent.focus();
          parent.querySelector('button').blur();
        }

        el.click();

        if (onClick) {
          onClick(e);
        }
      };

      _this.onKeyDown = function (e) {
        if (e.key === 'Enter') {
          _this.onClick(e);
        }
      };

      _this.onFileDrop = function (e) {
        var multiple = _this.props.multiple;
        e.preventDefault();

        if (e.type === 'dragover') {
          return;
        }

        if (_this.props.directory) {
          traverseFileTree(Array.prototype.slice.call(e.dataTransfer.items), _this.uploadFiles, function (_file) {
            return attrAccept(_file, _this.props.accept);
          });
        } else {
          var files = _toConsumableArray$1(e.dataTransfer.files).filter(function (file) {
            return attrAccept(file, _this.props.accept);
          });

          if (multiple === false) {
            files = files.slice(0, 1);
          }

          _this.uploadFiles(files);
        }
      };

      _this.uploadFiles = function (files) {
        var originFiles = _toConsumableArray$1(files);

        var postFiles = originFiles.map(function (file) {
          // eslint-disable-next-line no-param-reassign
          file.uid = uid();
          return _this.processFile(file, originFiles);
        }); // Batch upload files

        Promise.all(postFiles).then(function (fileList) {
          var onBatchStart = _this.props.onBatchStart;
          onBatchStart === null || onBatchStart === void 0 ? void 0 : onBatchStart(fileList.map(function (_ref) {
            var origin = _ref.origin,
                parsedFile = _ref.parsedFile;
            return {
              file: origin,
              parsedFile: parsedFile
            };
          }));
          fileList.filter(function (file) {
            return file.parsedFile !== null;
          }).forEach(function (file) {
            _this.post(file);
          });
        });
      };

      _this.processFile = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator$1( /*#__PURE__*/regenerator.mark(function _callee(file, fileList) {
          var beforeUpload, transformedFile, action, mergedAction, data, mergedData, parsedData, parsedFile, mergedParsedFile;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  beforeUpload = _this.props.beforeUpload;
                  transformedFile = file;

                  if (!beforeUpload) {
                    _context.next = 14;
                    break;
                  }

                  _context.prev = 3;
                  _context.next = 6;
                  return beforeUpload(file, fileList);

                case 6:
                  transformedFile = _context.sent;
                  _context.next = 12;
                  break;

                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](3);
                  // Rejection will also trade as false
                  transformedFile = false;

                case 12:
                  if (!(transformedFile === false)) {
                    _context.next = 14;
                    break;
                  }

                  return _context.abrupt("return", {
                    origin: file,
                    parsedFile: null,
                    action: null,
                    data: null
                  });

                case 14:
                  // Get latest action
                  action = _this.props.action;

                  if (!(typeof action === 'function')) {
                    _context.next = 21;
                    break;
                  }

                  _context.next = 18;
                  return action(file);

                case 18:
                  mergedAction = _context.sent;
                  _context.next = 22;
                  break;

                case 21:
                  mergedAction = action;

                case 22:
                  // Get latest data
                  data = _this.props.data;

                  if (!(typeof data === 'function')) {
                    _context.next = 29;
                    break;
                  }

                  _context.next = 26;
                  return data(file);

                case 26:
                  mergedData = _context.sent;
                  _context.next = 30;
                  break;

                case 29:
                  mergedData = data;

                case 30:
                  parsedData = // string type is from legacy `transformFile`.
                  // Not sure if this will work since no related test case works with it
                  (_typeof$1(transformedFile) === 'object' || typeof transformedFile === 'string') && transformedFile ? transformedFile : file;

                  if (parsedData instanceof File) {
                    parsedFile = parsedData;
                  } else {
                    parsedFile = new File([parsedData], file.name, {
                      type: file.type
                    });
                  }

                  mergedParsedFile = parsedFile;
                  mergedParsedFile.uid = file.uid;
                  return _context.abrupt("return", {
                    origin: file,
                    data: mergedData,
                    parsedFile: mergedParsedFile,
                    action: mergedAction
                  });

                case 35:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[3, 9]]);
        }));

        return function (_x, _x2) {
          return _ref2.apply(this, arguments);
        };
      }();

      _this.saveFileInput = function (node) {
        _this.fileInput = node;
      };

      return _this;
    }

    _createClass(AjaxUploader, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this._isMounted = true;
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._isMounted = false;
        this.abort();
      }
    }, {
      key: "post",
      value: function post(_ref3) {
        var _this2 = this;

        var data = _ref3.data,
            origin = _ref3.origin,
            action = _ref3.action,
            parsedFile = _ref3.parsedFile;

        if (!this._isMounted) {
          return;
        }

        var _this$props3 = this.props,
            onStart = _this$props3.onStart,
            customRequest = _this$props3.customRequest,
            name = _this$props3.name,
            headers = _this$props3.headers,
            withCredentials = _this$props3.withCredentials,
            method = _this$props3.method;
        var uid = origin.uid;
        var request = customRequest || upload;
        var requestOption = {
          action: action,
          filename: name,
          data: data,
          file: parsedFile,
          headers: headers,
          withCredentials: withCredentials,
          method: method || 'post',
          onProgress: function onProgress(e) {
            var onProgress = _this2.props.onProgress;
            onProgress === null || onProgress === void 0 ? void 0 : onProgress(e, parsedFile);
          },
          onSuccess: function onSuccess(ret, xhr) {
            var onSuccess = _this2.props.onSuccess;
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(ret, parsedFile, xhr);
            delete _this2.reqs[uid];
          },
          onError: function onError(err, ret) {
            var onError = _this2.props.onError;
            onError === null || onError === void 0 ? void 0 : onError(err, ret, parsedFile);
            delete _this2.reqs[uid];
          }
        };
        onStart(origin);
        this.reqs[uid] = request(requestOption);
      }
    }, {
      key: "reset",
      value: function reset() {
        this.setState({
          uid: uid()
        });
      }
    }, {
      key: "abort",
      value: function abort(file) {
        var reqs = this.reqs;

        if (file) {
          var uid = file.uid ? file.uid : file;

          if (reqs[uid] && reqs[uid].abort) {
            reqs[uid].abort();
          }

          delete reqs[uid];
        } else {
          Object.keys(reqs).forEach(function (uid) {
            if (reqs[uid] && reqs[uid].abort) {
              reqs[uid].abort();
            }

            delete reqs[uid];
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _classNames;

        var _this$props4 = this.props,
            Tag = _this$props4.component,
            prefixCls = _this$props4.prefixCls,
            className = _this$props4.className,
            disabled = _this$props4.disabled,
            id = _this$props4.id,
            style = _this$props4.style,
            multiple = _this$props4.multiple,
            accept = _this$props4.accept,
            children = _this$props4.children,
            directory = _this$props4.directory,
            openFileDialogOnClick = _this$props4.openFileDialogOnClick,
            onMouseEnter = _this$props4.onMouseEnter,
            onMouseLeave = _this$props4.onMouseLeave,
            capture = _this$props4.capture,
            otherProps = _objectWithoutProperties$1(_this$props4, _excluded$c);

        var cls = classnames((_classNames = {}, _defineProperty$1(_classNames, prefixCls, true), _defineProperty$1(_classNames, "".concat(prefixCls, "-disabled"), disabled), _defineProperty$1(_classNames, className, className), _classNames)); // because input don't have directory/webkitdirectory type declaration

        var dirProps = directory ? {
          directory: 'directory',
          webkitdirectory: 'webkitdirectory'
        } : {};
        var events = disabled ? {} : {
          onClick: openFileDialogOnClick ? this.onClick : function () {},
          onKeyDown: openFileDialogOnClick ? this.onKeyDown : function () {},
          onMouseEnter: onMouseEnter,
          onMouseLeave: onMouseLeave,
          onDrop: this.onFileDrop,
          onDragOver: this.onFileDrop,
          tabIndex: '0'
        };
        return /*#__PURE__*/React__default['default'].createElement(Tag, _extends$1({}, events, {
          className: cls,
          role: "button",
          style: style
        }), /*#__PURE__*/React__default['default'].createElement("input", _extends$1({}, pickAttrs(otherProps, {
          aria: true,
          data: true
        }), {
          id: id,
          type: "file",
          ref: this.saveFileInput,
          onClick: function onClick(e) {
            return e.stopPropagation();
          } // https://github.com/ant-design/ant-design/issues/19948
          ,
          key: this.state.uid,
          style: {
            display: 'none'
          },
          accept: accept
        }, dirProps, {
          multiple: multiple,
          onChange: this.onChange
        }, capture != null ? {
          capture: capture
        } : {})), children);
      }
    }]);

    return AjaxUploader;
  }(React.Component);

  function empty() {}

  var Upload = /*#__PURE__*/function (_Component) {
    _inherits(Upload, _Component);

    var _super = _createSuper(Upload);

    function Upload() {
      var _this;

      _classCallCheck(this, Upload);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this.uploader = void 0;

      _this.saveUploader = function (node) {
        _this.uploader = node;
      };

      return _this;
    }

    _createClass(Upload, [{
      key: "abort",
      value: function abort(file) {
        this.uploader.abort(file);
      }
    }, {
      key: "render",
      value: function render() {
        return /*#__PURE__*/React__default['default'].createElement(AjaxUploader, _extends$1({}, this.props, {
          ref: this.saveUploader
        }));
      }
    }]);

    return Upload;
  }(React.Component);

  Upload.defaultProps = {
    component: 'span',
    prefixCls: 'rc-upload',
    data: {},
    headers: {},
    name: 'file',
    multipart: false,
    onStart: empty,
    onError: empty,
    onSuccess: empty,
    multiple: false,
    beforeUpload: null,
    customRequest: null,
    withCredentials: false,
    openFileDialogOnClick: true
  };

  var __rest$r = undefined && undefined.__rest || function (s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var InternalDragger = function InternalDragger(_a, ref) {
    var style = _a.style,
        height = _a.height,
        restProps = __rest$r(_a, ["style", "height"]);

    return /*#__PURE__*/React.createElement(Upload$1, _extends$1({
      ref: ref
    }, restProps, {
      type: "drag",
      style: _extends$1(_extends$1({}, style), {
        height: height
      })
    }));
  };

  var Dragger = /*#__PURE__*/React.forwardRef(InternalDragger);
  Dragger.displayName = 'Dragger';

  // This icon file is generated automatically.
  var PaperClipOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M779.3 196.6c-94.2-94.2-247.6-94.2-341.7 0l-261 260.8c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l261-260.8c32.4-32.4 75.5-50.2 121.3-50.2s88.9 17.8 121.2 50.2c32.4 32.4 50.2 75.5 50.2 121.2 0 45.8-17.8 88.8-50.2 121.2l-266 265.9-43.1 43.1c-40.3 40.3-105.8 40.3-146.1 0-19.5-19.5-30.2-45.4-30.2-73s10.7-53.5 30.2-73l263.9-263.8c6.7-6.6 15.5-10.3 24.9-10.3h.1c9.4 0 18.1 3.7 24.7 10.3 6.7 6.7 10.3 15.5 10.3 24.9 0 9.3-3.7 18.1-10.3 24.7L372.4 653c-1.7 1.7-2.6 4-2.6 6.4s.9 4.7 2.6 6.4l36.9 36.9a9 9 0 0012.7 0l215.6-215.6c19.9-19.9 30.8-46.3 30.8-74.4s-11-54.6-30.8-74.4c-41.1-41.1-107.9-41-149 0L463 364 224.8 602.1A172.22 172.22 0 00174 724.8c0 46.3 18.1 89.8 50.8 122.5 33.9 33.8 78.3 50.7 122.7 50.7 44.4 0 88.8-16.9 122.6-50.7l309.2-309C824.8 492.7 850 432 850 367.5c.1-64.6-25.1-125.3-70.7-170.9z" } }] }, "name": "paper-clip", "theme": "outlined" };

  var PaperClipOutlined$1 = function PaperClipOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: PaperClipOutlined
    }));
  };

  PaperClipOutlined$1.displayName = 'PaperClipOutlined';
  var PaperClipOutlined$2 = /*#__PURE__*/React.forwardRef(PaperClipOutlined$1);

  // This icon file is generated automatically.
  var PictureTwoTone = { "icon": function render(primaryColor, secondaryColor) { return { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 632H136v-39.9l138.5-164.3 150.1 178L658.1 489 888 761.6V792zm0-129.8L664.2 396.8c-3.2-3.8-9-3.8-12.2 0L424.6 666.4l-144-170.7c-3.2-3.8-9-3.8-12.2 0L136 652.7V232h752v430.2z", "fill": primaryColor } }, { "tag": "path", "attrs": { "d": "M424.6 765.8l-150.1-178L136 752.1V792h752v-30.4L658.1 489z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M136 652.7l132.4-157c3.2-3.8 9-3.8 12.2 0l144 170.7L652 396.8c3.2-3.8 9-3.8 12.2 0L888 662.2V232H136v420.7zM304 280a88 88 0 110 176 88 88 0 010-176z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M276 368a28 28 0 1056 0 28 28 0 10-56 0z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M304 456a88 88 0 100-176 88 88 0 000 176zm0-116c15.5 0 28 12.5 28 28s-12.5 28-28 28-28-12.5-28-28 12.5-28 28-28z", "fill": primaryColor } }] }; }, "name": "picture", "theme": "twotone" };

  var PictureTwoTone$1 = function PictureTwoTone$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: PictureTwoTone
    }));
  };

  PictureTwoTone$1.displayName = 'PictureTwoTone';
  var PictureTwoTone$2 = /*#__PURE__*/React.forwardRef(PictureTwoTone$1);

  // This icon file is generated automatically.
  var FileTwoTone = { "icon": function render(primaryColor, secondaryColor) { return { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M534 352V136H232v752h560V394H576a42 42 0 01-42-42z", "fill": secondaryColor } }, { "tag": "path", "attrs": { "d": "M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM602 137.8L790.2 326H602V137.8zM792 888H232V136h302v216a42 42 0 0042 42h216v494z", "fill": primaryColor } }] }; }, "name": "file", "theme": "twotone" };

  var FileTwoTone$1 = function FileTwoTone$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: FileTwoTone
    }));
  };

  FileTwoTone$1.displayName = 'FileTwoTone';
  var FileTwoTone$2 = /*#__PURE__*/React.forwardRef(FileTwoTone$1);

  function file2Obj(file) {
    return _extends$1(_extends$1({}, file), {
      lastModified: file.lastModified,
      lastModifiedDate: file.lastModifiedDate,
      name: file.name,
      size: file.size,
      type: file.type,
      uid: file.uid,
      percent: 0,
      originFileObj: file
    });
  }
  /** Upload fileList. Replace file if exist or just push into it. */

  function updateFileList(file, fileList) {
    var nextFileList = _toConsumableArray$1(fileList);

    var fileIndex = nextFileList.findIndex(function (_ref) {
      var uid = _ref.uid;
      return uid === file.uid;
    });

    if (fileIndex === -1) {
      nextFileList.push(file);
    } else {
      nextFileList[fileIndex] = file;
    }

    return nextFileList;
  }
  function getFileItem(file, fileList) {
    var matchKey = file.uid !== undefined ? 'uid' : 'name';
    return fileList.filter(function (item) {
      return item[matchKey] === file[matchKey];
    })[0];
  }
  function removeFileItem(file, fileList) {
    var matchKey = file.uid !== undefined ? 'uid' : 'name';
    var removed = fileList.filter(function (item) {
      return item[matchKey] !== file[matchKey];
    });

    if (removed.length === fileList.length) {
      return null;
    }

    return removed;
  } // ==================== Default Image Preview ====================

  var extname = function extname() {
    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var temp = url.split('/');
    var filename = temp[temp.length - 1];
    var filenameWithoutSuffix = filename.split(/#|\?/)[0];
    return (/\.[^./\\]*$/.exec(filenameWithoutSuffix) || [''])[0];
  };

  var isImageFileType = function isImageFileType(type) {
    return type.indexOf('image/') === 0;
  };

  var isImageUrl = function isImageUrl(file) {
    if (file.type && !file.thumbUrl) {
      return isImageFileType(file.type);
    }

    var url = file.thumbUrl || file.url || '';
    var extension = extname(url);

    if (/^data:image\//.test(url) || /(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg|ico)$/i.test(extension)) {
      return true;
    }

    if (/^data:/.test(url)) {
      // other file types of base64
      return false;
    }

    if (extension) {
      // other file types which have extension
      return false;
    }

    return true;
  };
  var MEASURE_SIZE = 200;
  function previewImage(file) {
    return new Promise(function (resolve) {
      if (!file.type || !isImageFileType(file.type)) {
        resolve('');
        return;
      }

      var canvas = document.createElement('canvas');
      canvas.width = MEASURE_SIZE;
      canvas.height = MEASURE_SIZE;
      canvas.style.cssText = "position: fixed; left: 0; top: 0; width: ".concat(MEASURE_SIZE, "px; height: ").concat(MEASURE_SIZE, "px; z-index: 9999; display: none;");
      document.body.appendChild(canvas);
      var ctx = canvas.getContext('2d');
      var img = new Image();

      img.onload = function () {
        var width = img.width,
            height = img.height;
        var drawWidth = MEASURE_SIZE;
        var drawHeight = MEASURE_SIZE;
        var offsetX = 0;
        var offsetY = 0;

        if (width > height) {
          drawHeight = height * (MEASURE_SIZE / width);
          offsetY = -(drawHeight - drawWidth) / 2;
        } else {
          drawWidth = width * (MEASURE_SIZE / height);
          offsetX = -(drawWidth - drawHeight) / 2;
        }

        ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
        var dataURL = canvas.toDataURL();
        document.body.removeChild(canvas);
        resolve(dataURL);
      };

      img.src = window.URL.createObjectURL(file);
    });
  }

  // This icon file is generated automatically.
  var DownloadOutlined = { "icon": { "tag": "svg", "attrs": { "viewBox": "64 64 896 896", "focusable": "false" }, "children": [{ "tag": "path", "attrs": { "d": "M505.7 661a8 8 0 0012.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z" } }] }, "name": "download", "theme": "outlined" };

  var DownloadOutlined$1 = function DownloadOutlined$1(props, ref) {
    return /*#__PURE__*/React.createElement(Icon, _objectSpread2$1(_objectSpread2$1({}, props), {}, {
      ref: ref,
      icon: DownloadOutlined
    }));
  };

  DownloadOutlined$1.displayName = 'DownloadOutlined';
  var DownloadOutlined$2 = /*#__PURE__*/React.forwardRef(DownloadOutlined$1);

  var ListItem = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var _classNames3;

    var prefixCls = _ref.prefixCls,
        className = _ref.className,
        style = _ref.style,
        locale = _ref.locale,
        listType = _ref.listType,
        file = _ref.file,
        items = _ref.items,
        progressProps = _ref.progress,
        iconRender = _ref.iconRender,
        actionIconRender = _ref.actionIconRender,
        itemRender = _ref.itemRender,
        isImgUrl = _ref.isImgUrl,
        showPreviewIcon = _ref.showPreviewIcon,
        showRemoveIcon = _ref.showRemoveIcon,
        showDownloadIcon = _ref.showDownloadIcon,
        customRemoveIcon = _ref.removeIcon,
        customDownloadIcon = _ref.downloadIcon,
        onPreview = _ref.onPreview,
        onDownload = _ref.onDownload,
        onClose = _ref.onClose;

    var _a, _b; // Delay to show the progress bar


    var _React$useState = React.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        showProgress = _React$useState2[0],
        setShowProgress = _React$useState2[1];

    var progressRafRef = React.useRef();
    React.useEffect(function () {
      progressRafRef.current = setTimeout(function () {
        setShowProgress(true);
      }, 300);
      return function () {
        window.clearTimeout(progressRafRef.current);
      };
    }, []); // This is used for legacy span make scrollHeight the wrong value.
    // We will force these to be `display: block` with non `picture-card`

    var spanClassName = "".concat(prefixCls, "-span");
    var iconNode = iconRender(file);
    var icon = /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-text-icon")
    }, iconNode);

    if (listType === 'picture' || listType === 'picture-card') {
      if (file.status === 'uploading' || !file.thumbUrl && !file.url) {
        var _classNames;

        var uploadingClassName = classnames((_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-list-item-thumbnail"), true), _defineProperty$1(_classNames, "".concat(prefixCls, "-list-item-file"), file.status !== 'uploading'), _classNames));
        icon = /*#__PURE__*/React.createElement("div", {
          className: uploadingClassName
        }, iconNode);
      } else {
        var _classNames2;

        var thumbnail = (isImgUrl === null || isImgUrl === void 0 ? void 0 : isImgUrl(file)) ? /*#__PURE__*/React.createElement("img", {
          src: file.thumbUrl || file.url,
          alt: file.name,
          className: "".concat(prefixCls, "-list-item-image")
        }) : iconNode;
        var aClassName = classnames((_classNames2 = {}, _defineProperty$1(_classNames2, "".concat(prefixCls, "-list-item-thumbnail"), true), _defineProperty$1(_classNames2, "".concat(prefixCls, "-list-item-file"), isImgUrl && !isImgUrl(file)), _classNames2));
        icon = /*#__PURE__*/React.createElement("a", {
          className: aClassName,
          onClick: function onClick(e) {
            return onPreview(file, e);
          },
          href: file.url || file.thumbUrl,
          target: "_blank",
          rel: "noopener noreferrer"
        }, thumbnail);
      }
    }

    var infoUploadingClass = classnames((_classNames3 = {}, _defineProperty$1(_classNames3, "".concat(prefixCls, "-list-item"), true), _defineProperty$1(_classNames3, "".concat(prefixCls, "-list-item-").concat(file.status), true), _defineProperty$1(_classNames3, "".concat(prefixCls, "-list-item-list-type-").concat(listType), true), _classNames3));
    var linkProps = typeof file.linkProps === 'string' ? JSON.parse(file.linkProps) : file.linkProps;
    var removeIcon = showRemoveIcon ? actionIconRender((typeof customRemoveIcon === 'function' ? customRemoveIcon(file) : customRemoveIcon) || /*#__PURE__*/React.createElement(DeleteOutlined$2, null), function () {
      return onClose(file);
    }, prefixCls, locale.removeFile) : null;
    var downloadIcon = showDownloadIcon && file.status === 'done' ? actionIconRender((typeof customDownloadIcon === 'function' ? customDownloadIcon(file) : customDownloadIcon) || /*#__PURE__*/React.createElement(DownloadOutlined$2, null), function () {
      return onDownload(file);
    }, prefixCls, locale.downloadFile) : null;
    var downloadOrDelete = listType !== 'picture-card' && /*#__PURE__*/React.createElement("span", {
      key: "download-delete",
      className: classnames("".concat(prefixCls, "-list-item-card-actions"), {
        picture: listType === 'picture'
      })
    }, downloadIcon, removeIcon);
    var listItemNameClass = classnames("".concat(prefixCls, "-list-item-name"));
    var preview = file.url ? [/*#__PURE__*/React.createElement("a", _extends$1({
      key: "view",
      target: "_blank",
      rel: "noopener noreferrer",
      className: listItemNameClass,
      title: file.name
    }, linkProps, {
      href: file.url,
      onClick: function onClick(e) {
        return onPreview(file, e);
      }
    }), file.name), downloadOrDelete] : [/*#__PURE__*/React.createElement("span", {
      key: "view",
      className: listItemNameClass,
      onClick: function onClick(e) {
        return onPreview(file, e);
      },
      title: file.name
    }, file.name), downloadOrDelete];
    var previewStyle = {
      pointerEvents: 'none',
      opacity: 0.5
    };
    var previewIcon = showPreviewIcon ? /*#__PURE__*/React.createElement("a", {
      href: file.url || file.thumbUrl,
      target: "_blank",
      rel: "noopener noreferrer",
      style: file.url || file.thumbUrl ? undefined : previewStyle,
      onClick: function onClick(e) {
        return onPreview(file, e);
      },
      title: locale.previewFile
    }, /*#__PURE__*/React.createElement(EyeOutlined$2, null)) : null;
    var actions = listType === 'picture-card' && file.status !== 'uploading' && /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-list-item-actions")
    }, previewIcon, file.status === 'done' && downloadIcon, removeIcon);
    var message;

    if (file.response && typeof file.response === 'string') {
      message = file.response;
    } else {
      message = ((_a = file.error) === null || _a === void 0 ? void 0 : _a.statusText) || ((_b = file.error) === null || _b === void 0 ? void 0 : _b.message) || locale.uploadError;
    }

    var iconAndPreview = /*#__PURE__*/React.createElement("span", {
      className: spanClassName
    }, icon, preview);

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls;

    var rootPrefixCls = getPrefixCls();
    var dom = /*#__PURE__*/React.createElement("div", {
      className: infoUploadingClass
    }, /*#__PURE__*/React.createElement("div", {
      className: "".concat(prefixCls, "-list-item-info")
    }, iconAndPreview), actions, showProgress && /*#__PURE__*/React.createElement(CSSMotion, {
      motionName: "".concat(rootPrefixCls, "-fade"),
      visible: file.status === 'uploading',
      motionDeadline: 2000
    }, function (_ref2) {
      var motionClassName = _ref2.className;
      // show loading icon if upload progress listener is disabled
      var loadingProgress = 'percent' in file ? /*#__PURE__*/React.createElement(Progress, _extends$1({}, progressProps, {
        type: "line",
        percent: file.percent
      })) : null;
      return /*#__PURE__*/React.createElement("div", {
        className: classnames("".concat(prefixCls, "-list-item-progress"), motionClassName)
      }, loadingProgress);
    }));
    var listContainerNameClass = classnames("".concat(prefixCls, "-list-").concat(listType, "-container"), className);
    var item = file.status === 'error' ? /*#__PURE__*/React.createElement(Tooltip$2, {
      title: message,
      getPopupContainer: function getPopupContainer(node) {
        return node.parentNode;
      }
    }, dom) : dom;
    return /*#__PURE__*/React.createElement("div", {
      className: listContainerNameClass,
      style: style,
      ref: ref
    }, itemRender ? itemRender(item, file, items, {
      download: onDownload.bind(null, file),
      preview: onPreview.bind(null, file),
      remove: onClose.bind(null, file)
    }) : item);
  });

  var listItemMotion = _extends$1({}, collapseMotion);

  delete listItemMotion.onAppearEnd;
  delete listItemMotion.onEnterEnd;
  delete listItemMotion.onLeaveEnd;

  var InternalUploadList = function InternalUploadList(_ref, ref) {
    var _classNames;

    var listType = _ref.listType,
        previewFile = _ref.previewFile,
        onPreview = _ref.onPreview,
        onDownload = _ref.onDownload,
        onRemove = _ref.onRemove,
        locale = _ref.locale,
        iconRender = _ref.iconRender,
        isImgUrl = _ref.isImageUrl,
        customizePrefixCls = _ref.prefixCls,
        _ref$items = _ref.items,
        items = _ref$items === void 0 ? [] : _ref$items,
        showPreviewIcon = _ref.showPreviewIcon,
        showRemoveIcon = _ref.showRemoveIcon,
        showDownloadIcon = _ref.showDownloadIcon,
        removeIcon = _ref.removeIcon,
        downloadIcon = _ref.downloadIcon,
        progress = _ref.progress,
        appendAction = _ref.appendAction,
        itemRender = _ref.itemRender;
    var forceUpdate = useForceUpdate();

    var _React$useState = React.useState(false),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        motionAppear = _React$useState2[0],
        setMotionAppear = _React$useState2[1]; // ============================= Effect =============================


    React.useEffect(function () {
      if (listType !== 'picture' && listType !== 'picture-card') {
        return;
      }

      (items || []).forEach(function (file) {
        if (typeof document === 'undefined' || typeof window === 'undefined' || !window.FileReader || !window.File || !(file.originFileObj instanceof File || file.originFileObj instanceof Blob) || file.thumbUrl !== undefined) {
          return;
        }

        file.thumbUrl = '';

        if (previewFile) {
          previewFile(file.originFileObj).then(function (previewDataUrl) {
            // Need append '' to avoid dead loop
            file.thumbUrl = previewDataUrl || '';
            forceUpdate();
          });
        }
      });
    }, [listType, items, previewFile]);
    React.useEffect(function () {
      setMotionAppear(true);
    }, []); // ============================= Events =============================

    var onInternalPreview = function onInternalPreview(file, e) {
      if (!onPreview) {
        return;
      }

      e === null || e === void 0 ? void 0 : e.preventDefault();
      return onPreview(file);
    };

    var onInternalDownload = function onInternalDownload(file) {
      if (typeof onDownload === 'function') {
        onDownload(file);
      } else if (file.url) {
        window.open(file.url);
      }
    };

    var onInternalClose = function onInternalClose(file) {
      onRemove === null || onRemove === void 0 ? void 0 : onRemove(file);
    };

    var internalIconRender = function internalIconRender(file) {
      if (iconRender) {
        return iconRender(file, listType);
      }

      var isLoading = file.status === 'uploading';
      var fileIcon = isImgUrl && isImgUrl(file) ? /*#__PURE__*/React.createElement(PictureTwoTone$2, null) : /*#__PURE__*/React.createElement(FileTwoTone$2, null);
      var icon = isLoading ? /*#__PURE__*/React.createElement(LoadingOutlined$2, null) : /*#__PURE__*/React.createElement(PaperClipOutlined$2, null);

      if (listType === 'picture') {
        icon = isLoading ? /*#__PURE__*/React.createElement(LoadingOutlined$2, null) : fileIcon;
      } else if (listType === 'picture-card') {
        icon = isLoading ? locale.uploading : fileIcon;
      }

      return icon;
    };

    var actionIconRender = function actionIconRender(customIcon, callback, prefixCls, title) {
      var btnProps = {
        type: 'text',
        size: 'small',
        title: title,
        onClick: function onClick(e) {
          callback();

          if (isValidElement(customIcon) && customIcon.props.onClick) {
            customIcon.props.onClick(e);
          }
        },
        className: "".concat(prefixCls, "-list-item-card-actions-btn")
      };

      if (isValidElement(customIcon)) {
        var btnIcon = cloneElement(customIcon, _extends$1(_extends$1({}, customIcon.props), {
          onClick: function onClick() {}
        }));
        return /*#__PURE__*/React.createElement(Button, _extends$1({}, btnProps, {
          icon: btnIcon
        }));
      }

      return /*#__PURE__*/React.createElement(Button, btnProps, /*#__PURE__*/React.createElement("span", null, customIcon));
    }; // ============================== Ref ===============================
    // Test needs


    React.useImperativeHandle(ref, function () {
      return {
        handlePreview: onInternalPreview,
        handleDownload: onInternalDownload
      };
    });

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction; // ============================= Render =============================


    var prefixCls = getPrefixCls('upload', customizePrefixCls);
    var listClassNames = classnames((_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-list"), true), _defineProperty$1(_classNames, "".concat(prefixCls, "-list-").concat(listType), true), _defineProperty$1(_classNames, "".concat(prefixCls, "-list-rtl"), direction === 'rtl'), _classNames)); // >>> Motion config

    var motionKeyList = _toConsumableArray$1(items.map(function (file) {
      return {
        key: file.uid,
        file: file
      };
    }));

    var animationDirection = listType === 'picture-card' ? 'animate-inline' : 'animate'; // const transitionName = list.length === 0 ? '' : `${prefixCls}-${animationDirection}`;

    var motionConfig = {
      motionDeadline: 2000,
      motionName: "".concat(prefixCls, "-").concat(animationDirection),
      keys: motionKeyList,
      motionAppear: motionAppear
    };

    if (listType !== 'picture-card') {
      motionConfig = _extends$1(_extends$1({}, listItemMotion), motionConfig);
    }

    return /*#__PURE__*/React.createElement("div", {
      className: listClassNames
    }, /*#__PURE__*/React.createElement(CSSMotionList, _extends$1({}, motionConfig, {
      component: false
    }), function (_ref2) {
      var key = _ref2.key,
          file = _ref2.file,
          motionClassName = _ref2.className,
          motionStyle = _ref2.style;
      return /*#__PURE__*/React.createElement(ListItem, {
        key: key,
        locale: locale,
        prefixCls: prefixCls,
        className: motionClassName,
        style: motionStyle,
        file: file,
        items: items,
        progress: progress,
        listType: listType,
        isImgUrl: isImgUrl,
        showPreviewIcon: showPreviewIcon,
        showRemoveIcon: showRemoveIcon,
        showDownloadIcon: showDownloadIcon,
        removeIcon: removeIcon,
        downloadIcon: downloadIcon,
        iconRender: internalIconRender,
        actionIconRender: actionIconRender,
        itemRender: itemRender,
        onPreview: onInternalPreview,
        onDownload: onInternalDownload,
        onClose: onInternalClose
      });
    }), appendAction && /*#__PURE__*/React.createElement(CSSMotion, motionConfig, function (_ref3) {
      var motionClassName = _ref3.className,
          motionStyle = _ref3.style;
      return cloneElement(appendAction, function (oriProps) {
        return {
          className: classnames(oriProps.className, motionClassName),
          style: _extends$1(_extends$1({}, motionStyle), oriProps.style)
        };
      });
    }));
  };

  var UploadList = /*#__PURE__*/React.forwardRef(InternalUploadList);
  UploadList.displayName = 'UploadList';
  UploadList.defaultProps = {
    listType: 'text',
    progress: {
      strokeWidth: 2,
      showInfo: false
    },
    showRemoveIcon: true,
    showDownloadIcon: false,
    showPreviewIcon: true,
    previewFile: previewImage,
    isImageUrl: isImageUrl
  };

  var __awaiter$1 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var LIST_IGNORE = "__LIST_IGNORE_".concat(Date.now(), "__");

  var InternalUpload = function InternalUpload(props, ref) {
    var _classNames2;

    var fileList = props.fileList,
        defaultFileList = props.defaultFileList,
        onRemove = props.onRemove,
        showUploadList = props.showUploadList,
        listType = props.listType,
        onPreview = props.onPreview,
        onDownload = props.onDownload,
        onChange = props.onChange,
        onDrop = props.onDrop,
        previewFile = props.previewFile,
        disabled = props.disabled,
        propLocale = props.locale,
        iconRender = props.iconRender,
        isImageUrl = props.isImageUrl,
        progress = props.progress,
        customizePrefixCls = props.prefixCls,
        className = props.className,
        type = props.type,
        children = props.children,
        style = props.style,
        itemRender = props.itemRender,
        maxCount = props.maxCount;

    var _useMergedState = useControlledState(defaultFileList || [], {
      value: fileList,
      postState: function postState(list) {
        return list !== null && list !== void 0 ? list : [];
      }
    }),
        _useMergedState2 = _slicedToArray$1(_useMergedState, 2),
        mergedFileList = _useMergedState2[0],
        setMergedFileList = _useMergedState2[1];

    var _React$useState = React.useState('drop'),
        _React$useState2 = _slicedToArray$1(_React$useState, 2),
        dragState = _React$useState2[0],
        setDragState = _React$useState2[1];

    var upload = React.useRef();
    React.useEffect(function () {
      devWarning('fileList' in props || !('value' in props), 'Upload', '`value` is not a valid prop, do you mean `fileList`?');
      devWarning(!('transformFile' in props), 'Upload', '`transformFile` is deprecated. Please use `beforeUpload` directly.');
    }, []); // Control mode will auto fill file uid if not provided

    React.useMemo(function () {
      var timestamp = Date.now();
      (fileList || []).forEach(function (file, index) {
        if (!file.uid && !Object.isFrozen(file)) {
          file.uid = "__AUTO__".concat(timestamp, "_").concat(index, "__");
        }
      });
    }, [fileList]);

    var onInternalChange = function onInternalChange(file, changedFileList, event) {
      var cloneList = _toConsumableArray$1(changedFileList); // Cut to match count


      if (maxCount === 1) {
        cloneList = cloneList.slice(-1);
      } else if (maxCount) {
        cloneList = cloneList.slice(0, maxCount);
      }

      setMergedFileList(cloneList);
      var changeInfo = {
        file: file,
        fileList: cloneList
      };

      if (event) {
        changeInfo.event = event;
      }

      onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo);
    };

    var mergedBeforeUpload = function mergedBeforeUpload(file, fileListArgs) {
      return __awaiter$1(void 0, void 0, void 0, /*#__PURE__*/regenerator.mark(function _callee() {
        var beforeUpload, transformFile, parsedFile, result;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                beforeUpload = props.beforeUpload, transformFile = props.transformFile;
                parsedFile = file;

                if (!beforeUpload) {
                  _context.next = 13;
                  break;
                }

                _context.next = 5;
                return beforeUpload(file, fileListArgs);

              case 5:
                result = _context.sent;

                if (!(result === false)) {
                  _context.next = 8;
                  break;
                }

                return _context.abrupt("return", false);

              case 8:
                // Hack for LIST_IGNORE, we add additional info to remove from the list
                delete file[LIST_IGNORE];

                if (!(result === LIST_IGNORE)) {
                  _context.next = 12;
                  break;
                }

                Object.defineProperty(file, LIST_IGNORE, {
                  value: true,
                  configurable: true
                });
                return _context.abrupt("return", false);

              case 12:
                if (_typeof$1(result) === 'object' && result) {
                  parsedFile = result;
                }

              case 13:
                if (!transformFile) {
                  _context.next = 17;
                  break;
                }

                _context.next = 16;
                return transformFile(parsedFile);

              case 16:
                parsedFile = _context.sent;

              case 17:
                return _context.abrupt("return", parsedFile);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
    };

    var onBatchStart = function onBatchStart(batchFileInfoList) {
      // Skip file which marked as `LIST_IGNORE`, these file will not add to file list
      var filteredFileInfoList = batchFileInfoList.filter(function (info) {
        return !info.file[LIST_IGNORE];
      }); // Nothing to do since no file need upload

      if (!filteredFileInfoList.length) {
        return;
      }

      var objectFileList = filteredFileInfoList.map(function (info) {
        return file2Obj(info.file);
      }); // Concat new files with prev files

      var newFileList = _toConsumableArray$1(mergedFileList);

      objectFileList.forEach(function (fileObj) {
        // Replace file if exist
        newFileList = updateFileList(fileObj, newFileList);
      });
      objectFileList.forEach(function (fileObj, index) {
        // Repeat trigger `onChange` event for compatible
        var triggerFileObj = fileObj;

        if (!filteredFileInfoList[index].parsedFile) {
          // `beforeUpload` return false
          var originFileObj = fileObj.originFileObj;
          var clone;

          try {
            clone = new File([originFileObj], originFileObj.name, {
              type: originFileObj.type
            });
          } catch (e) {
            clone = new Blob([originFileObj], {
              type: originFileObj.type
            });
            clone.name = originFileObj.name;
            clone.lastModifiedDate = new Date();
            clone.lastModified = new Date().getTime();
          }

          clone.uid = fileObj.uid;
          triggerFileObj = clone;
        } else {
          // Inject `uploading` status
          fileObj.status = 'uploading';
        }

        onInternalChange(triggerFileObj, newFileList);
      });
    };

    var onSuccess = function onSuccess(response, file, xhr) {
      try {
        if (typeof response === 'string') {
          response = JSON.parse(response);
        }
      } catch (e) {
        /* do nothing */
      } // removed


      if (!getFileItem(file, mergedFileList)) {
        return;
      }

      var targetItem = file2Obj(file);
      targetItem.status = 'done';
      targetItem.percent = 100;
      targetItem.response = response;
      targetItem.xhr = xhr;
      var nextFileList = updateFileList(targetItem, mergedFileList);
      onInternalChange(targetItem, nextFileList);
    };

    var onProgress = function onProgress(e, file) {
      // removed
      if (!getFileItem(file, mergedFileList)) {
        return;
      }

      var targetItem = file2Obj(file);
      targetItem.status = 'uploading';
      targetItem.percent = e.percent;
      var nextFileList = updateFileList(targetItem, mergedFileList);
      onInternalChange(targetItem, nextFileList, e);
    };

    var onError = function onError(error, response, file) {
      // removed
      if (!getFileItem(file, mergedFileList)) {
        return;
      }

      var targetItem = file2Obj(file);
      targetItem.error = error;
      targetItem.response = response;
      targetItem.status = 'error';
      var nextFileList = updateFileList(targetItem, mergedFileList);
      onInternalChange(targetItem, nextFileList);
    };

    var handleRemove = function handleRemove(file) {
      var currentFile;
      Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(function (ret) {
        var _a; // Prevent removing file


        if (ret === false) {
          return;
        }

        var removedFileList = removeFileItem(file, mergedFileList);

        if (removedFileList) {
          currentFile = _extends$1(_extends$1({}, file), {
            status: 'removed'
          });
          mergedFileList === null || mergedFileList === void 0 ? void 0 : mergedFileList.forEach(function (item) {
            var matchKey = currentFile.uid !== undefined ? 'uid' : 'name';

            if (item[matchKey] === currentFile[matchKey] && !Object.isFrozen(item)) {
              item.status = 'removed';
            }
          });
          (_a = upload.current) === null || _a === void 0 ? void 0 : _a.abort(currentFile);
          onInternalChange(currentFile, removedFileList);
        }
      });
    };

    var onFileDrop = function onFileDrop(e) {
      setDragState(e.type);

      if (e.type === 'drop') {
        onDrop === null || onDrop === void 0 ? void 0 : onDrop(e);
      }
    }; // Test needs


    React.useImperativeHandle(ref, function () {
      return {
        onBatchStart: onBatchStart,
        onSuccess: onSuccess,
        onProgress: onProgress,
        onError: onError,
        fileList: mergedFileList,
        upload: upload.current
      };
    });

    var _React$useContext = React.useContext(ConfigContext),
        getPrefixCls = _React$useContext.getPrefixCls,
        direction = _React$useContext.direction;

    var prefixCls = getPrefixCls('upload', customizePrefixCls);

    var rcUploadProps = _extends$1(_extends$1({
      onBatchStart: onBatchStart,
      onError: onError,
      onProgress: onProgress,
      onSuccess: onSuccess
    }, props), {
      prefixCls: prefixCls,
      beforeUpload: mergedBeforeUpload,
      onChange: undefined
    });

    delete rcUploadProps.className;
    delete rcUploadProps.style; // Remove id to avoid open by label when trigger is hidden
    // !children: https://github.com/ant-design/ant-design/issues/14298
    // disabled: https://github.com/ant-design/ant-design/issues/16478
    //           https://github.com/ant-design/ant-design/issues/24197

    if (!children || disabled) {
      delete rcUploadProps.id;
    }

    var renderUploadList = function renderUploadList(button) {
      return showUploadList ? /*#__PURE__*/React.createElement(LocaleReceiver, {
        componentName: "Upload",
        defaultLocale: localeValues.Upload
      }, function (locale) {
        var _ref = typeof showUploadList === 'boolean' ? {} : showUploadList,
            showRemoveIcon = _ref.showRemoveIcon,
            showPreviewIcon = _ref.showPreviewIcon,
            showDownloadIcon = _ref.showDownloadIcon,
            removeIcon = _ref.removeIcon,
            downloadIcon = _ref.downloadIcon;

        return /*#__PURE__*/React.createElement(UploadList, {
          listType: listType,
          items: mergedFileList,
          previewFile: previewFile,
          onPreview: onPreview,
          onDownload: onDownload,
          onRemove: handleRemove,
          showRemoveIcon: !disabled && showRemoveIcon,
          showPreviewIcon: showPreviewIcon,
          showDownloadIcon: showDownloadIcon,
          removeIcon: removeIcon,
          downloadIcon: downloadIcon,
          iconRender: iconRender,
          locale: _extends$1(_extends$1({}, locale), propLocale),
          isImageUrl: isImageUrl,
          progress: progress,
          appendAction: button,
          itemRender: itemRender
        });
      }) : button;
    };

    if (type === 'drag') {
      var _classNames;

      var dragCls = classnames(prefixCls, (_classNames = {}, _defineProperty$1(_classNames, "".concat(prefixCls, "-drag"), true), _defineProperty$1(_classNames, "".concat(prefixCls, "-drag-uploading"), mergedFileList.some(function (file) {
        return file.status === 'uploading';
      })), _defineProperty$1(_classNames, "".concat(prefixCls, "-drag-hover"), dragState === 'dragover'), _defineProperty$1(_classNames, "".concat(prefixCls, "-disabled"), disabled), _defineProperty$1(_classNames, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames), className);
      return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("div", {
        className: dragCls,
        onDrop: onFileDrop,
        onDragOver: onFileDrop,
        onDragLeave: onFileDrop,
        style: style
      }, /*#__PURE__*/React.createElement(Upload, _extends$1({}, rcUploadProps, {
        ref: upload,
        className: "".concat(prefixCls, "-btn")
      }), /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-drag-container")
      }, children))), renderUploadList());
    }

    var uploadButtonCls = classnames(prefixCls, (_classNames2 = {}, _defineProperty$1(_classNames2, "".concat(prefixCls, "-select"), true), _defineProperty$1(_classNames2, "".concat(prefixCls, "-select-").concat(listType), true), _defineProperty$1(_classNames2, "".concat(prefixCls, "-disabled"), disabled), _defineProperty$1(_classNames2, "".concat(prefixCls, "-rtl"), direction === 'rtl'), _classNames2));
    var uploadButton = /*#__PURE__*/React.createElement("div", {
      className: uploadButtonCls,
      style: children ? undefined : {
        display: 'none'
      }
    }, /*#__PURE__*/React.createElement(Upload, _extends$1({}, rcUploadProps, {
      ref: upload
    })));

    if (listType === 'picture-card') {
      return /*#__PURE__*/React.createElement("span", {
        className: classnames("".concat(prefixCls, "-picture-card-wrapper"), className)
      }, renderUploadList(uploadButton));
    }

    return /*#__PURE__*/React.createElement("span", {
      className: className
    }, uploadButton, renderUploadList());
  };

  var Upload$1 = /*#__PURE__*/React.forwardRef(InternalUpload);
  Upload$1.Dragger = Dragger;
  Upload$1.LIST_IGNORE = LIST_IGNORE;
  Upload$1.displayName = 'Upload';
  Upload$1.defaultProps = {
    type: 'select',
    multiple: false,
    action: '',
    data: {},
    accept: '',
    showUploadList: true,
    listType: 'text',
    className: '',
    disabled: false,
    supportServerRender: true
  };

  Upload$1.Dragger = Dragger;

  var CURRENT_PACKAGE_NAME = '@apaas-lego/react-basic-widgets'; // FIXME: 组件类型  [关于这部分我们需要抽出去，每个组件库其实都需要]

  var COMPONENT_TYPE_FORM = 'form'; // form类型

  var COMPONENT_TYPE_CONTAINER = 'container'; // 容器类型

  var COMPONENT_TYPE_BASIC = 'basic'; // 基础类型

  var COMPONENT_LAYOUT_INLINE = 'inline'; // 行类元素

  var formItemProperties = function formItemProperties(_ref) {
    var _ref$label = _ref.label,
        label = _ref$label === void 0 ? '' : _ref$label,
        _ref$colon = _ref.colon,
        colon = _ref$colon === void 0 ? true : _ref$colon,
        initialValue = _ref.initialValue,
        extra = _ref.extra,
        name = _ref.name,
        _ref$rules = _ref.rules,
        rules = _ref$rules === void 0 ? [] : _ref$rules;
    return {
      label: {
        title: '标题',
        type: 'string',
        default: label
      },
      colon: {
        title: '是否有冒号',
        type: 'boolean',
        default: colon
      },
      initialValue: {
        title: '初始值',
        type: 'string',
        default: initialValue
      },
      extra: {
        title: '提示信息',
        type: 'string',
        default: extra
      },
      name: {
        title: '字段名',
        type: 'string',
        default: name
      },
      rules: {
        title: '校验',
        type: 'array',
        default: [],
        widget: "Rules",
        props: {
          rules: rules
        }
      }
    };
  };
  var width = {
    title: '宽度',
    type: 'string',
    required: false
  };
  var height = {
    title: '高度',
    type: 'string',
    required: false
  };
  var background = {
    title: '背景色',
    type: 'string'
  };
  var layout = {
    type: 'object',
    title: '布局',
    properties: {
      display: {
        "title": "布局",
        "type": "string",
        "enum": ["flex", "block", "inline-block"],
        "enumNames": ["flex", "block", "inline-block"],
        "widget": "select",
        "default": "block"
      },
      flexDirection: {
        "title": "弹性布局方向",
        "type": "string",
        "enum": ["row", "column"],
        "enumNames": ["横向", "纵向"],
        "default": "row",
        "hidden": "{{formData.layout.display !== 'flex'}}"
      },
      justifyContent: {
        "title": "主轴方向",
        "type": "string",
        "enum": ["flex-start", "flex-end", "center", "space-around", "space-between"],
        "enumNames": ["flex-start", "flex-end", "center", "space-around", "space-between"],
        "default": "center",
        "hidden": "{{formData.layout.display !== 'flex'}}"
      },
      alignItems: {
        "title": "侧轴方向",
        "type": "string",
        "enum": ["flex-start", "flex-end", "center", "space-around", "space-between"],
        "enumNames": ["flex-start", "flex-end", "center", "space-around", "space-between"],
        "default": "center",
        "hidden": "{{formData.layout.display !== 'flex'}}"
      }
    }
  };
  var font = {
    type: 'object',
    title: '文字',
    properties: {
      fontFamily: {
        title: '字体',
        description: 'font-family',
        type: 'string',
        required: false
      },
      fontWidget: {
        type: 'string',
        description: 'font-widget',
        title: '字重',
        default: 'normal',
        widget: 'select',
        enum: ['lighter', 'normal', '100', '200', '300', '400', '500', '600', '700', '800', '900', 'bold', 'bolder'],
        enumNames: ['lighter', 'normal', '100', '200', '300', '400', '500', '600', '700', '800', '900', 'bold', 'bolder']
      },
      fontStyle: {
        type: 'string',
        title: '样式',
        description: 'font-style',
        default: 'normal',
        widget: 'select',
        enum: ['normal', 'italic'],
        enumNames: ['正常', '斜体']
      },
      fontSize: {
        title: '字体大小',
        description: 'font-size',
        type: 'number',
        required: false,
        default: 14
      },
      lineHeight: {
        title: '行高',
        description: 'line-height',
        type: 'string',
        required: false,
        default: '21px'
      },
      color: {
        title: '字体颜色',
        description: 'color',
        type: 'string',
        format: 'color',
        default: '#000'
      },
      textAlign: {
        type: 'string',
        description: 'text-align',
        title: '对齐方式',
        default: 'left',
        enum: ['left', 'center', 'right', 'justify'],
        enumNames: ['left', 'center', 'right', 'justify']
      },
      textDecorationLine: {
        type: 'string',
        description: 'text-decoration-line',
        title: '装饰线',
        default: 'none',
        enum: ['none', 'underline', 'line-through'],
        enumNames: ['none', '下划线', '横划线']
      }
    }
  };
  var margin = {
    type: 'object',
    title: '外边距',
    properties: {
      marginTop: {
        title: '上边距',
        type: 'string'
      },
      marginRight: {
        title: '右边距',
        type: 'string'
      },
      marginBottom: {
        title: '下边距',
        type: 'string'
      },
      marginLeft: {
        title: '左边距',
        type: 'string'
      }
    }
  };
  var padding = {
    type: 'object',
    title: '内边距',
    properties: {
      paddingTop: {
        title: '上边距',
        type: 'string'
      },
      paddingRight: {
        title: '右边距',
        type: 'string'
      },
      paddingBottom: {
        title: '下边距',
        type: 'string'
      },
      paddingLeft: {
        title: '左边距',
        type: 'string'
      }
    }
  };
  var border = {
    type: 'object',
    title: '边框',
    properties: {
      borderStyle: {
        type: 'string',
        title: '线形',
        default: 'none',
        widget: 'select',
        enum: ['none', 'solid', 'dashed', 'dotted'],
        enumNames: ['无', '实线', '虚线', '点线']
      },
      borderWidth: {
        type: 'string',
        title: '线宽'
      },
      borderColor: {
        type: 'string',
        title: '颜色',
        widget: 'color'
      },
      borderRadius: {
        type: 'string',
        title: '圆角'
      }
    }
  };
  var cursor = {
    title: '鼠标手势',
    type: 'string',
    enum: ['default', 'pointer'],
    enumNames: ['default', 'pointer'],
    widget: 'select',
    default: 'default'
  };

  var COMPONENT_NAME = '输入框';
  var ApaasInput = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var handleChange = function handleChange(e) {
      var _props$events;

      // 双向绑定的onChange事件
      if (typeof (props === null || props === void 0 ? void 0 : props.onChange) === 'function') {
        props.onChange(e.target.value);
      } // 用户自定义onChange事件


      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onChange) === 'function') {
        props.events.onChange(e.target.value);
      }
    };

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    return /*#__PURE__*/React__default['default'].createElement(Input$1, _extends({}, props, {
      onChange: handleChange,
      ref: ref
    }));
  });
  ApaasInput.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        allowClear: {
          title: "清除图标",
          type: "boolean",
          required: false
        },
        bordered: {
          title: "是否有边框",
          type: "boolean",
          required: false,
          default: true
        },
        maxLength: {
          title: "最大长度",
          type: "number",
          required: false
        },
        formItemProps: {
          type: "object",
          title: "表单字段配置",
          displayType: "column",
          properties: _objectSpread2({}, formItemProperties({
            label: COMPONENT_NAME,
            rules: {
              required: {
                label: '必填',
                message: ''
              },
              max: {
                label: '最大长度',
                message: '',
                type: 'string'
              },
              min: {
                label: '最小长度',
                message: '',
                type: 'string'
              },
              validator: {
                label: '自定义函数',
                message: ''
              }
            }
          }))
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: "object",
      displayType: "column",
      properties: {
        events: {
          title: "绑定动作",
          type: "object",
          widget: "BindAction",
          required: false,
          default: {},
          props: {
            actions: ['onChange']
          }
        },
        lifeCycle: {
          title: "生命周期",
          type: "object",
          properties: {
            didMount: {
              title: "组件加载完成时",
              description: 'didMount',
              type: "string",
              required: false
            },
            unMount: {
              title: "组件销毁时",
              description: 'unMount',
              type: "string",
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasInput",
    name: COMPONENT_NAME,
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_FORM,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var COMPONENT_NAME$1 = '数字输入框';
  var ApaasInputNumber = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var handleChange = function handleChange(valve) {
      var _props$events;

      // 双向绑定的onChange事件
      if (typeof (props === null || props === void 0 ? void 0 : props.onChange) === 'function') {
        props.onChange(valve);
      } // 用户自定义onChange事件


      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onChange) === 'function') {
        props.events.onChange(valve);
      }
    };

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    return /*#__PURE__*/React__default['default'].createElement(InputNumber$1, _extends({}, props, {
      onChange: handleChange,
      ref: ref
    }));
  });
  ApaasInputNumber.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        placeholder: {
          title: '占位符',
          type: 'string',
          default: ''
        },
        max: {
          title: "最大值",
          type: "number",
          required: false
        },
        min: {
          title: "最小值",
          type: "number",
          required: false
        },
        reg: {
          title: "校验规则",
          type: "string",
          description: '正则表达式组件'
        },
        formItemProps: {
          type: 'object',
          title: '表单字段配置',
          displayType: 'column',
          properties: _objectSpread2({}, formItemProperties({
            label: COMPONENT_NAME$1,
            rules: {
              required: {
                label: '必填',
                message: ''
              },
              max: {
                label: '最大值',
                message: '',
                type: 'number'
              },
              min: {
                label: '最小值',
                message: '',
                type: 'number'
              },
              validator: {
                label: '自定义函数',
                message: ''
              }
            }
          }))
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: 'object',
      displayType: 'column',
      properties: {
        events: {
          title: '绑定动作',
          type: 'object',
          widget: 'BindAction',
          required: false,
          default: {},
          props: {
            actions: ['onChange']
          }
        },
        lifeCycle: {
          title: '生命周期',
          type: 'object',
          properties: {
            didMount: {
              title: '组件加载完成时',
              description: 'didMount',
              type: 'string',
              required: false
            },
            unMount: {
              title: '组件销毁时',
              description: 'unMount',
              type: 'string',
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasInputNumber",
    name: COMPONENT_NAME$1,
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_FORM,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var COMPONENT_NAME$2 = '多行输入框';
  var ApaasTextArea = /*#__PURE__*/React.forwardRef(function (props, ref) {
    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);

    var handleChange = function handleChange(e) {
      var _props$events;

      // 双向绑定的onChange事件
      if (typeof (props === null || props === void 0 ? void 0 : props.onChange) === 'function') {
        props.onChange(e.target.value);
      } // 用户自定义onChange事件


      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onChange) === 'function') {
        props.events.onChange(e.target.value);
      }
    };

    return /*#__PURE__*/React__default['default'].createElement(Input$1.TextArea, _extends({}, props, {
      onChange: handleChange,
      ref: ref
    }));
  });
  ApaasTextArea.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        placeholder: {
          title: '占位符',
          type: 'string',
          default: ''
        },
        allowClear: {
          title: "清除图标",
          type: "boolean",
          required: false
        },
        maxLength: {
          title: "最大长度",
          type: "number",
          required: false
        },
        rows: {
          title: "行数",
          type: "number",
          default: 4
        },
        formItemProps: {
          type: 'object',
          title: '表单字段配置',
          displayType: 'column',
          properties: _objectSpread2({}, formItemProperties({
            label: COMPONENT_NAME$2,
            rules: {
              required: {
                label: '必填',
                message: ''
              },
              max: {
                label: '最大长度',
                message: '',
                type: 'string'
              },
              min: {
                label: '最小长度',
                message: '',
                type: 'string'
              },
              validator: {
                label: '自定义函数',
                message: ''
              }
            }
          }))
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: 'object',
      displayType: 'column',
      properties: {
        events: {
          title: '绑定动作',
          type: 'object',
          widget: 'BindAction',
          required: false,
          default: {},
          props: {
            actions: ['onChange']
          }
        },
        lifeCycle: {
          title: '生命周期',
          type: 'object',
          properties: {
            didMount: {
              title: '组件加载完成时',
              description: 'didMount',
              type: 'string',
              required: false
            },
            unMount: {
              title: '组件销毁时',
              description: 'unMount',
              type: 'string',
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasTextArea",
    name: COMPONENT_NAME$2,
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_FORM,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var ApaasForm = /*#__PURE__*/React.forwardRef(function (props, ref) {
    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    return /*#__PURE__*/React__default['default'].createElement(Form$2, _extends({}, props, {
      ref: ref
    }));
  });
  ApaasForm.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        labelCol: {
          type: "object",
          displayType: "column",
          title: "label设置",
          properties: {
            span: {
              title: "span",
              type: "number",
              required: false,
              default: 0
            },
            offset: {
              title: "offset",
              type: "number",
              required: false,
              default: 0
            }
          }
        },
        wrapperCol: {
          type: "object",
          displayType: "column",
          title: "设置",
          properties: {
            span: {
              title: "span",
              type: "number",
              required: false,
              default: 0
            },
            offset: {
              title: "offset",
              type: "number",
              required: false,
              default: 0
            }
          }
        },
        initialValues: {
          title: "初始值",
          type: "string",
          required: false,
          description: "表达式组件"
        },
        layout: {
          title: "布局方式",
          type: "string",
          required: false,
          "enum": ["horizontal", "vertical", "inline"],
          "enumNames": ["水平", "垂直", "内联"],
          default: 'horizontal'
        },
        labelAlign: {
          title: "对齐方式",
          type: "string",
          required: false,
          "enum": ["left", "right"],
          "enumNames": ["左", "右"],
          default: 'right'
        },
        onFinish: {
          title: "提交函数",
          type: "string",
          widget: "CodeEditor",
          required: false,
          description: "函数表达式组件",
          default: "// 请填写提交函数 \n function submit() {}",
          props: {
            options: {
              selectOnLineNumbers: true,
              roundedSelection: false,
              readOnly: false,
              cursorStyle: "line",
              automaticLayout: false
            },
            language: 'javascript',
            width: '300',
            height: '200',
            theme: 'vs-dark' // vs-light

          }
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: "object",
      displayType: "column",
      properties: {
        lifeCycle: {
          title: "生命周期",
          type: "object",
          properties: {
            didMount: {
              title: "组件加载完成时",
              description: 'didMount',
              type: "string",
              required: false
            },
            unMount: {
              title: "组件销毁时",
              description: 'unMount',
              type: "string",
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasForm",
    name: "表单容器",
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_CONTAINER,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var COMPONENT_NAME$3 = '单选框';
  var ApaasRadio = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$names = props.names,
        names = _props$names === void 0 ? [] : _props$names,
        _props$values = props.values,
        values = _props$values === void 0 ? [] : _props$values,
        isButton = props.isButton;

    var handleChange = function handleChange(value) {
      var _props$events;

      // 双向绑定的onChange事件
      if (typeof (props === null || props === void 0 ? void 0 : props.onChange) === 'function') {
        props.onChange(value);
      } // 用户自定义onChange事件


      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onChange) === 'function') {
        props.events.onChange(value);
      }
    };

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    return /*#__PURE__*/React__default['default'].createElement(Radio$1.Group, _extends({}, props, {
      onChange: handleChange,
      ref: ref
    }), values.map(function (value, index) {
      return isButton ? /*#__PURE__*/React__default['default'].createElement(Radio$1.Button, {
        value: value,
        key: value
      }, names[index]) : /*#__PURE__*/React__default['default'].createElement(Radio$1, {
        value: value,
        key: value
      }, names[index]);
    }));
  });
  ApaasRadio.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        values: {
          "title": "选项字段",
          "type": "array",
          "enum": ["A", "B", "C"],
          "enumNames": ["A", "B", "C"],
          "widget": "select",
          "props": {
            "mode": "tags"
          },
          "default": ["A", "B", "C"]
        },
        names: {
          "title": "选项名称",
          "type": "array",
          "enum": ["选项1", "选项2", "选项3"],
          "enumNames": ["选项1", "选项2", "选项3"],
          "widget": "select",
          "props": {
            "mode": "tags"
          },
          "default": ["选项1", "选项2", "选项3"]
        },
        isButton: {
          "title": "是否是按钮",
          "type": "boolean",
          "default": false
        },
        buttonStyle: {
          "title": "风格样式",
          "type": "string",
          "default": "solid",
          "enum": ["outline", "solid"],
          "enumNames": ["描边", "填色"],
          "widget": "select"
        },
        formItemProps: {
          type: 'object',
          title: '表单字段配置',
          displayType: 'column',
          properties: _objectSpread2({}, formItemProperties({
            label: COMPONENT_NAME$3,
            rules: {
              required: {
                label: '必填',
                message: ''
              },
              validator: {
                label: '自定义函数',
                message: ''
              }
            }
          }))
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: 'object',
      displayType: 'column',
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: 'object',
      displayType: 'column',
      properties: {
        events: {
          title: '绑定动作',
          type: 'object',
          widget: 'BindAction',
          required: false,
          default: {},
          props: {
            actions: ['onChange']
          }
        },
        lifeCycle: {
          title: '生命周期',
          type: 'object',
          properties: {
            didMount: {
              title: '组件加载完成时',
              description: 'didMount',
              type: 'string',
              required: false
            },
            unMount: {
              title: '组件销毁时',
              description: 'unMount',
              type: 'string',
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasRadio",
    name: COMPONENT_NAME$3,
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_FORM,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var COMPONENT_NAME$4 = '下拉选择';
  var ApaasSingleSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var options = props.options,
        showSearch = props.showSearch,
        filterItem = props.filterItem;

    var handleChange = function handleChange(value) {
      var _props$events;

      // 双向绑定的onChange事件
      if (typeof (props === null || props === void 0 ? void 0 : props.onChange) === 'function') {
        props.onChange(value);
      } // 用户自定义onChange事件


      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onChange) === 'function') {
        props.events.onChange(value);
      }
    };

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    var finalOptions = React.useMemo(function () {
      try {
        return JSON.parse(options);
      } catch (e) {
        return [];
      }
    }, [options]);
    return /*#__PURE__*/React__default['default'].createElement(Select$1, _extends({}, props, {
      options: finalOptions,
      onChange: handleChange,
      optionFilterProp: "text",
      ref: ref,
      filterOption: showSearch ? function (input, option) {
        return option[filterItem].toLowerCase().indexOf(input.toLowerCase()) >= 0;
      } : function () {}
    }), finalOptions.map(function (item) {
      return /*#__PURE__*/React__default['default'].createElement(Select$1.Option, {
        value: item.value,
        key: item.value
      }, item.label);
    }));
  });
  ApaasSingleSelect.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        placeholder: {
          title: '占位符',
          type: 'string',
          default: ''
        },
        options: {
          title: '数据配置',
          type: 'string',
          default: '[]',
          widget: 'CodeEditor',
          props: {
            options: {
              selectOnLineNumbers: true,
              roundedSelection: false,
              readOnly: false,
              cursorStyle: 'line',
              automaticLayout: false
            },
            language: 'json',
            width: '250',
            height: '200'
          }
        },
        showSearch: {
          "title": "是否支持搜索",
          "type": "boolean",
          "default": true
        },
        filterItem: {
          "title": "过滤选项",
          "type": "string",
          "enumNames": ["按值过滤", "按文本过滤"],
          "enum": ["value", "children"],
          "widget": "select",
          "default": "children"
        },
        formItemProps: {
          type: 'object',
          title: '表单字段配置',
          displayType: 'column',
          properties: _objectSpread2({}, formItemProperties({
            label: COMPONENT_NAME$4,
            rules: {
              required: {
                label: '必填',
                message: ''
              },
              validator: {
                label: '自定义函数',
                message: ''
              }
            }
          }))
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: 'object',
      displayType: 'column',
      properties: {
        events: {
          title: '绑定动作',
          type: 'object',
          widget: 'BindAction',
          required: false,
          default: {},
          props: {
            actions: ['onChange']
          }
        },
        lifeCycle: {
          title: '生命周期',
          type: 'object',
          properties: {
            didMount: {
              title: '组件加载完成时',
              description: 'didMount',
              type: 'string',
              required: false
            },
            unMount: {
              title: '组件销毁时',
              description: 'unMount',
              type: 'string',
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasSingleSelect",
    name: COMPONENT_NAME$4,
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_FORM,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var _excluded$d = ["names", "values"];
  var COMPONENT_NAME$5 = '多选框';
  var ApaasCheckBox = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$names = props.names,
        names = _props$names === void 0 ? [] : _props$names,
        _props$values = props.values,
        values = _props$values === void 0 ? [] : _props$values,
        otherProps = _objectWithoutProperties(props, _excluded$d);

    var handleChange = function handleChange(checkedValue) {
      var _props$events;

      // 双向绑定的onChange事件
      if (typeof (props === null || props === void 0 ? void 0 : props.onChange) === 'function') {
        props.onChange(checkedValue);
      } // 用户自定义onChange事件


      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onChange) === 'function') {
        props.events.onChange(checkedValue);
      }
    };

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    return /*#__PURE__*/React__default['default'].createElement(Checkbox$2.Group, _extends({}, otherProps, {
      onChange: handleChange,
      ref: ref
    }), values.map(function (value, index) {
      return /*#__PURE__*/React__default['default'].createElement(Checkbox$2, {
        value: value,
        key: value
      }, names[index]);
    }));
  });
  ApaasCheckBox.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        values: {
          "title": "选项字段",
          "type": "array",
          "enum": ["A", "B", "C"],
          "enumNames": ["A", "B", "C"],
          "widget": "select",
          "props": {
            "mode": "tags"
          },
          "default": ["A", "B", "C"]
        },
        names: {
          "title": "选项名称",
          "type": "array",
          "enum": ["选项1", "选项2", "选项3"],
          "enumNames": ["选项1", "选项2", "选项3"],
          "widget": "select",
          "props": {
            "mode": "tags"
          },
          "default": ["选项1", "选项2", "选项3"]
        },
        placeholder: {
          title: '占位符',
          type: 'string',
          default: ''
        },
        formItemProps: {
          type: 'object',
          title: '表单字段配置',
          displayType: 'column',
          properties: _objectSpread2({}, formItemProperties({
            label: COMPONENT_NAME$5,
            rules: {
              required: {
                label: '必填',
                message: ''
              },
              len: {
                label: '长度',
                message: '',
                type: 'array'
              },
              validator: {
                label: '自定义函数',
                message: ''
              }
            }
          }))
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: "object",
      displayType: "column",
      properties: {
        events: {
          title: '绑定动作',
          type: 'object',
          widget: 'BindAction',
          required: false,
          default: {},
          props: {
            actions: ['onChange']
          }
        },
        lifeCycle: {
          title: '生命周期',
          type: 'object',
          properties: {
            didMount: {
              title: '组件加载完成时',
              description: 'didMount',
              type: 'string',
              required: false
            },
            unMount: {
              title: '组件销毁时',
              description: 'unMount',
              type: 'string',
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasCheckBox",
    name: COMPONENT_NAME$5,
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_FORM,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var COMPONENT_NAME$6 = '下拉多选';
  var ApaasMultSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$names = props.names,
        names = _props$names === void 0 ? [] : _props$names,
        _props$values = props.values,
        values = _props$values === void 0 ? [] : _props$values,
        filterItem = props.filterItem,
        style = props.style;

    var handleChange = function handleChange(value) {
      var _props$events;

      // 双向绑定的onChange事件
      if (typeof (props === null || props === void 0 ? void 0 : props.onChange) === 'function') {
        props.onChange(value);
      } // 用户自定义onChange事件


      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onChange) === 'function') {
        props.events.onChange(value);
      }
    };

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    return /*#__PURE__*/React__default['default'].createElement(Select$1, _extends({}, props, {
      style: style,
      mode: "multiple",
      optionFilterProp: "text",
      onChange: handleChange,
      filterOption: function filterOption(input, option) {
        return option[filterItem].toLowerCase().indexOf(input.toLowerCase()) >= 0;
      },
      ref: ref
    }), values.map(function (value, index) {
      return /*#__PURE__*/React__default['default'].createElement(Select$1.Option, {
        value: value,
        key: value
      }, names[index]);
    }));
  });
  ApaasMultSelect.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        placeholder: {
          title: '占位符',
          type: 'string',
          default: ''
        },
        values: {
          "title": "选项字段",
          "type": "array",
          "enum": ["A", "B", "C"],
          "enumNames": ["A", "B", "C"],
          "widget": "select",
          "props": {
            "mode": "tags"
          },
          "default": ["A", "B", "C"]
        },
        names: {
          "title": "选项名称",
          "type": "array",
          "enum": ["选项1", "选项2", "选项3"],
          "enumNames": ["选项1", "选项2", "选项3"],
          "widget": "select",
          "props": {
            "mode": "tags"
          },
          "default": ["选项1", "选项2", "选项3"]
        },
        filterItem: {
          "title": "过滤选项",
          "type": "string",
          "enumNames": ["按值过滤", "按文本过滤"],
          "enum": ["value", "children"],
          "widget": "select",
          "default": "children"
        },
        formItemProps: {
          type: 'object',
          title: '表单字段配置',
          displayType: 'column',
          properties: _objectSpread2({}, formItemProperties({
            label: COMPONENT_NAME$6,
            rules: {
              required: {
                label: '必填',
                message: ''
              },
              len: {
                label: '长度',
                message: '',
                type: 'array'
              },
              validator: {
                label: '自定义函数',
                message: ''
              }
            }
          }))
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: 'object',
      displayType: 'column',
      properties: {
        events: {
          title: '绑定动作',
          type: 'object',
          widget: 'BindAction',
          required: false,
          default: {},
          props: {
            actions: ['onChange']
          }
        },
        lifeCycle: {
          title: '生命周期',
          type: 'object',
          properties: {
            didMount: {
              title: '组件加载完成时',
              description: 'didMount',
              type: 'string',
              required: false
            },
            unMount: {
              title: '组件销毁时',
              description: 'unMount',
              type: 'string',
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasMultSelect",
    name: COMPONENT_NAME$6,
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_FORM,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var COMPONENT_NAME$7 = '日期';
  var ApaasDatePicker = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var range = props.range;

    var handleChange = function handleChange(date, dataString) {
      var _props$events;

      // 双向绑定的onChange事件
      if (typeof (props === null || props === void 0 ? void 0 : props.onChange) === 'function') {
        props.onChange(date);
      } // 用户自定义onChange事件


      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onChange) === 'function') {
        props.events.onChange(date, dataString);
      }
    };

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    return range === 'DatePicker' ? /*#__PURE__*/React__default['default'].createElement(DatePicker, _extends({}, props, {
      onChange: handleChange,
      ref: ref
    })) : /*#__PURE__*/React__default['default'].createElement(DatePicker.RangePicker, _extends({}, props, {
      onChange: handleChange,
      ref: ref
    }));
  });
  ApaasDatePicker.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        picker: {
          title: '选择器类型',
          type: 'string',
          default: 'date',
          enum: ['date', 'week', 'month', 'quarter', 'year'],
          enumNames: ['日', '周', '月', '季度', '年'],
          widget: 'select'
        },
        range: {
          title: '日期选择类型',
          type: 'string',
          default: 'DatePicker',
          enum: ['DatePicker', 'RangePicker'],
          enumNames: ['日期', '日期范围'],
          widget: 'select'
        },
        allowClear: {
          title: '清除图标',
          type: 'boolean',
          required: true
        },
        placeholder: {
          title: '占位符',
          type: 'string',
          default: ''
        },
        showTime: {
          title: '显示时间',
          type: 'boolean',
          required: false
        },
        formItemProps: {
          type: 'object',
          title: '表单字段配置',
          displayType: 'column',
          properties: _objectSpread2({}, formItemProperties({
            label: COMPONENT_NAME$7,
            rules: {
              required: {
                label: '必填',
                message: ''
              },
              validator: {
                label: '自定义函数',
                message: ''
              }
            }
          }))
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: "object",
      displayType: "column",
      properties: {
        events: {
          title: '绑定动作',
          type: 'object',
          widget: 'BindAction',
          required: false,
          default: {},
          props: {
            actions: ['onChange']
          }
        },
        lifeCycle: {
          title: '生命周期',
          type: 'object',
          properties: {
            didMount: {
              title: '组件加载完成时',
              description: 'didMount',
              type: 'string',
              required: false
            },
            unMount: {
              title: '组件销毁时',
              description: 'unMount',
              type: 'string',
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasDatePicker",
    name: COMPONENT_NAME$7,
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_FORM,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var COMPONENT_NAME$8 = '图片上传';

  var defaultBeforeUpload = function defaultBeforeUpload() {};

  var getBase64 = function getBase64(file) {
    return new Promise(function (resolve, reject) {
      var reader = new FileReader();
      reader.readAsDataURL(file);

      reader.onload = function () {
        return resolve(reader.result);
      };

      reader.onerror = function (error) {
        return reject(error);
      };
    });
  };
  /**
   * 1、accept 接受类型
   * 2、action 上传地址
   * 3、beforeUpload 上传之前处理
   * 4、crop 是否需要裁剪功能
   * 5、maxCount 最大上传数
   * 6、自己实现双向绑定
   */


  var ApaasImageUpload = /*#__PURE__*/React.forwardRef(function (props) {
    var _props$value = props.value,
        value = _props$value === void 0 ? [] : _props$value,
        onChange = props.onChange,
        crop = props.crop,
        maxCount = props.maxCount,
        beforeUpload = props.beforeUpload,
        action = props.action,
        style = props.style;

    var _useState = React.useState(value),
        _useState2 = _slicedToArray(_useState, 2),
        fileList = _useState2[0],
        setFileList = _useState2[1];

    var _useState3 = React.useState({}),
        _useState4 = _slicedToArray(_useState3, 2),
        previewImageDetail = _useState4[0],
        setPreviewImageDetail = _useState4[1];

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);

    var handleChange = function handleChange(_ref) {
      var _props$events;

      var newFileList = _ref.fileList;
      setFileList(newFileList);

      if (typeof onChange === 'function') {
        onChange(_toConsumableArray(newFileList));
      } // 用户自定义onChange事件


      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onChange) === 'function') {
        props.events.onChange(_toConsumableArray(newFileList));
      }
    };

    var handlePreview = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(file) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!file.url && !file.preview)) {
                  _context.next = 4;
                  break;
                }

                _context.next = 3;
                return getBase64(file.originFileObj);

              case 3:
                file.preview = _context.sent;

              case 4:
                setPreviewImageDetail({
                  previewImage: file.url || file.preview,
                  previewVisible: true,
                  previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)
                });

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function handlePreview(_x) {
        return _ref2.apply(this, arguments);
      };
    }();

    var handleCancel = function handleCancel() {
      setPreviewImageDetail(_objectSpread2(_objectSpread2({}, previewImageDetail), {}, {
        previewVisible: false
      }));
    };

    var uploadButton = /*#__PURE__*/React__default['default'].createElement("div", null, /*#__PURE__*/React__default['default'].createElement(PlusOutlined$2, null), /*#__PURE__*/React__default['default'].createElement("div", {
      style: {
        marginTop: 8
      }
    }, "Upload"));

    var UploadChild = function UploadChild() {
      return /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment, null, /*#__PURE__*/React__default['default'].createElement(Upload$1, {
        action: action,
        listType: "picture-card",
        fileList: fileList,
        maxCount: maxCount,
        onChange: handleChange,
        onPreview: handlePreview,
        beforeUpload: beforeUpload || defaultBeforeUpload,
        style: style,
        ref: ref
      }, fileList.length >= maxCount ? null : uploadButton), /*#__PURE__*/React__default['default'].createElement(Modal$1, {
        visible: previewImageDetail.previewVisible,
        title: previewImageDetail.previewTitle,
        footer: null,
        onCancel: handleCancel
      }, /*#__PURE__*/React__default['default'].createElement("img", {
        alt: "example",
        style: {
          width: '100%'
        },
        src: previewImageDetail.previewImage
      })));
    }; // if (crop) {
    //   return (
    //     <ImgCrop rotate>
    //       <UploadChild />
    //     </ImgCrop>
    //   )
    // }


    return /*#__PURE__*/React__default['default'].createElement(UploadChild, null);
  });
  ApaasImageUpload.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        accept: {
          title: "接受类型",
          type: "string",
          required: false,
          default: "",
          description: "请按照.png, .jpeg, .gif格式添写,中间,隔开"
        },
        action: {
          title: "上传地址",
          type: "string",
          required: false
        },
        beforeUpload: {
          title: "上传之前处理",
          type: "string",
          required: false,
          description: "后面使用函数表达式组件替换"
        },
        // crop: {
        //   title: "开启裁剪功能",
        //   type: "boolean",
        //   required: false,
        //   widget: "switch"
        // },
        maxCount: {
          title: "最大上传个数",
          type: "number",
          min: 1,
          default: 1,
          widget: "slider"
        },
        formItemProps: {
          type: 'object',
          title: '表单字段配置',
          displayType: 'column',
          properties: _objectSpread2({}, formItemProperties({
            label: COMPONENT_NAME$8,
            rules: {
              required: {
                label: '必填',
                message: ''
              },
              validator: {
                label: '自定义函数',
                message: ''
              }
            }
          }))
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: 'object',
      displayType: 'column',
      properties: {
        events: {
          title: '绑定动作',
          type: 'object',
          widget: 'BindAction',
          required: false,
          default: {},
          props: {
            actions: ['onChange']
          }
        },
        lifeCycle: {
          title: '生命周期',
          type: 'object',
          properties: {
            didMount: {
              title: '组件加载完成时',
              description: 'didMount',
              type: 'string',
              required: false
            },
            unMount: {
              title: '组件销毁时',
              description: 'unMount',
              type: 'string',
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasImageUpload",
    name: COMPONENT_NAME$8,
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_FORM,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var _excluded$e = ["content"];
  var ApaasText = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var content = props.content,
        otherProps = _objectWithoutProperties(props, _excluded$e);

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    return /*#__PURE__*/React__default['default'].createElement("span", _extends({}, otherProps, {
      ref: ref
    }), content);
  });
  ApaasText.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        content: {
          title: "文本内容",
          type: "string",
          required: true,
          default: "文本"
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        background: background,
        layout: layout,
        font: font,
        margin: margin,
        padding: padding,
        border: border,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: "object",
      displayType: "column",
      properties: {
        events: {
          title: "绑定动作",
          type: "object",
          widget: "BindAction",
          required: false,
          default: {},
          props: {
            actions: ['onClick']
          }
        },
        lifeCycle: {
          title: "生命周期",
          type: "object",
          properties: {
            didMount: {
              title: "组件加载完成时",
              description: 'didMount',
              type: "string",
              required: false
            },
            unMount: {
              title: "组件销毁时",
              description: 'unMount',
              type: "string",
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasText",
    name: "文本",
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_BASIC,
    __componentLayout__: COMPONENT_LAYOUT_INLINE,
    __isNeedCommonStyleConfig__: true,
    // 扩展字段，是否需要通用样式
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = ".container {\n  background-color: #f0f0f0;\n  border: 1px dotted;\n  color: rgb(167, 177, 189);\n  /* width: 520px; */\n  max-height: 572px;\n  padding: 20px;\n  overflow: auto;\n  margin-top: 16px;\n}\n\n.titleWrap {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.titleName {\n  color: #333;\n  font-size: 16px;\n}";
  styleInject(css_248z);

  var ApaasModal = function ApaasModal(props) {
    var children = props.children,
        styles = props.styles,
        title = props.title,
        cancelText = props.cancelText,
        okText = props.okText;
    return /*#__PURE__*/React__default['default'].createElement("div", {
      style: styles
    }, /*#__PURE__*/React__default['default'].createElement("div", {
      className: "titleWrap"
    }, /*#__PURE__*/React__default['default'].createElement("span", {
      className: "titleName"
    }, title), /*#__PURE__*/React__default['default'].createElement(CloseOutlined$2, null)), children ? children : /*#__PURE__*/React__default['default'].createElement("div", {
      className: "container"
    }, "\u62D6\u62FD\u7EC4\u4EF6\u6216\u8005\u6A21\u7248\u5230\u8FD9\u91CC"), /*#__PURE__*/React__default['default'].createElement("div", {
      style: {
        display: 'flex',
        justifyContent: 'flex-end',
        marginTop: '16px'
      }
    }, /*#__PURE__*/React__default['default'].createElement(Button, {
      type: "default"
    }, cancelText), /*#__PURE__*/React__default['default'].createElement(Button, {
      type: "primary",
      style: {
        marginLeft: '16px'
      }
    }, okText)));
  };

  ApaasModal.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        title: {
          title: '标题',
          type: 'string',
          default: '标题'
        },
        visible: {
          title: '展示',
          type: 'string'
        },
        cancelText: {
          title: '取消文案',
          type: 'string',
          default: '取消'
        },
        okText: {
          title: '确定文案',
          type: 'string',
          default: '确定'
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {}
    },
    // 样式属性Schema
    expandSchema: {
      type: "object",
      displayType: "column",
      properties: {
        didMount: {
          title: "组件加载后",
          type: "string",
          default: ""
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasModal",
    name: "对话框",
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_CONTAINER
  };

  var ApaasButton = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var handleClick = function handleClick(e) {
      var _props$events;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$events = props.events) === null || _props$events === void 0 ? void 0 : _props$events.onClick) === 'function') {
        props.events.onClick(e);
      }
    };

    React.useEffect(function () {
      var _props$lifeCycle;

      if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle = props.lifeCycle) === null || _props$lifeCycle === void 0 ? void 0 : _props$lifeCycle.didMount) === 'function') {
        var _props$lifeCycle2;

        props === null || props === void 0 ? void 0 : (_props$lifeCycle2 = props.lifeCycle) === null || _props$lifeCycle2 === void 0 ? void 0 : _props$lifeCycle2.didMount();
      }

      return function () {
        var _props$lifeCycle3;

        if (typeof (props === null || props === void 0 ? void 0 : (_props$lifeCycle3 = props.lifeCycle) === null || _props$lifeCycle3 === void 0 ? void 0 : _props$lifeCycle3.unMount) === 'function') {
          var _props$lifeCycle4;

          props === null || props === void 0 ? void 0 : (_props$lifeCycle4 = props.lifeCycle) === null || _props$lifeCycle4 === void 0 ? void 0 : _props$lifeCycle4.unMount();
        }
      };
    }, []);
    return /*#__PURE__*/React__default['default'].createElement(Button, _extends({}, props, {
      onClick: handleClick,
      ref: ref
    }));
  });
  ApaasButton.schema = {
    basicSchema: {
      type: "object",
      displayType: "column",
      properties: {
        loading: {
          title: "loading功能",
          type: "boolean",
          required: false,
          default: false
        },
        type: {
          "title": "按钮类型",
          "type": "string",
          "enum": ["primary", "ghost", "dashed", "link", "text", "default"],
          "enumNames": ["primary", "ghost", "dashed", "link", "text", "default"],
          "widget": "select",
          "default": "default"
        },
        children: {
          title: "按钮内容",
          type: "string",
          required: true,
          default: '按钮'
        }
      }
    },
    // 基础属性Schema
    styleSchema: {
      type: "object",
      displayType: "column",
      properties: {
        width: width,
        height: height,
        margin: margin,
        padding: padding,
        cursor: cursor
      }
    },
    // 样式属性Schema
    expandSchema: {
      type: "object",
      displayType: "column",
      properties: {
        events: {
          title: "绑定动作",
          type: "object",
          widget: "BindAction",
          required: false,
          default: {},
          props: {
            actions: ['onClick']
          }
        },
        lifeCycle: {
          title: "生命周期",
          type: "object",
          properties: {
            didMount: {
              title: "组件加载完成时",
              description: 'didMount',
              type: "string",
              required: false
            },
            unMount: {
              title: "组件销毁时",
              description: 'unMount',
              type: "string",
              required: false
            }
          },
          default: {}
        }
      }
    },
    // 扩展属性Schema,用于写函数这些功能
    type: "ApaasButton",
    name: "按钮",
    __source__: CURRENT_PACKAGE_NAME,
    __componentType__: COMPONENT_TYPE_BASIC,
    __canDelete__: true,
    // 是否支持在IDE中删除
    __canCopy__: true,
    // 是否支持被复制
    __canMove__: true // 是否支持被移动

  };

  var index$2 = {
    ApaasText: ApaasText,
    ApaasInput: ApaasInput,
    ApaasInputNumber: ApaasInputNumber,
    ApaasTextArea: ApaasTextArea,
    ApaasRadio: ApaasRadio,
    ApaasCheckBox: ApaasCheckBox,
    ApaasSingleSelect: ApaasSingleSelect,
    ApaasMultSelect: ApaasMultSelect,
    ApaasDatePicker: ApaasDatePicker,
    ApaasImageUpload: ApaasImageUpload,
    ApaasModal: ApaasModal,
    ApaasForm: ApaasForm,
    ApaasButton: ApaasButton,
    showComponentList: [ApaasText, ApaasInput, ApaasInputNumber, ApaasTextArea, ApaasRadio, ApaasCheckBox, ApaasSingleSelect, ApaasMultSelect, ApaasDatePicker, ApaasImageUpload, ApaasForm, ApaasButton]
  };

  return index$2;

})));
